import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest27 {

    public static boolean debug = false;

    @Test
    public void test13501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13501");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str14 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int19 = fraction18.intValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction15.subtract(fraction18);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction13.add(fraction15);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction10.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int33 = fraction32.intValue();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction27.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction24.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int45 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction41.subtract(fraction44);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction40.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction37.add(fraction41);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction22.multiply(fraction37);
        java.util.Locale locale50 = java.util.Locale.UK;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale51.getDisplayLanguage(locale52);
        java.lang.String str54 = locale50.getDisplayScript(locale52);
        java.lang.String str55 = locale52.toLanguageTag();
        java.lang.String str56 = locale52.getVariant();
        boolean boolean57 = fraction49.equals((java.lang.Object) locale52);
        java.lang.String str58 = locale4.getDisplayScript(locale52);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getIntegerInstance(locale59);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getIntegerInstance(locale59);
        java.util.Locale locale62 = java.util.Locale.UK;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale63.getDisplayLanguage(locale64);
        java.lang.String str66 = locale62.getDisplayScript(locale64);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale64);
        java.lang.String str68 = locale64.getScript();
        java.lang.String str69 = locale59.getDisplayScript(locale64);
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale70.getDisplayCountry();
        java.util.Set<java.lang.String> strSet72 = locale70.getUnicodeLocaleKeys();
        java.lang.String str73 = locale64.getDisplayScript(locale70);
        java.lang.String str74 = locale52.getDisplayCountry(locale64);
        java.util.Set<java.lang.String> strSet75 = locale64.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-117 / 1" + "'", str14, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-117) + "'", int19 == (-117));
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-117 / 1" + "'", str28, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-117) + "'", int33 == (-117));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-117) + "'", int45 == (-117));
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str53, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ko" + "'", str55, "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str65, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Canada" + "'", str71, "Canada");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(strSet75);
    }

    @Test
    public void test13502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13502");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Kanada");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int13 = fraction12.intValue();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction8.multiply(fraction9);
        org.apache.commons.math.fraction.Fraction fraction17 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction18 = fraction15.add(fraction17);
        java.lang.String str19 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction15);
        boolean boolean20 = languageRange1.equals((java.lang.Object) str19);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kanada" + "'", str3, "kanada");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kanada" + "'", str4, "kanada");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kanada" + "'", str5, "kanada");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-117) + "'", int13 == (-117));
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0 / 1" + "'", str19, "0 / 1");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test13503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13503");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("eng");
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale7.getCountry();
        java.lang.String str12 = locale5.getDisplayName(locale7);
        java.util.Locale.Builder builder13 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder14 = builder4.clear();
        java.util.Locale.Builder builder16 = builder4.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder4.setLanguageTag("-116.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str12, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test13504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13504");
        java.util.Locale locale2 = new java.util.Locale("java.text.NumberFormat$Field(sign)", "3,200");
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.numberformat$field(sign)_3,200");
    }

    @Test
    public void test13505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13505");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Currency currency4 = numberFormat1.getCurrency();
        numberFormat0.setCurrency(currency4);
        java.lang.String str7 = numberFormat0.format((double) 100);
        numberFormat0.setParseIntegerOnly(false);
        numberFormat0.setMaximumIntegerDigits((int) 'x');
        java.lang.Object obj12 = numberFormat0.clone();
        java.util.Currency currency13 = numberFormat0.getCurrency();
        numberFormat0.setParseIntegerOnly(true);
        int int16 = numberFormat0.getMaximumFractionDigits();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.util.Currency currency25 = numberFormat22.getCurrency();
        numberFormat21.setCurrency(currency25);
        numberFormat18.setCurrency(currency25);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        numberFormat28.setMaximumIntegerDigits((-1));
        java.util.Currency currency31 = numberFormat28.getCurrency();
        java.lang.String str33 = numberFormat28.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat18, numberFormat28);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance();
        java.lang.String str37 = numberFormat35.format(100L);
        properFractionFormat34.setWholeFormat(numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getInstance();
        java.lang.String str41 = numberFormat39.format(100L);
        int int42 = numberFormat39.getMinimumFractionDigits();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale44);
        java.lang.String str48 = numberFormat46.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat39, numberFormat46);
        java.math.RoundingMode roundingMode50 = numberFormat39.getRoundingMode();
        numberFormat0.setRoundingMode(roundingMode50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.lang.String str54 = numberFormat0.format(0L);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction57 = properFractionFormat55.parse("\u671d\u9c9c\u6587\u97e9\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"??? (??)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(currency4);
// flaky:         org.junit.Assert.assertEquals(currency4.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10,000%" + "'", str7, "10,000%");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(currency13);
// flaky:         org.junit.Assert.assertEquals(currency13.toString(), "GBP");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency25);
// flaky:         org.junit.Assert.assertEquals(currency25.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(currency31);
// flaky:         org.junit.Assert.assertEquals(currency31.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0%" + "'", str33, "0%");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100" + "'", str37, "100");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "100" + "'", str41, "100");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "32" + "'", str48, "32");
        org.junit.Assert.assertTrue("'" + roundingMode50 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode50.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0%" + "'", str54, "0%");
    }

    @Test
    public void test13506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13506");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParseException: java.text.ParseException: 100", "-1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getScript();
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale13.getISO3Language();
        java.lang.String str17 = locale12.getDisplayCountry(locale13);
        java.lang.String str18 = locale13.toLanguageTag();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale13);
        java.lang.String str20 = locale10.getDisplayVariant(locale13);
        java.lang.String str21 = locale6.getDisplayCountry(locale10);
        java.lang.String str22 = locale2.getDisplayScript(locale6);
        java.util.Locale locale25 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "10.000%");
        boolean boolean26 = locale25.hasExtensions();
        java.lang.String str27 = locale6.getDisplayName(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getNumeratorFormat();
        java.text.NumberFormat numberFormat31 = fractionFormat29.getNumeratorFormat();
        java.text.ParseException parseException34 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray35 = parseException34.getSuppressed();
        boolean boolean36 = numberFormat31.equals((java.lang.Object) throwableArray35);
        numberFormat31.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        int int40 = numberFormat31.getMaximumFractionDigits();
        fractionFormat28.setNumeratorFormat(numberFormat31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        numberFormat31.setParseIntegerOnly(true);
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseexception: java.text.parseexception: 100_-1");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ko" + "'", str18, "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(locale25.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_10.000%");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Korean" + "'", str27, "Korean");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
    }

    @Test
    public void test13507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13507");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str6 = locale4.getISO3Language();
        java.lang.String str7 = locale4.getDisplayScript();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test13508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13508");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean18 = numberFormat17.isGroupingUsed();
        numberFormat17.setParseIntegerOnly(false);
        java.lang.Number number22 = numberFormat17.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat17);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        java.lang.String str26 = numberFormat24.format((-0.008547008547008548d));
        numberFormat24.setMinimumIntegerDigits(100);
        java.util.Currency currency29 = numberFormat24.getCurrency();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + 0L + "'", number22, 0L);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-0%" + "'", str26, "-0%");
        org.junit.Assert.assertNotNull(currency29);
// flaky:         org.junit.Assert.assertEquals(currency29.toString(), "GBP");
    }

    @Test
    public void test13509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13509");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat3.setCurrency(currency8);
        boolean boolean11 = numberFormat3.isGroupingUsed();
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction20 = fractionFormat15.parse("french", parsePosition19);
        java.lang.Object obj21 = numberFormat3.parseObject("\2430.00", parsePosition19);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        numberFormat23.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        boolean boolean29 = numberFormat23.equals((java.lang.Object) locale27);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj33 = numberFormat23.parseObject("China", parsePosition32);
        int int34 = parsePosition32.getErrorIndex();
        java.lang.String str35 = parsePosition32.toString();
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder36.setVariant("");
        java.util.Locale.Builder builder39 = builder38.clearExtensions();
        java.util.Locale.Builder builder40 = builder38.clearExtensions();
        java.util.Locale.Builder builder41 = builder38.clearExtensions();
        boolean boolean42 = parsePosition32.equals((java.lang.Object) builder41);
        parsePosition32.setErrorIndex(0);
        java.lang.Object obj45 = numberFormat3.parseObject("cor\351en", parsePosition32);
        numberFormat3.setParseIntegerOnly(false);
        java.lang.String str49 = numberFormat3.format((long) (-44));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "GBP");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str14, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=52]" + "'", str35, "java.text.ParsePosition[index=52,errorIndex=52]");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-44" + "'", str49, "-44");
    }

    @Test
    public void test13510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13510");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale7.getDisplayLanguage(locale12);
        java.lang.String str14 = locale1.getDisplayName(locale12);
        java.lang.String str15 = locale1.getDisplayCountry();
        java.util.Locale locale16 = java.util.Locale.US;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale1.getDisplayName(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.lang.String str20 = locale1.getISO3Language();
        java.lang.String str21 = locale1.getISO3Language();
        java.util.Set<java.lang.Character> charSet22 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u671d\u9c9c\u6587" + "'", str13, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u671d\u9c9c\u6587" + "'", str14, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str17, "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Korean" + "'", str18, "Korean");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(charSet22);
    }

    @Test
    public void test13511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13511");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        int int11 = fraction10.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction14 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction10.multiply(fraction14);
        int int16 = fraction10.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction19 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction10.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str24 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int29 = fraction28.intValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.subtract(fraction28);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction23.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction23.abs();
        double double33 = fraction23.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction19.subtract(fraction23);
        short short35 = fraction23.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-117 / 1" + "'", str24, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-117) + "'", int29 == (-117));
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-117.0d) + "'", double33 == (-117.0d));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -117 + "'", short35 == (short) -117);
    }

    @Test
    public void test13512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13512");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) (byte) -1);
        int int2 = fieldPosition1.getBeginIndex();
        fieldPosition1.setEndIndex((int) (byte) -35);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test13513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13513");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.lang.String str4 = fieldPosition2.toString();
        java.text.Format.Field field5 = fieldPosition2.getFieldAttribute();
        java.lang.String str6 = field5.toString();
        java.lang.String str7 = field5.toString();
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field5, (int) (byte) 35);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition(field5, (int) (byte) -116);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str6, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str7, "java.text.NumberFormat$Field(per mille)");
    }

    @Test
    public void test13514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13514");
        java.text.ParseException parseException2 = new java.text.ParseException("und-canada", 2);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test13515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13515");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("-117 / 1 (14,it,IT)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test13516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13516");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.lang.String str5 = locale2.getDisplayCountry(locale3);
        java.lang.String str6 = locale3.getISO3Country();
        java.lang.String str7 = locale0.getDisplayVariant(locale3);
        java.util.Locale locale8 = java.util.Locale.UK;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        java.lang.String str13 = locale10.toLanguageTag();
        java.lang.String str14 = locale3.getDisplayScript(locale10);
        java.lang.String str15 = locale10.getISO3Language();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.util.Set<java.lang.Character> charSet22 = locale18.getExtensionKeys();
        java.lang.String str23 = locale18.getDisplayScript();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance(locale18);
        java.lang.String str25 = locale10.getDisplayVariant(locale18);
        java.lang.String str26 = locale18.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uce90\ub098\ub2e4" + "'", str4, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "China" + "'", str5, "China");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CAN" + "'", str6, "CAN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ko" + "'", str13, "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
    }

    @Test
    public void test13517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13517");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.abs();
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str7 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction6.add(fraction8);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction3.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction2.multiply(fraction3);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str23 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction22);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int28 = fraction27.intValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction24.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction22.add(fraction24);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction19.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int40 = fraction39.intValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.subtract(fraction39);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction35.multiply(fraction36);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction32.add(fraction36);
        double double44 = fraction32.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction17.multiply(fraction32);
        org.apache.commons.math.fraction.Fraction fraction48 = new org.apache.commons.math.fraction.Fraction((-117), 100);
        org.apache.commons.math.fraction.Fraction fraction51 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int59 = fraction58.intValue();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction55.subtract(fraction58);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction54.multiply(fraction55);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction51.multiply(fraction55);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction48.add(fraction51);
        org.apache.commons.math.fraction.Fraction fraction64 = fraction17.subtract(fraction51);
        short short65 = fraction51.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-117 / 1" + "'", str7, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-117 / 1" + "'", str23, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-117) + "'", int28 == (-117));
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-117) + "'", int40 == (-117));
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-116.0d) + "'", double44 == (-116.0d));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-117) + "'", int59 == (-117));
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) 1 + "'", short65 == (short) 1);
    }

    @Test
    public void test13518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13518");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(0, (int) (byte) 117);
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str7 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction6.add(fraction8);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int25 = fraction24.intValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.subtract(fraction24);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction20.add(fraction28);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction15.multiply(fraction28);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction15.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction2.divide(fraction31);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-117 / 1" + "'", str7, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-117) + "'", int25 == (-117));
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
    }

    @Test
    public void test13519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13519");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        double double6 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int16 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction10.add(fraction12);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction10.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction7.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction7.abs();
        double double22 = fraction21.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction5.subtract(fraction21);
        org.apache.commons.math.fraction.Fraction fraction26 = new org.apache.commons.math.fraction.Fraction((-117), (int) '4');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction23.add(fraction26);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction23.reciprocal();
        java.text.NumberFormat.Field field30 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale31);
        java.text.NumberFormat numberFormat34 = fractionFormat33.getNumeratorFormat();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 10);
        parsePosition37.setErrorIndex((int) (byte) 1);
        parsePosition37.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction42 = fractionFormat33.parse("French", parsePosition37);
        boolean boolean43 = field30.equals((java.lang.Object) "French");
        // The following exception was thrown during execution in test generation
        try {
            int int44 = fraction23.compareTo((java.lang.Object) field30);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.text.NumberFormat$Field cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 117.0d + "'", double6 == 117.0d);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-117 / 1" + "'", str11, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str32, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(fraction42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test13520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13520");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale locale12 = new java.util.Locale("java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale13.getDisplayName(locale14);
        java.lang.String str17 = locale12.getDisplayLanguage(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Locale.Builder builder19 = builder9.setLocale(locale13);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.lang.String str23 = locale21.getScript();
        java.lang.String str24 = locale21.getCountry();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale26.getScript();
        java.lang.String str29 = locale26.getDisplayScript();
        java.lang.String str30 = locale21.getDisplayLanguage(locale26);
        java.util.Locale locale32 = new java.util.Locale("french-French");
        java.lang.String str33 = locale26.getDisplayVariant(locale32);
        java.lang.String str34 = locale26.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.lang.String str37 = locale26.getDisplayLanguage(locale36);
        java.util.Locale.Builder builder38 = builder9.setLocale(locale36);
        java.util.Locale.Builder builder40 = builder9.setScript("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals(locale12.toString(), "java.text.parseexception: java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=0,endindex=0]");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.parseexception: java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=0,endindex=0]" + "'", str17, "java.text.parseexception: java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=0,endindex=0]");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Korean" + "'", str30, "Korean");
        org.junit.Assert.assertEquals(locale32.toString(), "french-french");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test13521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13521");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getScript();
        java.lang.String str5 = locale0.getDisplayScript();
        java.lang.String str6 = locale0.getDisplayVariant();
        java.lang.String str7 = locale0.toLanguageTag();
        java.lang.String str8 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ko" + "'", str7, "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test13522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13522");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance();
        java.lang.String str48 = numberFormat46.format(100L);
        int int49 = numberFormat46.getMinimumFractionDigits();
        numberFormat46.setMaximumIntegerDigits(1);
        boolean boolean53 = numberFormat46.equals((java.lang.Object) (-117));
        java.lang.String str55 = numberFormat46.format((double) (-1));
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance();
        numberFormat59.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance();
        numberFormat63.setMaximumIntegerDigits((-1));
        java.util.Currency currency66 = numberFormat63.getCurrency();
        numberFormat62.setCurrency(currency66);
        numberFormat59.setCurrency(currency66);
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance();
        numberFormat69.setMaximumIntegerDigits((-1));
        java.util.Currency currency72 = numberFormat69.getCurrency();
        java.lang.String str74 = numberFormat69.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58, numberFormat59, numberFormat69);
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getInstance();
        java.lang.String str79 = numberFormat77.format(100L);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition84 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj85 = numberFormat81.parseObject("hi!", parsePosition84);
        java.lang.Number number86 = numberFormat77.parse("10,000%", parsePosition84);
        int int87 = parsePosition84.getErrorIndex();
        java.lang.Object obj88 = properFractionFormat75.parseObject("French", parsePosition84);
        parsePosition84.setErrorIndex((-117));
        org.apache.commons.math.fraction.Fraction fraction91 = properFractionFormat56.parse("anglais", parsePosition84);
        org.apache.commons.math.fraction.Fraction fraction92 = properFractionFormat17.parse("Korean", parsePosition84);
        java.text.NumberFormat numberFormat93 = properFractionFormat17.getWholeFormat();
        java.text.NumberFormat numberFormat94 = properFractionFormat17.getDenominatorFormat();
        boolean boolean95 = numberFormat94.isGroupingUsed();
        numberFormat94.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str33, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100" + "'", str48, "100");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1" + "'", str55, "-1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(currency66);
// flaky:         org.junit.Assert.assertEquals(currency66.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(currency72);
// flaky:         org.junit.Assert.assertEquals(currency72.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0%" + "'", str74, "0%");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "100" + "'", str79, "100");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNull(number86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(fraction91);
        org.junit.Assert.assertNull(fraction92);
        org.junit.Assert.assertNotNull(numberFormat93);
        org.junit.Assert.assertNotNull(numberFormat94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test13523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13523");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.lang.String str4 = fieldPosition2.toString();
        int int5 = fieldPosition2.getEndIndex();
        java.text.Format.Field field6 = fieldPosition2.getFieldAttribute();
        java.text.NumberFormat.Field field7 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition((java.text.Format.Field) field7);
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field7, 3);
        int int11 = fieldPosition10.getBeginIndex();
        fieldPosition10.setEndIndex((int) (short) -117);
        int int14 = fieldPosition10.getEndIndex();
        fieldPosition10.setBeginIndex((int) (short) 52);
        boolean boolean17 = fieldPosition2.equals((java.lang.Object) fieldPosition10);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-117) + "'", int14 == (-117));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test13524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13524");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setWholeFormat(numberFormat48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.NumberFormat numberFormat52 = properFractionFormat51.getWholeFormat();
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.Object obj54 = null;
        boolean boolean55 = numberFormat53.equals(obj54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        properFractionFormat51.setNumeratorFormat(numberFormat53);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str60 = locale59.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale59);
        java.util.Locale locale63 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale63);
        java.text.NumberFormat numberFormat65 = fractionFormat64.getNumeratorFormat();
        java.text.NumberFormat numberFormat66 = fractionFormat64.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj72 = numberFormat68.parseObject("hi!", parsePosition71);
        org.apache.commons.math.fraction.Fraction fraction73 = fractionFormat64.parse("-117 / 1", parsePosition71);
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition78 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj79 = numberFormat75.parseObject("hi!", parsePosition78);
        parsePosition78.setErrorIndex(10);
        java.lang.String str82 = parsePosition78.toString();
        parsePosition78.setErrorIndex((int) ' ');
        java.lang.Object obj85 = fractionFormat64.parseObject("\244 0.00", parsePosition78);
        org.apache.commons.math.fraction.Fraction fraction86 = fractionFormat61.parse("Chinesisch (China)", parsePosition78);
        org.apache.commons.math.fraction.Fraction fraction87 = properFractionFormat51.parse("JAVA.TEXT.PARSEPOSITION[INDEX=10,ERRORINDEX=9]", parsePosition78);
        java.util.Locale locale88 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat89 = java.text.NumberFormat.getCurrencyInstance(locale88);
        java.lang.String str91 = numberFormat89.format(0.0d);
        java.lang.String str93 = numberFormat89.format(0L);
        properFractionFormat51.setNumeratorFormat(numberFormat89);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str33, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str60, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str82, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNull(fraction86);
        org.junit.Assert.assertNull(fraction87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\2440.00" + "'", str91, "\2440.00");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\2440.00" + "'", str93, "\2440.00");
    }

    @Test
    public void test13525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13525");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.UK;
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        java.lang.String str21 = locale16.getDisplayCountry(locale17);
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale23.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test13526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13526");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) -43, (double) (-44), (-4));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert -43 to fraction (-9,223,372,036,854,775,764/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13527");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        boolean boolean6 = numberFormat0.equals((java.lang.Object) locale4);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale4);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale4);
        org.apache.commons.math.fraction.Fraction fraction12 = new org.apache.commons.math.fraction.Fraction((int) ' ', (int) 'u');
        long long13 = fraction12.longValue();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance();
        java.lang.String str18 = numberFormat16.format(100L);
        int int19 = numberFormat16.getMinimumFractionDigits();
        numberFormat16.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode25 = numberFormat22.getRoundingMode();
        numberFormat16.setRoundingMode(roundingMode25);
        numberFormat15.setRoundingMode(roundingMode25);
        boolean boolean28 = numberFormat15.isParseIntegerOnly();
        boolean boolean29 = fraction12.equals((java.lang.Object) numberFormat15);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getCurrencyInstance();
        numberFormat30.setMinimumIntegerDigits((-1));
        java.lang.String str34 = numberFormat30.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat30);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getIntegerInstance(locale37);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance(locale37);
        numberFormat39.setMaximumIntegerDigits(1);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.util.Locale locale45 = locale43.stripExtensions();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.lang.String str49 = locale46.getDisplayName(locale47);
        java.lang.String str50 = locale43.getDisplayName(locale47);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale47);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        java.math.RoundingMode roundingMode53 = numberFormat51.getRoundingMode();
        java.text.NumberFormat numberFormat54 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39, numberFormat51, numberFormat54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 10);
        parsePosition59.setErrorIndex((int) (byte) 1);
        int int62 = parsePosition59.getErrorIndex();
        parsePosition59.setErrorIndex(4095);
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat56.parse("Italian", parsePosition59);
        parsePosition59.setIndex(0);
        java.lang.String str68 = parsePosition59.toString();
        java.lang.Object obj69 = fractionFormat35.parseObject("und", parsePosition59);
        java.util.Locale locale71 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale71);
        java.text.NumberFormat numberFormat73 = fractionFormat72.getNumeratorFormat();
        java.text.NumberFormat numberFormat74 = fractionFormat72.getNumeratorFormat();
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition79 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj80 = numberFormat76.parseObject("hi!", parsePosition79);
        org.apache.commons.math.fraction.Fraction fraction81 = fractionFormat72.parse("-117 / 1", parsePosition79);
        java.lang.String str82 = parsePosition79.toString();
        int int83 = parsePosition79.getIndex();
        java.lang.Object obj84 = fractionFormat35.parseObject("french", parsePosition79);
        java.lang.Number number85 = numberFormat8.parse("\ub3c5\uc77c\uc5b4", parsePosition79);
        int int86 = parsePosition79.getErrorIndex();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "100" + "'", str18, "100");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + roundingMode25 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode25.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(numberFormat30);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\243100.00" + "'", str34, "\243100.00");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str44, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "cor\351en" + "'", str50, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode53 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode53.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=9]" + "'", str68, "java.text.ParsePosition[index=0,errorIndex=9]");
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNull(fraction81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=9]" + "'", str82, "java.text.ParsePosition[index=10,errorIndex=9]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(number85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
    }

    @Test
    public void test13528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13528");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("JAVA.TEXT.PARSEPOSITION[INDEX=10,ERRORINDEX=9]");
        java.lang.String str2 = locale1.getLanguage();
        java.lang.String str3 = locale1.getISO3Language();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test13529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13529");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        boolean boolean6 = locale0.hasExtensions();
        java.lang.String str7 = locale0.toLanguageTag();
        java.lang.String str8 = locale0.getVariant();
        java.lang.String str9 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ko" + "'", str7, "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko" + "'", str9, "ko");
    }

    @Test
    public void test13530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13530");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test13531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13531");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("anglais");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test13532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13532");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale5.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder12 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder2.clear();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.clear();
        java.util.Locale.Builder builder16 = builder15.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u671d\u9c9c\u6587" + "'", str11, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test13533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13533");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 10);
        parsePosition33.setErrorIndex((int) ' ');
        org.apache.commons.math.fraction.Fraction fraction36 = properFractionFormat17.parse("coreano", parsePosition33);
        java.text.NumberFormat numberFormat37 = properFractionFormat17.getNumeratorFormat();
        java.text.NumberFormat numberFormat38 = properFractionFormat17.getWholeFormat();
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.lang.String str40 = locale39.getDisplayScript();
        java.lang.String str41 = locale39.getDisplayScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getDisplayVariant();
        java.lang.String str44 = locale42.getDisplayScript();
        java.lang.String str45 = locale42.getDisplayCountry();
        java.lang.String str46 = locale39.getDisplayName(locale42);
        java.lang.String str47 = locale39.getDisplayName();
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getInstance(locale39);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setDenominatorFormat(numberFormat48);
        java.text.NumberFormat numberFormat51 = properFractionFormat17.getDenominatorFormat();
        java.text.NumberFormat numberFormat52 = properFractionFormat17.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction54 = properFractionFormat17.parse("\244 35.00");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"? 35.00\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(fraction36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str46, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str47, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
    }

    @Test
    public void test13534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13534");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Currency currency4 = numberFormat1.getCurrency();
        numberFormat0.setCurrency(currency4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getNumeratorFormat();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.util.Currency currency12 = numberFormat9.getCurrency();
        numberFormat8.setCurrency(currency12);
        numberFormat7.setCurrency(currency12);
        numberFormat0.setCurrency(currency12);
        numberFormat0.setGroupingUsed(true);
        numberFormat0.setMinimumIntegerDigits(117);
        int int20 = numberFormat0.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(currency4);
// flaky:         org.junit.Assert.assertEquals(currency4.toString(), "GBP");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency12);
// flaky:         org.junit.Assert.assertEquals(currency12.toString(), "GBP");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
    }

    @Test
    public void test13535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13535");
        java.util.Locale locale3 = new java.util.Locale("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", "", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getISO3Language();
        java.util.Set<java.lang.Character> charSet10 = locale7.getExtensionKeys();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance();
        int int15 = numberFormat14.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getNumeratorFormat();
        int int19 = numberFormat18.getMinimumFractionDigits();
        numberFormat18.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        numberFormat29.setMaximumIntegerDigits((-1));
        java.util.Currency currency32 = numberFormat29.getCurrency();
        numberFormat28.setCurrency(currency32);
        numberFormat25.setCurrency(currency32);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.util.Currency currency38 = numberFormat35.getCurrency();
        java.lang.String str40 = numberFormat35.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat25, numberFormat35);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance();
        java.lang.String str45 = numberFormat43.format(100L);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj51 = numberFormat47.parseObject("hi!", parsePosition50);
        java.lang.Number number52 = numberFormat43.parse("10,000%", parsePosition50);
        int int53 = parsePosition50.getErrorIndex();
        java.lang.Object obj54 = properFractionFormat41.parseObject("French", parsePosition50);
        java.lang.Object obj55 = fractionFormat22.parseObject("kor", parsePosition50);
        java.lang.Object obj56 = numberFormat14.parseObject("java.text.NumberFormat$Field(currency)", parsePosition50);
        org.apache.commons.math.fraction.Fraction fraction57 = fractionFormat12.parse("\uce90\ub098\ub2e4", parsePosition50);
        int int58 = parsePosition50.getErrorIndex();
        int int59 = parsePosition50.getIndex();
        parsePosition50.setIndex(10);
        org.apache.commons.math.fraction.Fraction fraction62 = fractionFormat5.parse("5.200%", parsePosition50);
        java.text.NumberFormat.Field field63 = java.text.NumberFormat.Field.PERMILLE;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale65.getDisplayLanguage(locale66);
        java.lang.String str68 = locale65.getISO3Language();
        java.lang.String str69 = locale64.getDisplayCountry(locale65);
        boolean boolean70 = field63.equals((java.lang.Object) locale64);
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getNumberInstance(locale64);
        java.lang.String str73 = locale64.getUnicodeLocaleType("97");
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getNumberInstance(locale64);
        fractionFormat5.setDenominatorFormat(numberFormat74);
        java.math.RoundingMode roundingMode76 = numberFormat74.getRoundingMode();
        org.junit.Assert.assertEquals(locale3.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency32);
// flaky:         org.junit.Assert.assertEquals(currency32.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(currency38);
// flaky:         org.junit.Assert.assertEquals(currency38.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0%" + "'", str40, "0%");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100" + "'", str45, "100");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(number52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(fraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNull(fraction62);
        org.junit.Assert.assertNotNull(field63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str67, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "kor" + "'", str68, "kor");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertTrue("'" + roundingMode76 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode76.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test13536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13536");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setVariant("");
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        boolean boolean19 = locale15.hasExtensions();
        java.util.Locale.Builder builder20 = builder13.setLocale(locale15);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale15);
        java.util.Locale locale22 = locale15.stripExtensions();
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder27 = builder26.clear();
        java.util.Locale locale28 = builder27.build();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayLanguage(locale30);
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getCountry();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getNumberInstance(locale30);
        java.util.Locale.Builder builder35 = builder27.setLocale(locale30);
        java.util.Locale.setDefault(category0, locale30);
        java.util.Locale locale37 = java.util.Locale.getDefault(category0);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale38);
        java.lang.String str40 = locale38.getISO3Language();
        java.util.Set<java.lang.Character> charSet41 = locale38.getExtensionKeys();
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.lang.String str46 = locale44.getScript();
        java.lang.String str47 = locale44.getVariant();
        java.util.Locale.setDefault(category42, locale44);
        java.lang.String str49 = locale44.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String str51 = locale50.getDisplayScript();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.lang.String str54 = locale50.getDisplayCountry(locale53);
        java.lang.String str55 = locale44.getDisplayVariant(locale50);
        java.lang.String str56 = locale38.getDisplayName(locale50);
        java.lang.String str57 = locale38.getDisplayName();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getNumberInstance(locale38);
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getIntegerInstance(locale38);
        java.util.Locale.setDefault(category0, locale38);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category42.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "United Kingdom" + "'", str54, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
    }

    @Test
    public void test13537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13537");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale locale10 = locale5.stripExtensions();
        boolean boolean11 = locale5.hasExtensions();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.util.Set<java.lang.String> strSet13 = locale5.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, strMap20);
        java.util.Locale locale22 = java.util.Locale.UK;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet24);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.parse("francese");
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayLanguage(locale30);
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getVariant();
        java.util.Locale.setDefault(category28, locale30);
        java.util.Locale locale35 = java.util.Locale.getDefault(category28);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.util.Locale.setDefault(category28, locale36);
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale.setDefault(category28, locale39);
        java.util.Locale locale42 = java.util.Locale.getDefault(category28);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getCurrencyInstance(locale42);
        java.lang.String str44 = locale42.getISO3Country();
        java.util.Set<java.lang.String> strSet45 = locale42.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags(languageRangeList27, (java.util.Collection<java.lang.String>) strSet45, filteringMode46);
        java.util.Locale.FilteringMode filteringMode48 = null;
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList47, filteringMode48);
        java.lang.String str50 = java.util.Locale.lookupTag(languageRangeList16, (java.util.Collection<java.lang.String>) strList49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList16, strMap51);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "TWN" + "'", str44, "TWN");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode46.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(languageRangeList52);
    }

    @Test
    public void test13538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13538");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition3 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj4 = numberFormat0.parseObject("hi!", parsePosition3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = fractionFormat5.getNumeratorFormat();
        java.text.ParseException parseException10 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray11 = parseException10.getSuppressed();
        boolean boolean12 = numberFormat7.equals((java.lang.Object) throwableArray11);
        numberFormat7.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.text.NumberFormat numberFormat16 = properFractionFormat15.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.util.Locale locale22 = locale20.stripExtensions();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str26 = locale23.getDisplayName(locale24);
        java.lang.String str27 = locale20.getDisplayName(locale24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale24);
        java.util.Currency currency29 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode30 = numberFormat28.getRoundingMode();
        properFractionFormat18.setDenominatorFormat(numberFormat28);
        numberFormat28.setParseIntegerOnly(false);
        java.lang.String str35 = numberFormat28.format(99L);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "cor\351en" + "'", str27, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "99" + "'", str35, "99");
    }

    @Test
    public void test13539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13539");
        java.util.Locale locale3 = new java.util.Locale("-117 / 1", "14", "it_IT");
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale7.getDisplayName(locale9);
        java.lang.String str11 = locale9.getDisplayLanguage();
        java.lang.String str12 = locale4.getDisplayName(locale9);
        java.lang.String str13 = locale3.getDisplayScript(locale4);
        java.lang.String str14 = locale3.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet15 = locale3.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet16 = locale3.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale3.toString(), "-117 / 1_14_it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "coreano" + "'", str10, "coreano");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str11, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "coreano" + "'", str12, "coreano");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-117 / 1" + "'", str14, "-117 / 1");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test13540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13540");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str4 = numberFormat2.format((double) 52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat6 = null;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Currency currency15 = numberFormat12.getCurrency();
        numberFormat11.setCurrency(currency15);
        numberFormat8.setCurrency(currency15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        java.lang.String str23 = numberFormat18.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat8, numberFormat18);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance();
        java.lang.String str27 = numberFormat25.format(100L);
        properFractionFormat24.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance();
        java.lang.String str31 = numberFormat29.format(100L);
        int int32 = numberFormat29.getMinimumFractionDigits();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale34);
        java.lang.String str38 = numberFormat36.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat29, numberFormat36);
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getNumeratorFormat();
        int int43 = numberFormat42.getMinimumFractionDigits();
        properFractionFormat39.setWholeFormat(numberFormat42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        boolean boolean51 = numberFormat45.equals((java.lang.Object) locale49);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale49);
        boolean boolean53 = numberFormat42.equals((java.lang.Object) numberFormat52);
        numberFormat52.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat6, numberFormat52);
        java.util.Locale.Category category57 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale58 = java.util.Locale.getDefault(category57);
        java.lang.String str59 = locale58.getDisplayCountry();
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getNumberInstance(locale58);
        properFractionFormat56.setWholeFormat(numberFormat60);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance();
        numberFormat63.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance();
        numberFormat67.setMaximumIntegerDigits((-1));
        java.util.Currency currency70 = numberFormat67.getCurrency();
        numberFormat66.setCurrency(currency70);
        numberFormat63.setCurrency(currency70);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance();
        numberFormat73.setMaximumIntegerDigits((-1));
        java.util.Currency currency76 = numberFormat73.getCurrency();
        java.lang.String str78 = numberFormat73.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62, numberFormat63, numberFormat73);
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getInstance();
        java.lang.String str82 = numberFormat80.format(100L);
        properFractionFormat79.setWholeFormat(numberFormat80);
        java.text.NumberFormat numberFormat84 = properFractionFormat79.getWholeFormat();
        boolean boolean85 = numberFormat84.isParseIntegerOnly();
        numberFormat84.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat88 = new org.apache.commons.math.fraction.FractionFormat(numberFormat60, numberFormat84);
        java.util.Currency currency89 = numberFormat84.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u52a0\u62ff\u5927" + "'", str1, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$52.00" + "'", str4, "$52.00");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
// flaky:         org.junit.Assert.assertEquals(currency15.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
// flaky:         org.junit.Assert.assertEquals(currency21.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0%" + "'", str23, "0%");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "32" + "'", str38, "32");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.FORMAT + "'", category57.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u82f1\u570b" + "'", str59, "\u82f1\u570b");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(currency70);
// flaky:         org.junit.Assert.assertEquals(currency70.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(currency76);
// flaky:         org.junit.Assert.assertEquals(currency76.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0%" + "'", str78, "0%");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "100" + "'", str82, "100");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(currency89);
// flaky:         org.junit.Assert.assertEquals(currency89.toString(), "GBP");
    }

    @Test
    public void test13541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13541");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale1);
        int int6 = numberFormat5.getMinimumFractionDigits();
        java.lang.Object obj7 = null;
        boolean boolean8 = numberFormat5.equals(obj7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 10);
        parsePosition11.setErrorIndex((int) (byte) 1);
        parsePosition11.setErrorIndex(116);
        parsePosition11.setIndex((int) (short) 1);
        parsePosition11.setErrorIndex((int) (short) -2);
        java.lang.Object obj20 = numberFormat5.parseObject("0 (x-lvariant-it-it)", parsePosition11);
        parsePosition11.setErrorIndex((-84));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test13542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13542");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.SIGN;
        java.lang.Object obj1 = new java.lang.Object();
        boolean boolean2 = field0.equals(obj1);
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getScript();
        java.lang.String str8 = locale5.getVariant();
        java.util.Locale.setDefault(category3, locale5);
        java.util.Locale locale10 = java.util.Locale.getDefault(category3);
        java.util.Locale locale11 = java.util.Locale.UK;
        java.util.Locale.setDefault(category3, locale11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category3);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance(locale15);
        java.util.Locale.setDefault(category3, locale15);
        boolean boolean19 = field0.equals((java.lang.Object) category3);
        java.text.FieldPosition fieldPosition20 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition((java.text.Format.Field) field0);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test13543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13543");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale4);
        java.lang.String str11 = locale4.toLanguageTag();
        java.lang.String str12 = locale4.getDisplayCountry();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getCurrencyInstance(locale4);
        java.util.Locale locale15 = new java.util.Locale("French");
        java.util.Locale locale16 = locale15.stripExtensions();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance(locale15);
        java.lang.String str18 = locale15.toLanguageTag();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str21 = locale19.getISO3Language();
        java.util.Set<java.lang.Character> charSet22 = locale19.getExtensionKeys();
        java.lang.String str23 = locale15.getDisplayVariant(locale19);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.lang.String str27 = locale24.getISO3Language();
        java.lang.String str28 = locale24.getCountry();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale24);
        java.lang.String str30 = locale19.getDisplayVariant(locale24);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale19);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        java.lang.Object obj35 = numberFormat33.parseObject("10.000%");
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        numberFormat36.setMaximumIntegerDigits((-1));
        java.util.Currency currency39 = numberFormat36.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36);
        int int41 = numberFormat36.getMinimumIntegerDigits();
        numberFormat36.setParseIntegerOnly(true);
        boolean boolean44 = numberFormat36.isParseIntegerOnly();
        java.lang.Object obj45 = numberFormat36.clone();
        int int46 = numberFormat36.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31, numberFormat33, numberFormat36);
        boolean boolean48 = numberFormat13.equals((java.lang.Object) numberFormat36);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ko" + "'", str11, "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals(locale15.toString(), "french");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "french" + "'", str18, "french");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "kor" + "'", str27, "kor");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + 0.1d + "'", obj35, 0.1d);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency39);
// flaky:         org.junit.Assert.assertEquals(currency39.toString(), "GBP");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test13544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13544");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale5.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder12 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.clearExtensions();
        java.util.Locale locale15 = builder14.build();
        java.util.Locale locale18 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "10.000%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.lang.String str20 = locale15.getDisplayVariant(locale18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getVariant();
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale29 = java.util.Locale.getDefault(category22);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.util.Locale.setDefault(category22, locale30);
        java.util.Locale locale36 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category22, locale36);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance(locale36);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getNumberInstance();
        boolean boolean40 = numberFormat39.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = new org.apache.commons.math.fraction.FractionFormat(numberFormat38, numberFormat39);
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        fractionFormat21.setDenominatorFormat(numberFormat42);
        java.lang.Object obj44 = fractionFormat21.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u671d\u9c9c\u6587" + "'", str11, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale18.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_10.000%");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat31);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(obj44);
    }

    @Test
    public void test13545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13545");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        boolean boolean2 = numberFormat0.isParseIntegerOnly();
        int int3 = numberFormat0.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        numberFormat0.setMinimumIntegerDigits((int) 'u');
        java.lang.Object obj7 = numberFormat0.clone();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.util.Currency currency16 = numberFormat13.getCurrency();
        numberFormat12.setCurrency(currency16);
        numberFormat9.setCurrency(currency16);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        java.lang.String str24 = numberFormat19.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat9, numberFormat19);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance();
        java.lang.String str28 = numberFormat26.format(100L);
        properFractionFormat25.setWholeFormat(numberFormat26);
        boolean boolean30 = numberFormat26.isParseIntegerOnly();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance();
        java.util.Currency currency32 = numberFormat31.getCurrency();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean34 = numberFormat33.isGroupingUsed();
        numberFormat33.setParseIntegerOnly(false);
        java.util.Currency currency37 = numberFormat33.getCurrency();
        numberFormat31.setCurrency(currency37);
        numberFormat26.setCurrency(currency37);
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition(9);
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = locale42.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.text.NumberFormat numberFormat45 = fractionFormat44.getNumeratorFormat();
        boolean boolean46 = parsePosition41.equals((java.lang.Object) numberFormat45);
        boolean boolean47 = numberFormat45.isParseIntegerOnly();
        java.math.RoundingMode roundingMode48 = numberFormat45.getRoundingMode();
        numberFormat26.setRoundingMode(roundingMode48);
        numberFormat0.setRoundingMode(roundingMode48);
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.lang.String str52 = locale51.getDisplayCountry();
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getCurrencyInstance(locale51);
        java.lang.String str54 = locale51.getDisplayCountry();
        java.lang.String str55 = locale51.getDisplayCountry();
        java.lang.String str56 = locale51.getScript();
        java.lang.Object obj57 = locale51.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator58 = numberFormat0.formatToCharacterIterator((java.lang.Object) locale51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
// flaky:         org.junit.Assert.assertEquals(currency1.toString(), "GBP");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency16);
// flaky:         org.junit.Assert.assertEquals(currency16.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
// flaky:         org.junit.Assert.assertEquals(currency22.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0%" + "'", str24, "0%");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100" + "'", str28, "100");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(currency32);
// flaky:         org.junit.Assert.assertEquals(currency32.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(currency37);
// flaky:         org.junit.Assert.assertEquals(currency37.toString(), "GBP");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "French" + "'", str43, "French");
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode48.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Canada" + "'", str52, "Canada");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Canada" + "'", str54, "Canada");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Canada" + "'", str55, "Canada");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "en_CA");
    }

    @Test
    public void test13546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13546");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int7 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.subtract(fraction6);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.multiply(fraction3);
        org.apache.commons.math.fraction.Fraction fraction11 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction12 = fraction9.add(fraction11);
        java.lang.String str13 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction9);
        org.apache.commons.math.fraction.Fraction fraction16 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int24 = fraction23.intValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction9.add(fraction16);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction9.abs();
        long long30 = fraction29.longValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-117) + "'", int7 == (-117));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0 / 1" + "'", str13, "0 / 1");
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-117) + "'", int24 == (-117));
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test13547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13547");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 234, (double) 0.27586207f, 115);
    }

    @Test
    public void test13548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13548");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setLanguage("Italian");
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("italien");
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.Builder builder8 = builder4.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "italian");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test13549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13549");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.lang.String str4 = locale2.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getDisplayScript();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str9 = locale5.getDisplayCountry(locale8);
        java.util.Locale.setDefault(locale5);
        java.lang.String str11 = locale5.getLanguage();
        java.lang.String str12 = locale2.getDisplayName(locale5);
        java.lang.String str13 = locale5.getDisplayCountry();
        java.lang.String str14 = locale0.getDisplayVariant(locale5);
        java.util.Set<java.lang.String> strSet15 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = locale5.getDisplayCountry(locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr" + "'", str4, "fr");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "United Kingdom" + "'", str9, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "French" + "'", str12, "French");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "United Kingdom" + "'", str13, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
    }

    @Test
    public void test13550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13550");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder22 = builder20.clear();
        java.util.Locale.Builder builder25 = builder22.setExtension('a', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder25.setScript("France");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: France [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test13551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13551");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("francese");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int6 = fraction5.intValue();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.subtract(fraction5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale12.getScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray17 = new java.util.Locale[] { locale12, locale15, locale16 };
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList18, filteringMode20);
        boolean boolean22 = fraction7.equals((java.lang.Object) localeList21);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList26, strMap27);
        java.util.Locale locale30 = new java.util.Locale("French");
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags(languageRangeList28, (java.util.Collection<java.lang.String>) strSet32);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-117) + "'", int6 == (-117));
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode20.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertEquals(locale30.toString(), "french");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "french");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test13552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13552");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.lang.String str4 = locale1.getCountry();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale6.getScript();
        java.lang.String str9 = locale6.getDisplayScript();
        java.lang.String str10 = locale1.getDisplayLanguage(locale6);
        java.lang.String str11 = locale6.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Korean" + "'", str10, "Korean");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test13553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13553");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) ' ', (double) (short) 10, (int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction8 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction6.divide(fraction8);
        boolean boolean10 = fraction2.equals((java.lang.Object) fraction6);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((-1), 13455);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction12.subtract(fraction15);
        long long17 = fraction16.longValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test13554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13554");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale12.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str15 = locale12.toLanguageTag();
        java.util.Locale locale16 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Set<java.lang.Character> charSet19 = locale16.getExtensionKeys();
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.lang.String str24 = locale22.getScript();
        java.lang.String str25 = locale22.getVariant();
        java.util.Locale.setDefault(category20, locale22);
        java.lang.String str27 = locale22.getDisplayName();
        java.util.Locale locale28 = java.util.Locale.UK;
        java.lang.String str29 = locale28.getDisplayScript();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str32 = locale28.getDisplayCountry(locale31);
        java.lang.String str33 = locale22.getDisplayVariant(locale28);
        java.lang.String str34 = locale16.getDisplayName(locale28);
        java.lang.String str35 = locale12.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder36 = builder11.setLocale(locale12);
        java.lang.String str37 = locale12.getCountry();
        java.util.Set<java.lang.String> strSet38 = locale12.getUnicodeLocaleKeys();
        boolean boolean39 = locale12.hasExtensions();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getNumberInstance(locale12);
        java.lang.String str41 = locale12.getDisplayVariant();
        java.lang.Object obj42 = locale12.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "French" + "'", str13, "French");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr" + "'", str15, "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "United Kingdom" + "'", str32, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "French" + "'", str35, "French");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "fr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "fr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "fr");
    }

    @Test
    public void test13555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13555");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.negate();
        float float3 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        boolean boolean11 = fraction7.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction7.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int18 = fraction17.intValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction14.subtract(fraction17);
        double double20 = fraction19.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction7.divide(fraction19);
        java.lang.String str22 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction21);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction2.divide(fraction21);
        double double24 = fraction2.doubleValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-97.0f) + "'", float3 == (-97.0f));
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-117) + "'", int18 == (-117));
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 117.0d + "'", double20 == 117.0d);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 / 1" + "'", str22, "-1 / 1");
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-97.0d) + "'", double24 == (-97.0d));
    }

    @Test
    public void test13556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13556");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(468, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The denominator must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13557");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale2);
        java.math.RoundingMode roundingMode6 = numberFormat5.getRoundingMode();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Currency currency15 = numberFormat12.getCurrency();
        numberFormat11.setCurrency(currency15);
        numberFormat8.setCurrency(currency15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.lang.StringBuffer stringBuffer21 = null;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition(120);
        fieldPosition23.setBeginIndex(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer26 = numberFormat5.format((double) (-1357200), stringBuffer21, fieldPosition23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + roundingMode6 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode6.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "GBP");
    }

    @Test
    public void test13558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13558");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (short) 38, (int) (short) -97);
    }

    @Test
    public void test13559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13559");
        java.text.ParseException parseException2 = new java.text.ParseException("anglais", (-117));
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray6 = parseException5.getSuppressed();
        java.text.NumberFormat.Field field7 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field7, (int) (short) 0);
        int int10 = fieldPosition9.getEndIndex();
        java.text.ParseException parseException13 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray14 = parseException13.getSuppressed();
        int int15 = parseException13.getErrorOffset();
        boolean boolean16 = fieldPosition9.equals((java.lang.Object) parseException13);
        java.text.ParseException parseException19 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int20 = parseException19.getErrorOffset();
        parseException13.addSuppressed((java.lang.Throwable) parseException19);
        parseException5.addSuppressed((java.lang.Throwable) parseException13);
        parseException2.addSuppressed((java.lang.Throwable) parseException5);
        java.text.ParseException parseException26 = new java.text.ParseException("100", (int) (byte) -1);
        java.text.ParseException parseException29 = new java.text.ParseException("", (int) (short) -4);
        int int30 = parseException29.getErrorOffset();
        parseException26.addSuppressed((java.lang.Throwable) parseException29);
        java.lang.Throwable[] throwableArray32 = parseException29.getSuppressed();
        java.lang.Throwable[] throwableArray33 = parseException29.getSuppressed();
        parseException2.addSuppressed((java.lang.Throwable) parseException29);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-4) + "'", int30 == (-4));
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    @Test
    public void test13560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13560");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 0.0f);
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int6 = fraction5.intValue();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.subtract(fraction5);
        boolean boolean9 = fraction5.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.reciprocal();
        float float11 = fraction5.floatValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction1.multiply(fraction5);
        long long13 = fraction12.longValue();
        float float14 = fraction12.floatValue();
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str19 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int24 = fraction23.intValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction18.add(fraction20);
        int int27 = fraction26.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction30 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction26.multiply(fraction30);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getNumberInstance();
        boolean boolean33 = numberFormat32.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32);
        boolean boolean35 = numberFormat32.isParseIntegerOnly();
        boolean boolean36 = fraction30.equals((java.lang.Object) boolean35);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction15.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction12.subtract(fraction30);
        long long39 = fraction12.longValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-117) + "'", int6 == (-117));
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-117.0f) + "'", float11 == (-117.0f));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-117 / 1" + "'", str19, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-117) + "'", int24 == (-117));
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test13561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13561");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) (byte) -1);
        int int2 = fieldPosition1.getBeginIndex();
        fieldPosition1.setBeginIndex(32);
        java.util.Locale locale8 = new java.util.Locale("java.text.ParseException: ", "Korean", "\uc601\uc5b4");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        numberFormat9.setMaximumIntegerDigits((int) (short) -117);
        boolean boolean12 = fieldPosition1.equals((java.lang.Object) numberFormat9);
        java.text.Format.Field field13 = fieldPosition1.getFieldAttribute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(field13);
    }

    @Test
    public void test13562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13562");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        java.text.Format.Field field5 = fieldPosition2.getFieldAttribute();
        java.text.NumberFormat.Field field6 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str7 = field6.toString();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.util.Currency currency12 = numberFormat9.getCurrency();
        numberFormat8.setCurrency(currency12);
        java.lang.String str15 = numberFormat8.format((double) 100);
        numberFormat8.setParseIntegerOnly(false);
        numberFormat8.setMaximumIntegerDigits((int) 'x');
        boolean boolean20 = field6.equals((java.lang.Object) 'x');
        java.lang.String str21 = field6.toString();
        java.text.FieldPosition fieldPosition22 = new java.text.FieldPosition((java.text.Format.Field) field6);
        java.text.Format.Field field23 = fieldPosition22.getFieldAttribute();
        int int24 = fieldPosition22.getEndIndex();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale26.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str32 = locale30.getISO3Language();
        java.util.Set<java.lang.Character> charSet33 = locale30.getExtensionKeys();
        java.util.Locale.Category category34 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayLanguage(locale36);
        java.lang.String str38 = locale36.getScript();
        java.lang.String str39 = locale36.getVariant();
        java.util.Locale.setDefault(category34, locale36);
        java.lang.String str41 = locale36.getDisplayName();
        java.util.Locale locale42 = java.util.Locale.UK;
        java.lang.String str43 = locale42.getDisplayScript();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleAttributes();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = locale42.getDisplayCountry(locale45);
        java.lang.String str47 = locale36.getDisplayVariant(locale42);
        java.lang.String str48 = locale30.getDisplayName(locale42);
        java.util.Locale locale49 = java.util.Locale.US;
        java.lang.String str50 = locale30.getDisplayLanguage(locale49);
        java.lang.String str51 = locale49.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = locale52.getDisplayScript();
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleAttributes();
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.lang.String str56 = locale52.getDisplayCountry(locale55);
        java.lang.String str57 = locale49.getDisplayVariant(locale55);
        java.lang.String str58 = locale26.getDisplayScript(locale55);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayLanguage(locale60);
        java.util.Locale locale62 = locale60.stripExtensions();
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale64);
        java.lang.String str66 = locale63.getDisplayName(locale64);
        java.lang.String str67 = locale60.getDisplayName(locale64);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getInstance(locale64);
        java.util.Locale locale70 = new java.util.Locale("francese");
        java.lang.String str71 = locale64.getDisplayScript(locale70);
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale70);
        java.lang.String str73 = locale55.getDisplayScript(locale70);
        boolean boolean74 = fieldPosition22.equals((java.lang.Object) locale55);
        boolean boolean75 = field5.equals((java.lang.Object) fieldPosition22);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str7, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10,000%" + "'", str15, "10,000%");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str21, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "coreano" + "'", str29, "coreano");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category34.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str37, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "United Kingdom" + "'", str46, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc601\uc5b4" + "'", str51, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "United Kingdom" + "'", str56, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str61, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "cor\351en" + "'", str67, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals(locale70.toString(), "francese");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test13563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13563");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale14 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getNumberInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.lang.String str23 = locale20.getISO3Language();
        java.lang.String str24 = locale19.getDisplayCountry(locale20);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale26.getISO3Language();
        java.lang.String str30 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale26.getDisplayLanguage(locale31);
        java.lang.String str33 = locale20.getDisplayName(locale31);
        java.lang.String str34 = locale20.getDisplayCountry();
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = locale35.getDisplayName();
        java.lang.String str37 = locale20.getDisplayName(locale35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str40 = locale17.getDisplayCountry(locale20);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u671d\u9c9c\u6587" + "'", str32, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u671d\u9c9c\u6587" + "'", str33, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English (United States)" + "'", str36, "English (United States)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Korean" + "'", str37, "Korean");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u671d\u9c9c\u6587" + "'", str40, "\u671d\u9c9c\u6587");
    }

    @Test
    public void test13564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13564");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.INTEGER;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, 0);
        fieldPosition2.setBeginIndex((int) (short) 10);
        org.junit.Assert.assertNotNull(field0);
    }

    @Test
    public void test13565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13565");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("anglais");
        java.util.Locale locale7 = builder6.build();
        java.util.Locale.Builder builder8 = builder6.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.setLanguageTag("Deutsch");
        java.util.Locale.Builder builder11 = builder8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setLanguageTag("116_JAVA.TEXT.PARSEEXCEPTION: $52.00_12");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 116_JAVA.TEXT.PARSEEXCEPTION: $52.00_12 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test13566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13566");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        boolean boolean5 = numberFormat3.isParseIntegerOnly();
        java.math.RoundingMode roundingMode6 = numberFormat3.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getNumeratorFormat();
        int int9 = numberFormat8.getMinimumFractionDigits();
        numberFormat8.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        numberFormat8.setMaximumIntegerDigits((int) 'u');
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 10);
        parsePosition17.setErrorIndex((int) (byte) 1);
        parsePosition17.setErrorIndex(0);
        int int22 = parsePosition17.getErrorIndex();
        java.lang.Number number23 = numberFormat8.parse("java.text.numberformat$field(per mille)", parsePosition17);
        java.lang.Object obj24 = numberFormat8.clone();
        java.util.Currency currency25 = numberFormat8.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat8);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance();
        java.lang.String str29 = numberFormat27.format(100L);
        int int30 = numberFormat27.getMinimumFractionDigits();
        numberFormat27.setMaximumIntegerDigits(1);
        boolean boolean34 = numberFormat27.equals((java.lang.Object) (-117));
        java.lang.String str36 = numberFormat27.format((double) (-1));
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale37.getDisplayCountry();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.lang.String str44 = locale41.getISO3Language();
        java.lang.String str45 = locale41.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale41);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance();
        numberFormat48.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance();
        numberFormat52.setMaximumIntegerDigits((-1));
        java.util.Currency currency55 = numberFormat52.getCurrency();
        numberFormat51.setCurrency(currency55);
        numberFormat48.setCurrency(currency55);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance();
        numberFormat58.setMaximumIntegerDigits((-1));
        java.util.Currency currency61 = numberFormat58.getCurrency();
        java.lang.String str63 = numberFormat58.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47, numberFormat48, numberFormat58);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getInstance();
        java.lang.String str67 = numberFormat65.format(100L);
        properFractionFormat64.setWholeFormat(numberFormat65);
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getInstance();
        java.lang.String str71 = numberFormat69.format(100L);
        int int72 = numberFormat69.getMinimumFractionDigits();
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale73.getDisplayLanguage(locale74);
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getNumberInstance(locale74);
        java.lang.String str78 = numberFormat76.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65, numberFormat69, numberFormat76);
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency81 = numberFormat80.getCurrency();
        numberFormat65.setCurrency(currency81);
        fractionFormat46.setDenominatorFormat(numberFormat65);
        org.apache.commons.math.fraction.FractionFormat fractionFormat84 = new org.apache.commons.math.fraction.FractionFormat(numberFormat39, numberFormat65);
        numberFormat65.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat87 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat27, numberFormat65);
        java.util.Locale locale91 = new java.util.Locale("-1 / 117", "-43", "java.text.parseexception: $52.00 (0% / 0%)");
        java.text.NumberFormat numberFormat92 = java.text.NumberFormat.getInstance(locale91);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator93 = numberFormat27.formatToCharacterIterator((java.lang.Object) locale91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "French" + "'", str1, "French");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + roundingMode6 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode6.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(number23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100" + "'", str29, "100");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Canada" + "'", str38, "Canada");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str43, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "kor" + "'", str44, "kor");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0%" + "'", str63, "0%");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "100" + "'", str67, "100");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "100" + "'", str71, "100");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str75, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "32" + "'", str78, "32");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(currency81);
        org.junit.Assert.assertEquals(currency81.toString(), "GBP");
        org.junit.Assert.assertEquals(locale91.toString(), "-1 / 117_-43_java.text.parseexception: $52.00 (0% / 0%)");
        org.junit.Assert.assertNotNull(numberFormat92);
    }

    @Test
    public void test13567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13567");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayName(locale5);
        boolean boolean9 = locale1.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str11 = locale1.getLanguage();
        java.lang.String str12 = locale1.getLanguage();
        java.lang.String str13 = locale1.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cor\351en" + "'", str8, "cor\351en");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ko" + "'", str11, "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ko" + "'", str12, "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test13568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13568");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder8 = builder5.setExtension('x', "coreano");
        java.util.Locale.Builder builder10 = builder5.setLanguage("it");
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.lang.String str13 = locale11.getDisplayScript();
        java.lang.String str14 = locale11.getCountry();
        boolean boolean15 = locale11.hasExtensions();
        java.lang.String str16 = locale11.getScript();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getCurrencyInstance(locale11);
        java.lang.String str18 = locale11.getVariant();
        java.util.Locale.Builder builder19 = builder10.setLocale(locale11);
        java.text.NumberFormat.Field field20 = java.text.NumberFormat.Field.PERMILLE;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale22.getISO3Language();
        java.lang.String str26 = locale21.getDisplayCountry(locale22);
        boolean boolean27 = field20.equals((java.lang.Object) locale21);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.setVariant("");
        java.util.Locale.Builder builder31 = builder30.clear();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        java.lang.String str37 = locale32.getDisplayCountry(locale33);
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str39 = locale33.getDisplayLanguage(locale38);
        java.util.Locale.Builder builder40 = builder30.setLocale(locale38);
        java.util.Locale.Builder builder42 = builder40.setRegion("117");
        java.util.Locale locale43 = builder40.build();
        java.lang.String str44 = locale21.getDisplayLanguage(locale43);
        java.util.Locale.Builder builder45 = builder19.setLocale(locale43);
        java.util.Locale locale46 = builder19.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder49 = builder19.setExtension('x', "-4,212 / 97");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FR" + "'", str14, "FR");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(field20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u671d\u9c9c\u6587" + "'", str39, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_117");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u671d\u9c9c\u6587" + "'", str44, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_117");
    }

    @Test
    public void test13569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13569");
        java.text.ParseException parseException2 = new java.text.ParseException("GB", (int) (short) -13572);
        java.text.ParseException parseException5 = new java.text.ParseException("zh_CN", (int) (byte) -117);
        parseException2.addSuppressed((java.lang.Throwable) parseException5);
    }

    @Test
    public void test13570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13570");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayName(locale5);
        java.lang.String str9 = locale5.getVariant();
        java.util.Set<java.lang.String> strSet10 = locale5.getUnicodeLocaleKeys();
        java.lang.String str11 = locale5.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cor\351en" + "'", str8, "cor\351en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fr" + "'", str11, "fr");
    }

    @Test
    public void test13571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13571");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getDisplayVariant();
        java.lang.String str13 = locale11.getDisplayScript();
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = locale11.getDisplayCountry(locale15);
        boolean boolean19 = fraction2.equals((java.lang.Object) locale11);
        java.util.Set<java.lang.String> strSet20 = locale11.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale11.getDisplayScript();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance();
        numberFormat24.setMaximumIntegerDigits((-1));
        java.util.Currency currency27 = numberFormat24.getCurrency();
        numberFormat23.setCurrency(currency27);
        java.lang.String str30 = numberFormat23.format((double) 100);
        java.math.RoundingMode roundingMode31 = numberFormat23.getRoundingMode();
        numberFormat22.setRoundingMode(roundingMode31);
        numberFormat22.setMinimumFractionDigits((int) '4');
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Canada" + "'", str16, "Canada");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "China" + "'", str17, "China");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10,000%" + "'", str30, "10,000%");
        org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode31.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test13572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13572");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.lang.Object obj4 = numberFormat3.clone();
        numberFormat3.setParseIntegerOnly(true);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 10);
        parsePosition9.setErrorIndex((int) ' ');
        parsePosition9.setIndex((int) (short) 100);
        java.lang.String str14 = parsePosition9.toString();
        java.lang.Object obj15 = numberFormat3.parseObject("fr", parsePosition9);
        java.math.RoundingMode roundingMode16 = numberFormat3.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.ParsePosition[index=100,errorIndex=32]" + "'", str14, "java.text.ParsePosition[index=100,errorIndex=32]");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + roundingMode16 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode16.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test13573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13573");
        java.text.ParseException parseException2 = new java.text.ParseException("120", (int) (short) 1);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.ParsePosition[index=52,errorIndex=52]", (int) '#');
        parseException2.addSuppressed((java.lang.Throwable) parseException6);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test13574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13574");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(120, 13689);
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test13575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13575");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.multiply(fraction31);
        int int39 = fraction24.compareTo((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int44 = fraction43.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.subtract(fraction43);
        boolean boolean47 = fraction43.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction38.multiply(fraction43);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.setVariant("");
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        java.util.Locale.Builder builder53 = builder51.clearExtensions();
        java.util.Locale.Builder builder54 = builder51.clearExtensions();
        boolean boolean55 = fraction38.equals((java.lang.Object) builder51);
        java.util.Locale.Builder builder56 = builder51.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.addUnicodeLocaleAttribute("can");
        java.util.Locale.Builder builder59 = builder58.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder61 = builder58.setVariant("10\240000 %");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 10?000 % [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-117) + "'", int44 == (-117));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test13576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13576");
        java.util.Locale locale2 = new java.util.Locale("hi!", "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "hi!_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(numberFormat4);
    }

    @Test
    public void test13577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13577");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str1 = field0.toString();
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale2);
        boolean boolean5 = field0.equals((java.lang.Object) numberFormat4);
        java.text.NumberFormat.Field field6 = java.text.NumberFormat.Field.SIGN;
        java.lang.Object obj7 = new java.lang.Object();
        boolean boolean8 = field6.equals(obj7);
        boolean boolean9 = field0.equals((java.lang.Object) field6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.clearExtensions();
        java.util.Locale.Builder builder14 = builder10.setLanguage("Italian");
        boolean boolean15 = field0.equals((java.lang.Object) builder10);
        java.util.Locale locale16 = builder10.build();
        java.util.Locale.Builder builder17 = builder10.clear();
        java.util.Locale.Builder builder19 = builder10.setLanguage("gb");
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str1, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "italian");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test13578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13578");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat9.setCurrency(currency13);
        numberFormat6.setCurrency(currency13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat6);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        numberFormat17.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean23 = numberFormat22.isGroupingUsed();
        numberFormat22.setParseIntegerOnly(false);
        java.lang.Number number27 = numberFormat22.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat17, numberFormat22);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj30 = numberFormat29.clone();
        java.lang.Object obj31 = numberFormat29.clone();
        boolean boolean32 = numberFormat4.equals((java.lang.Object) numberFormat29);
        boolean boolean33 = numberFormat4.isGroupingUsed();
        numberFormat4.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Currency currency37 = numberFormat4.getCurrency();
        numberFormat4.setMinimumIntegerDigits(52);
        numberFormat4.setMinimumFractionDigits((-13));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + 0L + "'", number27, 0L);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
    }

    @Test
    public void test13579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13579");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParsePosition[index=-1,errorIndex=-1]", "\244 10.00");
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getNumberInstance(locale3);
        java.lang.String str6 = locale3.getDisplayCountry();
        java.lang.String str7 = locale2.getDisplayCountry(locale3);
        java.lang.Object obj8 = locale2.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseposition[index=-1,errorindex=-1]_\244 10.00");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\244 10.00" + "'", str7, "\244 10.00");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "java.text.parseposition[index=-1,errorindex=-1]_\244 10.00");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "java.text.parseposition[index=-1,errorindex=-1]_\244 10.00");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "java.text.parseposition[index=-1,errorindex=-1]_\244 10.00");
    }

    @Test
    public void test13580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13580");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.lang.String str4 = locale2.getScript();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("zho");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale10.getScript();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale14 = locale10.stripExtensions();
        java.lang.String str15 = locale8.getDisplayName(locale14);
        java.util.Locale locale19 = new java.util.Locale("10,000%", "\ud55c\uad6d\uc5b4", "32");
        java.lang.String str20 = locale19.toLanguageTag();
        java.lang.String str21 = locale8.getDisplayCountry(locale19);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale8);
        java.lang.String str24 = locale8.getExtension('a');
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str15, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "\ud55c\uad6d\uc5b4_32");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "x-lvariant-32" + "'", str20, "x-lvariant-32");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Taiwan" + "'", str21, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test13581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13581");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(52, (int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int11 = fraction10.intValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction7.subtract(fraction10);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction6.multiply(fraction7);
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction16 = fraction13.add(fraction15);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale27.getScript();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale27, locale30, locale31 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList33, filteringMode35);
        boolean boolean37 = fraction22.equals((java.lang.Object) localeList36);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction22.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction15.add(fraction38);
        org.apache.commons.math.fraction.Fraction fraction41 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str47 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction46);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int52 = fraction51.intValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction48.subtract(fraction51);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction46.add(fraction48);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction46.abs();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction43.subtract(fraction55);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction42.multiply(fraction43);
        org.apache.commons.math.fraction.Fraction fraction60 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction61 = fraction42.multiply(fraction60);
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int69 = fraction68.intValue();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction65.subtract(fraction68);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction64.multiply(fraction65);
        org.apache.commons.math.fraction.Fraction fraction73 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction74 = fraction71.add(fraction73);
        int int75 = fraction73.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction60.divide(fraction73);
        org.apache.commons.math.fraction.Fraction fraction77 = fraction38.divide(fraction73);
        org.apache.commons.math.fraction.Fraction fraction81 = new org.apache.commons.math.fraction.Fraction((double) (byte) 100, (double) 'x', (-117));
        org.apache.commons.math.fraction.Fraction fraction82 = fraction81.reciprocal();
        int int83 = fraction81.intValue();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction77.add(fraction81);
        boolean boolean85 = fraction3.equals((java.lang.Object) fraction84);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-117) + "'", int11 == (-117));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode35.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-117 / 1" + "'", str47, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-117) + "'", int52 == (-117));
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-117) + "'", int69 == (-117));
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test13582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13582");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERCENT;
        java.lang.String str1 = field0.toString();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.util.Currency currency9 = numberFormat6.getCurrency();
        numberFormat5.setCurrency(currency9);
        numberFormat2.setCurrency(currency9);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance();
        java.lang.String str14 = numberFormat12.format(100L);
        int int15 = numberFormat12.getMinimumFractionDigits();
        numberFormat12.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode21 = numberFormat18.getRoundingMode();
        numberFormat12.setRoundingMode(roundingMode21);
        numberFormat2.setRoundingMode(roundingMode21);
        boolean boolean24 = field0.equals((java.lang.Object) roundingMode21);
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field0, 315);
        int int27 = fieldPosition26.getEndIndex();
        java.lang.String str28 = fieldPosition26.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(percent)" + "'", str1, "java.text.NumberFormat$Field(percent)");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100" + "'", str14, "100");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + roundingMode21 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode21.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.FieldPosition[field=315,attribute=java.text.NumberFormat$Field(percent),beginIndex=0,endIndex=0]" + "'", str28, "java.text.FieldPosition[field=315,attribute=java.text.NumberFormat$Field(percent),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test13583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13583");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int7 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.subtract(fraction6);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.multiply(fraction3);
        org.apache.commons.math.fraction.Fraction fraction11 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction12 = fraction9.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int17 = fraction16.intValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.subtract(fraction16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale23.getScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale23, locale26, locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale.FilteringMode filteringMode31 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList29, filteringMode31);
        boolean boolean33 = fraction18.equals((java.lang.Object) localeList32);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction18.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction11.add(fraction34);
        java.lang.String str36 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction35);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction35.reciprocal();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-117) + "'", int7 == (-117));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-117) + "'", int17 == (-117));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + filteringMode31 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode31.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-116 / 117" + "'", str36, "-116 / 117");
        org.junit.Assert.assertNotNull(fraction37);
    }

    @Test
    public void test13584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13584");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder16 = builder11.setExtension('a', "Canada");
        java.util.Locale.Builder builder19 = builder11.setExtension('u', "");
        java.util.Locale locale20 = builder19.build();
        java.util.Locale.Builder builder22 = builder19.addUnicodeLocaleAttribute("french");
        java.util.Locale.Builder builder23 = builder19.clear();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str26 = locale24.getISO3Language();
        java.util.Set<java.lang.Character> charSet27 = locale24.getExtensionKeys();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale24);
        java.lang.String str29 = locale24.getCountry();
        java.util.Locale.Builder builder30 = builder19.setLocale(locale24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder32 = builder30.removeUnicodeLocaleAttribute("-$2.00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: -$2.00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "chinese__#a-canada");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test13585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13585");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale2);
        java.lang.Object obj6 = numberFormat5.clone();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance();
        java.lang.String str10 = numberFormat8.format(100L);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj16 = numberFormat12.parseObject("hi!", parsePosition15);
        java.lang.Number number17 = numberFormat8.parse("10,000%", parsePosition15);
        int int18 = parsePosition15.getErrorIndex();
        int int19 = parsePosition15.getIndex();
        int int20 = parsePosition15.getErrorIndex();
        java.lang.Object obj21 = numberFormat5.parseObject("cor\351en", parsePosition15);
        java.lang.String str22 = parsePosition15.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100" + "'", str10, "100");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(number17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str22, "java.text.ParsePosition[index=10,errorIndex=10]");
    }

    @Test
    public void test13586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13586");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits((-1));
        java.util.Currency currency40 = numberFormat37.getCurrency();
        numberFormat36.setCurrency(currency40);
        boolean boolean42 = numberFormat0.equals((java.lang.Object) numberFormat36);
        boolean boolean43 = numberFormat0.isGroupingUsed();
        int int44 = numberFormat0.getMinimumIntegerDigits();
        numberFormat0.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "GBP");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "GBP");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test13587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13587");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (short) -1);
        parsePosition1.setErrorIndex(35);
        parsePosition1.setIndex(100);
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance();
        java.lang.String str10 = numberFormat8.format(100L);
        int int11 = numberFormat8.getMinimumFractionDigits();
        numberFormat8.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode17 = numberFormat14.getRoundingMode();
        numberFormat8.setRoundingMode(roundingMode17);
        numberFormat7.setRoundingMode(roundingMode17);
        boolean boolean20 = parsePosition1.equals((java.lang.Object) numberFormat7);
        java.text.ParseException parseException23 = new java.text.ParseException("java.text.ParsePosition[index=3,errorIndex=10]", 4095);
        boolean boolean24 = numberFormat7.equals((java.lang.Object) parseException23);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100" + "'", str10, "100");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode17.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test13588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13588");
        java.util.Locale locale3 = new java.util.Locale("0 (X-LVARIANT-IT-IT)", "\u97d3\u6587", "");
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        boolean boolean12 = numberFormat6.equals((java.lang.Object) locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str14 = locale10.getDisplayScript();
        java.util.Locale.Builder builder15 = builder5.setLocale(locale10);
        java.lang.String str16 = locale10.getLanguage();
        java.lang.String str17 = locale10.getDisplayScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.lang.String str22 = locale19.getISO3Language();
        java.lang.String str23 = locale19.getDisplayCountry();
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = locale19.getDisplayLanguage(locale24);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale26.getVariant();
        boolean boolean28 = locale26.hasExtensions();
        java.lang.String str29 = locale24.getDisplayLanguage(locale26);
        java.util.Set<java.lang.Character> charSet30 = locale26.getExtensionKeys();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale26);
        java.lang.String str32 = locale26.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale33);
        java.lang.String str37 = locale26.getDisplayLanguage(locale33);
        java.lang.String str38 = locale10.getDisplayCountry(locale26);
        java.lang.String str39 = locale3.getDisplayLanguage(locale10);
        java.util.Locale.Category category40 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.lang.String str44 = locale42.getScript();
        java.util.Locale.setDefault(category40, locale42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getInstance(locale42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str49 = locale42.getDisplayCountry();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.util.Locale locale53 = locale51.stripExtensions();
        java.lang.String str54 = locale53.getISO3Language();
        java.util.Locale.Category category55 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale56.getDisplayLanguage(locale57);
        java.lang.String str59 = locale57.getScript();
        java.lang.String str60 = locale57.getVariant();
        java.util.Locale.setDefault(category55, locale57);
        java.lang.String str62 = locale57.getDisplayName();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getIntegerInstance(locale57);
        java.lang.String str64 = locale57.getISO3Language();
        java.lang.String str65 = locale53.getDisplayScript(locale57);
        java.lang.String str66 = locale42.getDisplayCountry(locale57);
        java.lang.String str67 = locale3.getDisplayCountry(locale42);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u97d3\u6587");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ko" + "'", str16, "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u97d3\u6587" + "'", str25, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese" + "'", str29, "Chinese");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English (Canada)" + "'", str32, "English (Canada)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u82f1\u6587" + "'", str37, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0 (x-lvariant-it-it)" + "'", str39, "0 (x-lvariant-it-it)");
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category40.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str43, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "kor" + "'", str54, "kor");
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category55.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str58, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "kor" + "'", str64, "kor");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u97d3\u6587" + "'", str67, "\u97d3\u6587");
    }

    @Test
    public void test13589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13589");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.lang.String str2 = locale1.getScript();
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        java.util.Currency currency5 = numberFormat4.getCurrency();
        numberFormat0.setCurrency(currency5);
        int int7 = numberFormat0.getMaximumIntegerDigits();
        java.lang.Object obj8 = numberFormat0.clone();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.util.Locale locale12 = locale10.stripExtensions();
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale13.getVariant();
        java.util.Locale locale15 = locale13.stripExtensions();
        java.lang.String str16 = locale13.getCountry();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getCurrencyInstance(locale13);
        java.lang.StringBuffer stringBuffer18 = null;
        java.text.NumberFormat.Field field19 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str20 = field19.toString();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale21);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale21);
        boolean boolean24 = field19.equals((java.lang.Object) numberFormat23);
        java.text.NumberFormat.Field field25 = java.text.NumberFormat.Field.SIGN;
        java.lang.Object obj26 = new java.lang.Object();
        boolean boolean27 = field25.equals(obj26);
        boolean boolean28 = field19.equals((java.lang.Object) field25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        numberFormat30.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance();
        numberFormat34.setMaximumIntegerDigits((-1));
        java.util.Currency currency37 = numberFormat34.getCurrency();
        numberFormat33.setCurrency(currency37);
        numberFormat30.setCurrency(currency37);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        numberFormat40.setMaximumIntegerDigits((-1));
        java.util.Currency currency43 = numberFormat40.getCurrency();
        java.lang.String str45 = numberFormat40.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat30, numberFormat40);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getInstance();
        java.lang.String str49 = numberFormat47.format(100L);
        properFractionFormat46.setWholeFormat(numberFormat47);
        java.text.NumberFormat numberFormat51 = properFractionFormat46.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getNumeratorFormat();
        java.text.NumberFormat numberFormat54 = fractionFormat52.getNumeratorFormat();
        java.text.ParseException parseException57 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray58 = parseException57.getSuppressed();
        boolean boolean59 = numberFormat54.equals((java.lang.Object) throwableArray58);
        numberFormat54.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.text.NumberFormat numberFormat63 = properFractionFormat62.getWholeFormat();
        properFractionFormat46.setWholeFormat(numberFormat63);
        java.text.NumberFormat numberFormat65 = properFractionFormat46.getNumeratorFormat();
        boolean boolean66 = field25.equals((java.lang.Object) numberFormat65);
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        java.lang.String str68 = locale67.getScript();
        java.lang.String str69 = locale67.getDisplayScript();
        boolean boolean70 = field25.equals((java.lang.Object) str69);
        java.text.FieldPosition fieldPosition72 = new java.text.FieldPosition((java.text.Format.Field) field25, (int) (short) -1170);
        fieldPosition72.setBeginIndex(387);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer75 = numberFormat0.format((java.lang.Object) numberFormat17, stringBuffer18, fieldPosition72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(field19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str20, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(field25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0%" + "'", str45, "0%");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "100" + "'", str49, "100");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test13590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13590");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale5 = java.util.Locale.UK;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale5.getDisplayScript(locale7);
        java.lang.String str10 = locale7.toLanguageTag();
        java.lang.String str11 = locale7.getVariant();
        java.lang.String str12 = locale4.getDisplayScript(locale7);
        java.lang.String str13 = locale4.getISO3Country();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("java.text.ParseException: 100");
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder16.setVariant("");
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.lang.String str23 = locale20.getISO3Language();
        boolean boolean24 = locale20.hasExtensions();
        java.util.Locale.Builder builder25 = builder18.setLocale(locale20);
        java.util.Locale.Builder builder26 = builder25.clear();
        java.util.Locale.Builder builder27 = builder25.clear();
        java.util.Locale locale28 = builder27.build();
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale15.getDisplayName(locale28);
        java.lang.String str31 = locale28.getDisplayVariant();
        java.lang.String str32 = locale4.getDisplayScript(locale28);
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = locale35.getScript();
        java.lang.String str38 = locale35.getVariant();
        java.util.Locale.setDefault(category33, locale35);
        java.util.Locale locale40 = java.util.Locale.getDefault(category33);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.util.Locale.setDefault(category33, locale41);
        java.util.Locale locale44 = java.util.Locale.getDefault(category33);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Locale locale48 = locale46.stripExtensions();
        java.util.Locale.setDefault(category33, locale46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale46);
        java.lang.String str51 = locale46.getISO3Country();
        java.lang.String str52 = locale46.getDisplayCountry();
        java.lang.String str53 = locale28.getDisplayCountry(locale46);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ko" + "'", str10, "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category33.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test13591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13591");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("eng");
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale7.getCountry();
        java.lang.String str12 = locale5.getDisplayName(locale7);
        java.util.Locale.Builder builder13 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder14 = builder4.clear();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale16.getISO3Language();
        java.lang.String str20 = locale15.getDisplayCountry(locale16);
        boolean boolean21 = locale15.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale22.getISO3Language();
        java.lang.String str26 = locale22.getDisplayCountry();
        java.lang.String str27 = locale15.getDisplayLanguage(locale22);
        java.util.Locale.Builder builder28 = builder14.setLocale(locale22);
        java.util.Locale locale32 = new java.util.Locale("", "en-GB", "java.text.AttributedCharacterIterator$Attribute(language)");
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = locale34.getISO3Language();
        java.lang.String str38 = locale33.getDisplayCountry(locale34);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayLanguage(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.lang.String str44 = locale39.getDisplayCountry(locale40);
        java.util.Locale locale45 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str46 = locale40.getDisplayLanguage(locale45);
        java.lang.String str47 = locale34.getDisplayName(locale45);
        java.lang.String str48 = locale34.getDisplayCountry();
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getIntegerInstance(locale34);
        java.util.Locale locale50 = locale34.stripExtensions();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getIntegerInstance(locale50);
        java.lang.String str52 = locale32.getDisplayLanguage(locale50);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.lang.String str56 = locale54.getScript();
        java.lang.String str57 = locale54.getCountry();
        java.lang.String str58 = locale54.getDisplayLanguage();
        java.lang.String str59 = locale32.getDisplayVariant(locale54);
        java.util.Locale.Category category60 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale61.getDisplayLanguage(locale62);
        java.lang.String str64 = locale62.getScript();
        java.lang.String str65 = locale62.getVariant();
        java.util.Locale.setDefault(category60, locale62);
        java.util.Locale locale67 = java.util.Locale.getDefault(category60);
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale68);
        java.util.Locale.setDefault(category60, locale68);
        java.util.Locale locale71 = java.util.Locale.TAIWAN;
        java.util.Locale locale72 = locale71.stripExtensions();
        java.util.Locale.setDefault(category60, locale71);
        java.util.Locale locale74 = java.util.Locale.getDefault(category60);
        java.util.Locale locale75 = java.util.Locale.getDefault(category60);
        java.util.Locale locale76 = java.util.Locale.getDefault(category60);
        java.lang.String str77 = locale32.getDisplayLanguage(locale76);
        java.lang.String str78 = locale76.getDisplayScript();
        java.util.Locale.Builder builder79 = builder14.setLocale(locale76);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str12, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals(locale32.toString(), "_EN-GB_java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "kor" + "'", str37, "kor");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u671d\u9c9c\u6587" + "'", str46, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u671d\u9c9c\u6587" + "'", str47, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Korean" + "'", str58, "Korean");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str59, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertTrue("'" + category60 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category60.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str63, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test13592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13592");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        numberFormat0.setMinimumFractionDigits(0);
        numberFormat0.setMinimumFractionDigits(117);
        int int40 = numberFormat0.getMaximumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "GBP");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 117 + "'", int40 == 117);
    }

    @Test
    public void test13593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13593");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder14 = builder13.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setVariant("96 / 1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 96 / 1 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test13594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13594");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 0.3298969f, (double) (short) 120, (-128));
    }

    @Test
    public void test13595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13595");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = locale15.getISO3Country();
        java.lang.String str19 = locale15.getLanguage();
        java.util.Locale.setDefault(category0, locale15);
        java.util.Locale locale21 = java.util.Locale.getDefault(category0);
        java.util.Locale locale22 = java.util.Locale.getDefault(category0);
        java.util.Locale locale26 = new java.util.Locale("120", "zh_tw", "java.text.ParseException: ");
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale28);
        java.lang.String str32 = locale26.getDisplayVariant(locale28);
        java.util.Locale locale33 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str34 = locale26.getDisplayVariant(locale33);
        java.util.Locale.setDefault(category0, locale33);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u52a0\u62ff\u5927" + "'", str16, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "China" + "'", str17, "China");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CAN" + "'", str18, "CAN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en" + "'", str19, "en");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale26.toString(), "120_ZH_TW_java.text.ParseException: ");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.ParseException: " + "'", str32, "java.text.ParseException: ");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.ParseException: " + "'", str34, "java.text.ParseException: ");
    }

    @Test
    public void test13596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13596");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale2);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.util.Locale locale9 = locale7.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.lang.String str11 = locale2.getDisplayLanguage(locale9);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale2);
        java.util.Locale locale14 = new java.util.Locale("fr");
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.lang.String str21 = locale18.toLanguageTag();
        java.lang.String str22 = locale15.getDisplayLanguage(locale18);
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale18.getDisplayCountry(locale23);
        java.util.Locale locale25 = locale18.stripExtensions();
        java.lang.String str26 = locale2.getDisplayScript(locale25);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getIntegerInstance(locale25);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ko" + "'", str21, "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str22, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
    }

    @Test
    public void test13597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13597");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.util.Currency currency42 = numberFormat39.getCurrency();
        numberFormat38.setCurrency(currency42);
        numberFormat35.setCurrency(currency42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits((-1));
        java.util.Currency currency48 = numberFormat45.getCurrency();
        java.lang.String str50 = numberFormat45.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat35, numberFormat45);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.String str55 = numberFormat53.format(100L);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = numberFormat57.parseObject("hi!", parsePosition60);
        java.lang.Number number62 = numberFormat53.parse("10,000%", parsePosition60);
        int int63 = parsePosition60.getErrorIndex();
        int int64 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat51.parse("French", parsePosition60);
        int int66 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat32.parse("fran\347ais", parsePosition60);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance();
        numberFormat68.setMaximumIntegerDigits((-1));
        java.util.Currency currency71 = numberFormat68.getCurrency();
        properFractionFormat32.setWholeFormat(numberFormat68);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance();
        numberFormat73.setMaximumIntegerDigits((-1));
        java.util.Currency currency76 = numberFormat73.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73);
        numberFormat73.setMaximumFractionDigits((int) (short) -117);
        properFractionFormat32.setWholeFormat(numberFormat73);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getCurrencyInstance();
        numberFormat81.setMinimumIntegerDigits((-1));
        properFractionFormat32.setWholeFormat(numberFormat81);
        java.text.NumberFormat numberFormat85 = properFractionFormat32.getWholeFormat();
        org.apache.commons.math.fraction.Fraction fraction87 = properFractionFormat32.parse("1");
        int int88 = fraction87.getNumerator();
        double double89 = fraction87.doubleValue();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0%" + "'", str50, "0%");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(currency76);
        org.junit.Assert.assertEquals(currency76.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0d + "'", double89 == 1.0d);
    }

    @Test
    public void test13598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13598");
        java.util.Locale locale1 = new java.util.Locale("\ub3c5\uc77c\uc5b4");
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getIntegerInstance(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat2);
    }

    @Test
    public void test13599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13599");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("it");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
    }

    @Test
    public void test13600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13600");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        java.lang.String str6 = locale4.getScript();
        java.lang.String str7 = locale4.getVariant();
        java.util.Locale.setDefault(category2, locale4);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayScript();
        java.util.Locale.setDefault(category2, locale9);
        java.lang.String str13 = locale0.getDisplayCountry(locale9);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale0);
        boolean boolean15 = numberFormat14.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u5fb7\u56fd" + "'", str13, "\u5fb7\u56fd");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13601");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale3.getDisplayName(locale5);
        java.lang.String str7 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale0.getDisplayName(locale5);
        java.lang.String str9 = locale0.toLanguageTag();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance(locale15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getIntegerInstance(locale15);
        java.lang.String str19 = locale15.getCountry();
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale15.getDisplayCountry(locale20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getVariant();
        java.util.Locale.setDefault(category22, locale24);
        java.lang.String str29 = locale24.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.lang.String str34 = locale30.getDisplayCountry(locale33);
        java.lang.String str35 = locale24.getDisplayVariant(locale30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str37 = locale20.getDisplayName(locale24);
        boolean boolean38 = numberFormat11.equals((java.lang.Object) locale24);
        fractionFormat10.setDenominatorFormat(numberFormat11);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        numberFormat42.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance();
        numberFormat46.setMaximumIntegerDigits((-1));
        java.util.Currency currency49 = numberFormat46.getCurrency();
        numberFormat45.setCurrency(currency49);
        numberFormat42.setCurrency(currency49);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance();
        numberFormat52.setMaximumIntegerDigits((-1));
        java.util.Currency currency55 = numberFormat52.getCurrency();
        java.lang.String str57 = numberFormat52.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41, numberFormat42, numberFormat52);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getInstance();
        java.lang.String str62 = numberFormat60.format(100L);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition67 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj68 = numberFormat64.parseObject("hi!", parsePosition67);
        java.lang.Number number69 = numberFormat60.parse("10,000%", parsePosition67);
        int int70 = parsePosition67.getErrorIndex();
        java.lang.Object obj71 = properFractionFormat58.parseObject("French", parsePosition67);
        parsePosition67.setIndex((int) (short) 10);
        java.lang.Object obj74 = numberFormat11.parseObject("Chinesisch (China)", parsePosition67);
        parsePosition67.setIndex(0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "coreano" + "'", str6, "coreano");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str7, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "coreano" + "'", str8, "coreano");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko" + "'", str9, "ko");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "United Kingdom" + "'", str34, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(fractionFormat36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str37, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0%" + "'", str57, "0%");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "100" + "'", str62, "100");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(number69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test13602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13602");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) '4');
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray11 = new java.util.Locale[] { locale6, locale9, locale10 };
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale.FilteringMode filteringMode14 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList12, filteringMode14);
        boolean boolean16 = parsePosition1.equals((java.lang.Object) languageRangeList3);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.lang.String str23 = locale21.getScript();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray26 = new java.util.Locale[] { locale21, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList30 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList27, filteringMode29);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet33);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.parse("coreano", strMap41);
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(locale43);
        java.util.Set<java.lang.Character> charSet45 = locale43.getExtensionKeys();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale46);
        java.lang.String str48 = locale43.getDisplayScript(locale46);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getCurrencyInstance(locale43);
        java.util.Set<java.lang.String> strSet50 = locale43.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags(languageRangeList42, (java.util.Collection<java.lang.String>) strSet50);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("Chinese");
        java.lang.String str55 = locale54.getDisplayName();
        java.lang.String str56 = locale52.getDisplayName(locale54);
        java.util.Locale locale57 = locale54.stripExtensions();
        java.util.Set<java.lang.String> strSet58 = locale54.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags(languageRangeList42, (java.util.Collection<java.lang.String>) strSet58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.parse("ita", strMap61);
        java.util.Locale.Category category63 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale64 = java.util.Locale.getDefault(category63);
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale68.getDisplayLanguage(locale69);
        java.lang.String str71 = locale68.getISO3Language();
        java.lang.String str72 = locale67.getDisplayCountry(locale68);
        java.lang.String str73 = locale68.toLanguageTag();
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getCurrencyInstance(locale68);
        java.lang.String str75 = locale65.getDisplayVariant(locale68);
        java.lang.String str77 = locale68.getExtension('u');
        java.lang.String str78 = locale68.getCountry();
        java.util.Locale.setDefault(category63, locale68);
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getIntegerInstance(locale68);
        java.util.Set<java.lang.String> strSet81 = locale68.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray82 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList83 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList83, languageRangeArray82);
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        java.lang.String str87 = locale85.getDisplayLanguage(locale86);
        java.lang.String str88 = locale86.getScript();
        java.util.Locale locale89 = java.util.Locale.KOREAN;
        java.util.Locale locale90 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray91 = new java.util.Locale[] { locale86, locale89, locale90 };
        java.util.ArrayList<java.util.Locale> localeList92 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList92, localeArray91);
        java.util.Locale.FilteringMode filteringMode94 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList83, (java.util.Collection<java.util.Locale>) localeList92, filteringMode94);
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags(languageRangeList62, (java.util.Collection<java.lang.String>) strSet81, filteringMode94);
        java.util.List<java.lang.String> strList97 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList59, filteringMode94);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + filteringMode14 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode14.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode29.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str32, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "chinese");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "chinese" + "'", str55, "chinese");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "French (France)" + "'", str56, "French (France)");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "chinese");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(languageRangeList62);
        org.junit.Assert.assertTrue("'" + category63 + "' != '" + java.util.Locale.Category.FORMAT + "'", category63.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str70, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "kor" + "'", str71, "kor");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ko" + "'", str73, "ko");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(languageRangeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str87, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ko");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + filteringMode94 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode94.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertNotNull(strList97);
    }

    @Test
    public void test13603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13603");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.lang.String str6 = locale1.toLanguageTag();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale1);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) -1);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.getScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale29, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList35, filteringMode37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale40.getScript();
        java.lang.String str43 = locale40.getVariant();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.lang.String str48 = locale45.getISO3Language();
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getNumberInstance(locale54);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.lang.String str61 = locale59.getScript();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.lang.String str65 = locale63.getScript();
        java.lang.String str66 = locale63.getVariant();
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale40, locale44, locale45, locale49, locale51, locale54, locale57, locale59, locale63 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale73.getDisplayLanguage(locale74);
        java.lang.String str76 = locale74.getScript();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale74, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList80, filteringMode82);
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList68, filteringMode82);
        java.util.Locale locale85 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList68);
        boolean boolean86 = parsePosition10.equals((java.lang.Object) languageRangeList12);
        java.lang.Object obj87 = numberFormat7.parseObject("kor", parsePosition10);
        int int88 = numberFormat7.getMinimumIntegerDigits();
        int int89 = numberFormat7.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ko" + "'", str6, "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode37.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str64, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str75, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode82.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNull(locale85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test13604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13604");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat3.setCurrency(currency8);
        boolean boolean11 = numberFormat3.isGroupingUsed();
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction20 = fractionFormat15.parse("french", parsePosition19);
        java.lang.Object obj21 = numberFormat3.parseObject("\2430.00", parsePosition19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.lang.Object obj23 = numberFormat3.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u6cd5\u6587" + "'", str14, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj23);
    }

    @Test
    public void test13605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13605");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (-3.25f), 468);
    }

    @Test
    public void test13606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13606");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction(0.052000000000000005d, 120.0d, 117);
    }

    @Test
    public void test13607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13607");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CAN");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        boolean boolean12 = fraction8.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.add(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction24.abs();
        double double27 = fraction26.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str31 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction30);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int36 = fraction35.intValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction32.subtract(fraction35);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction30.add(fraction32);
        int int39 = fraction38.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int47 = fraction46.intValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction43.subtract(fraction46);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction42.multiply(fraction43);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction38.multiply(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction49.negate();
        float float52 = fraction49.floatValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction26.multiply(fraction49);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction49.abs();
        boolean boolean55 = languageRange1.equals((java.lang.Object) fraction54);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "can" + "'", str2, "can");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "can" + "'", str4, "can");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 117.0d + "'", double27 == 117.0d);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-117 / 1" + "'", str31, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-117) + "'", int36 == (-117));
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-117) + "'", int47 == (-117));
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test13608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13608");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.util.Currency currency42 = numberFormat39.getCurrency();
        numberFormat38.setCurrency(currency42);
        numberFormat35.setCurrency(currency42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits((-1));
        java.util.Currency currency48 = numberFormat45.getCurrency();
        java.lang.String str50 = numberFormat45.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat35, numberFormat45);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.String str55 = numberFormat53.format(100L);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = numberFormat57.parseObject("hi!", parsePosition60);
        java.lang.Number number62 = numberFormat53.parse("10,000%", parsePosition60);
        int int63 = parsePosition60.getErrorIndex();
        int int64 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat51.parse("French", parsePosition60);
        int int66 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat32.parse("fran\347ais", parsePosition60);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance();
        numberFormat68.setMaximumIntegerDigits((-1));
        java.util.Currency currency71 = numberFormat68.getCurrency();
        properFractionFormat32.setWholeFormat(numberFormat68);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance();
        numberFormat73.setMaximumIntegerDigits((-1));
        java.util.Currency currency76 = numberFormat73.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73);
        numberFormat73.setMaximumFractionDigits((int) (short) -117);
        properFractionFormat32.setWholeFormat(numberFormat73);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getCurrencyInstance();
        numberFormat81.setMinimumIntegerDigits((-1));
        properFractionFormat32.setWholeFormat(numberFormat81);
        java.text.NumberFormat numberFormat85 = properFractionFormat32.getWholeFormat();
        org.apache.commons.math.fraction.Fraction fraction87 = properFractionFormat32.parse("1");
        java.text.NumberFormat numberFormat88 = properFractionFormat32.getNumeratorFormat();
        numberFormat88.setGroupingUsed(true);
        boolean boolean91 = numberFormat88.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat92 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat88);
        java.text.NumberFormat numberFormat93 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat92.setWholeFormat(numberFormat93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: whole format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0%" + "'", str50, "0%");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(currency76);
        org.junit.Assert.assertEquals(currency76.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test13609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13609");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        boolean boolean6 = locale0.hasExtensions();
        java.lang.String str7 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ko" + "'", str7, "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test13610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13610");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat3 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj9 = numberFormat5.parseObject("hi!", parsePosition8);
        org.apache.commons.math.fraction.Fraction fraction10 = fractionFormat1.parse("-117 / 1", parsePosition8);
        java.lang.String str11 = parsePosition8.toString();
        int int12 = parsePosition8.getIndex();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("14");
        java.lang.String str15 = locale14.toLanguageTag();
        boolean boolean16 = parsePosition8.equals((java.lang.Object) locale14);
        java.util.Locale locale18 = new java.util.Locale("java.text.ParsePosition[index=-117,errorIndex=9]");
        boolean boolean19 = parsePosition8.equals((java.lang.Object) locale18);
        java.util.Locale locale20 = locale18.stripExtensions();
        java.lang.String str21 = locale18.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=9]" + "'", str11, "java.text.ParsePosition[index=10,errorIndex=9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "und" + "'", str15, "und");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals(locale18.toString(), "java.text.parseposition[index=-117,errorindex=9]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "java.text.parseposition[index=-117,errorindex=9]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.text.parseposition[index=-117,errorindex=9]" + "'", str21, "java.text.parseposition[index=-117,errorindex=9]");
    }

    @Test
    public void test13611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13611");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("US");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        double double8 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "us" + "'", str2, "us");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "us" + "'", str3, "us");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "us" + "'", str4, "us");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "us" + "'", str7, "us");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test13612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13612");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale2.toLanguageTag();
        java.util.Locale.setDefault(locale2);
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en-CA" + "'", str3, "en-CA");
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test13613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13613");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 1);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction5 = fraction1.multiply(fraction4);
        org.apache.commons.math.fraction.Fraction fraction6 = fraction4.reciprocal();
        java.lang.String str7 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction4);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-117 / 1" + "'", str7, "-117 / 1");
    }

    @Test
    public void test13614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13614");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        numberFormat3.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.util.Currency currency10 = numberFormat7.getCurrency();
        numberFormat6.setCurrency(currency10);
        numberFormat3.setCurrency(currency10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.util.Currency currency16 = numberFormat13.getCurrency();
        java.lang.String str18 = numberFormat13.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat3, numberFormat13);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance();
        java.lang.String str23 = numberFormat21.format(100L);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj29 = numberFormat25.parseObject("hi!", parsePosition28);
        java.lang.Number number30 = numberFormat21.parse("10,000%", parsePosition28);
        int int31 = parsePosition28.getErrorIndex();
        int int32 = parsePosition28.getIndex();
        org.apache.commons.math.fraction.Fraction fraction33 = properFractionFormat19.parse("French", parsePosition28);
        int int34 = parsePosition28.getIndex();
        java.lang.Object obj35 = numberFormat0.parseObject("\uce90\ub098\ub2e4", parsePosition28);
        int int36 = numberFormat0.getMinimumIntegerDigits();
        java.lang.String str38 = numberFormat0.format((double) 100L);
        boolean boolean39 = numberFormat0.isGroupingUsed();
        boolean boolean40 = numberFormat0.isGroupingUsed();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0%" + "'", str18, "0%");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100" + "'", str23, "100");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(number30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNull(fraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10,000%" + "'", str38, "10,000%");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test13615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13615");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.util.Locale locale5 = locale0.stripExtensions();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str8 = locale0.getVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test13616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13616");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = new java.util.Locale("-117 / 1", "14", "it_IT");
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.lang.String str12 = locale10.getDisplayLanguage();
        java.lang.String str13 = locale5.getDisplayName(locale10);
        java.lang.String str14 = locale4.getDisplayScript(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance(locale16);
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale19.getDisplayCountry();
        java.lang.String str21 = locale18.getDisplayCountry(locale19);
        java.lang.String str22 = locale19.getISO3Country();
        java.lang.String str23 = locale16.getDisplayVariant(locale19);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.lang.String str28 = locale26.getScript();
        java.lang.String str29 = locale26.getVariant();
        java.util.Locale.setDefault(category24, locale26);
        java.lang.String str31 = locale26.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.UK;
        java.lang.String str33 = locale32.getDisplayScript();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = locale32.getDisplayCountry(locale35);
        java.lang.String str37 = locale26.getDisplayVariant(locale32);
        java.lang.String str38 = locale16.getDisplayVariant(locale32);
        java.lang.String str39 = locale5.getDisplayCountry(locale32);
        java.util.Locale.setDefault(category0, locale32);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale4.toString(), "-117 / 1_14_it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "coreano" + "'", str11, "coreano");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Italian" + "'", str12, "Italian");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "coreano" + "'", str13, "coreano");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Canada" + "'", str20, "Canada");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "China" + "'", str21, "China");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CAN" + "'", str22, "CAN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "United Kingdom" + "'", str36, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test13617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13617");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder16 = builder13.setExtension('a', "fr-CA");
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale17.getVariant();
        boolean boolean19 = locale17.hasExtensions();
        java.util.Locale.setDefault(locale17);
        java.util.Locale locale21 = locale17.stripExtensions();
        java.util.Locale.Builder builder22 = builder16.setLocale(locale21);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder16.addUnicodeLocaleAttribute("35 / 116");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 35 / 116 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test13618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13618");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.UK;
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale11.getDisplayName(locale13);
        java.lang.String str15 = locale13.getDisplayLanguage();
        java.lang.String str16 = locale13.getISO3Country();
        java.util.Locale.setDefault(category0, locale13);
        java.lang.String str18 = locale13.getDisplayLanguage();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale13);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "coreano" + "'", str14, "coreano");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Italian" + "'", str15, "Italian");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "italiano" + "'", str18, "italiano");
        org.junit.Assert.assertNotNull(numberFormat19);
    }

    @Test
    public void test13619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13619");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) -1, (double) ' ', 13455);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        int int5 = fraction4.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str10 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int15 = fraction14.intValue();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.subtract(fraction14);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction9.add(fraction11);
        int int18 = fraction17.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction21 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.multiply(fraction21);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getNumberInstance();
        boolean boolean24 = numberFormat23.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23);
        boolean boolean26 = numberFormat23.isParseIntegerOnly();
        boolean boolean27 = fraction21.equals((java.lang.Object) boolean26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction6.multiply(fraction21);
        int int29 = fraction28.intValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction4.subtract(fraction28);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-117 / 1" + "'", str10, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-117) + "'", int15 == (-117));
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(fraction30);
    }

    @Test
    public void test13620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13620");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getBeginIndex();
        int int8 = fieldPosition2.getField();
        java.lang.String str9 = fieldPosition2.toString();
        java.text.Format.Field field10 = fieldPosition2.getFieldAttribute();
        int int11 = fieldPosition2.getField();
        int int12 = fieldPosition2.getBeginIndex();
        java.text.Format.Field field13 = fieldPosition2.getFieldAttribute();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]" + "'", str9, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]");
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(field13);
    }

    @Test
    public void test13621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13621");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale5.getDisplayCountry(locale6);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.lang.String str16 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale12.getDisplayLanguage(locale17);
        java.lang.String str19 = locale6.getDisplayName(locale17);
        java.util.Locale.Builder builder20 = builder2.setLocale(locale6);
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder21.setLanguage("\24432.00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ?32.00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587" + "'", str19, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test13622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13622");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean18 = numberFormat17.isGroupingUsed();
        numberFormat17.setParseIntegerOnly(false);
        java.lang.Number number22 = numberFormat17.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        numberFormat26.setMaximumIntegerDigits((-1));
        java.util.Currency currency29 = numberFormat26.getCurrency();
        numberFormat25.setCurrency(currency29);
        java.lang.String str32 = numberFormat25.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat25, numberFormat34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17, numberFormat25);
        int int37 = numberFormat17.getMaximumIntegerDigits();
        int int38 = numberFormat17.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + 0L + "'", number22, 0L);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "10,000%" + "'", str32, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test13623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13623");
        java.util.Locale locale1 = new java.util.Locale("Franz\366sisch");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        java.lang.String str6 = locale4.getScript();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder9 = builder2.removeUnicodeLocaleAttribute("zho");
        java.util.Locale locale10 = builder2.build();
        java.lang.String str11 = locale1.getDisplayCountry(locale10);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "franz\366sisch");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(numberFormat12);
    }

    @Test
    public void test13624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13624");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str3 = locale0.getDisplayVariant();
        java.util.Locale locale5 = new java.util.Locale("fr");
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale locale7 = java.util.Locale.UK;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale9.toLanguageTag();
        java.lang.String str13 = locale6.getDisplayLanguage(locale9);
        java.lang.String str14 = locale6.getISO3Language();
        java.lang.String str15 = locale0.getDisplayVariant(locale6);
        java.lang.String str16 = locale0.getLanguage();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale0);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getNumberInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Canada" + "'", str1, "Canada");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ko" + "'", str12, "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str13, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fra" + "'", str14, "fra");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "en" + "'", str16, "en");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test13625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13625");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat2 = fractionFormat0.getNumeratorFormat();
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray6 = parseException5.getSuppressed();
        boolean boolean7 = numberFormat2.equals((java.lang.Object) throwableArray6);
        numberFormat2.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat11 = properFractionFormat10.getNumeratorFormat();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale13.getScript();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale13);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.util.Currency currency25 = numberFormat22.getCurrency();
        numberFormat21.setCurrency(currency25);
        numberFormat18.setCurrency(currency25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17, numberFormat18);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        numberFormat29.setMaximumIntegerDigits((-1));
        numberFormat29.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean35 = numberFormat34.isGroupingUsed();
        numberFormat34.setParseIntegerOnly(false);
        java.lang.Number number39 = numberFormat34.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat29, numberFormat34);
        java.text.NumberFormat numberFormat41 = properFractionFormat40.getWholeFormat();
        java.lang.Object obj42 = numberFormat41.clone();
        java.lang.Object obj43 = numberFormat41.clone();
        boolean boolean44 = numberFormat16.equals((java.lang.Object) numberFormat41);
        java.math.RoundingMode roundingMode45 = numberFormat16.getRoundingMode();
        properFractionFormat10.setWholeFormat(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + number39 + "' != '" + 0L + "'", number39, 0L);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + roundingMode45 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode45.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test13626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13626");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getEndIndex();
        int int8 = fieldPosition2.getEndIndex();
        fieldPosition2.setEndIndex((int) ' ');
        fieldPosition2.setEndIndex((int) (short) -117);
        fieldPosition2.setBeginIndex((int) (byte) -116);
        fieldPosition2.setEndIndex((int) (short) 0);
        java.text.Format.Field field17 = fieldPosition2.getFieldAttribute();
        int int18 = fieldPosition2.getEndIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(field17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test13627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13627");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("anglais");
        java.lang.String str2 = locale1.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale13.getISO3Language();
        java.lang.String str17 = locale12.getDisplayCountry(locale13);
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale13.getDisplayLanguage(locale18);
        java.lang.String str20 = locale7.getDisplayName(locale18);
        java.lang.String str21 = locale7.getDisplayCountry();
        java.lang.String str22 = locale3.getDisplayVariant(locale7);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        java.lang.String str27 = locale23.getDisplayCountry();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = locale23.getDisplayLanguage(locale28);
        java.lang.String str30 = locale7.getDisplayVariant(locale28);
        java.lang.String str31 = locale1.getDisplayName(locale7);
        java.lang.String str33 = locale1.getExtension('x');
        java.lang.String str34 = locale1.toLanguageTag();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "anglais");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "anglais" + "'", str2, "anglais");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587" + "'", str19, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u671d\u9c9c\u6587" + "'", str20, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u97d3\u6587" + "'", str29, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "anglais" + "'", str31, "anglais");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "anglais" + "'", str34, "anglais");
    }

    @Test
    public void test13628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13628");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.lang.String str6 = locale4.toLanguageTag();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale9.getScript();
        java.lang.String str12 = locale9.getVariant();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale14 = java.util.Locale.getDefault(category7);
        java.util.Locale locale15 = java.util.Locale.getDefault(category7);
        java.lang.String str16 = locale15.getDisplayVariant();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale17.getDisplayCountry();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale17);
        java.lang.String str20 = locale15.getDisplayLanguage(locale17);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale22.getISO3Language();
        java.lang.String str26 = locale21.getDisplayCountry(locale22);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale28.getISO3Language();
        java.lang.String str32 = locale27.getDisplayCountry(locale28);
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale28.getDisplayLanguage(locale33);
        java.lang.String str35 = locale22.getDisplayName(locale33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale22);
        java.lang.String str37 = locale22.getLanguage();
        java.lang.String str38 = locale15.getDisplayScript(locale22);
        java.lang.String str39 = locale4.getDisplayCountry(locale15);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ko" + "'", str6, "ko");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uce90\ub098\ub2e4" + "'", str18, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Korean" + "'", str20, "Korean");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "kor" + "'", str31, "kor");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u671d\u9c9c\u6587" + "'", str34, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u671d\u9c9c\u6587" + "'", str35, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ko" + "'", str37, "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test13629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13629");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Kanada");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.util.Locale locale9 = locale7.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str13 = locale10.getDisplayName(locale11);
        java.lang.String str14 = locale7.getDisplayName(locale11);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale.setDefault(locale11);
        boolean boolean17 = languageRange1.equals((java.lang.Object) locale11);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kanada" + "'", str3, "kanada");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kanada" + "'", str4, "kanada");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cor\351en" + "'", str14, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test13630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13630");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 0, (double) '4', 2);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 10, (int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction3.divide(fraction6);
        int int8 = fraction3.getDenominator();
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) -1);
        int int11 = parsePosition10.getErrorIndex();
        int int12 = parsePosition10.getIndex();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int17 = fraction16.intValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.subtract(fraction16);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        boolean boolean21 = parsePosition10.equals((java.lang.Object) fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction3.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction24 = new org.apache.commons.math.fraction.Fraction((double) 0.0f);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int29 = fraction28.intValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.subtract(fraction28);
        boolean boolean32 = fraction28.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction28.reciprocal();
        float float34 = fraction28.floatValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction24.multiply(fraction28);
        long long36 = fraction35.longValue();
        float float37 = fraction35.floatValue();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str42 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction41);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int47 = fraction46.intValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction43.subtract(fraction46);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction41.add(fraction43);
        int int50 = fraction49.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction53 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction49.multiply(fraction53);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getNumberInstance();
        boolean boolean56 = numberFormat55.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = new org.apache.commons.math.fraction.FractionFormat(numberFormat55);
        boolean boolean58 = numberFormat55.isParseIntegerOnly();
        boolean boolean59 = fraction53.equals((java.lang.Object) boolean58);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction38.multiply(fraction53);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction35.subtract(fraction53);
        boolean boolean62 = fraction22.equals((java.lang.Object) fraction35);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-117) + "'", int17 == (-117));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-117) + "'", int29 == (-117));
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-117.0f) + "'", float34 == (-117.0f));
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-117 / 1" + "'", str42, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-117) + "'", int47 == (-117));
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test13631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13631");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        int int35 = numberFormat34.getMinimumFractionDigits();
        numberFormat34.setParseIntegerOnly(true);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "GBP");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test13632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13632");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale1.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Set<java.lang.Character> charSet6 = locale1.getExtensionKeys();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.UK;
        java.lang.String str10 = locale9.getDisplayScript();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale7.getDisplayScript(locale9);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale7.getDisplayVariant(locale13);
        java.lang.String str15 = locale7.getISO3Language();
        java.lang.String str16 = locale7.getScript();
        java.lang.String str17 = locale1.getDisplayVariant(locale7);
        java.util.Set<java.lang.String> strSet18 = locale1.getUnicodeLocaleKeys();
        java.lang.String str20 = locale1.getExtension('a');
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale23.getScript();
        java.lang.String str26 = locale23.getVariant();
        java.util.Locale.setDefault(category21, locale23);
        java.util.Locale locale28 = java.util.Locale.getDefault(category21);
        java.util.Locale locale29 = java.util.Locale.getDefault(category21);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale30.getDisplayVariant();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.lang.String str36 = locale33.getDisplayName(locale35);
        java.lang.String str37 = locale35.getDisplayLanguage();
        java.lang.String str38 = locale30.getDisplayName(locale35);
        java.util.Locale.setDefault(category21, locale35);
        java.lang.String str40 = locale35.getDisplayLanguage();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getIntegerInstance(locale35);
        java.lang.String str42 = locale1.getDisplayScript(locale35);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category21.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "coreano" + "'", str36, "coreano");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str37, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "coreano" + "'", str38, "coreano");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "italiano" + "'", str40, "italiano");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test13633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13633");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean1 = numberFormat0.isGroupingUsed();
        numberFormat0.setParseIntegerOnly(false);
        java.lang.Number number5 = numberFormat0.parse("0%");
        numberFormat0.setMaximumFractionDigits((int) (byte) 0);
        numberFormat0.setParseIntegerOnly(false);
        boolean boolean10 = numberFormat0.isGroupingUsed();
        java.lang.Object obj11 = numberFormat0.clone();
        numberFormat0.setGroupingUsed(false);
        boolean boolean14 = numberFormat0.isGroupingUsed();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + number5 + "' != '" + 0L + "'", number5, 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test13634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13634");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.multiply(fraction31);
        int int39 = fraction24.compareTo((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int44 = fraction43.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.subtract(fraction43);
        boolean boolean47 = fraction43.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction38.multiply(fraction43);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.setVariant("");
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        java.util.Locale.Builder builder53 = builder51.clearExtensions();
        java.util.Locale.Builder builder54 = builder51.clearExtensions();
        boolean boolean55 = fraction38.equals((java.lang.Object) builder51);
        java.util.Locale.Builder builder56 = builder51.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.addUnicodeLocaleAttribute("can");
        java.util.Locale.Builder builder59 = builder58.clear();
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder62 = builder60.setVariant("");
        java.util.Locale.Builder builder63 = builder62.clear();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale65.getDisplayLanguage(locale66);
        java.lang.String str68 = locale65.getISO3Language();
        java.lang.String str69 = locale64.getDisplayCountry(locale65);
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str71 = locale65.getDisplayLanguage(locale70);
        java.util.Locale.Builder builder72 = builder62.setLocale(locale70);
        java.util.Locale.Builder builder73 = builder72.clearExtensions();
        java.util.Locale.Builder builder74 = builder72.clearExtensions();
        java.util.Locale locale75 = builder74.build();
        java.util.Locale.Builder builder76 = builder59.setLocale(locale75);
        java.util.Locale locale77 = builder76.build();
        java.util.Locale.Builder builder79 = builder76.addUnicodeLocaleAttribute("deutsch");
        java.util.Locale.Builder builder80 = builder79.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder82 = builder80.setVariant("-2");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: -2 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-117) + "'", int44 == (-117));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str67, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "kor" + "'", str68, "kor");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u671d\u9c9c\u6587" + "'", str71, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test13635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13635");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setWholeFormat(numberFormat48);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale51.getDisplayCountry(locale52);
        java.lang.String str57 = locale52.toLanguageTag();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance(locale52);
        boolean boolean59 = numberFormat58.isParseIntegerOnly();
        properFractionFormat17.setDenominatorFormat(numberFormat58);
        numberFormat58.setMaximumIntegerDigits(0);
        java.text.NumberFormat.Field field63 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition65 = new java.text.FieldPosition((java.text.Format.Field) field63, (int) (short) 0);
        int int66 = fieldPosition65.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction68 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.abs();
        boolean boolean70 = fieldPosition65.equals((java.lang.Object) fraction69);
        java.text.Format.Field field71 = fieldPosition65.getFieldAttribute();
        fieldPosition65.setBeginIndex((-116));
        java.lang.String str74 = numberFormat58.format((java.lang.Object) (-116));
        java.lang.Object obj75 = numberFormat58.clone();
        numberFormat58.setMinimumIntegerDigits((-13455));
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "GBP");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "francese" + "'", str33, "francese");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko" + "'", str57, "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(field63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(field71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-\244 .00" + "'", str74, "-\244 .00");
        org.junit.Assert.assertNotNull(obj75);
    }

    @Test
    public void test13636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13636");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        java.lang.String str6 = locale3.getISO3Language();
        java.lang.String str7 = locale2.getDisplayCountry(locale3);
        java.lang.String str8 = locale3.toLanguageTag();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale3);
        java.lang.String str10 = locale0.getDisplayVariant(locale3);
        java.lang.String str12 = locale3.getExtension('u');
        java.lang.String str13 = locale3.getCountry();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str15 = locale3.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ko" + "'", str8, "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test13637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13637");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        numberFormat0.setMaximumIntegerDigits((int) (short) 100);
        numberFormat0.setMinimumFractionDigits((int) (short) 0);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) -1);
        java.lang.Number number10 = numberFormat0.parse("1 / 1", parsePosition9);
        java.lang.String str12 = numberFormat0.format((long) 100);
        java.util.Currency currency13 = numberFormat0.getCurrency();
        numberFormat0.setMaximumIntegerDigits((int) (short) 4);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNull(number10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10,000%" + "'", str12, "10,000%");
        org.junit.Assert.assertNotNull(currency13);
// flaky:         org.junit.Assert.assertEquals(currency13.toString(), "GBP");
    }

    @Test
    public void test13638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13638");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) 'a');
        java.text.ParseException parseException4 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.text.ParseException parseException7 = new java.text.ParseException("anglais", (-117));
        parseException4.addSuppressed((java.lang.Throwable) parseException7);
        int int9 = parseException4.getErrorOffset();
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) parseException4);
        java.text.ParseException parseException13 = new java.text.ParseException("", 9);
        parseException4.addSuppressed((java.lang.Throwable) parseException13);
        java.lang.String str15 = parseException13.toString();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.ParseException: " + "'", str15, "java.text.ParseException: ");
    }

    @Test
    public void test13639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13639");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.lang.String str6 = locale1.toLanguageTag();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale1);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) -1);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.getScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale29, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList35, filteringMode37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale40.getScript();
        java.lang.String str43 = locale40.getVariant();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.lang.String str48 = locale45.getISO3Language();
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getNumberInstance(locale54);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.lang.String str61 = locale59.getScript();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.lang.String str65 = locale63.getScript();
        java.lang.String str66 = locale63.getVariant();
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale40, locale44, locale45, locale49, locale51, locale54, locale57, locale59, locale63 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale73.getDisplayLanguage(locale74);
        java.lang.String str76 = locale74.getScript();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale74, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList80, filteringMode82);
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList68, filteringMode82);
        java.util.Locale locale85 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList68);
        boolean boolean86 = parsePosition10.equals((java.lang.Object) languageRangeList12);
        java.lang.Object obj87 = numberFormat7.parseObject("kor", parsePosition10);
        int int88 = numberFormat7.getMinimumIntegerDigits();
        java.text.ParsePosition parsePosition91 = new java.text.ParsePosition((int) (short) -1);
        java.lang.String str92 = parsePosition91.toString();
        parsePosition91.setIndex((int) 'x');
        java.lang.Number number95 = numberFormat7.parse("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=97]", parsePosition91);
        parsePosition91.setErrorIndex((int) (short) 35);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ko" + "'", str6, "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode37.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str64, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str75, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode82.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNull(locale85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=-1]" + "'", str92, "java.text.ParsePosition[index=-1,errorIndex=-1]");
        org.junit.Assert.assertNull(number95);
    }

    @Test
    public void test13640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13640");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("can", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap5);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.parse("francese");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList8, strMap9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale17.getScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray22 = new java.util.Locale[] { locale17, locale20, locale21 };
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList23, filteringMode25);
        java.lang.String[] strArray34 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strMap38);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.lang.String str46 = locale44.getScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale44, locale47, locale48 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList50, filteringMode52);
        java.lang.String[] strArray61 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strList62);
        java.util.Locale locale65 = java.util.Locale.UK;
        java.lang.String str66 = locale65.getDisplayScript();
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.lang.String str73 = locale71.getDisplayLanguage(locale72);
        java.lang.String str74 = locale72.getScript();
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Locale locale76 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray77 = new java.util.Locale[] { locale72, locale75, locale76 };
        java.util.ArrayList<java.util.Locale> localeList78 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList78, localeArray77);
        java.util.Locale.FilteringMode filteringMode80 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.util.Locale>) localeList78, filteringMode80);
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet67, filteringMode80);
        java.util.Locale.FilteringMode filteringMode83 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags(languageRangeList39, (java.util.Collection<java.lang.String>) strList82, filteringMode83);
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strSet12, filteringMode83);
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList85);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap87 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList88 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap87);
        java.util.Locale locale91 = new java.util.Locale("\u5fb7\u56fd", "United Kingdom");
        java.util.Set<java.lang.String> strSet92 = locale91.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags(languageRangeList88, (java.util.Collection<java.lang.String>) strSet92);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + filteringMode52 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode52.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str73, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + filteringMode80 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode80.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertTrue("'" + filteringMode83 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode83.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(languageRangeList88);
        org.junit.Assert.assertEquals(locale91.toString(), "\u5fb7\u56fd_UNITED KINGDOM");
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertNotNull(strList93);
    }

    @Test
    public void test13641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13641");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        java.lang.String str6 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test13642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13642");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale5.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder12 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder13.build();
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = locale14.getDisplayLanguage();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance(locale14);
        boolean boolean18 = locale14.hasExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u671d\u9c9c\u6587" + "'", str11, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "cinese" + "'", str16, "cinese");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test13643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13643");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getDisplayName();
        java.lang.String str4 = locale0.getExtension('x');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tedesco (Germania)" + "'", str2, "tedesco (Germania)");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test13644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13644");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("GBR");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray11 = new java.util.Locale[] { locale6, locale9, locale10 };
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale.FilteringMode filteringMode14 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList12, filteringMode14);
        java.lang.String[] strArray23 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap27);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.lang.String str35 = locale33.getScript();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale33, locale36, locale37 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList39, filteringMode41);
        java.util.Locale.FilteringMode filteringMode43 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList44 = java.util.Locale.filter(languageRangeList28, (java.util.Collection<java.util.Locale>) localeList42, filteringMode43);
        java.util.Locale locale45 = java.util.Locale.PRC;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags(languageRangeList28, (java.util.Collection<java.lang.String>) strSet46);
        java.lang.String str48 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet46);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + filteringMode14 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode14.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode41.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertTrue("'" + filteringMode43 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode43.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test13645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13645");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((-113), (-116));
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test13646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13646");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.lang.String str10 = fieldPosition2.toString();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getDisplayVariant();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale11.getDisplayScript(locale13);
        java.util.Set<java.lang.String> strSet17 = locale13.getUnicodeLocaleKeys();
        boolean boolean18 = fieldPosition2.equals((java.lang.Object) locale13);
        int int19 = fieldPosition2.getBeginIndex();
        int int20 = fieldPosition2.getBeginIndex();
        int int21 = fieldPosition2.getBeginIndex();
        fieldPosition2.setBeginIndex((int) (byte) 0);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test13647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13647");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 13571, 100);
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test13648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13648");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Taiwan");
        java.util.Locale locale5 = new java.util.Locale("-117 / 1", "14", "it_IT");
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getDisplayVariant();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.lang.String str13 = locale11.getDisplayLanguage();
        java.lang.String str14 = locale6.getDisplayName(locale11);
        java.lang.String str15 = locale5.getDisplayScript(locale6);
        java.lang.String str16 = locale5.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet17 = locale5.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode18 = null;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet17, filteringMode18);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.parse("chinese");
        java.util.Locale locale22 = java.util.Locale.US;
        java.lang.String str23 = locale22.getDisplayName();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags(languageRangeList21, (java.util.Collection<java.lang.String>) strSet24, filteringMode25);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList26);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertEquals(locale5.toString(), "-117 / 1_14_it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "coreano" + "'", str12, "coreano");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "italiano" + "'", str13, "italiano");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "coreano" + "'", str14, "coreano");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-117 / 1" + "'", str16, "-117 / 1");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "inglese (Stati Uniti)" + "'", str23, "inglese (Stati Uniti)");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test13649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13649");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("9", (-1.17d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.17");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13650");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale.Builder builder15 = builder11.addUnicodeLocaleAttribute("DEU");
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.lang.String str20 = locale18.getScript();
        java.util.Locale.setDefault(category16, locale18);
        java.util.Locale locale23 = new java.util.Locale("French");
        java.util.Locale locale24 = locale23.stripExtensions();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale23);
        java.lang.String str26 = locale23.toLanguageTag();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getIntegerInstance(locale23);
        java.util.Locale.setDefault(category16, locale23);
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder29.setVariant("");
        java.util.Locale.Builder builder32 = builder31.clear();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        boolean boolean37 = locale33.hasExtensions();
        java.util.Locale.Builder builder38 = builder31.setLocale(locale33);
        java.util.Locale.Builder builder39 = builder38.clear();
        java.util.Locale.Builder builder40 = builder38.clear();
        java.util.Locale.Builder builder42 = builder40.setLanguageTag("Chinese");
        java.util.Locale.Builder builder43 = builder42.clear();
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.lang.String str48 = locale46.getScript();
        java.lang.String str49 = locale46.getVariant();
        java.util.Locale.setDefault(category44, locale46);
        java.util.Locale locale51 = java.util.Locale.getDefault(category44);
        java.util.Locale locale52 = java.util.Locale.getDefault(category44);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance(locale52);
        java.util.Locale locale56 = new java.util.Locale("United Kingdom", "1");
        java.lang.String str57 = locale52.getDisplayLanguage(locale56);
        java.util.Locale.Builder builder58 = builder43.setLocale(locale52);
        boolean boolean59 = locale52.hasExtensions();
        java.util.Locale.setDefault(category16, locale52);
        java.util.Locale.Builder builder61 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder62 = builder61.clear();
        java.util.Locale.Builder builder64 = builder61.setVariant("");
        java.util.Locale.Builder builder65 = builder61.clearExtensions();
        java.util.Locale.Builder builder67 = builder65.setLanguageTag("anglais");
        java.util.Locale locale68 = builder67.build();
        java.util.Locale.Builder builder69 = builder67.clearExtensions();
        java.util.Locale.Builder builder71 = builder69.setLanguageTag("Deutsch");
        java.util.Locale locale72 = builder71.build();
        java.util.Locale.setDefault(category16, locale72);
        java.util.Locale.Builder builder74 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder76 = builder74.setVariant("");
        java.util.Locale.Builder builder77 = builder76.clear();
        java.util.Locale locale78 = builder77.build();
        java.util.Set<java.lang.Character> charSet79 = locale78.getExtensionKeys();
        java.util.Locale.Category category80 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.lang.String str83 = locale81.getDisplayLanguage(locale82);
        java.lang.String str84 = locale82.getScript();
        java.lang.String str85 = locale82.getVariant();
        java.util.Locale.setDefault(category80, locale82);
        java.lang.String str87 = locale82.getDisplayName();
        java.text.NumberFormat numberFormat88 = java.text.NumberFormat.getIntegerInstance(locale82);
        boolean boolean89 = locale82.hasExtensions();
        java.lang.String str90 = locale78.getDisplayName(locale82);
        java.util.Locale.setDefault(category16, locale82);
        java.util.Set<java.lang.Character> charSet92 = locale82.getExtensionKeys();
        java.util.Locale.Builder builder93 = builder11.setLocale(locale82);
        java.util.Locale locale94 = builder93.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale23.toString(), "french");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "french" + "'", str26, "french");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category44.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals(locale56.toString(), "united kingdom_1");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Korean" + "'", str57, "Korean");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "anglais");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "deutsch");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertTrue("'" + category80 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category80.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str83, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str87, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(charSet92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "ko");
    }

    @Test
    public void test13651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13651");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.lang.Object obj5 = fractionFormat4.clone();
        java.text.NumberFormat numberFormat6 = fractionFormat4.getDenominatorFormat();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale9.getScript();
        java.lang.String str12 = locale9.getVariant();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale14 = java.util.Locale.getDefault(category7);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.util.Locale.setDefault(category7, locale15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getIntegerInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        int int20 = numberFormat18.getMaximumFractionDigits();
        int int21 = numberFormat18.getMaximumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        boolean boolean23 = numberFormat18.isGroupingUsed();
        fractionFormat4.setNumeratorFormat(numberFormat18);
        java.text.ParsePosition parsePosition26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction27 = fractionFormat4.parse("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test13652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13652");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale14 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        java.lang.String str18 = locale17.getLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
    }

    @Test
    public void test13653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13653");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) ' ', (-1));
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        long long4 = fraction3.longValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
    }

    @Test
    public void test13654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13654");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.lang.String str4 = locale2.getScript();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("zho");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale10.getScript();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale14 = locale10.stripExtensions();
        java.lang.String str15 = locale8.getDisplayName(locale14);
        java.util.Locale locale19 = new java.util.Locale("10,000%", "\ud55c\uad6d\uc5b4", "32");
        java.lang.String str20 = locale19.toLanguageTag();
        java.lang.String str21 = locale8.getDisplayCountry(locale19);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str15, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "\ud55c\uad6d\uc5b4_32");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "x-lvariant-32" + "'", str20, "x-lvariant-32");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Taiwan" + "'", str21, "Taiwan");
        org.junit.Assert.assertNotNull(strSet22);
    }

    @Test
    public void test13655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13655");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str4 = numberFormat2.format((double) 52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat6 = null;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Currency currency15 = numberFormat12.getCurrency();
        numberFormat11.setCurrency(currency15);
        numberFormat8.setCurrency(currency15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        java.lang.String str23 = numberFormat18.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat8, numberFormat18);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance();
        java.lang.String str27 = numberFormat25.format(100L);
        properFractionFormat24.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance();
        java.lang.String str31 = numberFormat29.format(100L);
        int int32 = numberFormat29.getMinimumFractionDigits();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale34);
        java.lang.String str38 = numberFormat36.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat29, numberFormat36);
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getNumeratorFormat();
        int int43 = numberFormat42.getMinimumFractionDigits();
        properFractionFormat39.setWholeFormat(numberFormat42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        boolean boolean51 = numberFormat45.equals((java.lang.Object) locale49);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale49);
        boolean boolean53 = numberFormat42.equals((java.lang.Object) numberFormat52);
        numberFormat52.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat6, numberFormat52);
        int int57 = numberFormat2.getMinimumFractionDigits();
        java.util.Locale.Category category58 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayLanguage(locale60);
        java.lang.String str62 = locale60.getScript();
        java.lang.String str63 = locale60.getVariant();
        java.util.Locale.setDefault(category58, locale60);
        java.util.Locale locale65 = java.util.Locale.getDefault(category58);
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale66);
        java.util.Locale.setDefault(category58, locale66);
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getIntegerInstance(locale66);
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale66);
        java.util.Currency currency71 = numberFormat70.getCurrency();
        numberFormat2.setCurrency(currency71);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Canada" + "'", str1, "Canada");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$52.00" + "'", str4, "$52.00");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
// flaky:         org.junit.Assert.assertEquals(currency15.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
// flaky:         org.junit.Assert.assertEquals(currency21.toString(), "GBP");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0%" + "'", str23, "0%");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "32" + "'", str38, "32");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + category58 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category58.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str61, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "XXX");
    }

    @Test
    public void test13656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13656");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        numberFormat2.setParseIntegerOnly(true);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj10 = numberFormat6.parseObject("hi!", parsePosition9);
        parsePosition9.setErrorIndex(10);
        java.lang.String str13 = parsePosition9.toString();
        java.lang.Number number14 = numberFormat2.parse("1 / 1", parsePosition9);
        int int15 = numberFormat2.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2);
        java.lang.String str18 = numberFormat2.format((-11L));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str13, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(number14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-11" + "'", str18, "-11");
    }

    @Test
    public void test13657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13657");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.negate();
        int int14 = fraction11.getDenominator();
        int int15 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.abs();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 117 + "'", int15 == 117);
        org.junit.Assert.assertNotNull(fraction16);
    }

    @Test
    public void test13658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13658");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (-4), 100.0d, 13455);
    }

    @Test
    public void test13659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13659");
        java.text.ParseException parseException2 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        int int4 = parseException2.getErrorOffset();
        java.text.ParseException parseException7 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray8 = parseException7.getSuppressed();
        java.text.ParseException parseException11 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray12 = parseException11.getSuppressed();
        parseException7.addSuppressed((java.lang.Throwable) parseException11);
        java.lang.Throwable[] throwableArray14 = parseException7.getSuppressed();
        java.text.ParseException parseException17 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray18 = parseException17.getSuppressed();
        java.text.ParseException parseException21 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray22 = parseException21.getSuppressed();
        parseException17.addSuppressed((java.lang.Throwable) parseException21);
        java.lang.Throwable[] throwableArray24 = parseException17.getSuppressed();
        parseException7.addSuppressed((java.lang.Throwable) parseException17);
        parseException2.addSuppressed((java.lang.Throwable) parseException7);
        java.lang.Throwable[] throwableArray27 = parseException2.getSuppressed();
        java.lang.Throwable[] throwableArray28 = parseException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test13660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13660");
        java.util.Locale locale1 = new java.util.Locale("zh_TW");
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance(locale1);
        numberFormat2.setMinimumFractionDigits(0);
        java.lang.Object obj5 = numberFormat2.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "zh_tw");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(obj5);
    }

    @Test
    public void test13661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13661");
        java.text.ParseException parseException2 = new java.text.ParseException("\u52a0\u62ff\u5927", (int) ' ');
        java.lang.String str3 = parseException2.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u52a0\u62ff\u5927" + "'", str3, "\u52a0\u62ff\u5927");
    }

    @Test
    public void test13662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13662");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        int int8 = fraction6.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction6.abs();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(fraction9);
    }

    @Test
    public void test13663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13663");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.util.Locale locale1 = java.util.Locale.UK;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.lang.String str5 = locale1.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.Object obj7 = numberFormat6.clone();
        fractionFormat0.setDenominatorFormat(numberFormat6);
        int int9 = numberFormat6.getMaximumFractionDigits();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.util.Currency currency18 = numberFormat15.getCurrency();
        numberFormat14.setCurrency(currency18);
        numberFormat11.setCurrency(currency18);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        numberFormat21.setMaximumIntegerDigits((-1));
        java.util.Currency currency24 = numberFormat21.getCurrency();
        java.lang.String str26 = numberFormat21.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat11, numberFormat21);
        numberFormat11.setMinimumIntegerDigits((int) 'x');
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance();
        java.lang.String str33 = numberFormat31.format(100L);
        int int34 = numberFormat31.getMinimumFractionDigits();
        numberFormat31.setMaximumIntegerDigits(1);
        boolean boolean38 = numberFormat31.equals((java.lang.Object) (-117));
        java.lang.String str40 = numberFormat31.format((double) (-1));
        fractionFormat30.setDenominatorFormat(numberFormat31);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        numberFormat42.setMaximumIntegerDigits((-1));
        java.util.Currency currency45 = numberFormat42.getCurrency();
        java.lang.String str47 = numberFormat42.format((double) 10);
        boolean boolean49 = numberFormat42.equals((java.lang.Object) "");
        java.util.Currency currency50 = numberFormat42.getCurrency();
        boolean boolean51 = numberFormat31.equals((java.lang.Object) currency50);
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition((int) (byte) 0);
        java.lang.Object obj55 = numberFormat31.parseObject("zh_CN", parsePosition54);
        java.math.RoundingMode roundingMode56 = numberFormat31.getRoundingMode();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat11, numberFormat31);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance();
        numberFormat59.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance();
        numberFormat63.setMaximumIntegerDigits((-1));
        java.util.Currency currency66 = numberFormat63.getCurrency();
        numberFormat62.setCurrency(currency66);
        numberFormat59.setCurrency(currency66);
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance();
        numberFormat69.setMaximumIntegerDigits((-1));
        java.util.Currency currency72 = numberFormat69.getCurrency();
        java.lang.String str74 = numberFormat69.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58, numberFormat59, numberFormat69);
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getInstance();
        java.lang.String str78 = numberFormat76.format(100L);
        properFractionFormat75.setWholeFormat(numberFormat76);
        properFractionFormat57.setNumeratorFormat(numberFormat76);
        java.util.Locale locale82 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat83 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale82);
        java.text.NumberFormat numberFormat84 = fractionFormat83.getNumeratorFormat();
        java.text.NumberFormat numberFormat85 = fractionFormat83.getNumeratorFormat();
        int int86 = numberFormat85.getMinimumIntegerDigits();
        numberFormat85.setMaximumIntegerDigits((int) ' ');
        java.lang.Object obj89 = numberFormat85.clone();
        java.text.ParsePosition parsePosition92 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Number number93 = numberFormat85.parse("\uc911\uad6d\uc5b4\ub300\ub9cc)", parsePosition92);
        java.lang.String str94 = parsePosition92.toString();
        java.lang.String str95 = parsePosition92.toString();
        org.apache.commons.math.fraction.Fraction fraction96 = properFractionFormat57.parse("-2 / 1", parsePosition92);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
// flaky:         org.junit.Assert.assertEquals(currency18.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency24);
// flaky:         org.junit.Assert.assertEquals(currency24.toString(), "GBP");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0%" + "'", str26, "0%");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100" + "'", str33, "100");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1" + "'", str40, "-1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(currency45);
// flaky:         org.junit.Assert.assertEquals(currency45.toString(), "GBP");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0%" + "'", str47, "0%");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(currency50);
// flaky:         org.junit.Assert.assertEquals(currency50.toString(), "GBP");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode56.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(currency66);
// flaky:         org.junit.Assert.assertEquals(currency66.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(currency72);
// flaky:         org.junit.Assert.assertEquals(currency72.toString(), "GBP");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0%" + "'", str74, "0%");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "100" + "'", str78, "100");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNull(number93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str94, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str95, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(fraction96);
    }

    @Test
    public void test13664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13664");
        java.util.Locale locale3 = new java.util.Locale("120", "zh_tw", "java.text.ParseException: ");
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale5);
        java.lang.String str9 = locale3.getDisplayVariant(locale5);
        java.lang.String str10 = locale5.getDisplayVariant();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 10);
        parsePosition15.setErrorIndex((int) (byte) 1);
        java.lang.Object obj18 = fractionFormat12.parseObject("United Kingdom", parsePosition15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj23 = numberFormat19.parseObject("hi!", parsePosition22);
        fractionFormat12.setDenominatorFormat(numberFormat19);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        int int27 = numberFormat26.getMaximumIntegerDigits();
        java.lang.String str29 = numberFormat26.format((long) (byte) 1);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance();
        numberFormat31.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.util.Currency currency38 = numberFormat35.getCurrency();
        numberFormat34.setCurrency(currency38);
        numberFormat31.setCurrency(currency38);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance();
        numberFormat41.setMaximumIntegerDigits((-1));
        java.util.Currency currency44 = numberFormat41.getCurrency();
        java.lang.String str46 = numberFormat41.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30, numberFormat31, numberFormat41);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance();
        java.lang.String str51 = numberFormat49.format(100L);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj57 = numberFormat53.parseObject("hi!", parsePosition56);
        java.lang.Number number58 = numberFormat49.parse("10,000%", parsePosition56);
        int int59 = parsePosition56.getErrorIndex();
        java.lang.Object obj60 = properFractionFormat47.parseObject("French", parsePosition56);
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = locale62.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale62);
        java.text.NumberFormat numberFormat65 = fractionFormat64.getNumeratorFormat();
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) (short) 10);
        parsePosition68.setErrorIndex((int) (byte) 1);
        parsePosition68.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction73 = fractionFormat64.parse("French", parsePosition68);
        org.apache.commons.math.fraction.Fraction fraction74 = properFractionFormat47.parse("", parsePosition68);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale75.getDisplayLanguage(locale76);
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getNumberInstance(locale76);
        java.lang.Object obj79 = numberFormat78.clone();
        properFractionFormat47.setWholeFormat(numberFormat78);
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.lang.String str84 = locale82.getDisplayLanguage(locale83);
        java.lang.String str85 = locale82.getISO3Language();
        java.lang.String str86 = locale81.getDisplayCountry(locale82);
        java.lang.String str87 = locale82.toLanguageTag();
        java.text.NumberFormat numberFormat88 = java.text.NumberFormat.getCurrencyInstance(locale82);
        boolean boolean89 = numberFormat88.isParseIntegerOnly();
        properFractionFormat47.setDenominatorFormat(numberFormat88);
        boolean boolean91 = numberFormat88.isParseIntegerOnly();
        numberFormat88.setMinimumIntegerDigits((int) (short) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat94 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat88);
        fractionFormat12.setDenominatorFormat(numberFormat88);
        java.text.NumberFormat numberFormat96 = fractionFormat12.getNumeratorFormat();
        boolean boolean97 = locale5.equals((java.lang.Object) numberFormat96);
        org.junit.Assert.assertEquals(locale3.toString(), "120_ZH_TW_java.text.ParseException: ");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.ParseException: " + "'", str9, "java.text.ParseException: ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100%" + "'", str29, "100%");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0%" + "'", str46, "0%");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "100" + "'", str51, "100");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(number58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str63, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertNull(fraction74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str77, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str84, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "kor" + "'", str85, "kor");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ko" + "'", str87, "ko");
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(numberFormat96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test13665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13665");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Allemagne");
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        java.lang.String str6 = locale3.getISO3Language();
        java.lang.String str7 = locale2.getDisplayCountry(locale3);
        boolean boolean8 = locale2.hasExtensions();
        java.lang.String str9 = locale2.toLanguageTag();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale12.getScript();
        java.lang.String str15 = locale12.getVariant();
        java.util.Locale.setDefault(category10, locale12);
        java.lang.String str17 = locale12.getDisplayName();
        java.util.Locale locale18 = java.util.Locale.UK;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = locale18.getDisplayCountry(locale21);
        java.lang.String str23 = locale12.getDisplayVariant(locale18);
        java.lang.String str24 = locale12.getDisplayName();
        java.lang.String str26 = locale12.getUnicodeLocaleType("FR");
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getNumberInstance(locale28);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getIntegerInstance(locale28);
        java.lang.String str32 = locale28.getCountry();
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = locale28.getDisplayCountry(locale33);
        java.lang.String str35 = locale28.toLanguageTag();
        java.lang.String str36 = locale28.getVariant();
        java.lang.String str37 = locale12.getDisplayScript(locale28);
        java.lang.String str38 = locale2.getDisplayVariant(locale12);
        boolean boolean39 = locale1.equals((java.lang.Object) str38);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko" + "'", str9, "ko");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "United Kingdom" + "'", str22, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ko" + "'", str35, "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test13666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13666");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance();
        java.lang.Object obj4 = null;
        boolean boolean5 = numberFormat3.equals(obj4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat9.setCurrency(currency13);
        numberFormat6.setCurrency(currency13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.lang.String str22 = locale20.getScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale20, locale23, locale24 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList26, filteringMode28);
        java.lang.String[] strArray37 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList38);
        boolean boolean41 = numberFormat6.equals((java.lang.Object) strList38);
        numberFormat6.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale45.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        java.text.NumberFormat numberFormat48 = fractionFormat47.getNumeratorFormat();
        java.text.ParsePosition parsePosition51 = new java.text.ParsePosition((int) (short) 10);
        parsePosition51.setErrorIndex((int) (byte) 1);
        parsePosition51.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction56 = fractionFormat47.parse("French", parsePosition51);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance();
        numberFormat58.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance();
        numberFormat62.setMaximumIntegerDigits((-1));
        java.util.Currency currency65 = numberFormat62.getCurrency();
        numberFormat61.setCurrency(currency65);
        numberFormat58.setCurrency(currency65);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance();
        numberFormat68.setMaximumIntegerDigits((-1));
        java.util.Currency currency71 = numberFormat68.getCurrency();
        java.lang.String str73 = numberFormat68.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57, numberFormat58, numberFormat68);
        fractionFormat47.setDenominatorFormat(numberFormat68);
        properFractionFormat44.setDenominatorFormat(numberFormat68);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat3, numberFormat68);
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition((int) ' ');
        java.lang.Object obj81 = numberFormat3.parseObject("JAVA.TEXT.FIELDPOSITION[FIELD=-117,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(SIGN),BEGININDEX=0,ENDINDEX=0]", parsePosition80);
        parsePosition80.setIndex((-131));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + filteringMode28 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode28.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str46, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(currency65);
        org.junit.Assert.assertEquals(currency65.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0%" + "'", str73, "0%");
        org.junit.Assert.assertEquals("'" + obj81 + "' != '" + 17L + "'", obj81, 17L);
    }

    @Test
    public void test13667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13667");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        java.lang.String str13 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction12);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int18 = fraction17.intValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction14.subtract(fraction17);
        boolean boolean21 = fraction17.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int30 = fraction29.intValue();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction26.subtract(fraction29);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction25.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction17.add(fraction32);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str39 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int44 = fraction43.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.subtract(fraction43);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction38.add(fraction40);
        int int47 = fraction46.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction50 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction46.multiply(fraction50);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance();
        boolean boolean53 = numberFormat52.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat52);
        boolean boolean55 = numberFormat52.isParseIntegerOnly();
        boolean boolean56 = fraction50.equals((java.lang.Object) boolean55);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction35.multiply(fraction50);
        int int58 = fraction57.intValue();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction34.add(fraction57);
        int int60 = fraction57.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str64 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction63);
        org.apache.commons.math.fraction.Fraction fraction66 = new org.apache.commons.math.fraction.Fraction((double) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction63.subtract(fraction66);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction57.subtract(fraction63);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction12.add(fraction63);
        java.lang.String str70 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction12);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-117 / 1" + "'", str13, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-117) + "'", int18 == (-117));
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-117) + "'", int30 == (-117));
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-117 / 1" + "'", str39, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-117) + "'", int44 == (-117));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-117 / 1" + "'", str64, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-117 / 1" + "'", str70, "-117 / 1");
    }

    @Test
    public void test13668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13668");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getVariant();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale.setDefault(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str5 = locale0.getISO3Country();
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "CAN" + "'", str5, "CAN");
    }

    @Test
    public void test13669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13669");
        java.util.Locale locale1 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test13670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13670");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int7 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.subtract(fraction6);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.multiply(fraction3);
        float float10 = fraction3.floatValue();
        java.text.ParseException parseException13 = new java.text.ParseException("java.text.NumberFormat$Field(per mille)", (int) (byte) -1);
        int int14 = parseException13.getErrorOffset();
        java.text.ParseException parseException17 = new java.text.ParseException("", 10);
        java.text.ParseException parseException20 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int21 = parseException20.getErrorOffset();
        parseException17.addSuppressed((java.lang.Throwable) parseException20);
        java.text.ParseException parseException25 = new java.text.ParseException("anglais", (-117));
        java.text.ParseException parseException28 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray29 = parseException28.getSuppressed();
        java.text.NumberFormat.Field field30 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition((java.text.Format.Field) field30, (int) (short) 0);
        int int33 = fieldPosition32.getEndIndex();
        java.text.ParseException parseException36 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray37 = parseException36.getSuppressed();
        int int38 = parseException36.getErrorOffset();
        boolean boolean39 = fieldPosition32.equals((java.lang.Object) parseException36);
        java.text.ParseException parseException42 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int43 = parseException42.getErrorOffset();
        parseException36.addSuppressed((java.lang.Throwable) parseException42);
        parseException28.addSuppressed((java.lang.Throwable) parseException36);
        parseException25.addSuppressed((java.lang.Throwable) parseException28);
        parseException20.addSuppressed((java.lang.Throwable) parseException28);
        parseException13.addSuppressed((java.lang.Throwable) parseException28);
        boolean boolean49 = fraction3.equals((java.lang.Object) parseException13);
        java.lang.Throwable[] throwableArray50 = parseException13.getSuppressed();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-117) + "'", int7 == (-117));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(throwableArray50);
    }

    @Test
    public void test13671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13671");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder4 = builder0.setLanguage("eng");
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str10 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int15 = fraction14.intValue();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.subtract(fraction14);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction9.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.negate();
        int int21 = fraction18.getDenominator();
        float float22 = fraction18.floatValue();
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale.Builder builder25 = builder23.clearExtensions();
        java.util.Locale.Builder builder26 = builder23.clearExtensions();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale28.getDisplayName(locale30);
        java.util.Locale.Builder builder32 = builder23.setLocale(locale28);
        boolean boolean33 = fraction18.equals((java.lang.Object) locale28);
        java.util.Set<java.lang.Character> charSet34 = locale28.getExtensionKeys();
        java.util.Locale locale35 = locale28.stripExtensions();
        java.util.Locale locale36 = locale28.stripExtensions();
        java.util.Locale.Builder builder37 = builder0.setLocale(locale36);
        java.util.Locale.Builder builder38 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder41 = builder0.setUnicodeLocaleKeyword("java.text.ParsePosition[index=-117,errorIndex=-2]", "Englisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: java.text.ParsePosition[index=-117,errorIndex=-2] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "eng__#u-francese");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-117 / 1" + "'", str10, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-117) + "'", int15 == (-117));
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 117.0f + "'", float22 == 117.0f);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "coreano" + "'", str31, "coreano");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test13672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13672");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(122, (-1));
    }

    @Test
    public void test13673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13673");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (byte) -44);
    }

    @Test
    public void test13674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13674");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.util.Currency currency11 = numberFormat8.getCurrency();
        numberFormat7.setCurrency(currency11);
        numberFormat6.setCurrency(currency11);
        java.math.RoundingMode roundingMode14 = numberFormat6.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        numberFormat4.setParseIntegerOnly(false);
        java.lang.String str20 = numberFormat4.format((double) (-0.008547009f));
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        numberFormat4.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "CAD");
        org.junit.Assert.assertTrue("'" + roundingMode14 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode14.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-0.009" + "'", str20, "-0.009");
    }

    @Test
    public void test13675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13675");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        numberFormat0.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale39.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.text.NumberFormat numberFormat42 = fractionFormat41.getNumeratorFormat();
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition((int) (short) 10);
        parsePosition45.setErrorIndex((int) (byte) 1);
        parsePosition45.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat41.parse("French", parsePosition45);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance();
        numberFormat52.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance();
        numberFormat56.setMaximumIntegerDigits((-1));
        java.util.Currency currency59 = numberFormat56.getCurrency();
        numberFormat55.setCurrency(currency59);
        numberFormat52.setCurrency(currency59);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance();
        numberFormat62.setMaximumIntegerDigits((-1));
        java.util.Currency currency65 = numberFormat62.getCurrency();
        java.lang.String str67 = numberFormat62.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51, numberFormat52, numberFormat62);
        fractionFormat41.setDenominatorFormat(numberFormat62);
        properFractionFormat38.setDenominatorFormat(numberFormat62);
        java.util.Locale locale72 = java.util.Locale.UK;
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale73.getDisplayLanguage(locale74);
        java.lang.String str76 = locale72.getDisplayScript(locale74);
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getPercentInstance(locale74);
        java.lang.Object obj78 = numberFormat77.clone();
        java.text.ParsePosition parsePosition81 = new java.text.ParsePosition(1);
        java.lang.Object obj82 = numberFormat77.parseObject("java.text.ParseException: cor\351en", parsePosition81);
        org.apache.commons.math.fraction.Fraction fraction83 = properFractionFormat38.parse("DEU", parsePosition81);
        int int84 = parsePosition81.getErrorIndex();
        int int85 = parsePosition81.getErrorIndex();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "CAD");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "French" + "'", str40, "French");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(currency59);
        org.junit.Assert.assertEquals(currency59.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(currency65);
        org.junit.Assert.assertEquals(currency65.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0%" + "'", str67, "0%");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str75, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNull(fraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test13676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13676");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        int int12 = numberFormat1.getMinimumFractionDigits();
        boolean boolean13 = numberFormat1.isGroupingUsed();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance();
        numberFormat20.setMaximumIntegerDigits((-1));
        java.util.Currency currency23 = numberFormat20.getCurrency();
        numberFormat19.setCurrency(currency23);
        numberFormat16.setCurrency(currency23);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        numberFormat26.setMaximumIntegerDigits((-1));
        java.util.Currency currency29 = numberFormat26.getCurrency();
        java.lang.String str31 = numberFormat26.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat16, numberFormat26);
        java.lang.String str34 = numberFormat15.format((double) 100L);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        numberFormat36.setMaximumIntegerDigits((-1));
        java.util.Currency currency39 = numberFormat36.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36);
        numberFormat36.setMaximumFractionDigits((int) (short) -117);
        int int43 = numberFormat36.getMinimumFractionDigits();
        numberFormat36.setMaximumIntegerDigits((int) (short) -1);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) '4');
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale53.getScript();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale53, locale56, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale.FilteringMode filteringMode61 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList59, filteringMode61);
        boolean boolean63 = parsePosition48.equals((java.lang.Object) languageRangeList50);
        java.lang.Number number64 = numberFormat36.parse("\u5fb7\u56fd", parsePosition48);
        java.lang.Object obj65 = numberFormat15.parseObject("java.text.NumberFormat$Field(percent)", parsePosition48);
        java.lang.Number number66 = numberFormat1.parse("fr-CA", parsePosition48);
        parsePosition48.setErrorIndex((int) (short) 117);
        parsePosition48.setErrorIndex(2147483646);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0%" + "'", str31, "0%");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "CAD");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + filteringMode61 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode61.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(number64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(number66);
    }

    @Test
    public void test13677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13677");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = locale15.getISO3Country();
        java.lang.String str19 = locale15.getLanguage();
        java.util.Locale.setDefault(category0, locale15);
        java.util.Locale locale21 = java.util.Locale.getDefault(category0);
        java.util.Locale locale22 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.lang.String str27 = locale25.getScript();
        java.lang.String str28 = locale25.getVariant();
        java.util.Locale.setDefault(category23, locale25);
        java.util.Locale locale30 = java.util.Locale.getDefault(category23);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale31);
        java.util.Locale.setDefault(category23, locale31);
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.util.Locale.setDefault(category23, locale34);
        java.util.Locale locale37 = java.util.Locale.getDefault(category23);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getCurrencyInstance(locale37);
        java.util.Locale.setDefault(category0, locale37);
        java.lang.String str40 = locale37.getCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u52a0\u62ff\u5927" + "'", str16, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "China" + "'", str17, "China");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CAN" + "'", str18, "CAN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en" + "'", str19, "en");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category23.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "TW" + "'", str40, "TW");
    }

    @Test
    public void test13678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13678");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        float float8 = fraction7.floatValue();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) '4', (-117));
        org.apache.commons.math.fraction.Fraction fraction14 = new org.apache.commons.math.fraction.Fraction((int) (byte) 0, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str19 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int24 = fraction23.intValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction18.add(fraction20);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction15.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str33 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction32);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int38 = fraction37.intValue();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction34.subtract(fraction37);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction32.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction29.subtract(fraction41);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int50 = fraction49.intValue();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction46.subtract(fraction49);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction45.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction42.add(fraction46);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction27.multiply(fraction42);
        java.util.Locale locale55 = java.util.Locale.UK;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale56.getDisplayLanguage(locale57);
        java.lang.String str59 = locale55.getDisplayScript(locale57);
        java.lang.String str60 = locale57.toLanguageTag();
        java.lang.String str61 = locale57.getVariant();
        boolean boolean62 = fraction54.equals((java.lang.Object) locale57);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction14.multiply(fraction54);
        org.apache.commons.math.fraction.Fraction fraction64 = fraction54.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction11.subtract(fraction54);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction7.divide(fraction66);
        short short68 = fraction66.shortValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + (-0.008547009f) + "'", float8 == (-0.008547009f));
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-117 / 1" + "'", str19, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-117) + "'", int24 == (-117));
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-117 / 1" + "'", str33, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-117) + "'", int38 == (-117));
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-117) + "'", int50 == (-117));
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str58, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ko" + "'", str60, "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) -13571 + "'", short68 == (short) -13571);
    }

    @Test
    public void test13679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13679");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getBeginIndex();
        java.text.Format.Field field8 = fieldPosition2.getFieldAttribute();
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field8);
        boolean boolean11 = field8.equals((java.lang.Object) "13,572 / 35");
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setVariant("");
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale16.getISO3Language();
        boolean boolean20 = locale16.hasExtensions();
        java.util.Locale.Builder builder21 = builder14.setLocale(locale16);
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale.Builder builder24 = builder21.setRegion("");
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getNumeratorFormat();
        int int27 = numberFormat26.getMinimumFractionDigits();
        numberFormat26.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26);
        numberFormat26.setMaximumIntegerDigits((int) 'u');
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        java.lang.String str37 = locale33.getDisplayCountry();
        boolean boolean38 = numberFormat26.equals((java.lang.Object) locale33);
        java.lang.String str39 = locale33.getDisplayCountry();
        java.util.Locale.Builder builder40 = builder24.setLocale(locale33);
        boolean boolean41 = field8.equals((java.lang.Object) builder24);
        java.util.Locale.Builder builder42 = builder24.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder44 = builder42.addUnicodeLocaleAttribute("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test13680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13680");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("anglais");
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setVariant("French");
        java.util.Locale.Builder builder11 = builder7.setVariant("Chinese");
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.lang.String str17 = locale14.getVariant();
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale19 = java.util.Locale.getDefault(category12);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale.setDefault(category12, locale20);
        java.util.Locale.Builder builder23 = builder11.setLocale(locale20);
        java.util.Locale.Builder builder24 = builder4.setLocale(locale20);
        java.util.Locale.Builder builder25 = builder4.clearExtensions();
        java.util.Locale.Builder builder27 = builder4.addUnicodeLocaleAttribute("Italian");
        java.util.Locale locale31 = new java.util.Locale("java.text.ParseException: kor", "0 %", "francese");
        java.lang.String str32 = locale31.toLanguageTag();
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("zh_TW");
        java.lang.String str35 = locale34.getISO3Language();
        java.lang.String str36 = locale31.getDisplayVariant(locale34);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale34);
        java.util.Locale.Builder builder38 = builder4.setLocale(locale34);
        java.util.Locale.Builder builder39 = builder38.clear();
        java.util.Locale.Builder builder41 = builder38.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder43 = builder38.setLanguage("java.text.ParsePosition[index=117,errorIndex=117]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: java.text.ParsePosition[index=117,errorIndex=117] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals(locale31.toString(), "java.text.parseexception: kor_0 %_francese");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "und-francese" + "'", str32, "und-francese");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "francese" + "'", str36, "francese");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test13681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13681");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = properFractionFormat17.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat24 = fractionFormat23.getNumeratorFormat();
        java.text.NumberFormat numberFormat25 = fractionFormat23.getNumeratorFormat();
        java.text.ParseException parseException28 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray29 = parseException28.getSuppressed();
        boolean boolean30 = numberFormat25.equals((java.lang.Object) throwableArray29);
        numberFormat25.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.text.NumberFormat numberFormat34 = properFractionFormat33.getWholeFormat();
        properFractionFormat17.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat36 = properFractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.text.NumberFormat numberFormat38 = properFractionFormat37.getWholeFormat();
        java.text.NumberFormat numberFormat39 = properFractionFormat37.getNumeratorFormat();
        java.text.NumberFormat numberFormat40 = properFractionFormat37.getWholeFormat();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
    }

    @Test
    public void test13682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13682");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str3 = locale0.getDisplayVariant();
        java.util.Locale locale5 = new java.util.Locale("fr");
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale locale7 = java.util.Locale.UK;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale9.toLanguageTag();
        java.lang.String str13 = locale6.getDisplayLanguage(locale9);
        java.lang.String str14 = locale6.getISO3Language();
        java.lang.String str15 = locale0.getDisplayVariant(locale6);
        java.lang.String str16 = locale0.getLanguage();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Currency currency18 = numberFormat17.getCurrency();
        int int19 = numberFormat17.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Canada" + "'", str1, "Canada");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ko" + "'", str12, "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str13, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fra" + "'", str14, "fra");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "en" + "'", str16, "en");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "CAD");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test13683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13683");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Set<java.lang.String> strSet10 = locale4.getUnicodeLocaleKeys();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str13 = locale11.getISO3Language();
        java.util.Set<java.lang.Character> charSet14 = locale11.getExtensionKeys();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale17.getScript();
        java.lang.String str20 = locale17.getVariant();
        java.util.Locale.setDefault(category15, locale17);
        java.lang.String str22 = locale17.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleAttributes();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = locale23.getDisplayCountry(locale26);
        java.lang.String str28 = locale17.getDisplayVariant(locale23);
        java.lang.String str29 = locale11.getDisplayName(locale23);
        java.util.Locale locale30 = java.util.Locale.US;
        java.lang.String str31 = locale11.getDisplayLanguage(locale30);
        java.util.Locale locale32 = locale11.stripExtensions();
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.lang.String str34 = locale33.getScript();
        java.lang.String str35 = locale32.getDisplayScript(locale33);
        java.lang.String str36 = locale33.getDisplayScript();
        java.lang.String str37 = locale4.getDisplayScript(locale33);
        java.util.Locale.Category category38 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale39 = java.util.Locale.getDefault(category38);
        java.util.Locale locale40 = java.util.Locale.PRC;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        java.util.Locale.setDefault(category38, locale40);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("Chinese");
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Locale.setDefault(category38, locale44);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder47.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder50 = builder49.clear();
        java.util.Locale locale51 = builder50.build();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale53.getScript();
        java.lang.String str56 = locale53.getCountry();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getNumberInstance(locale53);
        java.util.Locale.Builder builder58 = builder50.setLocale(locale53);
        java.util.Locale.setDefault(category38, locale53);
        java.util.Locale locale60 = java.util.Locale.getDefault(category38);
        java.util.Locale locale61 = java.util.Locale.getDefault(category38);
        java.util.Locale locale62 = java.util.Locale.getDefault(category38);
        java.lang.String str63 = locale33.getDisplayScript(locale62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale62);
        java.util.Set<java.lang.Character> charSet65 = locale62.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "United Kingdom" + "'", str27, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.FORMAT + "'", category38.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "chinese");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "chinese" + "'", str45, "chinese");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(charSet65);
    }

    @Test
    public void test13684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13684");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(0, (int) (byte) -116);
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) 100.0f, 10.0d, 2147483647);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.add(fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        boolean boolean15 = fraction11.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int24 = fraction23.intValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction11.add(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        int int29 = fraction2.compareTo((java.lang.Object) fraction27);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str33 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction32);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int38 = fraction37.intValue();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction34.subtract(fraction37);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction32.add(fraction34);
        java.lang.String str41 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction34);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction2.add(fraction34);
        float float43 = fraction2.floatValue();
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-117) + "'", int24 == (-117));
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-117 / 1" + "'", str33, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-117) + "'", int38 == (-117));
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0 / 1" + "'", str41, "0 / 1");
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
    }

    @Test
    public void test13685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13685");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        int int2 = numberFormat1.getMinimumFractionDigits();
        numberFormat1.setParseIntegerOnly(false);
        int int5 = numberFormat1.getMaximumIntegerDigits();
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumIntegerDigits(0);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) 'x');
        java.lang.Object obj13 = numberFormat1.parseObject("fr_FR", parsePosition12);
        boolean boolean15 = parsePosition12.equals((java.lang.Object) "52");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13686");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        java.lang.String str23 = numberFormat18.format((double) 10);
        boolean boolean25 = numberFormat18.equals((java.lang.Object) "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat18);
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale27);
        java.text.NumberFormat numberFormat30 = fractionFormat29.getNumeratorFormat();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 10);
        parsePosition33.setErrorIndex((int) (byte) 1);
        parsePosition33.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction38 = fractionFormat29.parse("French", parsePosition33);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        numberFormat40.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance();
        numberFormat44.setMaximumIntegerDigits((-1));
        java.util.Currency currency47 = numberFormat44.getCurrency();
        numberFormat43.setCurrency(currency47);
        numberFormat40.setCurrency(currency47);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance();
        numberFormat50.setMaximumIntegerDigits((-1));
        java.util.Currency currency53 = numberFormat50.getCurrency();
        java.lang.String str55 = numberFormat50.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39, numberFormat40, numberFormat50);
        fractionFormat29.setDenominatorFormat(numberFormat50);
        int int58 = numberFormat50.getMaximumIntegerDigits();
        fractionFormat26.setDenominatorFormat(numberFormat50);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction61 = fractionFormat26.parse("english");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"english\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0%" + "'", str23, "0%");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str28, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0%" + "'", str55, "0%");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test13687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13687");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.getDefault(category0);
        java.util.Locale locale17 = new java.util.Locale("1 / 1", "java.text.ParseException: java.text.ParseException: 100");
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.util.Locale locale22 = locale20.stripExtensions();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str26 = locale23.getDisplayName(locale24);
        java.lang.String str27 = locale20.getDisplayName(locale24);
        boolean boolean28 = locale20.hasExtensions();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale20);
        java.lang.String str30 = locale17.getDisplayLanguage(locale20);
        java.util.Locale.setDefault(category0, locale17);
        java.util.Locale locale32 = java.util.Locale.getDefault(category0);
        java.util.Locale locale33 = java.util.Locale.getDefault(category0);
        java.util.Locale locale34 = java.util.Locale.getDefault(category0);
        java.util.Locale locale35 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale17.toString(), "1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "cor\351en" + "'", str27, "cor\351en");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1 / 1" + "'", str30, "1 / 1");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100");
    }

    @Test
    public void test13688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13688");
        java.util.Locale locale2 = new java.util.Locale("5.200%", "10,000%");
        java.lang.String str3 = locale2.getScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale2);
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale2.toString(), "5.200%_10,000%");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test13689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13689");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        double double6 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.negate();
        double double8 = fraction7.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = new org.apache.commons.math.fraction.Fraction((double) 3);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction7.add(fraction11);
        int int13 = fraction7.getDenominator();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayLanguage();
        boolean boolean16 = locale14.hasExtensions();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale14);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = fraction7.compareTo((java.lang.Object) numberFormat17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.text.DecimalFormat cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 117.0d + "'", double6 == 117.0d);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-117.0d) + "'", double8 == (-117.0d));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "German" + "'", str15, "German");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(numberFormat17);
    }

    @Test
    public void test13690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13690");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        numberFormat24.setCurrency(currency40);
        fractionFormat5.setDenominatorFormat(numberFormat24);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance();
        java.lang.String str47 = numberFormat45.format(100L);
        int int48 = numberFormat45.getMinimumFractionDigits();
        numberFormat45.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        numberFormat51.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode54 = numberFormat51.getRoundingMode();
        numberFormat45.setRoundingMode(roundingMode54);
        numberFormat44.setRoundingMode(roundingMode54);
        numberFormat24.setRoundingMode(roundingMode54);
        java.lang.Object obj58 = numberFormat24.clone();
        numberFormat24.setMinimumFractionDigits((int) (short) -13572);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance();
        numberFormat61.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        boolean boolean67 = numberFormat61.equals((java.lang.Object) locale65);
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj71 = numberFormat61.parseObject("China", parsePosition70);
        java.util.Locale locale72 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getIntegerInstance(locale72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat61, numberFormat73);
        java.util.Locale locale76 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale76);
        java.text.NumberFormat numberFormat78 = fractionFormat77.getNumeratorFormat();
        java.text.NumberFormat numberFormat79 = fractionFormat77.getNumeratorFormat();
        int int80 = numberFormat79.getMinimumIntegerDigits();
        numberFormat79.setMaximumIntegerDigits((int) ' ');
        java.lang.Object obj83 = numberFormat79.clone();
        java.text.ParsePosition parsePosition86 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Number number87 = numberFormat79.parse("\uc911\uad6d\uc5b4\ub300\ub9cc)", parsePosition86);
        parsePosition86.setErrorIndex((int) (short) 10);
        org.apache.commons.math.fraction.Fraction fraction90 = properFractionFormat74.parse("35", parsePosition86);
        java.lang.String str91 = parsePosition86.toString();
        java.lang.String str92 = parsePosition86.toString();
        int int93 = parsePosition86.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str66, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertNull(number87);
        org.junit.Assert.assertNull(fraction90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=9]" + "'", str91, "java.text.ParsePosition[index=10,errorIndex=9]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=9]" + "'", str92, "java.text.ParsePosition[index=10,errorIndex=9]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 9 + "'", int93 == 9);
    }

    @Test
    public void test13691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13691");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getVariant();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.util.Currency currency11 = numberFormat8.getCurrency();
        numberFormat7.setCurrency(currency11);
        numberFormat4.setCurrency(currency11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits((-1));
        java.util.Currency currency17 = numberFormat14.getCurrency();
        java.lang.String str19 = numberFormat14.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat4, numberFormat14);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj30 = numberFormat26.parseObject("hi!", parsePosition29);
        java.lang.Number number31 = numberFormat22.parse("10,000%", parsePosition29);
        int int32 = parsePosition29.getErrorIndex();
        java.lang.Object obj33 = properFractionFormat20.parseObject("French", parsePosition29);
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        java.text.NumberFormat numberFormat38 = fractionFormat37.getNumeratorFormat();
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) (short) 10);
        parsePosition41.setErrorIndex((int) (byte) 1);
        parsePosition41.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction46 = fractionFormat37.parse("French", parsePosition41);
        org.apache.commons.math.fraction.Fraction fraction47 = properFractionFormat20.parse("", parsePosition41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getNumeratorFormat();
        int int50 = numberFormat49.getMinimumFractionDigits();
        numberFormat49.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49);
        numberFormat49.setMaximumIntegerDigits((int) 'u');
        properFractionFormat20.setWholeFormat(numberFormat49);
        java.text.NumberFormat.Field field58 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition((java.text.Format.Field) field58, (int) (short) 0);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getInstance();
        java.lang.String str63 = numberFormat61.format(100L);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj69 = numberFormat65.parseObject("hi!", parsePosition68);
        java.lang.Number number70 = numberFormat61.parse("10,000%", parsePosition68);
        boolean boolean71 = field58.equals((java.lang.Object) parsePosition68);
        org.apache.commons.math.fraction.Fraction fraction72 = properFractionFormat20.parse("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)", parsePosition68);
        java.text.NumberFormat numberFormat73 = properFractionFormat20.getWholeFormat();
        java.text.NumberFormat numberFormat74 = properFractionFormat20.getDenominatorFormat();
        java.text.NumberFormat numberFormat75 = properFractionFormat20.getWholeFormat();
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale77.getDisplayLanguage(locale78);
        java.lang.String str80 = locale77.getISO3Language();
        java.lang.String str81 = locale76.getDisplayCountry(locale77);
        java.util.Locale locale82 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str83 = locale77.getDisplayLanguage(locale82);
        java.util.Locale locale84 = locale82.stripExtensions();
        boolean boolean85 = numberFormat75.equals((java.lang.Object) locale82);
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getPercentInstance(locale82);
        java.lang.String str87 = locale0.getDisplayLanguage(locale82);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0%" + "'", str19, "0%");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(number31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "French" + "'", str36, "French");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNull(fraction46);
        org.junit.Assert.assertNull(fraction47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(field58);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "100" + "'", str63, "100");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(number70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(fraction72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str79, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "kor" + "'", str80, "kor");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u671d\u9c9c\u6587" + "'", str83, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str87, "\u610f\u5927\u5229\u6587");
    }

    @Test
    public void test13692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13692");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 10);
        parsePosition7.setErrorIndex((int) (byte) 1);
        parsePosition7.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction12 = fractionFormat3.parse("French", parsePosition7);
        boolean boolean13 = field0.equals((java.lang.Object) "French");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        numberFormat18.setCurrency(currency22);
        numberFormat15.setCurrency(currency22);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        java.util.Currency currency28 = numberFormat25.getCurrency();
        java.lang.String str30 = numberFormat25.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat15, numberFormat25);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.util.Currency currency35 = numberFormat32.getCurrency();
        java.lang.String str37 = numberFormat32.format((double) 10);
        boolean boolean39 = numberFormat32.equals((java.lang.Object) "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat32);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.text.NumberFormat numberFormat44 = fractionFormat43.getNumeratorFormat();
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) (short) 10);
        parsePosition47.setErrorIndex((int) (byte) 1);
        parsePosition47.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction52 = fractionFormat43.parse("French", parsePosition47);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance();
        numberFormat54.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance();
        numberFormat58.setMaximumIntegerDigits((-1));
        java.util.Currency currency61 = numberFormat58.getCurrency();
        numberFormat57.setCurrency(currency61);
        numberFormat54.setCurrency(currency61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance();
        numberFormat64.setMaximumIntegerDigits((-1));
        java.util.Currency currency67 = numberFormat64.getCurrency();
        java.lang.String str69 = numberFormat64.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53, numberFormat54, numberFormat64);
        fractionFormat43.setDenominatorFormat(numberFormat64);
        int int72 = numberFormat64.getMaximumIntegerDigits();
        fractionFormat40.setDenominatorFormat(numberFormat64);
        boolean boolean74 = field0.equals((java.lang.Object) numberFormat64);
        java.text.FieldPosition fieldPosition76 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) -116);
        java.text.FieldPosition fieldPosition78 = new java.text.FieldPosition((java.text.Format.Field) field0, 2147483646);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "French" + "'", str2, "French");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(fraction12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0%" + "'", str30, "0%");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0%" + "'", str37, "0%");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "French" + "'", str42, "French");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(currency67);
        org.junit.Assert.assertEquals(currency67.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0%" + "'", str69, "0%");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test13693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13693");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.lang.String str7 = locale2.getDisplayName();
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale8.getDisplayCountry(locale11);
        java.lang.String str13 = locale2.getDisplayVariant(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale15.getDisplayCountry();
        java.util.Locale locale20 = locale15.stripExtensions();
        java.lang.String str21 = locale2.getDisplayCountry(locale15);
        java.util.Set<java.lang.Character> charSet22 = locale2.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "United Kingdom" + "'", str12, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(fractionFormat23);
    }

    @Test
    public void test13694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13694");
        java.util.Locale locale2 = new java.util.Locale("french (JAVA.TEXT.PARSEPOSITION[INDEX=-1,ERRORINDEX=-1])", "\uce90\ub098\ub2e4");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(fractionFormat3);
    }

    @Test
    public void test13695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13695");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String str4 = locale3.getDisplayScript();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale3.getDisplayCountry(locale6);
        java.util.Locale.setDefault(locale3);
        java.lang.String str9 = locale3.getLanguage();
        java.lang.String str10 = locale0.getDisplayName(locale3);
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale13.getScript();
        java.lang.String str16 = locale13.getVariant();
        java.util.Set<java.lang.String> strSet17 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale0.getDisplayName(locale13);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getISO3Country();
        java.util.Locale locale21 = locale19.stripExtensions();
        java.util.Locale locale23 = new java.util.Locale("fr");
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale25 = java.util.Locale.UK;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale25.getDisplayScript(locale27);
        java.lang.String str30 = locale27.toLanguageTag();
        java.lang.String str31 = locale24.getDisplayLanguage(locale27);
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale27.getDisplayCountry(locale32);
        java.util.Locale locale34 = locale27.stripExtensions();
        java.lang.String str35 = locale19.getDisplayCountry(locale34);
        java.lang.String str36 = locale13.getDisplayLanguage(locale34);
        java.lang.String str37 = locale13.getScript();
        java.lang.String str38 = locale13.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fr" + "'", str2, "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "United Kingdom" + "'", str7, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "en" + "'", str9, "en");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str18, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ko" + "'", str30, "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str31, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test13696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13696");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder15 = builder13.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder18 = builder15.clearExtensions();
        java.util.Locale.Builder builder19 = builder15.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test13697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13697");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("und-Canada");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.util.Locale locale7 = new java.util.Locale("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", "", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str8 = locale7.getVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getNumberInstance(locale7);
        boolean boolean10 = languageRange1.equals((java.lang.Object) locale7);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals(locale7.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str8, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13698");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        java.lang.String str5 = numberFormat0.format((double) 10);
        boolean boolean7 = numberFormat0.equals((java.lang.Object) "");
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (byte) 10);
        java.lang.Number number11 = numberFormat0.parse("java.text.ParsePosition[index=0,errorIndex=9]", parsePosition10);
        boolean boolean12 = numberFormat0.isGroupingUsed();
        numberFormat0.setMaximumFractionDigits(2147483647);
        java.lang.String str16 = numberFormat0.format((long) 117);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0 %" + "'", str5, "0 %");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(number11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0 %" + "'", str16, "0 %");
    }

    @Test
    public void test13699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13699");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getNumberInstance(locale6);
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition(2147483647);
        boolean boolean11 = numberFormat8.equals((java.lang.Object) 2147483647);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat8);
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(numberFormat13);
    }

    @Test
    public void test13700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13700");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.apache.commons.math.fraction.Fraction fraction8 = new org.apache.commons.math.fraction.Fraction((-117), (int) (byte) 1);
        boolean boolean9 = numberFormat4.equals((java.lang.Object) (byte) 1);
        numberFormat4.setParseIntegerOnly(true);
        java.lang.Object obj12 = numberFormat4.clone();
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.text.NumberFormat numberFormat16 = fractionFormat15.getNumeratorFormat();
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 10);
        parsePosition19.setErrorIndex((int) (byte) 1);
        parsePosition19.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction24 = fractionFormat15.parse("French", parsePosition19);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        numberFormat26.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        numberFormat30.setMaximumIntegerDigits((-1));
        java.util.Currency currency33 = numberFormat30.getCurrency();
        numberFormat29.setCurrency(currency33);
        numberFormat26.setCurrency(currency33);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        numberFormat36.setMaximumIntegerDigits((-1));
        java.util.Currency currency39 = numberFormat36.getCurrency();
        java.lang.String str41 = numberFormat36.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat26, numberFormat36);
        fractionFormat15.setDenominatorFormat(numberFormat36);
        int int44 = numberFormat36.getMaximumIntegerDigits();
        boolean boolean45 = numberFormat36.isGroupingUsed();
        java.util.Locale locale46 = java.util.Locale.US;
        java.lang.String str47 = locale46.getDisplayName();
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat36, numberFormat48);
        java.lang.Object obj50 = numberFormat36.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fran\347ais" + "'", str14, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0 %" + "'", str41, "0 %");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "anglais (Etats-Unis)" + "'", str47, "anglais (Etats-Unis)");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj50);
    }

    @Test
    public void test13701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13701");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        boolean boolean14 = locale10.hasExtensions();
        java.util.Locale.Builder builder15 = builder8.setLocale(locale10);
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder15.clear();
        java.util.Locale locale18 = builder17.build();
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale.Builder builder20 = builder4.setLocale(locale18);
        java.lang.String str22 = locale18.getExtension('a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test13702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13702");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getVariant();
        java.lang.String str2 = locale0.getDisplayVariant();
        boolean boolean3 = locale0.hasExtensions();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction7.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction16 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction17 = fraction14.add(fraction16);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int22 = fraction21.intValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.subtract(fraction21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.lang.String str30 = locale28.getScript();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale28, locale31, locale32 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList34, filteringMode36);
        boolean boolean38 = fraction23.equals((java.lang.Object) localeList37);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction23.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction16.add(fraction39);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int45 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction41.subtract(fraction44);
        boolean boolean48 = fraction44.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int57 = fraction56.intValue();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction53.subtract(fraction56);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction52.multiply(fraction53);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction44.add(fraction59);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction62 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str66 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction65);
        org.apache.commons.math.fraction.Fraction fraction67 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int71 = fraction70.intValue();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction67.subtract(fraction70);
        org.apache.commons.math.fraction.Fraction fraction73 = fraction65.add(fraction67);
        int int74 = fraction73.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction77 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction78 = fraction73.multiply(fraction77);
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getNumberInstance();
        boolean boolean80 = numberFormat79.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = new org.apache.commons.math.fraction.FractionFormat(numberFormat79);
        boolean boolean82 = numberFormat79.isParseIntegerOnly();
        boolean boolean83 = fraction77.equals((java.lang.Object) boolean82);
        org.apache.commons.math.fraction.Fraction fraction84 = fraction62.multiply(fraction77);
        int int85 = fraction84.intValue();
        org.apache.commons.math.fraction.Fraction fraction86 = fraction61.add(fraction84);
        org.apache.commons.math.fraction.Fraction fraction87 = fraction40.subtract(fraction61);
        int int88 = fraction40.getDenominator();
        java.lang.String str89 = numberFormat4.format((java.lang.Object) int88);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat90 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-117) + "'", int22 == (-117));
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + filteringMode36 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode36.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-117) + "'", int45 == (-117));
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-117) + "'", int57 == (-117));
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-117 / 1" + "'", str66, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-117) + "'", int71 == (-117));
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 117 + "'", int88 == 117);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "11,700%" + "'", str89, "11,700%");
    }

    @Test
    public void test13703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13703");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getBeginIndex();
        int int8 = fieldPosition2.getBeginIndex();
        java.text.ParseException parseException11 = new java.text.ParseException("francese", (int) 'a');
        java.text.ParseException parseException14 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray15 = parseException14.getSuppressed();
        java.text.ParseException parseException18 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray19 = parseException18.getSuppressed();
        parseException14.addSuppressed((java.lang.Throwable) parseException18);
        int int21 = parseException18.getErrorOffset();
        int int22 = parseException18.getErrorOffset();
        parseException11.addSuppressed((java.lang.Throwable) parseException18);
        int int24 = parseException11.getErrorOffset();
        boolean boolean25 = fieldPosition2.equals((java.lang.Object) parseException11);
        fieldPosition2.setEndIndex(2147483647);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test13704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13704");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        boolean boolean10 = numberFormat0.isGroupingUsed();
        java.text.ParseException parseException13 = new java.text.ParseException("\uce90\ub098\ub2e4", (int) (byte) 1);
        java.text.ParseException parseException16 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray17 = parseException16.getSuppressed();
        java.text.ParseException parseException20 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray21 = parseException20.getSuppressed();
        parseException16.addSuppressed((java.lang.Throwable) parseException20);
        parseException13.addSuppressed((java.lang.Throwable) parseException20);
        java.text.ParseException parseException26 = new java.text.ParseException("", (-13572));
        parseException13.addSuppressed((java.lang.Throwable) parseException26);
        java.lang.StringBuffer stringBuffer28 = null;
        java.text.FieldPosition fieldPosition29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer30 = numberFormat0.format((java.lang.Object) parseException13, stringBuffer28, fieldPosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test13705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13705");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("anglais");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.addUnicodeLocaleAttribute("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(exponent symbol),beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(exponent symbol),beginIndex=0,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test13706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13706");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder4 = builder0.setLanguage("eng");
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str10 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int15 = fraction14.intValue();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.subtract(fraction14);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction9.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.negate();
        int int21 = fraction18.getDenominator();
        float float22 = fraction18.floatValue();
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale.Builder builder25 = builder23.clearExtensions();
        java.util.Locale.Builder builder26 = builder23.clearExtensions();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale28.getDisplayName(locale30);
        java.util.Locale.Builder builder32 = builder23.setLocale(locale28);
        boolean boolean33 = fraction18.equals((java.lang.Object) locale28);
        java.util.Set<java.lang.Character> charSet34 = locale28.getExtensionKeys();
        java.util.Locale locale35 = locale28.stripExtensions();
        java.util.Locale locale36 = locale28.stripExtensions();
        java.util.Locale.Builder builder37 = builder0.setLocale(locale36);
        java.util.Locale.Builder builder38 = builder0.clearExtensions();
        java.util.Locale locale39 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder41 = builder0.setLanguageTag("french (JAVA.TEXT.PARSEPOSITION[INDEX=-1,ERRORINDEX=-1])");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: french (JAVA.TEXT.PARSEPOSITION[INDEX= [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "eng__#u-francese");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-117 / 1" + "'", str10, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-117) + "'", int15 == (-117));
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 117.0f + "'", float22 == 117.0f);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "coreano" + "'", str31, "coreano");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
    }

    @Test
    public void test13707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13707");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 10);
        parsePosition37.setErrorIndex((int) (byte) 1);
        parsePosition37.setIndex((int) 'u');
        org.apache.commons.math.fraction.Fraction fraction42 = properFractionFormat32.parse("java.text.ParseException: ko", parsePosition37);
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder43.setVariant("");
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.lang.String str50 = locale47.getISO3Language();
        boolean boolean51 = locale47.hasExtensions();
        java.util.Locale.Builder builder52 = builder45.setLocale(locale47);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale47);
        java.util.Locale locale54 = locale47.stripExtensions();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getCurrencyInstance(locale47);
        boolean boolean56 = parsePosition37.equals((java.lang.Object) numberFormat55);
        numberFormat55.setMinimumFractionDigits(115);
        numberFormat55.setMaximumFractionDigits((int) (byte) -3);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0 %" + "'", str16, "0 %");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(fraction42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "kor" + "'", str50, "kor");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test13708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13708");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        int int12 = fraction11.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.multiply(fraction15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance();
        boolean boolean18 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        boolean boolean20 = numberFormat17.isParseIntegerOnly();
        boolean boolean21 = fraction15.equals((java.lang.Object) boolean20);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction0.multiply(fraction15);
        double double23 = fraction0.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction0.negate();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(fraction24);
    }

    @Test
    public void test13709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13709");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance();
        java.lang.String str4 = numberFormat2.format(100L);
        int int5 = numberFormat2.getMinimumFractionDigits();
        numberFormat2.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode11 = numberFormat8.getRoundingMode();
        numberFormat2.setRoundingMode(roundingMode11);
        numberFormat1.setRoundingMode(roundingMode11);
        boolean boolean14 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getNumeratorFormat();
        int int18 = numberFormat17.getMinimumFractionDigits();
        java.util.Currency currency19 = numberFormat17.getCurrency();
        fractionFormat15.setDenominatorFormat(numberFormat17);
        numberFormat17.setGroupingUsed(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100" + "'", str4, "100");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode11.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
    }

    @Test
    public void test13710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13710");
        java.text.ParseException parseException2 = new java.text.ParseException("und", (int) (byte) -1);
    }

    @Test
    public void test13711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13711");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 10);
        parsePosition14.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction17 = properFractionFormat11.parse("fran\347ais", parsePosition14);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        java.lang.String str21 = locale18.getISO3Language();
        java.lang.String str22 = locale18.getCountry();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale18);
        java.util.Currency currency24 = numberFormat23.getCurrency();
        numberFormat23.setParseIntegerOnly(false);
        boolean boolean27 = parsePosition14.equals((java.lang.Object) false);
        parsePosition14.setIndex(116);
        int int30 = parsePosition14.getErrorIndex();
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale31);
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction38 = fractionFormat33.parse("french", parsePosition37);
        int int39 = parsePosition37.getIndex();
        boolean boolean40 = parsePosition14.equals((java.lang.Object) int39);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10\240000 %" + "'", str8, "10\240000 %");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(fraction17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fran\347ais" + "'", str32, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test13712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13712");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(387, (-117));
        byte byte3 = fraction2.byteValue();
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -3 + "'", byte3 == (byte) -3);
    }

    @Test
    public void test13713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13713");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str2 = locale1.getDisplayScript();
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale9.getScript();
        java.lang.String str12 = locale9.getVariant();
        java.util.Locale.setDefault(category7, locale9);
        java.lang.String str14 = locale9.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.UK;
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = locale15.getDisplayCountry(locale18);
        java.lang.String str20 = locale9.getDisplayVariant(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance(locale9);
        java.lang.String str23 = locale4.getDisplayName(locale9);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale4);
        java.lang.String str25 = locale1.getDisplayName(locale4);
        java.lang.String str26 = locale4.getDisplayLanguage();
        java.lang.String str27 = locale4.getISO3Country();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "United Kingdom" + "'", str19, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc601\uc5b4" + "'", str23, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc601\uc5b4" + "'", str26, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test13714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13714");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("English (United Kingdom)", (double) 2L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=2.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13715");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Set<java.lang.String> strSet7 = locale2.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet8 = locale2.getExtensionKeys();
        java.lang.String str9 = locale2.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test13716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13716");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("-3,499");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=-3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13717");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.util.Currency currency42 = numberFormat39.getCurrency();
        numberFormat38.setCurrency(currency42);
        numberFormat35.setCurrency(currency42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits((-1));
        java.util.Currency currency48 = numberFormat45.getCurrency();
        java.lang.String str50 = numberFormat45.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat35, numberFormat45);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.String str55 = numberFormat53.format(100L);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = numberFormat57.parseObject("hi!", parsePosition60);
        java.lang.Number number62 = numberFormat53.parse("10,000%", parsePosition60);
        int int63 = parsePosition60.getErrorIndex();
        java.lang.Object obj64 = properFractionFormat51.parseObject("French", parsePosition60);
        parsePosition60.setErrorIndex((-117));
        java.lang.Object obj67 = numberFormat29.parseObject("-1 / 1", parsePosition60);
        numberFormat29.setMaximumIntegerDigits((int) (byte) 116);
        java.lang.Object obj70 = numberFormat29.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number72 = numberFormat29.parse("java.text.NumberFormat$Field(decimal separator)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"java.text.NumberFormat$Field(decimal separator)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0 %" + "'", str16, "0 %");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0 %" + "'", str50, "0 %");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(obj70);
    }

    @Test
    public void test13718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13718");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(13689, (int) (short) -1170);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        double double4 = fraction2.doubleValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 10" + "'", str3, "-117 / 10");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-11.7d) + "'", double4 == (-11.7d));
    }

    @Test
    public void test13719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13719");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (short) 10);
        parsePosition1.setErrorIndex((int) (byte) 1);
        parsePosition1.setErrorIndex(0);
        int int6 = parsePosition1.getErrorIndex();
        parsePosition1.setIndex((-1));
        parsePosition1.setIndex((-20));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test13720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13720");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale7.getDisplayLanguage(locale12);
        java.lang.String str14 = locale1.getDisplayName(locale12);
        java.lang.String str15 = locale1.getDisplayCountry();
        java.util.Locale locale16 = java.util.Locale.US;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale1.getDisplayName(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str21 = locale1.getDisplayName();
        java.lang.String str22 = locale1.getLanguage();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale locale24 = java.util.Locale.UK;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = locale24.getDisplayCountry(locale27);
        java.lang.String str29 = locale23.getDisplayVariant(locale24);
        java.util.Locale locale30 = locale23.stripExtensions();
        java.lang.String str31 = locale1.getDisplayLanguage(locale23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u671d\u9c9c\u6587" + "'", str13, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u671d\u9c9c\u6587" + "'", str14, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str17, "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Korean" + "'", str18, "Korean");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ko" + "'", str22, "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "United Kingdom" + "'", str28, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "coreano" + "'", str31, "coreano");
        org.junit.Assert.assertNotNull(fractionFormat32);
    }

    @Test
    public void test13721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13721");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction7);
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int13 = fraction12.intValue();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction7.add(fraction9);
        int int16 = fraction15.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int24 = fraction23.intValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction15.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction26.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction4.add(fraction26);
        float float30 = fraction26.floatValue();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.reciprocal();
        int int38 = fraction36.intValue();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction26.multiply(fraction36);
        long long40 = fraction26.longValue();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-117 / 1" + "'", str8, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-117) + "'", int13 == (-117));
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-117) + "'", int24 == (-117));
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 0.0f + "'", float30 == 0.0f);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 117 + "'", int38 == 117);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test13722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13722");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean1 = numberFormat0.isGroupingUsed();
        numberFormat0.setParseIntegerOnly(false);
        java.lang.Number number5 = numberFormat0.parse("0%");
        numberFormat0.setMaximumFractionDigits((int) (byte) 0);
        numberFormat0.setParseIntegerOnly(false);
        java.lang.Number number11 = numberFormat0.parse("10,000%");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        numberFormat17.setCurrency(currency21);
        numberFormat14.setCurrency(currency21);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance();
        numberFormat24.setMaximumIntegerDigits((-1));
        java.util.Currency currency27 = numberFormat24.getCurrency();
        java.lang.String str29 = numberFormat24.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat14, numberFormat24);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance();
        java.lang.String str34 = numberFormat32.format(100L);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj40 = numberFormat36.parseObject("hi!", parsePosition39);
        java.lang.Number number41 = numberFormat32.parse("10,000%", parsePosition39);
        int int42 = parsePosition39.getErrorIndex();
        java.lang.Object obj43 = properFractionFormat30.parseObject("French", parsePosition39);
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale45.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        java.text.NumberFormat numberFormat48 = fractionFormat47.getNumeratorFormat();
        java.text.ParsePosition parsePosition51 = new java.text.ParsePosition((int) (short) 10);
        parsePosition51.setErrorIndex((int) (byte) 1);
        parsePosition51.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction56 = fractionFormat47.parse("French", parsePosition51);
        org.apache.commons.math.fraction.Fraction fraction57 = properFractionFormat30.parse("", parsePosition51);
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder60 = builder58.setVariant("");
        java.util.Locale.Builder builder61 = builder60.clear();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.lang.String str65 = locale62.getISO3Language();
        boolean boolean66 = locale62.hasExtensions();
        java.util.Locale.Builder builder67 = builder60.setLocale(locale62);
        java.util.Locale.Builder builder68 = builder67.clear();
        java.util.Locale.Builder builder69 = builder67.clear();
        java.util.Locale.Builder builder71 = builder69.setLanguageTag("Chinese");
        java.util.Locale.Builder builder73 = builder71.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder75 = builder73.removeUnicodeLocaleAttribute("coreano");
        boolean boolean76 = parsePosition51.equals((java.lang.Object) builder75);
        java.text.ParseException parseException79 = new java.text.ParseException("100", (int) (byte) -1);
        boolean boolean80 = parsePosition51.equals((java.lang.Object) parseException79);
        int int81 = parsePosition51.getIndex();
        java.lang.Number number82 = numberFormat0.parse("1 / 1", parsePosition51);
        java.lang.Object obj83 = numberFormat0.clone();
        numberFormat0.setMaximumIntegerDigits(387);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + number5 + "' != '" + 0L + "'", number5, 0L);
        org.junit.Assert.assertEquals("'" + number11 + "' != '" + 10L + "'", number11, 10L);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0 %" + "'", str29, "0 %");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(number41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str46, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertNull(fraction57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str64, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "kor" + "'", str65, "kor");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNull(number82);
        org.junit.Assert.assertNotNull(obj83);
    }

    @Test
    public void test13723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13723");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale0.getDisplayVariant(locale3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test13724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13724");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale1);
        java.lang.String str7 = locale1.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test13725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13725");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Currency currency4 = numberFormat1.getCurrency();
        numberFormat0.setCurrency(currency4);
        java.lang.String str7 = numberFormat0.format((double) 100);
        numberFormat0.setParseIntegerOnly(false);
        numberFormat0.setMaximumIntegerDigits((int) 'x');
        java.lang.Object obj12 = numberFormat0.clone();
        java.util.Currency currency13 = numberFormat0.getCurrency();
        numberFormat0.setParseIntegerOnly(true);
        int int16 = numberFormat0.getMaximumFractionDigits();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.util.Currency currency25 = numberFormat22.getCurrency();
        numberFormat21.setCurrency(currency25);
        numberFormat18.setCurrency(currency25);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        numberFormat28.setMaximumIntegerDigits((-1));
        java.util.Currency currency31 = numberFormat28.getCurrency();
        java.lang.String str33 = numberFormat28.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat18, numberFormat28);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance();
        java.lang.String str37 = numberFormat35.format(100L);
        properFractionFormat34.setWholeFormat(numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getInstance();
        java.lang.String str41 = numberFormat39.format(100L);
        int int42 = numberFormat39.getMinimumFractionDigits();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale44);
        java.lang.String str48 = numberFormat46.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat39, numberFormat46);
        java.math.RoundingMode roundingMode50 = numberFormat39.getRoundingMode();
        numberFormat0.setRoundingMode(roundingMode50);
        java.lang.StringBuffer stringBuffer53 = null;
        java.text.Format.Field field54 = null;
        java.text.FieldPosition fieldPosition55 = new java.text.FieldPosition(field54);
        fieldPosition55.setEndIndex((int) (byte) 97);
        org.apache.commons.math.fraction.Fraction fraction60 = new org.apache.commons.math.fraction.Fraction((double) (-0.008547009f), (int) (short) 1);
        boolean boolean61 = fieldPosition55.equals((java.lang.Object) fraction60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer62 = numberFormat0.format((double) 117.0f, stringBuffer53, fieldPosition55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(currency4);
        org.junit.Assert.assertEquals(currency4.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10\240000 %" + "'", str7, "10\240000 %");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0 %" + "'", str33, "0 %");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100" + "'", str37, "100");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "100" + "'", str41, "100");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "32" + "'", str48, "32");
        org.junit.Assert.assertTrue("'" + roundingMode50 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode50.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test13726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13726");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        fieldPosition2.setEndIndex((int) 'a');
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getWholeFormat();
        boolean boolean29 = fieldPosition2.equals((java.lang.Object) properFractionFormat23);
        java.text.NumberFormat numberFormat30 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat31 = properFractionFormat23.getNumeratorFormat();
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder32.clear();
        java.util.Locale.Builder builder35 = builder32.setVariant("");
        java.util.Locale.Builder builder37 = builder35.setVariant("Canada");
        java.util.Locale.Builder builder38 = builder37.clear();
        java.util.Locale.Builder builder39 = builder38.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator40 = numberFormat31.formatToCharacterIterator((java.lang.Object) builder39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0 %" + "'", str22, "0 %");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test13727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13727");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        boolean boolean6 = numberFormat0.equals((java.lang.Object) locale4);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj10 = numberFormat0.parseObject("China", parsePosition9);
        parsePosition9.setIndex(32);
        java.text.ParseException parseException15 = new java.text.ParseException("\uce90\ub098\ub2e4", (int) (byte) 1);
        java.text.ParseException parseException18 = new java.text.ParseException("10,000%", (int) (byte) 1);
        java.lang.Throwable[] throwableArray19 = parseException18.getSuppressed();
        parseException15.addSuppressed((java.lang.Throwable) parseException18);
        boolean boolean21 = parsePosition9.equals((java.lang.Object) parseException18);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test13728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13728");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction1.multiply(fraction5);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction1.negate();
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction1);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance(locale11);
        java.lang.String str13 = locale11.getScript();
        java.util.Locale.Builder builder14 = builder9.setLocale(locale11);
        java.lang.String str15 = locale11.getCountry();
        java.util.Locale locale16 = locale11.stripExtensions();
        java.lang.Object obj17 = locale11.clone();
        boolean boolean18 = fraction1.equals((java.lang.Object) locale11);
        org.apache.commons.math.fraction.Fraction fraction22 = new org.apache.commons.math.fraction.Fraction((double) (short) -1, (double) 10, 2147483647);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction1.divide(fraction22);
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale27.getScript();
        java.lang.String str30 = locale27.getVariant();
        java.util.Locale.setDefault(category25, locale27);
        java.util.Locale locale32 = java.util.Locale.getDefault(category25);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.util.Locale.setDefault(category25, locale33);
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Locale.setDefault(category25, locale36);
        java.util.Locale locale39 = java.util.Locale.getDefault(category25);
        java.util.Locale locale40 = java.util.Locale.getDefault(category25);
        java.util.Locale.Category category41 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.lang.String str45 = locale43.getScript();
        java.lang.String str46 = locale43.getVariant();
        java.util.Locale.setDefault(category41, locale43);
        java.lang.String str48 = locale43.getDisplayName();
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getIntegerInstance(locale43);
        java.lang.String str50 = locale43.getDisplayName();
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale43.getDisplayScript(locale51);
        java.util.Set<java.lang.String> strSet53 = locale43.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category25, locale43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale43);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = fraction22.compareTo((java.lang.Object) fractionFormat55);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.fraction.ProperFractionFormat cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10 / 1" + "'", str8, "10 / 1");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "TW" + "'", str15, "TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "zh_TW");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "zh_TW");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category41.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str44, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str48, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(fractionFormat55);
    }

    @Test
    public void test13729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13729");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance();
        java.lang.String str4 = numberFormat2.format(100L);
        int int5 = numberFormat2.getMinimumFractionDigits();
        numberFormat2.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode11 = numberFormat8.getRoundingMode();
        numberFormat2.setRoundingMode(roundingMode11);
        numberFormat1.setRoundingMode(roundingMode11);
        boolean boolean14 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance();
        numberFormat20.setMaximumIntegerDigits((-1));
        java.util.Currency currency23 = numberFormat20.getCurrency();
        numberFormat19.setCurrency(currency23);
        numberFormat16.setCurrency(currency23);
        boolean boolean26 = numberFormat16.isGroupingUsed();
        fractionFormat15.setNumeratorFormat(numberFormat16);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        numberFormat29.setMaximumIntegerDigits((-1));
        numberFormat29.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance();
        java.lang.String str37 = numberFormat35.format(100L);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj43 = numberFormat39.parseObject("hi!", parsePosition42);
        java.lang.Number number44 = numberFormat35.parse("10,000%", parsePosition42);
        int int45 = parsePosition42.getErrorIndex();
        int int46 = parsePosition42.getIndex();
        java.lang.Object obj47 = numberFormat29.parseObject("java.text.ParsePosition[index=10,errorIndex=10]", parsePosition42);
        parsePosition42.setErrorIndex((-35));
        java.lang.Object obj50 = fractionFormat15.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition42);
        java.util.Locale.Category category51 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale53.getScript();
        java.lang.String str56 = locale53.getVariant();
        java.util.Locale.setDefault(category51, locale53);
        java.util.Locale locale58 = java.util.Locale.getDefault(category51);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale59);
        java.util.Locale.setDefault(category51, locale59);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getIntegerInstance(locale59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        fractionFormat15.setDenominatorFormat(numberFormat62);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100" + "'", str4, "100");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode11.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100" + "'", str37, "100");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(number44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + category51 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category51.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat62);
    }

    @Test
    public void test13730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13730");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str18 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction17);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int23 = fraction22.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction14.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.add(fraction31);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction12.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = new org.apache.commons.math.fraction.Fraction((double) (byte) 10, (double) 10, 3);
        java.text.NumberFormat.Field field45 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition47 = new java.text.FieldPosition((java.text.Format.Field) field45, (int) (short) 0);
        java.lang.String str48 = fieldPosition47.toString();
        java.lang.String str49 = fieldPosition47.toString();
        fieldPosition47.setBeginIndex((int) (byte) 10);
        fieldPosition47.setBeginIndex((int) '4');
        boolean boolean55 = fieldPosition47.equals((java.lang.Object) (short) -1);
        java.text.Format.Field field56 = fieldPosition47.getFieldAttribute();
        java.text.FieldPosition fieldPosition58 = new java.text.FieldPosition(field56, 10);
        org.apache.commons.math.fraction.Fraction fraction60 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.abs();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction60.negate();
        java.lang.String str63 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction60);
        org.apache.commons.math.fraction.Fraction fraction65 = new org.apache.commons.math.fraction.Fraction((double) 1);
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction65.multiply(fraction68);
        org.apache.commons.math.fraction.Fraction fraction70 = fraction60.subtract(fraction65);
        boolean boolean71 = fieldPosition58.equals((java.lang.Object) fraction60);
        java.lang.String str72 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction60);
        org.apache.commons.math.fraction.Fraction fraction73 = fraction44.subtract(fraction60);
        long long74 = fraction73.longValue();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction40.add(fraction73);
        java.lang.String str76 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction75);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-117 / 1" + "'", str18, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-117) + "'", int23 == (-117));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(field45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str48, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str49, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(field56);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "10 / 1" + "'", str63, "10 / 1");
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "10 / 1" + "'", str72, "10 / 1");
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-117 / 1" + "'", str76, "-117 / 1");
    }

    @Test
    public void test13731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13731");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.lang.String str1 = field0.toString();
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) 116);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (-35));
        java.text.Format.Field field6 = fieldPosition5.getFieldAttribute();
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition(field6, (int) (byte) -4);
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field6);
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition(field6);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str1, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertNotNull(field6);
    }

    @Test
    public void test13732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13732");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -117, 100);
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.abs();
        long long4 = fraction2.longValue();
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    }

    @Test
    public void test13733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13733");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder7.setLocale(locale8);
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
    }

    @Test
    public void test13734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13734");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        numberFormat0.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat39 = properFractionFormat38.getNumeratorFormat();
        numberFormat39.setGroupingUsed(false);
        java.math.RoundingMode roundingMode42 = numberFormat39.getRoundingMode();
        numberFormat39.setMinimumIntegerDigits((int) (short) 13689);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj46 = numberFormat39.parseObject("java.text.NumberFormat$Field(percent)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test13735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13735");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        fieldPosition2.setEndIndex((int) (byte) 1);
        java.text.Format.Field field9 = fieldPosition2.getFieldAttribute();
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition(field9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.lang.String str16 = locale11.getDisplayCountry(locale12);
        boolean boolean17 = locale11.hasExtensions();
        java.lang.String str18 = locale11.toLanguageTag();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale11);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale11);
        boolean boolean21 = field9.equals((java.lang.Object) locale11);
        java.lang.String str22 = locale11.getDisplayVariant();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ko" + "'", str18, "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test13736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13736");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.lang.String str6 = locale1.getDisplayCountry(locale2);
        boolean boolean7 = field0.equals((java.lang.Object) locale1);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat9.setCurrency(currency13);
        java.lang.String str16 = numberFormat9.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat9, numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getNumeratorFormat();
        java.text.NumberFormat numberFormat22 = fractionFormat20.getNumeratorFormat();
        java.text.ParseException parseException25 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray26 = parseException25.getSuppressed();
        boolean boolean27 = numberFormat22.equals((java.lang.Object) throwableArray26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat30 = fractionFormat28.getNumeratorFormat();
        java.text.ParseException parseException33 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray34 = parseException33.getSuppressed();
        boolean boolean35 = numberFormat30.equals((java.lang.Object) throwableArray34);
        numberFormat30.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.text.NumberFormat numberFormat39 = properFractionFormat38.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat39);
        org.apache.commons.math.fraction.Fraction fraction43 = new org.apache.commons.math.fraction.Fraction((int) ' ', (int) 'u');
        long long44 = fraction43.longValue();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getCurrencyInstance(locale45);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getInstance();
        java.lang.String str49 = numberFormat47.format(100L);
        int int50 = numberFormat47.getMinimumFractionDigits();
        numberFormat47.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance();
        numberFormat53.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode56 = numberFormat53.getRoundingMode();
        numberFormat47.setRoundingMode(roundingMode56);
        numberFormat46.setRoundingMode(roundingMode56);
        boolean boolean59 = numberFormat46.isParseIntegerOnly();
        boolean boolean60 = fraction43.equals((java.lang.Object) numberFormat46);
        numberFormat46.setParseIntegerOnly(true);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale63.getDisplayLanguage(locale64);
        java.lang.String str66 = locale63.getISO3Language();
        java.lang.String str67 = locale63.getScript();
        java.lang.String str68 = locale63.getDisplayScript();
        java.lang.String str69 = locale63.getDisplayVariant();
        java.util.Set<java.lang.String> strSet70 = locale63.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getIntegerInstance(locale63);
        java.lang.String str72 = locale63.getCountry();
        java.util.Set<java.lang.String> strSet73 = locale63.getUnicodeLocaleAttributes();
        boolean boolean74 = numberFormat46.equals((java.lang.Object) strSet73);
        int int75 = numberFormat46.getMinimumIntegerDigits();
        java.util.Locale.Builder builder76 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder78 = builder76.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder79 = builder78.clear();
        java.util.Locale locale80 = builder79.build();
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.lang.String str83 = locale81.getDisplayLanguage(locale82);
        java.lang.String str84 = locale82.getScript();
        java.lang.String str85 = locale82.getCountry();
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getNumberInstance(locale82);
        java.util.Locale.Builder builder87 = builder79.setLocale(locale82);
        java.util.Locale locale88 = java.util.Locale.TAIWAN;
        java.lang.String str89 = locale88.getDisplayLanguage();
        java.util.Locale.Builder builder90 = builder87.setLocale(locale88);
        java.util.Locale.Builder builder91 = builder87.clearExtensions();
        boolean boolean92 = numberFormat46.equals((java.lang.Object) builder87);
        int int93 = numberFormat46.getMaximumIntegerDigits();
        properFractionFormat40.setDenominatorFormat(numberFormat46);
        boolean boolean95 = field0.equals((java.lang.Object) properFractionFormat40);
        java.text.NumberFormat numberFormat96 = properFractionFormat40.getDenominatorFormat();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "10\240000 %" + "'", str16, "10\240000 %");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "100" + "'", str49, "100");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode56.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str65, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "kor" + "'", str66, "kor");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str83, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "chinois" + "'", str89, "chinois");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2147483647 + "'", int93 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(numberFormat96);
    }

    @Test
    public void test13737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13737");
        java.util.Locale locale1 = new java.util.Locale("english");
        org.junit.Assert.assertEquals(locale1.toString(), "english");
    }

    @Test
    public void test13738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13738");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
    }

    @Test
    public void test13739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13739");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        boolean boolean2 = numberFormat0.isParseIntegerOnly();
        java.lang.String str4 = numberFormat0.format((double) 0.0f);
        boolean boolean5 = numberFormat0.isGroupingUsed();
        java.math.RoundingMode roundingMode6 = numberFormat0.getRoundingMode();
        java.math.RoundingMode roundingMode7 = numberFormat0.getRoundingMode();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0,00 \244" + "'", str4, "0,00 \244");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + roundingMode6 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode6.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode7 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode7.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test13740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13740");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale9.getScript();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale9, locale12, locale13 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList15, filteringMode17);
        java.util.Locale locale19 = java.util.Locale.lookup(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.getScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale29, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList35, filteringMode37);
        java.lang.String[] strArray46 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList47);
        java.lang.String str50 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList47);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Collection<java.util.Locale> localeCollection54 = null;
        java.util.Locale.FilteringMode filteringMode55 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, localeCollection54, filteringMode55);
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, localeCollection54);
        java.util.Locale locale58 = java.util.Locale.UK;
        java.lang.String str59 = locale58.getDisplayScript();
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str61 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet60);
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet60);
        java.util.Locale locale64 = new java.util.Locale("French");
        java.util.Locale locale65 = locale64.stripExtensions();
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getIntegerInstance(locale64);
        java.lang.String str67 = locale64.toLanguageTag();
        java.util.Locale locale68 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale68);
        java.lang.String str70 = locale68.getISO3Language();
        java.util.Set<java.lang.Character> charSet71 = locale68.getExtensionKeys();
        java.lang.String str72 = locale64.getDisplayVariant(locale68);
        java.util.Set<java.lang.String> strSet73 = locale68.getUnicodeLocaleKeys();
        java.lang.String str74 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet73);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap75 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList76 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap75);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode37.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + filteringMode55 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode55.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList56);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertEquals(locale64.toString(), "french");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "french" + "'", str67, "french");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(charSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(languageRangeList76);
    }

    @Test
    public void test13741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13741");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str6 = locale0.getDisplayLanguage(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale7.getVariant();
        boolean boolean9 = locale7.hasExtensions();
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        java.util.Set<java.lang.Character> charSet11 = locale7.getExtensionKeys();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale7);
        java.lang.String str13 = locale7.getDisplayName();
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        java.lang.String str18 = locale7.getDisplayLanguage(locale14);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale7);
        java.util.Set<java.lang.String> strSet20 = locale7.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet21 = locale7.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u97d3\u6587" + "'", str6, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese" + "'", str10, "Chinese");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "anglais (Canada)" + "'", str13, "anglais (Canada)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u82f1\u6587" + "'", str18, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(charSet21);
    }

    @Test
    public void test13742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13742");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale2.getDisplayScript();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getDisplayVariant();
        java.lang.String str7 = locale5.getDisplayScript();
        java.lang.String str8 = locale5.getDisplayCountry();
        java.lang.String str9 = locale2.getDisplayName(locale5);
        java.lang.String str10 = locale2.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale11.getISO3Language();
        java.lang.String str15 = locale11.getScript();
        java.lang.String str16 = locale11.getDisplayScript();
        java.lang.String str17 = locale11.getDisplayVariant();
        java.lang.String str18 = locale2.getDisplayLanguage(locale11);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setVariant("");
        java.util.Locale.Builder builder23 = builder21.setVariant("French");
        java.util.Locale.Builder builder25 = builder21.setLanguageTag("Kanada");
        java.util.Locale locale26 = builder25.build();
        java.lang.String str27 = locale11.getDisplayLanguage(locale26);
        java.lang.String str28 = locale0.getDisplayName(locale26);
        java.lang.String str29 = locale0.getDisplayVariant();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getNumberInstance(locale32);
        int int35 = numberFormat34.getMinimumFractionDigits();
        java.util.Currency currency36 = numberFormat34.getCurrency();
        fractionFormat31.setNumeratorFormat(numberFormat34);
        boolean boolean38 = numberFormat34.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "japonais" + "'", str1, "japonais");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str9, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "allemand (Allemagne)" + "'", str10, "allemand (Allemagne)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str18, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "kanada");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Korean" + "'", str27, "Korean");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Japanese (Japan)" + "'", str28, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fran\347ais" + "'", str33, "fran\347ais");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test13743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13743");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        numberFormat10.setMaximumFractionDigits((int) (byte) 100);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getISO3Language();
        java.util.Set<java.lang.Character> charSet17 = locale14.getExtensionKeys();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale14);
        java.lang.String str19 = locale14.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getDisplayVariant();
        java.util.Locale locale22 = java.util.Locale.UK;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale20.getDisplayScript(locale22);
        java.lang.String str26 = locale14.getDisplayVariant(locale22);
        java.lang.String str27 = locale22.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale22);
        boolean boolean29 = numberFormat10.equals((java.lang.Object) locale22);
        numberFormat10.setGroupingUsed(false);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10\240000 %" + "'", str8, "10\240000 %");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test13744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13744");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\244 97.00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=? 97.00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13745");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale9.getScript();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale9, locale12, locale13 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList15, filteringMode17);
        java.lang.String[] strArray26 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList27);
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList27);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Collection<java.util.Locale> localeCollection34 = null;
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, localeCollection34, filteringMode35);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection34);
        java.util.Locale locale40 = new java.util.Locale("1 / 1", "java.text.ParseException: java.text.ParseException: 100");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str42 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.parse("coreano", strMap44);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(locale46);
        java.util.Set<java.lang.Character> charSet48 = locale46.getExtensionKeys();
        java.util.Locale locale49 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale49);
        java.lang.String str51 = locale46.getDisplayScript(locale49);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getCurrencyInstance(locale46);
        java.util.Set<java.lang.String> strSet53 = locale46.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags(languageRangeList45, (java.util.Collection<java.lang.String>) strSet53);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.parse("usa");
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayLanguage(locale61);
        java.lang.String str63 = locale60.getISO3Language();
        java.lang.String str64 = locale59.getDisplayCountry(locale60);
        java.lang.String str65 = locale60.toLanguageTag();
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getCurrencyInstance(locale60);
        java.lang.String str67 = locale57.getDisplayVariant(locale60);
        java.lang.String str69 = locale60.getExtension('u');
        java.lang.String str70 = locale60.getCountry();
        java.util.Locale.Builder builder71 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder73 = builder71.setVariant("");
        java.util.Locale.Builder builder74 = builder73.clear();
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale75.getDisplayLanguage(locale76);
        java.lang.String str78 = locale75.getISO3Language();
        boolean boolean79 = locale75.hasExtensions();
        java.util.Locale.Builder builder80 = builder73.setLocale(locale75);
        java.util.Set<java.lang.String> strSet81 = locale75.getUnicodeLocaleKeys();
        java.lang.String str82 = locale60.getDisplayCountry(locale75);
        java.util.Set<java.lang.String> strSet83 = locale60.getUnicodeLocaleAttributes();
        java.lang.String str84 = java.util.Locale.lookupTag(languageRangeList56, (java.util.Collection<java.lang.String>) strSet83);
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags(languageRangeList45, (java.util.Collection<java.lang.String>) strSet83);
        java.lang.String str86 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList85);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode35.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertEquals(locale40.toString(), "1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(languageRangeList56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "kor" + "'", str63, "kor");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ko" + "'", str65, "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str77, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "kor" + "'", str78, "kor");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test13746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13746");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 4095);
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str6 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction5);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int11 = fraction10.intValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction7.subtract(fraction10);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction5.add(fraction7);
        int int14 = fraction13.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction17 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.multiply(fraction17);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance();
        boolean boolean20 = numberFormat19.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        boolean boolean22 = numberFormat19.isParseIntegerOnly();
        boolean boolean23 = fraction17.equals((java.lang.Object) boolean22);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction2.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction27 = fraction24.divide(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction1.add(fraction27);
        java.lang.String str29 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction1);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-117 / 1" + "'", str6, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-117) + "'", int11 == (-117));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "4,095 / 1" + "'", str29, "4,095 / 1");
    }

    @Test
    public void test13747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13747");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 10);
        parsePosition14.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction17 = properFractionFormat11.parse("fran\347ais", parsePosition14);
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayScript();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale18);
        properFractionFormat11.setWholeFormat(numberFormat21);
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale27.getScript();
        java.lang.String str30 = locale27.getVariant();
        java.util.Locale.setDefault(category25, locale27);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale32);
        java.lang.String str34 = locale32.getDisplayScript();
        java.util.Locale.setDefault(category25, locale32);
        java.lang.String str36 = locale23.getDisplayCountry(locale32);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getNumberInstance(locale23);
        numberFormat37.setMinimumIntegerDigits((-1));
        numberFormat37.setGroupingUsed(false);
        java.lang.String str43 = numberFormat37.format((double) (byte) 0);
        int int44 = numberFormat37.getMinimumFractionDigits();
        properFractionFormat11.setDenominatorFormat(numberFormat37);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance();
        numberFormat48.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance();
        numberFormat52.setMaximumIntegerDigits((-1));
        java.util.Currency currency55 = numberFormat52.getCurrency();
        numberFormat51.setCurrency(currency55);
        numberFormat48.setCurrency(currency55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = new org.apache.commons.math.fraction.FractionFormat(numberFormat47, numberFormat48);
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance();
        numberFormat59.setMaximumIntegerDigits((-1));
        numberFormat59.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean65 = numberFormat64.isGroupingUsed();
        numberFormat64.setParseIntegerOnly(false);
        java.lang.Number number69 = numberFormat64.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48, numberFormat59, numberFormat64);
        java.text.NumberFormat numberFormat71 = properFractionFormat70.getWholeFormat();
        java.text.NumberFormat numberFormat72 = properFractionFormat70.getWholeFormat();
        java.text.ParsePosition parsePosition75 = new java.text.ParsePosition(10);
        org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat70.parse("-0%", parsePosition75);
        org.apache.commons.math.fraction.Fraction fraction77 = properFractionFormat11.parse("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=-117,endIndex=0]", parsePosition75);
        java.text.NumberFormat numberFormat78 = properFractionFormat11.getWholeFormat();
        numberFormat78.setMaximumIntegerDigits((int) (short) -2);
        java.lang.Object obj81 = numberFormat78.clone();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(fraction17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u5fb7\u56fd" + "'", str36, "\u5fb7\u56fd");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + number69 + "' != '" + 0L + "'", number69, 0L);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNull(fraction76);
        org.junit.Assert.assertNull(fraction77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(obj81);
    }

    @Test
    public void test13748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13748");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 13689.0f, 0.0d, (-43));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 13,689 to fraction (9,223,372,036,854,762,120/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13749");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.negate();
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.abs();
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = new org.apache.commons.math.fraction.Fraction((double) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction7.add(fraction10);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int20 = fraction19.intValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction15.multiply(fraction16);
        org.apache.commons.math.fraction.Fraction fraction24 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction25 = fraction22.add(fraction24);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int30 = fraction29.intValue();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction26.subtract(fraction29);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayLanguage(locale36);
        java.lang.String str38 = locale36.getScript();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray41 = new java.util.Locale[] { locale36, locale39, locale40 };
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.Locale.FilteringMode filteringMode44 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList42, filteringMode44);
        boolean boolean46 = fraction31.equals((java.lang.Object) localeList45);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction31.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction24.add(fraction47);
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int53 = fraction52.intValue();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction49.subtract(fraction52);
        boolean boolean56 = fraction52.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction52.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int65 = fraction64.intValue();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction61.subtract(fraction64);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction60.multiply(fraction61);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction52.add(fraction67);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.negate();
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction73 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str74 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction73);
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction78 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int79 = fraction78.intValue();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction75.subtract(fraction78);
        org.apache.commons.math.fraction.Fraction fraction81 = fraction73.add(fraction75);
        int int82 = fraction81.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction85 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction86 = fraction81.multiply(fraction85);
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getNumberInstance();
        boolean boolean88 = numberFormat87.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat89 = new org.apache.commons.math.fraction.FractionFormat(numberFormat87);
        boolean boolean90 = numberFormat87.isParseIntegerOnly();
        boolean boolean91 = fraction85.equals((java.lang.Object) boolean90);
        org.apache.commons.math.fraction.Fraction fraction92 = fraction70.multiply(fraction85);
        int int93 = fraction92.intValue();
        org.apache.commons.math.fraction.Fraction fraction94 = fraction69.add(fraction92);
        org.apache.commons.math.fraction.Fraction fraction95 = fraction48.subtract(fraction69);
        int int96 = fraction48.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction97 = fraction7.add(fraction48);
        org.apache.commons.math.fraction.Fraction fraction98 = fraction2.add(fraction97);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-97L) + "'", long4 == (-97L));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-117) + "'", int20 == (-117));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-117) + "'", int30 == (-117));
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str37, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + filteringMode44 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode44.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-117) + "'", int53 == (-117));
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-117) + "'", int65 == (-117));
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-117 / 1" + "'", str74, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-117) + "'", int79 == (-117));
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertNotNull(fraction95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 117 + "'", int96 == 117);
        org.junit.Assert.assertNotNull(fraction97);
        org.junit.Assert.assertNotNull(fraction98);
    }

    @Test
    public void test13750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13750");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getIntegerInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.lang.String str23 = locale21.getScript();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray26 = new java.util.Locale[] { locale21, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList30 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList27, filteringMode29);
        java.lang.String[] strArray38 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = numberFormat7.equals((java.lang.Object) strList39);
        numberFormat7.setGroupingUsed(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj51 = numberFormat47.parseObject("hi!", parsePosition50);
        java.lang.Object obj52 = numberFormat7.parseObject("french-French", parsePosition50);
        java.lang.Object obj53 = numberFormat2.parseObject("JAVA.TEXT.FIELDPOSITION[FIELD=-117,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(SIGN),BEGININDEX=0,ENDINDEX=0]", parsePosition50);
        java.lang.StringBuffer stringBuffer55 = null;
        java.text.NumberFormat.Field field56 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition58 = new java.text.FieldPosition((java.text.Format.Field) field56, (int) (short) 0);
        java.lang.String str59 = fieldPosition58.toString();
        java.lang.String str60 = fieldPosition58.toString();
        fieldPosition58.setBeginIndex((int) (byte) 10);
        int int63 = fieldPosition58.getEndIndex();
        int int64 = fieldPosition58.getEndIndex();
        fieldPosition58.setEndIndex((int) ' ');
        fieldPosition58.setEndIndex((int) (short) -117);
        int int69 = fieldPosition58.getField();
        java.lang.String str70 = fieldPosition58.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer71 = numberFormat2.format((java.lang.Object) (-13689.0d), stringBuffer55, fieldPosition58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode29.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(field56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str59, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str60, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=-117]" + "'", str70, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=-117]");
    }

    @Test
    public void test13751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13751");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.lang.String str4 = fieldPosition2.toString();
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        boolean boolean12 = fraction8.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.reciprocal();
        double double14 = fraction13.doubleValue();
        boolean boolean15 = fieldPosition2.equals((java.lang.Object) fraction13);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int20 = fraction19.intValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.subtract(fraction19);
        boolean boolean23 = fraction19.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction13.subtract(fraction19);
        int int26 = fraction13.getDenominator();
        double double27 = fraction13.doubleValue();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.008547008547008548d) + "'", double14 == (-0.008547008547008548d));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-117) + "'", int20 == (-117));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 117 + "'", int26 == 117);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-0.008547008547008548d) + "'", double27 == (-0.008547008547008548d));
    }

    @Test
    public void test13752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13752");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        java.lang.String str8 = locale4.getScript();
        java.lang.String str9 = locale4.getDisplayScript();
        java.lang.String str10 = locale4.getDisplayVariant();
        java.util.Set<java.lang.String> strSet11 = locale4.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale4);
        java.lang.String str13 = locale4.getCountry();
        java.util.Set<java.lang.String> strSet14 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder15 = builder0.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder0.addUnicodeLocaleAttribute("1 / 1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1 / 1 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test13753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13753");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.abs();
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str7 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction6.add(fraction8);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction3.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction2.multiply(fraction3);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int26 = fraction25.intValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction22.subtract(fraction25);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.multiply(fraction22);
        double double29 = fraction28.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction17.subtract(fraction30);
        java.lang.String str32 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction17);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-117 / 1" + "'", str7, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-117) + "'", int26 == (-117));
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1 / 1" + "'", str32, "1 / 1");
    }

    @Test
    public void test13754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13754");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale14 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category0, locale14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance();
        boolean boolean18 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat17);
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        java.lang.String str22 = numberFormat20.format((long) (-29));
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-29" + "'", str22, "-29");
    }

    @Test
    public void test13755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13755");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale2.getDisplayScript();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getDisplayVariant();
        java.lang.String str7 = locale5.getDisplayScript();
        java.lang.String str8 = locale5.getDisplayCountry();
        java.lang.String str9 = locale2.getDisplayName(locale5);
        java.lang.String str10 = locale2.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale11.getISO3Language();
        java.lang.String str15 = locale11.getScript();
        java.lang.String str16 = locale11.getDisplayScript();
        java.lang.String str17 = locale11.getDisplayVariant();
        java.lang.String str18 = locale2.getDisplayLanguage(locale11);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setVariant("");
        java.util.Locale.Builder builder23 = builder21.setVariant("French");
        java.util.Locale.Builder builder25 = builder21.setLanguageTag("Kanada");
        java.util.Locale locale26 = builder25.build();
        java.lang.String str27 = locale11.getDisplayLanguage(locale26);
        java.lang.String str28 = locale0.getDisplayName(locale26);
        java.lang.String str29 = locale0.getDisplayVariant();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str32 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanese" + "'", str1, "Japanese");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str9, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "German (Germany)" + "'", str10, "German (Germany)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str18, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "kanada");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Korean" + "'", str27, "Korean");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Japanese (Japan)" + "'", str28, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Japanese (Japan)" + "'", str32, "Japanese (Japan)");
    }

    @Test
    public void test13756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13756");
        java.util.Locale locale2 = new java.util.Locale("GB", "3,200%");
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str4 = locale2.getScript();
        org.junit.Assert.assertEquals(locale2.toString(), "gb_3,200%");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gb" + "'", str3, "gb");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test13757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13757");
        java.util.Locale locale1 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.util.Locale.setDefault(locale1);
        java.lang.String str3 = locale1.getDisplayVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test13758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13758");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 115, (int) (short) 10);
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test13759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13759");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str1 = field0.toString();
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale2);
        boolean boolean5 = field0.equals((java.lang.Object) numberFormat4);
        java.text.NumberFormat.Field field6 = java.text.NumberFormat.Field.SIGN;
        java.lang.Object obj7 = new java.lang.Object();
        boolean boolean8 = field6.equals(obj7);
        boolean boolean9 = field0.equals((java.lang.Object) field6);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field6, (int) (short) 287);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str1, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test13760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13760");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder4 = builder0.setLanguage("eng");
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale8.getScript();
        java.lang.String str11 = locale8.getVariant();
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale13 = java.util.Locale.getDefault(category6);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.util.Locale.setDefault(category6, locale14);
        java.util.Locale locale20 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category6, locale20);
        java.util.Locale locale22 = java.util.Locale.getDefault(category6);
        java.text.NumberFormat.Field field23 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition((java.text.Format.Field) field23, (int) (short) 0);
        int int26 = fieldPosition25.getEndIndex();
        java.lang.String str27 = fieldPosition25.toString();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int32 = fraction31.intValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction28.subtract(fraction31);
        boolean boolean35 = fraction31.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.reciprocal();
        double double37 = fraction36.doubleValue();
        boolean boolean38 = fieldPosition25.equals((java.lang.Object) fraction36);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int43 = fraction42.intValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction39.subtract(fraction42);
        boolean boolean46 = fraction42.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction42.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction36.subtract(fraction42);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction42.abs();
        java.lang.String str50 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction49);
        java.util.Locale locale52 = new java.util.Locale("Korean (South Korea)");
        boolean boolean53 = fraction49.equals((java.lang.Object) locale52);
        java.util.Locale.setDefault(category6, locale52);
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.lang.String str56 = locale55.getVariant();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getNumberInstance(locale55);
        boolean boolean58 = locale55.hasExtensions();
        java.lang.String str59 = locale52.getDisplayScript(locale55);
        java.lang.String str60 = locale52.getScript();
        java.util.Locale locale62 = new java.util.Locale("Korean (South Korea)");
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.PRC;
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance(locale64);
        java.lang.String str66 = locale62.getDisplayVariant(locale64);
        java.lang.String str67 = locale62.getDisplayName();
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getIntegerInstance(locale62);
        java.lang.String str69 = locale52.getDisplayScript(locale62);
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getCurrencyInstance(locale62);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder71 = builder0.setLocale(locale62);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: korean (south korea) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "eng__#u-francese");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat15);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str27, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-117) + "'", int32 == (-117));
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-0.008547008547008548d) + "'", double37 == (-0.008547008547008548d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-117) + "'", int43 == (-117));
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "117 / 1" + "'", str50, "117 / 1");
        org.junit.Assert.assertEquals(locale52.toString(), "korean (south korea)");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals(locale62.toString(), "korean (south korea)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "korean (south korea)" + "'", str63, "korean (south korea)");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "korean (south korea)" + "'", str67, "korean (south korea)");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(numberFormat70);
    }

    @Test
    public void test13761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13761");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("French");
        java.util.Locale locale8 = locale7.stripExtensions();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str10 = locale7.toLanguageTag();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.lang.String str13 = locale7.toLanguageTag();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale16.getDisplayCountry(locale19);
        java.lang.String str21 = locale16.getDisplayLanguage();
        java.lang.String str22 = locale14.getDisplayLanguage(locale16);
        java.util.Locale locale23 = locale14.stripExtensions();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getIntegerInstance(locale23);
        java.lang.String str25 = locale7.getDisplayName(locale23);
        java.lang.String str26 = locale7.getVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale7.toString(), "french");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "french" + "'", str10, "french");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "french" + "'", str13, "french");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese" + "'", str15, "Chinese");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "United Kingdom" + "'", str20, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English" + "'", str21, "English");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese" + "'", str22, "Chinese");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "french" + "'", str25, "french");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test13762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13762");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getBeginIndex();
        int int8 = fieldPosition2.getBeginIndex();
        int int9 = fieldPosition2.getField();
        java.text.Format.Field field10 = fieldPosition2.getFieldAttribute();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(field10);
    }

    @Test
    public void test13763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13763");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (short) -1);
        double double2 = fraction1.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction3 = fraction1.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction1.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction4.add(fraction6);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
    }

    @Test
    public void test13764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13764");
        java.util.Locale locale3 = new java.util.Locale("java.text.ParseException: zh_CN", "java.text.FieldPosition[field=10,attribute=null,beginIndex=0,endIndex=0]", "JAVA.TEXT.PARSEPOSITION[INDEX=10,ERRORINDEX=9]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale3.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for JAVA.TEXT.FIELDPOSITION[FIELD=10,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "java.text.parseexception: zh_cn_JAVA.TEXT.FIELDPOSITION[FIELD=10,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]_JAVA.TEXT.PARSEPOSITION[INDEX=10,ERRORINDEX=9]");
    }

    @Test
    public void test13765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13765");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        int int12 = fraction11.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.multiply(fraction15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance();
        boolean boolean18 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        boolean boolean20 = numberFormat17.isParseIntegerOnly();
        boolean boolean21 = fraction15.equals((java.lang.Object) boolean20);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction0.multiply(fraction15);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction25 = fraction22.divide(fraction24);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction24.reciprocal();
        long long27 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int32 = fraction31.intValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction28.subtract(fraction31);
        boolean boolean35 = fraction31.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int42 = fraction41.intValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction38.subtract(fraction41);
        double double44 = fraction43.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction31.divide(fraction43);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction26.subtract(fraction43);
        org.apache.commons.math.fraction.Fraction fraction49 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.reciprocal();
        long long52 = fraction50.longValue();
        int int53 = fraction50.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction50.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction46.subtract(fraction50);
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.lang.String str60 = locale58.getScript();
        java.lang.String str61 = locale58.getVariant();
        java.util.Locale.setDefault(category56, locale58);
        java.util.Locale locale63 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale63);
        java.lang.String str65 = locale63.getDisplayScript();
        java.util.Locale.setDefault(category56, locale63);
        java.util.Locale locale67 = java.util.Locale.getDefault(category56);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = fraction50.compareTo((java.lang.Object) category56);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Locale$Category cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-117) + "'", int32 == (-117));
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-117) + "'", int42 == (-117));
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 117.0d + "'", double44 == 117.0d);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str59, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh");
    }

    @Test
    public void test13766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13766");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale locale5 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder8 = builder6.setLanguage("Germania");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test13767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13767");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale5 = java.util.Locale.UK;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale5.getDisplayScript(locale7);
        java.lang.String str10 = locale7.toLanguageTag();
        java.lang.String str11 = locale7.getVariant();
        java.lang.String str12 = locale4.getDisplayScript(locale7);
        java.lang.String str13 = locale4.getISO3Country();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.setVariant("");
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        java.lang.String str21 = locale18.getISO3Language();
        boolean boolean22 = locale18.hasExtensions();
        java.util.Locale.Builder builder23 = builder16.setLocale(locale18);
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale.Builder builder26 = builder23.setRegion("");
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("java.text.ParseException: 100");
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder29.setVariant("");
        java.util.Locale.Builder builder32 = builder31.clear();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        boolean boolean37 = locale33.hasExtensions();
        java.util.Locale.Builder builder38 = builder31.setLocale(locale33);
        java.util.Locale.Builder builder39 = builder38.clear();
        java.util.Locale.Builder builder40 = builder38.clear();
        java.util.Locale locale41 = builder40.build();
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale28.getDisplayName(locale41);
        java.lang.String str44 = locale41.getDisplayScript();
        java.util.Locale.Builder builder45 = builder23.setLocale(locale41);
        java.lang.String str46 = locale4.getDisplayLanguage(locale41);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ko" + "'", str10, "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Korean" + "'", str46, "Korean");
    }

    @Test
    public void test13768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13768");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (short) -117);
        java.lang.String str2 = parsePosition1.toString();
        java.lang.String str3 = parsePosition1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=-117,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=-117,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParsePosition[index=-117,errorIndex=-1]" + "'", str3, "java.text.ParsePosition[index=-117,errorIndex=-1]");
    }

    @Test
    public void test13769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13769");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        numberFormat3.setMaximumIntegerDigits((-1));
        java.util.Currency currency6 = numberFormat3.getCurrency();
        numberFormat2.setCurrency(currency6);
        numberFormat1.setCurrency(currency6);
        java.util.Currency currency9 = numberFormat1.getCurrency();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = numberFormat1.parseObject("en_GB");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
    }

    @Test
    public void test13770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13770");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        boolean boolean6 = numberFormat0.equals((java.lang.Object) locale4);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale4);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale4);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getNumberInstance(locale4);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test13771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13771");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat3 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj9 = numberFormat5.parseObject("hi!", parsePosition8);
        org.apache.commons.math.fraction.Fraction fraction10 = fractionFormat1.parse("-117 / 1", parsePosition8);
        java.lang.String str11 = parsePosition8.toString();
        int int12 = parsePosition8.getIndex();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("14");
        java.lang.String str15 = locale14.toLanguageTag();
        boolean boolean16 = parsePosition8.equals((java.lang.Object) locale14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        java.lang.String str19 = locale14.toLanguageTag();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.lang.String str24 = locale21.getISO3Language();
        java.lang.String str25 = locale20.getDisplayCountry(locale21);
        boolean boolean26 = locale20.hasExtensions();
        java.lang.String str27 = locale20.toLanguageTag();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale20);
        java.lang.String str29 = locale20.getScript();
        java.lang.String str30 = locale14.getDisplayScript(locale20);
        java.lang.String str32 = locale14.getExtension('a');
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.lang.String str34 = locale33.getDisplayLanguage();
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String str36 = locale35.getDisplayScript();
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleAttributes();
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = locale35.getDisplayCountry(locale38);
        java.lang.String str40 = locale35.getDisplayLanguage();
        java.lang.String str41 = locale33.getDisplayLanguage(locale35);
        java.util.Locale locale42 = locale33.stripExtensions();
        java.lang.String str43 = locale42.getVariant();
        java.lang.String str44 = locale14.getDisplayName(locale42);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=9]" + "'", str11, "java.text.ParsePosition[index=10,errorIndex=9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "und" + "'", str15, "und");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "und" + "'", str19, "und");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ko" + "'", str27, "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587" + "'", str34, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "United Kingdom" + "'", str39, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u82f1\u6587" + "'", str40, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinese" + "'", str41, "Chinese");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test13772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13772");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat3 = fractionFormat1.getNumeratorFormat();
        int int4 = numberFormat3.getMinimumIntegerDigits();
        numberFormat3.setMaximumIntegerDigits((int) ' ');
        numberFormat3.setParseIntegerOnly(true);
        numberFormat3.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test13773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13773");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("zh_CN");
        java.text.NumberFormat.Field field2 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field2, (int) (short) 0);
        int int5 = fieldPosition4.getEndIndex();
        java.text.ParseException parseException8 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray9 = parseException8.getSuppressed();
        int int10 = parseException8.getErrorOffset();
        boolean boolean11 = fieldPosition4.equals((java.lang.Object) parseException8);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setVariant("");
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale16.getISO3Language();
        boolean boolean20 = locale16.hasExtensions();
        java.util.Locale.Builder builder21 = builder14.setLocale(locale16);
        java.util.Locale.Builder builder22 = builder21.clear();
        boolean boolean23 = fieldPosition4.equals((java.lang.Object) builder22);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.lang.String str28 = locale26.getScript();
        java.lang.String str29 = locale26.getVariant();
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale31 = java.util.Locale.getDefault(category24);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.util.Locale.setDefault(category24, locale32);
        java.util.Locale locale35 = java.util.Locale.getDefault(category24);
        java.util.Locale.Builder builder36 = builder22.setLocale(locale35);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.setVariant("");
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        java.util.Locale locale41 = builder39.build();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.lang.String str46 = locale43.getISO3Language();
        java.lang.String str47 = locale42.getDisplayCountry(locale43);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale49.getDisplayLanguage(locale50);
        java.lang.String str52 = locale49.getISO3Language();
        java.lang.String str53 = locale48.getDisplayCountry(locale49);
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str55 = locale49.getDisplayLanguage(locale54);
        java.lang.String str56 = locale43.getDisplayName(locale54);
        java.util.Locale.Builder builder57 = builder39.setLocale(locale43);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale43);
        java.lang.String str59 = locale35.getDisplayLanguage(locale43);
        java.lang.String str60 = locale1.getDisplayLanguage(locale35);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getCurrencyInstance(locale35);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(field2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "kor" + "'", str46, "kor");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str51, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "kor" + "'", str52, "kor");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u671d\u9c9c\u6587" + "'", str55, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u671d\u9c9c\u6587" + "'", str56, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str59, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(numberFormat61);
    }

    @Test
    public void test13774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13774");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str6 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction5);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int11 = fraction10.intValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction7.subtract(fraction10);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction5.add(fraction7);
        int int14 = fraction13.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction17 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.multiply(fraction17);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance();
        boolean boolean20 = numberFormat19.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        boolean boolean22 = numberFormat19.isParseIntegerOnly();
        boolean boolean23 = fraction17.equals((java.lang.Object) boolean22);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction2.multiply(fraction17);
        int int25 = fraction24.intValue();
        java.lang.String str26 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction24);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int31 = fraction30.intValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction27.subtract(fraction30);
        boolean boolean34 = fraction30.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction30.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction30.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction24.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction30.abs();
        boolean boolean39 = parsePosition1.equals((java.lang.Object) fraction38);
        int int40 = parsePosition1.getIndex();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-117 / 1" + "'", str6, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-117) + "'", int11 == (-117));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 / 35" + "'", str26, "-1 / 35");
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-117) + "'", int31 == (-117));
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test13775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13775");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        int int33 = numberFormat29.getMaximumIntegerDigits();
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) '4');
        java.lang.Number number37 = numberFormat29.parse("java.text.ParsePosition[index=10,errorIndex=9]", parsePosition36);
        numberFormat29.setGroupingUsed(false);
        int int40 = numberFormat29.getMinimumFractionDigits();
        java.lang.Class<?> wildcardClass41 = numberFormat29.getClass();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNull(number37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test13776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13776");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        int int4 = fieldPosition2.getField();
        int int5 = fieldPosition2.getEndIndex();
        int int6 = fieldPosition2.getField();
        fieldPosition2.setBeginIndex((int) '#');
        java.lang.String str9 = fieldPosition2.toString();
        java.lang.String str10 = fieldPosition2.toString();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        numberFormat11.setMaximumFractionDigits((int) (short) -117);
        int int18 = numberFormat11.getMinimumFractionDigits();
        numberFormat11.setMaximumIntegerDigits((int) (short) -1);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj30 = numberFormat26.parseObject("hi!", parsePosition29);
        java.lang.Number number31 = numberFormat22.parse("10,000%", parsePosition29);
        int int32 = parsePosition29.getErrorIndex();
        int int33 = parsePosition29.getIndex();
        int int34 = parsePosition29.getErrorIndex();
        java.lang.String str35 = parsePosition29.toString();
        java.lang.Object obj36 = numberFormat11.parseObject("", parsePosition29);
        boolean boolean37 = fieldPosition2.equals((java.lang.Object) parsePosition29);
        java.text.Format.Field field38 = fieldPosition2.getFieldAttribute();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=35,endIndex=0]" + "'", str9, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=35,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=35,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=35,endIndex=0]");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(number31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str35, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(field38);
    }

    @Test
    public void test13777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13777");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\u20ac", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13778");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) -117);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field0);
        org.junit.Assert.assertNotNull(field0);
    }

    @Test
    public void test13779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13779");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        int int30 = parsePosition26.getIndex();
        org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat17.parse("French", parsePosition26);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.util.Currency currency38 = numberFormat35.getCurrency();
        numberFormat34.setCurrency(currency38);
        java.lang.String str41 = numberFormat34.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33, numberFormat34, numberFormat43);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj50 = numberFormat46.parseObject("hi!", parsePosition49);
        java.lang.String str51 = parsePosition49.toString();
        org.apache.commons.math.fraction.Fraction fraction52 = properFractionFormat44.parse("\244 32.00", parsePosition49);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat17.parse("\uc911\uad6d\uc5b4", parsePosition49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getNumeratorFormat();
        java.text.NumberFormat numberFormat56 = fractionFormat54.getNumeratorFormat();
        java.lang.String str58 = numberFormat56.format((double) 1.0f);
        properFractionFormat17.setWholeFormat(numberFormat56);
        java.text.ParsePosition parsePosition62 = new java.text.ParsePosition((int) (short) 10);
        parsePosition62.setErrorIndex((int) (byte) 1);
        parsePosition62.setErrorIndex(0);
        int int67 = parsePosition62.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction68 = properFractionFormat17.parse("\uce90\ub098\ub2e4", parsePosition62);
        java.lang.String str69 = parsePosition62.toString();
        java.text.FieldPosition fieldPosition71 = new java.text.FieldPosition((int) (short) 13689);
        fieldPosition71.setBeginIndex((-4));
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.lang.String str76 = locale74.getDisplayLanguage(locale75);
        java.util.Locale locale77 = java.util.Locale.ITALIAN;
        java.lang.String str78 = locale75.getDisplayName(locale77);
        java.util.Set<java.lang.String> strSet79 = locale77.getUnicodeLocaleAttributes();
        boolean boolean80 = fieldPosition71.equals((java.lang.Object) strSet79);
        fieldPosition71.setBeginIndex((int) (byte) 117);
        int int83 = fieldPosition71.getBeginIndex();
        boolean boolean84 = parsePosition62.equals((java.lang.Object) int83);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNull(fraction31);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10,000%" + "'", str41, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str51, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(fraction68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str69, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str76, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "coreano" + "'", str78, "coreano");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 117 + "'", int83 == 117);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test13780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13780");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setWholeFormat(numberFormat48);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale51.getDisplayCountry(locale52);
        java.lang.String str57 = locale52.toLanguageTag();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance(locale52);
        boolean boolean59 = numberFormat58.isParseIntegerOnly();
        properFractionFormat17.setDenominatorFormat(numberFormat58);
        java.util.Locale locale62 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale62);
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) (short) 10);
        parsePosition66.setErrorIndex((int) (byte) 1);
        java.lang.Object obj69 = fractionFormat63.parseObject("United Kingdom", parsePosition66);
        org.apache.commons.math.fraction.Fraction fraction70 = properFractionFormat17.parse("32", parsePosition66);
        java.text.NumberFormat numberFormat71 = properFractionFormat17.getDenominatorFormat();
        java.util.Currency currency72 = numberFormat71.getCurrency();
        boolean boolean73 = numberFormat71.isParseIntegerOnly();
        java.util.Locale.Builder builder74 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder76 = builder74.setVariant("");
        java.util.Locale.Builder builder78 = builder76.setVariant("French");
        java.util.Locale.Builder builder80 = builder76.setVariant("Chinese");
        java.util.Locale.Category category81 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.lang.String str84 = locale82.getDisplayLanguage(locale83);
        java.lang.String str85 = locale83.getScript();
        java.lang.String str86 = locale83.getVariant();
        java.util.Locale.setDefault(category81, locale83);
        java.util.Locale locale88 = java.util.Locale.getDefault(category81);
        java.util.Locale locale89 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat90 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale89);
        java.util.Locale.setDefault(category81, locale89);
        java.util.Locale.Builder builder92 = builder80.setLocale(locale89);
        java.util.Locale.Builder builder93 = builder92.clearExtensions();
        boolean boolean94 = numberFormat71.equals((java.lang.Object) builder93);
        java.util.Locale locale95 = builder93.build();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fran\347ais" + "'", str33, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko" + "'", str57, "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(fraction70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(currency72);
        org.junit.Assert.assertEquals(currency72.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + category81 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category81.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str84, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "fr");
    }

    @Test
    public void test13781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13781");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) (short) -52);
    }

    @Test
    public void test13782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13782");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (byte) 0);
        java.util.Locale locale4 = new java.util.Locale("United Kingdom", "1");
        boolean boolean5 = parsePosition1.equals((java.lang.Object) locale4);
        java.lang.String str6 = locale4.getVariant();
        java.lang.String str7 = locale4.getLanguage();
        org.junit.Assert.assertEquals(locale4.toString(), "united kingdom_1");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "united kingdom" + "'", str7, "united kingdom");
    }

    @Test
    public void test13783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13783");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) (byte) -1);
        int int2 = fieldPosition1.getBeginIndex();
        fieldPosition1.setBeginIndex(32);
        java.util.Locale locale8 = new java.util.Locale("java.text.ParseException: ", "Korean", "\uc601\uc5b4");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        numberFormat9.setMaximumIntegerDigits((int) (short) -117);
        boolean boolean12 = fieldPosition1.equals((java.lang.Object) numberFormat9);
        fieldPosition1.setBeginIndex((int) (short) 52);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13784");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.text.NumberFormat.Field field5 = java.text.NumberFormat.Field.PERMILLE;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        boolean boolean12 = field5.equals((java.lang.Object) locale6);
        java.lang.String str13 = locale6.getDisplayVariant();
        java.lang.String str14 = locale6.getScript();
        java.lang.String str15 = locale6.getDisplayLanguage();
        java.util.Locale.Builder builder16 = builder2.setLocale(locale6);
        java.util.Locale locale17 = builder2.build();
        java.util.Locale.Builder builder18 = builder2.clear();
        java.util.Locale.Builder builder19 = builder2.clear();
        java.util.Locale locale20 = builder19.build();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("-13,572 / 1");
        java.util.Locale.Builder builder23 = builder19.setLocale(locale22);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cor\351en" + "'", str15, "cor\351en");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test13785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13785");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.util.Currency currency11 = numberFormat8.getCurrency();
        numberFormat7.setCurrency(currency11);
        numberFormat6.setCurrency(currency11);
        java.math.RoundingMode roundingMode14 = numberFormat6.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        org.apache.commons.math.fraction.Fraction fraction18 = fractionFormat16.parse("-1 / 1");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj24 = numberFormat20.parseObject("hi!", parsePosition23);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getISO3Language();
        java.util.Set<java.lang.Character> charSet29 = locale26.getExtensionKeys();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.util.Currency currency38 = numberFormat35.getCurrency();
        numberFormat34.setCurrency(currency38);
        java.lang.String str41 = numberFormat34.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33, numberFormat34, numberFormat43);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance();
        java.lang.String str48 = numberFormat46.format(100L);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj54 = numberFormat50.parseObject("hi!", parsePosition53);
        java.lang.Number number55 = numberFormat46.parse("10,000%", parsePosition53);
        int int56 = parsePosition53.getErrorIndex();
        parsePosition53.setErrorIndex((int) (short) 10);
        int int59 = parsePosition53.getErrorIndex();
        java.lang.Object obj60 = numberFormat34.parseObject("\u82f1\u6587\u7f8e\u570b)", parsePosition53);
        java.text.NumberFormat.Field field61 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition((java.text.Format.Field) field61, (int) (short) 0);
        java.text.FieldPosition fieldPosition64 = new java.text.FieldPosition((java.text.Format.Field) field61);
        int int65 = fieldPosition64.getField();
        boolean boolean66 = parsePosition53.equals((java.lang.Object) fieldPosition64);
        java.lang.Object obj67 = fractionFormat31.parseObject("0 / 1", parsePosition53);
        int int68 = parsePosition53.getIndex();
        java.lang.Object obj69 = numberFormat20.parseObject("Korean (South Korea)", parsePosition53);
        org.apache.commons.math.fraction.Fraction fraction70 = fractionFormat16.parse("\u5fb7\u6587\u5fb7\u570b)", parsePosition53);
        int int71 = parsePosition53.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode14 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode14.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10,000%" + "'", str41, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100" + "'", str48, "100");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(number55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(field61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(fraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
    }

    @Test
    public void test13786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13786");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Canada" + "'", str2, "Canada");
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test13787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13787");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\244 117.00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=? 117.00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13788");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        boolean boolean7 = fraction3.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int14 = fraction13.intValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction10.subtract(fraction13);
        double double16 = fraction15.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction3.divide(fraction15);
        double double18 = fraction3.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction20 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((-1));
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str27 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int32 = fraction31.intValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction28.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction26.add(fraction28);
        int int35 = fraction34.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int43 = fraction42.intValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction39.subtract(fraction42);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction34.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction45.abs();
        boolean boolean48 = parsePosition23.equals((java.lang.Object) fraction47);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction21.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction53 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        int int54 = fraction53.getDenominator();
        float float55 = fraction53.floatValue();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction47.multiply(fraction53);
        int int57 = fraction47.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction3.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str64 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction63);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.divide(fraction63);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction47.subtract(fraction60);
        long long67 = fraction47.longValue();
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction71 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int72 = fraction71.intValue();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction68.subtract(fraction71);
        java.util.Locale.LanguageRange[] languageRangeArray74 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList75 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList75, languageRangeArray74);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale77.getDisplayLanguage(locale78);
        java.lang.String str80 = locale78.getScript();
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.util.Locale locale82 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray83 = new java.util.Locale[] { locale78, locale81, locale82 };
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.Locale.FilteringMode filteringMode86 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList75, (java.util.Collection<java.util.Locale>) localeList84, filteringMode86);
        boolean boolean88 = fraction73.equals((java.lang.Object) localeList87);
        double double89 = fraction73.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction90 = fraction47.subtract(fraction73);
        org.apache.commons.math.fraction.Fraction fraction91 = fraction73.abs();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-117) + "'", int14 == (-117));
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 117.0d + "'", double16 == 117.0d);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-117.0d) + "'", double18 == (-117.0d));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-117 / 1" + "'", str27, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-117) + "'", int32 == (-117));
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-117) + "'", int43 == (-117));
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-1.0f) + "'", float55 == (-1.0f));
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-117 / 1" + "'", str64, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-117) + "'", int72 == (-117));
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(languageRangeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str79, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + filteringMode86 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode86.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 117.0d + "'", double89 == 117.0d);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertNotNull(fraction91);
    }

    @Test
    public void test13789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13789");
        java.util.Locale locale3 = new java.util.Locale("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", "", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.lang.String str6 = locale4.getDisplayScript();
        java.lang.String str7 = locale4.toLanguageTag();
        java.lang.String str8 = locale3.getDisplayName(locale4);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.lang.String str13 = locale9.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        boolean boolean15 = locale9.hasExtensions();
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale9.getDisplayVariant(locale16);
        java.util.Locale locale19 = new java.util.Locale("100");
        java.lang.String str20 = locale19.getDisplayCountry();
        java.lang.String str21 = locale9.getDisplayLanguage(locale19);
        java.lang.String str22 = locale4.getDisplayVariant(locale19);
        java.lang.String str23 = locale19.getScript();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale19);
        org.junit.Assert.assertEquals(locale3.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c) (java.text.AttributedCharacterIterator$Attribute(reading))" + "'", str8, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c) (java.text.AttributedCharacterIterator$Attribute(reading))");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale19.toString(), "100");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Korean" + "'", str21, "Korean");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
    }

    @Test
    public void test13790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13790");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.lang.String str10 = locale5.toLanguageTag();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale5);
        java.lang.String str12 = locale2.getDisplayVariant(locale5);
        java.lang.String str14 = locale5.getExtension('u');
        java.lang.String str15 = locale5.getCountry();
        java.util.Locale.setDefault(category0, locale5);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.util.Set<java.lang.String> strSet18 = locale5.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet19 = locale5.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ko" + "'", str10, "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test13791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13791");
        java.util.Locale locale1 = new java.util.Locale("German");
        org.junit.Assert.assertEquals(locale1.toString(), "german");
    }

    @Test
    public void test13792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13792");
        java.text.ParseException parseException2 = new java.text.ParseException("en", (-2));
        int int3 = parseException2.getErrorOffset();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        java.text.ParseException parseException10 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray11 = parseException10.getSuppressed();
        parseException6.addSuppressed((java.lang.Throwable) parseException10);
        int int13 = parseException10.getErrorOffset();
        int int14 = parseException10.getErrorOffset();
        java.text.ParseException parseException17 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray18 = parseException17.getSuppressed();
        java.text.ParseException parseException21 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray22 = parseException21.getSuppressed();
        parseException17.addSuppressed((java.lang.Throwable) parseException21);
        java.text.ParseException parseException26 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.text.ParseException parseException29 = new java.text.ParseException("anglais", (-117));
        parseException26.addSuppressed((java.lang.Throwable) parseException29);
        parseException17.addSuppressed((java.lang.Throwable) parseException29);
        parseException10.addSuppressed((java.lang.Throwable) parseException17);
        java.text.ParseException parseException35 = new java.text.ParseException("\uc601\uc5b4", 9);
        java.lang.Throwable[] throwableArray36 = parseException35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = parseException35.getSuppressed();
        java.lang.Throwable[] throwableArray38 = parseException35.getSuppressed();
        parseException10.addSuppressed((java.lang.Throwable) parseException35);
        java.text.ParseException parseException42 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray43 = parseException42.getSuppressed();
        java.text.NumberFormat.Field field44 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition46 = new java.text.FieldPosition((java.text.Format.Field) field44, (int) (short) 0);
        int int47 = fieldPosition46.getEndIndex();
        java.text.ParseException parseException50 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray51 = parseException50.getSuppressed();
        int int52 = parseException50.getErrorOffset();
        boolean boolean53 = fieldPosition46.equals((java.lang.Object) parseException50);
        java.text.ParseException parseException56 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int57 = parseException56.getErrorOffset();
        parseException50.addSuppressed((java.lang.Throwable) parseException56);
        parseException42.addSuppressed((java.lang.Throwable) parseException50);
        java.text.ParseException parseException62 = new java.text.ParseException("100", (int) (byte) -1);
        parseException42.addSuppressed((java.lang.Throwable) parseException62);
        java.text.ParseException parseException66 = new java.text.ParseException("\uc601\uc5b4", 9);
        java.lang.Throwable[] throwableArray67 = parseException66.getSuppressed();
        parseException62.addSuppressed((java.lang.Throwable) parseException66);
        parseException35.addSuppressed((java.lang.Throwable) parseException62);
        java.text.NumberFormat.Field field70 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition72 = new java.text.FieldPosition((java.text.Format.Field) field70, (int) (short) 0);
        int int73 = fieldPosition72.getEndIndex();
        java.text.ParseException parseException76 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray77 = parseException76.getSuppressed();
        int int78 = parseException76.getErrorOffset();
        boolean boolean79 = fieldPosition72.equals((java.lang.Object) parseException76);
        int int80 = parseException76.getErrorOffset();
        parseException35.addSuppressed((java.lang.Throwable) parseException76);
        parseException2.addSuppressed((java.lang.Throwable) parseException76);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-2) + "'", int3 == (-2));
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(field44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(field70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test13793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13793");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (byte) -35, 13689);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert -35 to fraction (-9,223,372,036,854,775,772/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13794");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        java.lang.String str7 = numberFormat2.format((double) 10);
        boolean boolean9 = numberFormat2.equals((java.lang.Object) "");
        fractionFormat1.setNumeratorFormat(numberFormat2);
        java.lang.Object obj11 = fractionFormat1.clone();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency13 = numberFormat12.getCurrency();
        fractionFormat1.setNumeratorFormat(numberFormat12);
        java.util.Locale locale17 = new java.util.Locale("", "TW");
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getNumberInstance(locale17);
        fractionFormat1.setNumeratorFormat(numberFormat18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale20.getDisplayScript();
        java.lang.String str22 = locale20.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getDisplayVariant();
        java.lang.String str25 = locale23.getDisplayScript();
        java.lang.String str26 = locale23.getDisplayCountry();
        java.lang.String str27 = locale20.getDisplayName(locale23);
        java.lang.String str28 = locale20.getDisplayName();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayLanguage(locale30);
        java.lang.String str32 = locale29.getISO3Language();
        java.lang.String str33 = locale29.getScript();
        java.lang.String str34 = locale29.getDisplayScript();
        java.lang.String str35 = locale29.getDisplayVariant();
        java.lang.String str36 = locale20.getDisplayLanguage(locale29);
        java.lang.String str37 = locale29.getCountry();
        boolean boolean38 = numberFormat18.equals((java.lang.Object) str37);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0%" + "'", str7, "0%");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertEquals(locale17.toString(), "_TW");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str27, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "allemand (Allemagne)" + "'", str28, "allemand (Allemagne)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "kor" + "'", str32, "kor");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str36, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test13795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13795");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.lang.String str2 = locale1.toLanguageTag();
        java.lang.String str3 = locale1.getDisplayName();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale1);
        java.lang.String str5 = locale1.getISO3Language();
        java.lang.String str7 = locale1.getExtension('x');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale1.getUnicodeLocaleType("\244 2.00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ? 2.00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test13796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13796");
        java.util.Locale.Category category0 = null;
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.lang.String str5 = locale3.getScript();
        java.lang.String str6 = locale3.getVariant();
        java.util.Locale.setDefault(category1, locale3);
        java.util.Set<java.lang.Character> charSet8 = locale3.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(charSet8);
    }

    @Test
    public void test13797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13797");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        numberFormat0.setMaximumIntegerDigits((int) (short) 100);
        numberFormat0.setMinimumFractionDigits((int) (short) 0);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) -1);
        java.lang.Number number10 = numberFormat0.parse("1 / 1", parsePosition9);
        java.lang.String str11 = parsePosition9.toString();
        int int12 = parsePosition9.getErrorIndex();
        java.lang.String str13 = parsePosition9.toString();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNull(number10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=-1]" + "'", str11, "java.text.ParsePosition[index=-1,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=-1]" + "'", str13, "java.text.ParsePosition[index=-1,errorIndex=-1]");
    }

    @Test
    public void test13798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13798");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale.Builder builder15 = builder11.addUnicodeLocaleAttribute("DEU");
        java.util.Locale.Builder builder16 = builder11.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder11.setUnicodeLocaleKeyword("java.text.ParsePosition[index=10,errorIndex=2]", "java.text.ParseException: 1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: java.text.ParsePosition[index=10,errorIndex=2] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test13799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13799");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale5.getDisplayCountry(locale6);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.lang.String str16 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale12.getDisplayLanguage(locale17);
        java.lang.String str19 = locale6.getDisplayName(locale17);
        java.util.Locale.Builder builder20 = builder2.setLocale(locale6);
        java.lang.String str21 = locale6.getDisplayName();
        java.lang.String str22 = locale6.getDisplayScript();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale6);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587" + "'", str19, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
    }

    @Test
    public void test13800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13800");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction(0.02857142857142857d, (double) (-3), (int) (short) -2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Unable to convert 0.029 to fraction after -2 iterations");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13801");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.getDefault(category0);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale15.getCountry();
        java.lang.String str20 = locale15.getVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.util.Locale.setDefault(category0, locale15);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str26 = locale24.getISO3Language();
        java.util.Set<java.lang.Character> charSet27 = locale24.getExtensionKeys();
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayLanguage(locale30);
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getVariant();
        java.util.Locale.setDefault(category28, locale30);
        java.lang.String str35 = locale30.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.String str37 = locale36.getDisplayScript();
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleAttributes();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = locale36.getDisplayCountry(locale39);
        java.lang.String str41 = locale30.getDisplayVariant(locale36);
        java.lang.String str42 = locale24.getDisplayName(locale36);
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale24.getDisplayLanguage(locale43);
        java.lang.String str45 = locale43.getDisplayLanguage();
        java.lang.String str46 = locale43.getCountry();
        java.util.Locale.setDefault(category0, locale43);
        java.util.Locale locale48 = java.util.Locale.UK;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale49.getDisplayLanguage(locale50);
        java.lang.String str52 = locale48.getDisplayScript(locale50);
        java.lang.String str53 = locale50.toLanguageTag();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale54.getDisplayLanguage(locale55);
        java.lang.String str57 = locale55.getScript();
        java.lang.String str58 = locale55.getCountry();
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getNumberInstance(locale55);
        java.lang.String str60 = locale50.getDisplayLanguage(locale55);
        java.util.Locale.setDefault(category0, locale50);
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        java.util.Locale.setDefault(category0, locale63);
        java.util.Locale locale65 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category0, locale65);
        java.lang.String str67 = locale65.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "United Kingdom" + "'", str40, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc601\uc5b4" + "'", str45, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "US" + "'", str46, "US");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str51, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ko" + "'", str53, "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str56, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "zho" + "'", str67, "zho");
    }

    @Test
    public void test13802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13802");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        java.util.Locale locale6 = new java.util.Locale("French");
        java.util.Locale locale7 = locale6.stripExtensions();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.lang.String str9 = locale6.toLanguageTag();
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field10, (int) (short) 0);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field10);
        java.lang.String str14 = field10.toString();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getDisplayVariant();
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = locale17.getDisplayScript();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale15.getDisplayScript(locale17);
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale15.getDisplayVariant(locale21);
        boolean boolean23 = field10.equals((java.lang.Object) locale15);
        java.lang.String str24 = locale6.getDisplayLanguage(locale15);
        java.util.Locale locale25 = locale6.stripExtensions();
        java.util.Locale locale27 = new java.util.Locale("Korean (South Korea)");
        java.lang.String str28 = locale25.getDisplayName(locale27);
        java.lang.String str29 = locale27.toLanguageTag();
        boolean boolean30 = fieldPosition2.equals((java.lang.Object) locale27);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals(locale6.toString(), "french");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "french" + "'", str9, "french");
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str14, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "french" + "'", str24, "french");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "french");
        org.junit.Assert.assertEquals(locale27.toString(), "korean (south korea)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "french" + "'", str28, "french");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "und" + "'", str29, "und");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test13803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13803");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        numberFormat2.setParseIntegerOnly(true);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode8 = numberFormat5.getRoundingMode();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getVariant();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat5, numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.lang.String str15 = numberFormat11.format((-99L));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-99" + "'", str15, "-99");
    }

    @Test
    public void test13804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13804");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder15 = builder13.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder18 = builder15.clearExtensions();
        java.util.Locale locale19 = java.util.Locale.UK;
        java.lang.String str20 = locale19.getDisplayScript();
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale19.getDisplayCountry(locale22);
        java.util.Locale.Builder builder24 = builder18.setLocale(locale19);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getNumberInstance(locale19);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getIntegerInstance(locale26);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getIntegerInstance(locale26);
        java.util.Locale locale29 = java.util.Locale.UK;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.lang.String str33 = locale29.getDisplayScript(locale31);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale31);
        java.lang.String str35 = locale31.getScript();
        java.lang.String str36 = locale26.getDisplayScript(locale31);
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale37.getDisplayCountry();
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleKeys();
        java.lang.String str40 = locale31.getDisplayScript(locale37);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale37);
        java.lang.String str42 = locale19.getDisplayName(locale37);
        java.lang.String str43 = locale19.toLanguageTag();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "United Kingdom" + "'", str23, "United Kingdom");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u52a0\u62ff\u5927" + "'", str38, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "English (United Kingdom)" + "'", str42, "English (United Kingdom)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "en-GB" + "'", str43, "en-GB");
    }

    @Test
    public void test13805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13805");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.getDefault(category0);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale15.getCountry();
        java.lang.String str20 = locale15.getVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.util.Locale.setDefault(category0, locale15);
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale15.getDisplayVariant(locale23);
        java.lang.String str25 = locale15.getISO3Language();
        java.util.Set<java.lang.Character> charSet26 = locale15.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertNotNull(charSet26);
    }

    @Test
    public void test13806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13806");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.setVariant("");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale8.getISO3Language();
        boolean boolean12 = locale8.hasExtensions();
        java.util.Locale.Builder builder13 = builder6.setLocale(locale8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str18 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction17);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int23 = fraction22.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction14.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str32 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int37 = fraction36.intValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction33.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction31.add(fraction33);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction28.subtract(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int49 = fraction48.intValue();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction45.subtract(fraction48);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction44.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction41.add(fraction45);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction26.multiply(fraction41);
        java.util.Locale locale54 = java.util.Locale.UK;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayLanguage(locale56);
        java.lang.String str58 = locale54.getDisplayScript(locale56);
        java.lang.String str59 = locale56.toLanguageTag();
        java.lang.String str60 = locale56.getVariant();
        boolean boolean61 = fraction53.equals((java.lang.Object) locale56);
        java.lang.String str62 = locale8.getDisplayScript(locale56);
        java.lang.String str63 = locale56.getDisplayLanguage();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getNumberInstance(locale65);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getIntegerInstance(locale65);
        java.util.Locale locale69 = java.util.Locale.ITALIAN;
        java.util.Locale locale70 = java.util.Locale.UK;
        java.lang.String str71 = locale70.getDisplayScript();
        java.util.Set<java.lang.String> strSet72 = locale70.getUnicodeLocaleAttributes();
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        java.lang.String str74 = locale70.getDisplayCountry(locale73);
        java.lang.String str75 = locale69.getDisplayVariant(locale70);
        java.lang.String str76 = locale65.getDisplayName(locale69);
        java.lang.String str77 = locale56.getDisplayScript(locale69);
        java.util.Locale.Category category78 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.lang.String str81 = locale79.getDisplayLanguage(locale80);
        java.lang.String str82 = locale80.getScript();
        java.lang.String str83 = locale80.getVariant();
        java.util.Locale.setDefault(category78, locale80);
        java.util.Locale locale85 = java.util.Locale.getDefault(category78);
        java.util.Locale locale86 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale86);
        java.util.Locale.setDefault(category78, locale86);
        java.lang.String str89 = locale56.getDisplayScript(locale86);
        java.util.Locale.Builder builder90 = builder2.setLocale(locale86);
        java.util.Locale locale91 = locale86.stripExtensions();
        java.lang.String str92 = locale91.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-117 / 1" + "'", str18, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-117) + "'", int23 == (-117));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-117 / 1" + "'", str32, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-117) + "'", int37 == (-117));
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-117) + "'", int49 == (-117));
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str57, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ko" + "'", str59, "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str63, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str66, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "United Kingdom" + "'", str74, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "coreano" + "'", str76, "coreano");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + category78 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category78.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str81, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test13807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13807");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 116, (-13572));
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test13808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13808");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.ParsePosition parsePosition4 = new java.text.ParsePosition((int) (short) 10);
        parsePosition4.setErrorIndex((int) (byte) 1);
        java.lang.Object obj7 = fractionFormat1.parseObject("United Kingdom", parsePosition4);
        int int8 = parsePosition4.getIndex();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.util.Locale locale13 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.util.Currency currency18 = numberFormat15.getCurrency();
        java.lang.String str20 = numberFormat15.format((double) 10);
        boolean boolean22 = numberFormat15.equals((java.lang.Object) "");
        fractionFormat14.setNumeratorFormat(numberFormat15);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition(2147483647);
        java.lang.Object obj27 = numberFormat15.parseObject("\uc601\uad6d", parsePosition26);
        java.lang.Object obj28 = numberFormat9.parseObject("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition26);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean30 = numberFormat29.isParseIntegerOnly();
        numberFormat29.setMinimumFractionDigits((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.util.Locale locale36 = locale34.stripExtensions();
        java.util.Locale locale37 = locale36.stripExtensions();
        java.lang.String str38 = locale37.getVariant();
        java.util.Locale locale39 = locale37.stripExtensions();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getNumberInstance(locale37);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        java.util.Currency currency46 = numberFormat43.getCurrency();
        numberFormat42.setCurrency(currency46);
        java.lang.String str49 = numberFormat42.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat51 = fractionFormat50.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41, numberFormat42, numberFormat51);
        java.util.Locale.Category category53 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale54.getDisplayLanguage(locale55);
        java.lang.String str57 = locale55.getScript();
        java.lang.String str58 = locale55.getVariant();
        java.util.Locale.setDefault(category53, locale55);
        java.util.Locale locale60 = java.util.Locale.getDefault(category53);
        java.util.Locale locale61 = java.util.Locale.getDefault(category53);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getInstance(locale61);
        int int63 = numberFormat62.getMaximumFractionDigits();
        properFractionFormat52.setWholeFormat(numberFormat62);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance();
        numberFormat66.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance();
        numberFormat70.setMaximumIntegerDigits((-1));
        java.util.Currency currency73 = numberFormat70.getCurrency();
        numberFormat69.setCurrency(currency73);
        numberFormat66.setCurrency(currency73);
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance();
        numberFormat76.setMaximumIntegerDigits((-1));
        java.util.Currency currency79 = numberFormat76.getCurrency();
        java.lang.String str81 = numberFormat76.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65, numberFormat66, numberFormat76);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40, numberFormat62, numberFormat66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat29, numberFormat62);
        boolean boolean86 = parsePosition4.equals((java.lang.Object) numberFormat29);
        parsePosition4.setIndex((int) '4');
        java.lang.String str89 = parsePosition4.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0%" + "'", str20, "0%");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "10,000%" + "'", str49, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category53.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str56, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(currency73);
        org.junit.Assert.assertEquals(currency73.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(currency79);
        org.junit.Assert.assertEquals(currency79.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0%" + "'", str81, "0%");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=10]" + "'", str89, "java.text.ParsePosition[index=52,errorIndex=10]");
    }

    @Test
    public void test13809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13809");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder7 = builder4.setVariant("");
        java.util.Locale locale8 = builder7.build();
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=0,ENDINDEX=0]");
        java.lang.String str12 = locale8.getDisplayName(locale11);
        java.lang.String str13 = locale0.getDisplayVariant(locale11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale11);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
    }

    @Test
    public void test13810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13810");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.UK;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale2.getDisplayCountry(locale5);
        java.lang.String str7 = locale2.getDisplayLanguage();
        java.lang.String str8 = locale0.getDisplayLanguage(locale2);
        java.lang.String str9 = locale2.getDisplayCountry();
        java.lang.String str10 = locale2.getDisplayName();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "United Kingdom" + "'", str6, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4" + "'", str7, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chinese" + "'", str8, "Chinese");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uad6d" + "'", str9, "\uc601\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\uc601\uc5b4\uc601\uad6d)" + "'", str10, "\uc601\uc5b4\uc601\uad6d)");
        org.junit.Assert.assertNotNull(fractionFormat11);
    }

    @Test
    public void test13811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13811");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getDisplayVariant();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale14.getDisplayScript(locale16);
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale21 = java.util.Locale.getDefault(category0);
        java.lang.String str22 = locale21.getDisplayName();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale21);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.lang.String str28 = locale26.getScript();
        java.lang.String str29 = locale26.getVariant();
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale31 = java.util.Locale.getDefault(category24);
        java.util.Locale locale32 = java.util.Locale.getDefault(category24);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.lang.StringBuffer stringBuffer34 = null;
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition(35);
        int int37 = fieldPosition36.getBeginIndex();
        fieldPosition36.setEndIndex((-13));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer40 = numberFormat23.format((java.lang.Object) numberFormat33, stringBuffer34, fieldPosition36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (United Kingdom)" + "'", str22, "English (United Kingdom)");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test13812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13812");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction(0, (int) (byte) -116);
        org.apache.commons.math.fraction.Fraction fraction19 = new org.apache.commons.math.fraction.Fraction((double) 100.0f, 10.0d, 2147483647);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction15.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int25 = fraction24.intValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.subtract(fraction24);
        boolean boolean28 = fraction24.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction24.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int37 = fraction36.intValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction33.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction32.multiply(fraction33);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction24.add(fraction39);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        int int42 = fraction15.compareTo((java.lang.Object) fraction40);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str46 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction45);
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int51 = fraction50.intValue();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction47.subtract(fraction50);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction45.add(fraction47);
        java.lang.String str54 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction47);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction15.add(fraction47);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction11.subtract(fraction55);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) ' ', 116);
        org.apache.commons.math.fraction.Fraction fraction62 = new org.apache.commons.math.fraction.Fraction((double) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction60.add(fraction62);
        org.apache.commons.math.fraction.Fraction fraction64 = fraction11.multiply(fraction62);
        java.lang.String str65 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction11);
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int70 = fraction69.intValue();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction66.subtract(fraction69);
        boolean boolean73 = fraction69.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction74 = fraction11.subtract(fraction69);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction69.abs();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-117) + "'", int25 == (-117));
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-117) + "'", int37 == (-117));
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-117 / 1" + "'", str46, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-117) + "'", int51 == (-117));
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0 / 1" + "'", str54, "0 / 1");
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "117 / 1" + "'", str65, "117 / 1");
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-117) + "'", int70 == (-117));
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
    }

    @Test
    public void test13813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13813");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat3 = fractionFormat1.getNumeratorFormat();
        int int4 = numberFormat3.getMinimumIntegerDigits();
        int int5 = numberFormat3.getMinimumFractionDigits();
        int int6 = numberFormat3.getMinimumIntegerDigits();
        java.lang.StringBuffer stringBuffer8 = null;
        java.text.NumberFormat.Field field9 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer11 = numberFormat3.format(0L, stringBuffer8, fieldPosition10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(field9);
    }

    @Test
    public void test13814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13814");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap4);
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.parse("eng", strMap11);
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getScript();
        java.lang.String str18 = locale15.getVariant();
        java.util.Locale.setDefault(category13, locale15);
        java.lang.String str20 = locale15.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.UK;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale21.getDisplayCountry(locale24);
        java.lang.String str26 = locale15.getDisplayVariant(locale21);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale28.getDisplayName(locale30);
        java.util.Locale.setDefault(locale30);
        java.lang.String str33 = locale15.getDisplayLanguage(locale30);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance(locale30);
        java.lang.String str35 = locale30.getLanguage();
        java.util.Set<java.lang.String> strSet36 = locale30.getUnicodeLocaleKeys();
        java.lang.String str37 = java.util.Locale.lookupTag(languageRangeList12, (java.util.Collection<java.lang.String>) strSet36);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet36, filteringMode38);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, strMap43);
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale45.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str48 = java.util.Locale.lookupTag(languageRangeList44, (java.util.Collection<java.lang.String>) strSet47);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayLanguage(locale56);
        java.lang.String str58 = locale56.getScript();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale56, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale.FilteringMode filteringMode64 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.util.Locale>) localeList62, filteringMode64);
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.Locale.FilteringMode filteringMode67 = null;
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter(languageRangeList44, (java.util.Collection<java.util.Locale>) localeList66, filteringMode67);
        java.util.Locale.FilteringMode filteringMode69 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList66, filteringMode69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale71 = java.util.Locale.lookup(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "United Kingdom" + "'", str25, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "coreano" + "'", str31, "coreano");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "coreano" + "'", str33, "coreano");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "it" + "'", str35, "it");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(languageRangeList44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "francese" + "'", str46, "francese");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str57, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + filteringMode64 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode64.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertTrue("'" + filteringMode69 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode69.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList70);
    }

    @Test
    public void test13815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13815");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getNumeratorFormat();
        java.lang.String str37 = numberFormat35.format((long) (short) -13572);
        java.lang.Object obj38 = numberFormat35.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-13.572" + "'", str37, "-13.572");
        org.junit.Assert.assertNotNull(obj38);
    }

    @Test
    public void test13816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13816");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale4);
        java.util.Locale locale11 = locale4.stripExtensions();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance(locale4);
        java.lang.String str13 = locale4.getDisplayScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale15.getCountry();
        java.lang.String str20 = locale15.getVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.util.Set<java.lang.Character> charSet22 = locale15.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet23 = locale15.getExtensionKeys();
        java.lang.String str24 = locale4.getDisplayCountry(locale15);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getNumberInstance(locale4);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
    }

    @Test
    public void test13817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13817");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str18 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction17);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int23 = fraction22.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction14.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.add(fraction31);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction12.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str43 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int48 = fraction47.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction42.add(fraction44);
        int int51 = fraction50.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str55 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction54);
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int60 = fraction59.intValue();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction56.subtract(fraction59);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction54.add(fraction56);
        int int63 = fraction62.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction66 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction62.multiply(fraction66);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction50.subtract(fraction67);
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction72 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int73 = fraction72.intValue();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction69.subtract(fraction72);
        boolean boolean76 = fraction72.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction77 = fraction72.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction50.add(fraction77);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction39.divide(fraction50);
        float float80 = fraction39.floatValue();
        long long81 = fraction39.longValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-117 / 1" + "'", str18, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-117) + "'", int23 == (-117));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-117 / 1" + "'", str43, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-117) + "'", int48 == (-117));
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-117 / 1" + "'", str55, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-117) + "'", int60 == (-117));
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-117) + "'", int73 == (-117));
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-13572.0f) + "'", float80 == (-13572.0f));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-13572L) + "'", long81 == (-13572L));
    }

    @Test
    public void test13818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13818");
        java.util.Locale locale1 = new java.util.Locale("French");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getNumberInstance(locale1);
        int int6 = numberFormat5.getMinimumFractionDigits();
        numberFormat5.setMaximumFractionDigits((int) (byte) -11);
        org.junit.Assert.assertEquals(locale1.toString(), "french");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test13819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13819");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int7 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.subtract(fraction6);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.multiply(fraction3);
        org.apache.commons.math.fraction.Fraction fraction11 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction12 = fraction9.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int17 = fraction16.intValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.subtract(fraction16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale23.getScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale23, locale26, locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale.FilteringMode filteringMode31 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList29, filteringMode31);
        boolean boolean33 = fraction18.equals((java.lang.Object) localeList32);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction18.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction11.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str43 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int48 = fraction47.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction42.add(fraction44);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction39.subtract(fraction51);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction38.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction56 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction38.multiply(fraction56);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int65 = fraction64.intValue();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction61.subtract(fraction64);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction60.multiply(fraction61);
        org.apache.commons.math.fraction.Fraction fraction69 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction70 = fraction67.add(fraction69);
        int int71 = fraction69.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction56.divide(fraction69);
        org.apache.commons.math.fraction.Fraction fraction73 = fraction34.divide(fraction69);
        int int74 = fraction73.intValue();
        org.apache.commons.math.fraction.Fraction fraction75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction76 = fraction73.multiply(fraction75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fraction must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-117) + "'", int7 == (-117));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-117) + "'", int17 == (-117));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + filteringMode31 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode31.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-117 / 1" + "'", str43, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-117) + "'", int48 == (-117));
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-117) + "'", int65 == (-117));
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test13820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13820");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        boolean boolean7 = fraction3.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int14 = fraction13.intValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction10.subtract(fraction13);
        double double16 = fraction15.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction3.divide(fraction15);
        double double18 = fraction3.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction20 = new org.apache.commons.math.fraction.Fraction(117.0d);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.add(fraction20);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction3.reciprocal();
        long long23 = fraction22.longValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = new org.apache.commons.math.fraction.Fraction((double) ' ', (double) (short) 10, (int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction30 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction28.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction24.multiply(fraction32);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-117) + "'", int14 == (-117));
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 117.0d + "'", double16 == 117.0d);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-117.0d) + "'", double18 == (-117.0d));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
    }

    @Test
    public void test13821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13821");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        boolean boolean2 = numberFormat0.isParseIntegerOnly();
        int int3 = numberFormat0.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        org.apache.commons.math.fraction.Fraction fraction8 = new org.apache.commons.math.fraction.Fraction((double) 0, (double) (short) 10, 117);
        java.text.NumberFormat.Field field9 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field9, (int) (short) 0);
        int int12 = fieldPosition11.getEndIndex();
        java.lang.String str13 = fieldPosition11.toString();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int18 = fraction17.intValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction14.subtract(fraction17);
        boolean boolean21 = fraction17.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.reciprocal();
        double double23 = fraction22.doubleValue();
        boolean boolean24 = fieldPosition11.equals((java.lang.Object) fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int29 = fraction28.intValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.subtract(fraction28);
        boolean boolean32 = fraction28.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction28.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction22.subtract(fraction28);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction8.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction39 = new org.apache.commons.math.fraction.Fraction((double) ' ', (double) (short) 10, (int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction41 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction39.divide(fraction41);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction46 = new org.apache.commons.math.fraction.Fraction(52, (-117));
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction43.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction43.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction8.subtract(fraction43);
        java.text.AttributedCharacterIterator attributedCharacterIterator51 = properFractionFormat4.formatToCharacterIterator((java.lang.Object) fraction8);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str13, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-117) + "'", int18 == (-117));
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.008547008547008548d) + "'", double23 == (-0.008547008547008548d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-117) + "'", int29 == (-117));
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(attributedCharacterIterator51);
    }

    @Test
    public void test13822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13822");
        java.util.Locale locale1 = new java.util.Locale("-13,572 / 1");
        java.util.Locale locale2 = locale1.stripExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "-13,572 / 1");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "-13,572 / 1");
    }

    @Test
    public void test13823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13823");
        java.util.Locale locale2 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4 (10.000%)", "java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=120,endindex=10]_JAVA.TEXT.PARSEPOSITION[INDEX=10,ERRORINDEX=9]");
        org.junit.Assert.assertEquals(locale2.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4 (10.000%)_JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=120,ENDINDEX=10]_JAVA.TEXT.PARSEPOSITION[INDEX=10,ERRORINDEX=9]");
    }

    @Test
    public void test13824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13824");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) ' ', 116);
        org.apache.commons.math.fraction.Fraction fraction4 = new org.apache.commons.math.fraction.Fraction((double) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.add(fraction4);
        int int6 = fraction4.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int11 = fraction10.intValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction7.subtract(fraction10);
        boolean boolean14 = fraction10.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction10.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int23 = fraction22.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction18.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction10.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str32 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int37 = fraction36.intValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction33.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction31.add(fraction33);
        int int40 = fraction39.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction43 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction39.multiply(fraction43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getNumberInstance();
        boolean boolean46 = numberFormat45.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat45);
        boolean boolean48 = numberFormat45.isParseIntegerOnly();
        boolean boolean49 = fraction43.equals((java.lang.Object) boolean48);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction28.multiply(fraction43);
        int int51 = fraction50.intValue();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction27.add(fraction50);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction4.divide(fraction27);
        org.apache.commons.math.fraction.Fraction fraction57 = new org.apache.commons.math.fraction.Fraction((double) (byte) 0, (double) '4', 2);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 10, (int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction57.divide(fraction60);
        int int62 = fraction57.getDenominator();
        float float63 = fraction57.floatValue();
        java.lang.String str64 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction57);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction4.add(fraction57);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-117) + "'", int11 == (-117));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-117) + "'", int23 == (-117));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-117 / 1" + "'", str32, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-117) + "'", int37 == (-117));
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 0.0f + "'", float63 == 0.0f);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0 / 1" + "'", str64, "0 / 1");
        org.junit.Assert.assertNotNull(fraction65);
    }

    @Test
    public void test13825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13825");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 0, (double) (short) 10, 117);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ko");
        java.lang.String str7 = languageRange6.getRange();
        java.lang.String str8 = languageRange6.getRange();
        boolean boolean9 = fraction3.equals((java.lang.Object) languageRange6);
        java.lang.String str10 = languageRange6.getRange();
        java.lang.String str11 = languageRange6.getRange();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0 / 1" + "'", str4, "0 / 1");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ko" + "'", str7, "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ko" + "'", str8, "ko");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ko" + "'", str10, "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ko" + "'", str11, "ko");
    }

    @Test
    public void test13826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13826");
        java.util.Locale locale1 = new java.util.Locale("x-lvariant-it-IT");
        org.junit.Assert.assertEquals(locale1.toString(), "x-lvariant-it-it");
    }

    @Test
    public void test13827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13827");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str6 = locale0.getDisplayLanguage(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale7.getVariant();
        boolean boolean9 = locale7.hasExtensions();
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        java.util.Set<java.lang.Character> charSet11 = locale7.getExtensionKeys();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale7);
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("\u97d3\u6587");
        boolean boolean15 = numberFormat12.equals((java.lang.Object) locale14);
        java.lang.String str16 = locale14.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u97d3\u6587" + "'", str6, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese" + "'", str10, "Chinese");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
    }

    @Test
    public void test13828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13828");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        numberFormat24.setCurrency(currency40);
        fractionFormat5.setDenominatorFormat(numberFormat24);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance();
        java.lang.String str47 = numberFormat45.format(100L);
        int int48 = numberFormat45.getMinimumFractionDigits();
        numberFormat45.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        numberFormat51.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode54 = numberFormat51.getRoundingMode();
        numberFormat45.setRoundingMode(roundingMode54);
        numberFormat44.setRoundingMode(roundingMode54);
        numberFormat24.setRoundingMode(roundingMode54);
        java.lang.Object obj58 = numberFormat24.clone();
        numberFormat24.setMinimumFractionDigits((int) (short) -13572);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance();
        numberFormat61.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        boolean boolean67 = numberFormat61.equals((java.lang.Object) locale65);
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj71 = numberFormat61.parseObject("China", parsePosition70);
        java.util.Locale locale72 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getIntegerInstance(locale72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat61, numberFormat73);
        java.text.NumberFormat numberFormat75 = properFractionFormat74.getNumeratorFormat();
        java.text.NumberFormat numberFormat76 = properFractionFormat74.getWholeFormat();
        java.text.NumberFormat numberFormat77 = properFractionFormat74.getWholeFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str66, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
    }

    @Test
    public void test13829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13829");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str2 = locale1.getDisplayScript();
        java.util.Locale locale3 = locale1.stripExtensions();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.util.Currency currency5 = numberFormat4.getCurrency();
        java.lang.Object obj6 = numberFormat4.clone();
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat4.setMinimumIntegerDigits((-2));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
    }

    @Test
    public void test13830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13830");
        java.util.Locale locale2 = new java.util.Locale("1 / 1", "java.text.ParseException: java.text.ParseException: 100");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.lang.String str5 = locale2.getScript();
        java.lang.String str6 = locale2.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100" + "'", str6, "1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100");
    }

    @Test
    public void test13831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13831");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        java.lang.String str11 = numberFormat4.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat4, numberFormat13);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 10);
        parsePosition17.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat14.parse("fran\347ais", parsePosition17);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        numberFormat21.setMaximumIntegerDigits((-1));
        java.util.Currency currency24 = numberFormat21.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        boolean boolean26 = parsePosition17.equals((java.lang.Object) fractionFormat25);
        java.lang.Object obj27 = numberFormat1.parseObject("java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance();
        java.lang.String str32 = numberFormat30.format(100L);
        int int33 = numberFormat30.getMinimumFractionDigits();
        numberFormat30.setMaximumIntegerDigits(1);
        boolean boolean37 = numberFormat30.equals((java.lang.Object) (-117));
        java.lang.String str39 = numberFormat30.format((double) (-1));
        fractionFormat29.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance();
        numberFormat41.setMaximumIntegerDigits((-1));
        java.util.Currency currency44 = numberFormat41.getCurrency();
        java.lang.String str46 = numberFormat41.format((double) 10);
        boolean boolean48 = numberFormat41.equals((java.lang.Object) "");
        java.util.Currency currency49 = numberFormat41.getCurrency();
        boolean boolean50 = numberFormat30.equals((java.lang.Object) currency49);
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) (byte) 0);
        java.lang.Object obj54 = numberFormat30.parseObject("zh_CN", parsePosition53);
        java.lang.Number number55 = numberFormat1.parse("-0%", parsePosition53);
        numberFormat1.setParseIntegerOnly(false);
        java.lang.Object obj58 = numberFormat1.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10.000%" + "'", str11, "10.000%");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100" + "'", str32, "100");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1" + "'", str39, "-1");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0%" + "'", str46, "0%");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + number55 + "' != '" + 0L + "'", number55, 0L);
        org.junit.Assert.assertNotNull(obj58);
    }

    @Test
    public void test13832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13832");
        java.util.Locale locale3 = new java.util.Locale("", "-0% (0.33,14)", "java.text.ParsePosition[index=3,errorIndex=10]");
        org.junit.Assert.assertEquals(locale3.toString(), "_-0% (0.33,14)_java.text.ParsePosition[index=3,errorIndex=10]");
    }

    @Test
    public void test13833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13833");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) 97, (int) (byte) 10);
        org.apache.commons.math.fraction.Fraction fraction4 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.abs();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((-1));
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int16 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction10.add(fraction12);
        int int19 = fraction18.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int27 = fraction26.intValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction23.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction18.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.abs();
        boolean boolean32 = parsePosition7.equals((java.lang.Object) fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction5.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        int int38 = fraction37.getDenominator();
        float float39 = fraction37.floatValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.multiply(fraction37);
        int int41 = fraction31.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction31.abs();
        int int43 = fraction42.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str47 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction46);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int52 = fraction51.intValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction48.subtract(fraction51);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction46.add(fraction48);
        int int55 = fraction54.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str59 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction58);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int64 = fraction63.intValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.subtract(fraction63);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction58.add(fraction60);
        int int67 = fraction66.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction70 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction66.multiply(fraction70);
        org.apache.commons.math.fraction.Fraction fraction72 = fraction54.subtract(fraction71);
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) '#', (int) 'a');
        org.apache.commons.math.fraction.Fraction fraction76 = fraction72.multiply(fraction75);
        java.lang.String str77 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction76);
        org.apache.commons.math.fraction.Fraction fraction78 = fraction42.add(fraction76);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction2.subtract(fraction42);
        int int80 = fraction79.intValue();
        int int81 = fraction79.getDenominator();
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-117 / 1" + "'", str11, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-117) + "'", int27 == (-117));
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-1.0f) + "'", float39 == (-1.0f));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-117 / 1" + "'", str47, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-117) + "'", int52 == (-117));
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-117 / 1" + "'", str59, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-117) + "'", int64 == (-117));
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-4.212 / 97" + "'", str77, "-4.212 / 97");
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
    }

    @Test
    public void test13834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13834");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance();
        java.lang.String str12 = numberFormat10.format(100L);
        int int13 = numberFormat10.getMinimumFractionDigits();
        numberFormat10.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode19 = numberFormat16.getRoundingMode();
        numberFormat10.setRoundingMode(roundingMode19);
        numberFormat0.setRoundingMode(roundingMode19);
        java.math.RoundingMode roundingMode22 = numberFormat0.getRoundingMode();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100" + "'", str12, "100");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode19.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode22 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode22.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test13835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13835");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        int int2 = numberFormat1.getMaximumIntegerDigits();
        java.lang.String str4 = numberFormat1.format((long) (byte) 1);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat9.setCurrency(currency13);
        numberFormat6.setCurrency(currency13);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        java.util.Currency currency19 = numberFormat16.getCurrency();
        java.lang.String str21 = numberFormat16.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat6, numberFormat16);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj32 = numberFormat28.parseObject("hi!", parsePosition31);
        java.lang.Number number33 = numberFormat24.parse("10,000%", parsePosition31);
        int int34 = parsePosition31.getErrorIndex();
        java.lang.Object obj35 = properFractionFormat22.parseObject("French", parsePosition31);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale37);
        java.text.NumberFormat numberFormat40 = fractionFormat39.getNumeratorFormat();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 10);
        parsePosition43.setErrorIndex((int) (byte) 1);
        parsePosition43.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction48 = fractionFormat39.parse("French", parsePosition43);
        org.apache.commons.math.fraction.Fraction fraction49 = properFractionFormat22.parse("", parsePosition43);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getNumberInstance(locale51);
        java.lang.Object obj54 = numberFormat53.clone();
        properFractionFormat22.setWholeFormat(numberFormat53);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.lang.String str60 = locale57.getISO3Language();
        java.lang.String str61 = locale56.getDisplayCountry(locale57);
        java.lang.String str62 = locale57.toLanguageTag();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getCurrencyInstance(locale57);
        boolean boolean64 = numberFormat63.isParseIntegerOnly();
        properFractionFormat22.setDenominatorFormat(numberFormat63);
        boolean boolean66 = numberFormat63.isParseIntegerOnly();
        numberFormat63.setMinimumIntegerDigits((int) (short) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat63);
        java.lang.Object obj70 = numberFormat63.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.text.NumberFormat numberFormat72 = properFractionFormat71.getWholeFormat();
        java.lang.String str74 = numberFormat72.format((long) 52);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2147483647 + "'", int2 == 2147483647);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100%" + "'", str4, "100%");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0%" + "'", str21, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(number33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "francese" + "'", str38, "francese");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(fraction48);
        org.junit.Assert.assertNull(fraction49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str59, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ko" + "'", str62, "ko");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\244 52.00" + "'", str74, "\244 52.00");
    }

    @Test
    public void test13836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13836");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 0, (double) '4', 2);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str7 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction6.add(fraction8);
        int int15 = fraction14.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int23 = fraction22.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction18.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction14.multiply(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int33 = fraction32.intValue();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.subtract(fraction32);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale38.getDisplayLanguage(locale39);
        java.lang.String str41 = locale39.getScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray44 = new java.util.Locale[] { locale39, locale42, locale43 };
        java.util.ArrayList<java.util.Locale> localeList45 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList45, localeArray44);
        java.util.Locale.FilteringMode filteringMode47 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList48 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList45, filteringMode47);
        boolean boolean49 = fraction34.equals((java.lang.Object) localeList48);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction34.reciprocal();
        boolean boolean51 = fraction28.equals((java.lang.Object) fraction34);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction28.abs();
        int int53 = fraction28.intValue();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction3.add(fraction28);
        double double55 = fraction3.doubleValue();
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-117 / 1" + "'", str7, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-117) + "'", int23 == (-117));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-117) + "'", int33 == (-117));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str40, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + filteringMode47 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode47.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test13837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13837");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 0, (int) (short) 287);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction2.add(fraction7);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "52 / 35" + "'", str3, "52 / 35");
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
    }

    @Test
    public void test13838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13838");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder15 = builder13.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder18 = builder15.clear();
        java.util.Locale.Builder builder20 = builder15.removeUnicodeLocaleAttribute("China");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder20.setLanguageTag("-100%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test13839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13839");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getDisplayScript();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str8 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.parse("eng", strMap10);
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.lang.String str17 = locale14.getVariant();
        java.util.Locale.setDefault(category12, locale14);
        java.lang.String str19 = locale14.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.UK;
        java.lang.String str21 = locale20.getDisplayScript();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleAttributes();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = locale20.getDisplayCountry(locale23);
        java.lang.String str25 = locale14.getDisplayVariant(locale20);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = locale27.getDisplayName(locale29);
        java.util.Locale.setDefault(locale29);
        java.lang.String str32 = locale14.getDisplayLanguage(locale29);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale29);
        java.lang.String str34 = locale29.getLanguage();
        java.util.Set<java.lang.String> strSet35 = locale29.getUnicodeLocaleKeys();
        java.lang.String str36 = java.util.Locale.lookupTag(languageRangeList11, (java.util.Collection<java.lang.String>) strSet35);
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet35, filteringMode37);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strMap42);
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str47 = java.util.Locale.lookupTag(languageRangeList43, (java.util.Collection<java.lang.String>) strSet46);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale54.getDisplayLanguage(locale55);
        java.lang.String str57 = locale55.getScript();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale55, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.Locale.FilteringMode filteringMode66 = null;
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter(languageRangeList43, (java.util.Collection<java.util.Locale>) localeList65, filteringMode66);
        java.util.Locale.FilteringMode filteringMode68 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList65, filteringMode68);
        java.util.Locale locale73 = new java.util.Locale("United Kingdom", "French", "zh_CN");
        java.lang.String str74 = locale73.getDisplayName();
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        java.lang.String str76 = locale75.getISO3Country();
        java.util.Locale locale77 = locale75.stripExtensions();
        java.lang.String str78 = locale77.getLanguage();
        java.lang.String str79 = locale73.getDisplayCountry(locale77);
        java.util.Set<java.lang.String> strSet80 = locale73.getUnicodeLocaleKeys();
        java.lang.String str81 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet80);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "United Kingdom" + "'", str24, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "coreano" + "'", str30, "coreano");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "coreano" + "'", str32, "coreano");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode37.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "francese" + "'", str45, "francese");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str56, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertTrue("'" + filteringMode68 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode68.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertEquals(locale73.toString(), "united kingdom_FRENCH_zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "united kingdom (FRENCH,zh,CN)" + "'", str74, "united kingdom (FRENCH,zh,CN)");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "zh" + "'", str78, "zh");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "FRENCH" + "'", str79, "FRENCH");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test13840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13840");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        fieldPosition2.setBeginIndex((int) ' ');
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("14");
        java.lang.String str8 = locale7.toLanguageTag();
        java.lang.String str9 = locale7.getDisplayLanguage();
        boolean boolean10 = fieldPosition2.equals((java.lang.Object) str9);
        java.lang.String str11 = fieldPosition2.toString();
        int int12 = fieldPosition2.getEndIndex();
        int int13 = fieldPosition2.getBeginIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "und" + "'", str8, "und");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=32,endIndex=0]" + "'", str11, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=32,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
    }

    @Test
    public void test13841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13841");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.negate();
        int int14 = fraction11.getDenominator();
        float float15 = fraction11.floatValue();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder18 = builder16.clearExtensions();
        java.util.Locale.Builder builder19 = builder16.clearExtensions();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale21.getDisplayName(locale23);
        java.util.Locale.Builder builder25 = builder16.setLocale(locale21);
        boolean boolean26 = fraction11.equals((java.lang.Object) locale21);
        java.lang.String str27 = locale21.getISO3Country();
        java.lang.String str28 = locale21.toLanguageTag();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 117.0f + "'", float15 == 117.0f);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "coreano" + "'", str24, "coreano");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ko" + "'", str28, "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
    }

    @Test
    public void test13842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13842");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (short) 10, (int) (short) 52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 10 to fraction (-9/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13843");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction(387.0d, (double) 468, (int) (short) 13689);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str7 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction6.add(fraction8);
        float float15 = fraction8.floatValue();
        double double16 = fraction8.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction19 = new org.apache.commons.math.fraction.Fraction((int) (byte) 0, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str24 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int29 = fraction28.intValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.subtract(fraction28);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction23.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction20.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str38 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction37);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int43 = fraction42.intValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction39.subtract(fraction42);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction37.add(fraction39);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction34.subtract(fraction46);
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int55 = fraction54.intValue();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction51.subtract(fraction54);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction50.multiply(fraction51);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction47.add(fraction51);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction32.multiply(fraction47);
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale61.getDisplayLanguage(locale62);
        java.lang.String str64 = locale60.getDisplayScript(locale62);
        java.lang.String str65 = locale62.toLanguageTag();
        java.lang.String str66 = locale62.getVariant();
        boolean boolean67 = fraction59.equals((java.lang.Object) locale62);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction19.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.abs();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction8.subtract(fraction68);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction3.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction72 = fraction3.negate();
        java.text.NumberFormat.Field field73 = java.text.NumberFormat.Field.PERMILLE;
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale75.getDisplayLanguage(locale76);
        java.lang.String str78 = locale75.getISO3Language();
        java.lang.String str79 = locale74.getDisplayCountry(locale75);
        boolean boolean80 = field73.equals((java.lang.Object) locale74);
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale74);
        java.text.NumberFormat numberFormat82 = fractionFormat81.getDenominatorFormat();
        boolean boolean83 = fraction3.equals((java.lang.Object) numberFormat82);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-117 / 1" + "'", str7, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.0f + "'", float15 == 0.0f);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-117 / 1" + "'", str24, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-117) + "'", int29 == (-117));
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-117 / 1" + "'", str38, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-117) + "'", int43 == (-117));
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-117) + "'", int55 == (-117));
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str63, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ko" + "'", str65, "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(field73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str77, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "kor" + "'", str78, "kor");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(fractionFormat81);
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test13844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13844");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str1 = field0.toString();
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale2);
        boolean boolean5 = field0.equals((java.lang.Object) numberFormat4);
        java.text.NumberFormat.Field field6 = java.text.NumberFormat.Field.SIGN;
        java.lang.Object obj7 = new java.lang.Object();
        boolean boolean8 = field6.equals(obj7);
        boolean boolean9 = field0.equals((java.lang.Object) field6);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field0, 0);
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field0);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str1, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test13845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13845");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder9 = builder5.removeUnicodeLocaleAttribute("zho");
        boolean boolean10 = numberFormat4.equals((java.lang.Object) builder5);
        java.lang.String str12 = numberFormat4.format((long) 'x');
        int int13 = numberFormat4.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "120" + "'", str12, "120");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
    }

    @Test
    public void test13846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13846");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.UK;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale0.getDisplayScript(locale2);
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale0.getDisplayVariant(locale6);
        java.lang.String str8 = locale0.getISO3Language();
        java.lang.String str9 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet10 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertNotNull(charSet10);
    }

    @Test
    public void test13847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13847");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale7.getScript();
        java.lang.String str10 = locale7.getVariant();
        java.util.Locale.setDefault(category5, locale7);
        java.lang.String str12 = locale7.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale13.getDisplayCountry(locale16);
        java.lang.String str18 = locale7.getDisplayVariant(locale13);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale.setDefault(locale22);
        java.lang.String str25 = locale7.getDisplayLanguage(locale22);
        java.util.Locale locale26 = locale7.stripExtensions();
        java.util.Locale.Builder builder27 = builder2.setLocale(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getIntegerInstance(locale29);
        numberFormat30.setMaximumFractionDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.text.NumberFormat numberFormat34 = properFractionFormat33.getNumeratorFormat();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) -1);
        java.lang.String str38 = parsePosition37.toString();
        parsePosition37.setIndex((int) 'x');
        parsePosition37.setIndex((int) '#');
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat33.parse("\u82f1\u6587\u7f8e\u56fd)", parsePosition37);
        java.text.NumberFormat numberFormat44 = properFractionFormat33.getDenominatorFormat();
        java.lang.StringBuffer stringBuffer45 = null;
        java.text.NumberFormat.Field field46 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str47 = field46.toString();
        java.lang.String str48 = field46.toString();
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance();
        numberFormat50.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance();
        numberFormat54.setMaximumIntegerDigits((-1));
        java.util.Currency currency57 = numberFormat54.getCurrency();
        numberFormat53.setCurrency(currency57);
        numberFormat50.setCurrency(currency57);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance();
        numberFormat60.setMaximumIntegerDigits((-1));
        java.util.Currency currency63 = numberFormat60.getCurrency();
        java.lang.String str65 = numberFormat60.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49, numberFormat50, numberFormat60);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getInstance();
        java.lang.String str69 = numberFormat67.format(100L);
        properFractionFormat66.setWholeFormat(numberFormat67);
        java.text.NumberFormat numberFormat71 = properFractionFormat66.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = new org.apache.commons.math.fraction.FractionFormat(numberFormat71);
        boolean boolean73 = field46.equals((java.lang.Object) numberFormat71);
        java.text.FieldPosition fieldPosition74 = new java.text.FieldPosition((java.text.Format.Field) field46);
        java.text.Format.Field field75 = fieldPosition74.getFieldAttribute();
        java.text.FieldPosition fieldPosition77 = new java.text.FieldPosition(field75, 2147483647);
        java.lang.String str78 = field75.toString();
        java.text.FieldPosition fieldPosition79 = new java.text.FieldPosition(field75);
        java.util.Locale locale81 = new java.util.Locale("java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        boolean boolean82 = locale81.hasExtensions();
        java.lang.String str83 = locale81.getDisplayLanguage();
        java.lang.String str84 = locale81.getScript();
        boolean boolean85 = fieldPosition79.equals((java.lang.Object) str84);
        fieldPosition79.setEndIndex((int) (short) -13572);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer88 = fractionFormat28.format((java.lang.Object) numberFormat44, stringBuffer45, fieldPosition79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "United Kingdom" + "'", str17, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "coreano" + "'", str23, "coreano");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "coreano" + "'", str25, "coreano");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=-1]" + "'", str38, "java.text.ParsePosition[index=-1,errorIndex=-1]");
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(field46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str47, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str48, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(currency57);
        org.junit.Assert.assertEquals(currency57.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(currency63);
        org.junit.Assert.assertEquals(currency63.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0%" + "'", str65, "0%");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "100" + "'", str69, "100");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(field75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str78, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals(locale81.toString(), "java.text.parseexception: java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=0,endindex=0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "java.text.parseexception: java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=0,endindex=0]" + "'", str83, "java.text.parseexception: java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=0,endindex=0]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test13848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13848");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (byte) 10);
        int int2 = parsePosition1.getIndex();
        int int3 = parsePosition1.getIndex();
        parsePosition1.setIndex(0);
        int int6 = parsePosition1.getIndex();
        parsePosition1.setIndex(217);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test13849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13849");
        java.text.ParseException parseException2 = new java.text.ParseException("ko", 2);
        java.text.ParseException parseException5 = new java.text.ParseException("ko", 9);
        parseException2.addSuppressed((java.lang.Throwable) parseException5);
        java.text.ParseException parseException9 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray10 = parseException9.getSuppressed();
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field11, (int) (short) 0);
        int int14 = fieldPosition13.getEndIndex();
        java.text.ParseException parseException17 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray18 = parseException17.getSuppressed();
        int int19 = parseException17.getErrorOffset();
        boolean boolean20 = fieldPosition13.equals((java.lang.Object) parseException17);
        java.text.ParseException parseException23 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int24 = parseException23.getErrorOffset();
        parseException17.addSuppressed((java.lang.Throwable) parseException23);
        parseException9.addSuppressed((java.lang.Throwable) parseException17);
        int int27 = parseException17.getErrorOffset();
        int int28 = parseException17.getErrorOffset();
        parseException5.addSuppressed((java.lang.Throwable) parseException17);
        java.text.ParseException parseException32 = new java.text.ParseException("", 9);
        parseException17.addSuppressed((java.lang.Throwable) parseException32);
        java.lang.String str34 = parseException17.toString();
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str34, "java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test13850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13850");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        numberFormat0.setMaximumIntegerDigits((int) (short) 100);
        numberFormat0.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        boolean boolean9 = numberFormat8.isGroupingUsed();
        java.lang.Object obj10 = numberFormat8.clone();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test13851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13851");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder16 = builder11.setExtension('a', "Canada");
        java.util.Locale.Builder builder19 = builder11.setExtension('u', "");
        java.util.Locale locale20 = builder19.build();
        java.util.Locale.Builder builder22 = builder19.addUnicodeLocaleAttribute("french");
        java.util.Locale.Builder builder23 = builder19.clear();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str26 = locale24.getISO3Language();
        java.util.Set<java.lang.Character> charSet27 = locale24.getExtensionKeys();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale24);
        java.lang.String str29 = locale24.getCountry();
        java.util.Locale.Builder builder30 = builder19.setLocale(locale24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder32 = builder19.setLanguageTag("1 / 1 (JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 1 / 1 (JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "chinese__#a-canada");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test13852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13852");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.text.NumberFormat.Field field2 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field2, (int) (short) 0);
        int int5 = fieldPosition4.getEndIndex();
        java.text.ParseException parseException8 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray9 = parseException8.getSuppressed();
        int int10 = parseException8.getErrorOffset();
        boolean boolean11 = fieldPosition4.equals((java.lang.Object) parseException8);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setVariant("");
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale16.getISO3Language();
        boolean boolean20 = locale16.hasExtensions();
        java.util.Locale.Builder builder21 = builder14.setLocale(locale16);
        java.util.Locale.Builder builder22 = builder21.clear();
        boolean boolean23 = fieldPosition4.equals((java.lang.Object) builder22);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.lang.String str28 = locale26.getScript();
        java.lang.String str29 = locale26.getVariant();
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale31 = java.util.Locale.getDefault(category24);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.util.Locale.setDefault(category24, locale32);
        java.util.Locale locale35 = java.util.Locale.getDefault(category24);
        java.util.Locale.Builder builder36 = builder22.setLocale(locale35);
        java.util.Locale.Builder builder37 = builder22.clear();
        java.util.Locale.Builder builder39 = builder37.setLanguageTag("DEU");
        java.util.Locale.Builder builder41 = builder39.setVariant("Korean");
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.lang.String str46 = locale44.getScript();
        java.lang.String str47 = locale44.getVariant();
        java.util.Locale.setDefault(category42, locale44);
        java.util.Locale locale49 = java.util.Locale.getDefault(category42);
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.util.Locale.setDefault(category42, locale50);
        java.util.Locale locale53 = java.util.Locale.getDefault(category42);
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str56 = locale55.getDisplayScript();
        java.util.Locale locale57 = locale55.stripExtensions();
        java.util.Locale.setDefault(category42, locale55);
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet60 = locale59.getExtensionKeys();
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getInstance(locale59);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale63.getDisplayLanguage(locale64);
        java.lang.String str66 = locale63.getISO3Language();
        java.lang.String str67 = locale62.getDisplayCountry(locale63);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.lang.String str71 = locale69.getDisplayLanguage(locale70);
        java.lang.String str72 = locale69.getISO3Language();
        java.lang.String str73 = locale68.getDisplayCountry(locale69);
        java.util.Locale locale74 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str75 = locale69.getDisplayLanguage(locale74);
        java.lang.String str76 = locale63.getDisplayName(locale74);
        java.lang.String str77 = locale63.getDisplayCountry();
        java.lang.String str78 = locale59.getDisplayVariant(locale63);
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.lang.String str81 = locale79.getDisplayLanguage(locale80);
        java.lang.String str82 = locale79.getISO3Language();
        java.lang.String str83 = locale79.getDisplayCountry();
        java.util.Locale locale84 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str85 = locale79.getDisplayLanguage(locale84);
        java.lang.String str86 = locale63.getDisplayVariant(locale84);
        java.util.Locale locale88 = new java.util.Locale("Korean (South Korea)");
        java.lang.String str89 = locale88.getDisplayName();
        java.lang.String str90 = locale84.getDisplayName(locale88);
        java.util.Locale.setDefault(category42, locale84);
        java.util.Locale.Builder builder92 = builder39.setLocale(locale84);
        java.util.Locale.Builder builder93 = builder1.setLocale(locale84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder95 = builder1.setLanguageTag("409.400%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 409.400% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(field2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category42.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str65, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "kor" + "'", str66, "kor");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str71, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "kor" + "'", str72, "kor");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u671d\u9c9c\u6587" + "'", str75, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u671d\u9c9c\u6587" + "'", str76, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str81, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "kor" + "'", str82, "kor");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u97d3\u6587" + "'", str85, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals(locale88.toString(), "korean (south korea)");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "korean (south korea)" + "'", str89, "korean (south korea)");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Chinese (Taiwan)" + "'", str90, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test13853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13853");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        boolean boolean2 = numberFormat0.isParseIntegerOnly();
        java.lang.String str4 = numberFormat0.format((double) 11);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\244 11,00" + "'", str4, "\244 11,00");
    }

    @Test
    public void test13854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13854");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("FR", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("China", strMap4);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        boolean boolean14 = locale10.hasExtensions();
        java.util.Locale.Builder builder15 = builder8.setLocale(locale10);
        java.util.Set<java.lang.String> strSet16 = locale10.getUnicodeLocaleKeys();
        java.lang.String str17 = java.util.Locale.lookupTag(languageRangeList5, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.parse("kor", strMap19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.lang.String str27 = locale25.getScript();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale25, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray42 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList43);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, strMap46);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale51.getDisplayLanguage(locale52);
        java.lang.String str54 = locale52.getScript();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Locale locale56 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale52, locale55, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList58, filteringMode60);
        java.lang.String[] strArray69 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList70);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap73 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList74 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, strMap73);
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.lang.String str80 = locale78.getDisplayLanguage(locale79);
        java.lang.String str81 = locale79.getScript();
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.util.Locale locale83 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray84 = new java.util.Locale[] { locale79, locale82, locale83 };
        java.util.ArrayList<java.util.Locale> localeList85 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList85, localeArray84);
        java.util.Locale.FilteringMode filteringMode87 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.util.Locale>) localeList85, filteringMode87);
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter(languageRangeList74, (java.util.Collection<java.util.Locale>) localeList88, filteringMode89);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter(languageRangeList47, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.Locale locale92 = java.util.Locale.lookup(languageRangeList20, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter(languageRangeList5, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList93);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str53, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(languageRangeList74);
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str80, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + filteringMode87 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode87.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode89.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNull(locale92);
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertNotNull(localeList94);
    }

    @Test
    public void test13855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13855");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("35 / 1");
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale1);
        java.util.Locale locale4 = new java.util.Locale("French");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale4);
        java.lang.String str7 = locale4.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getISO3Language();
        java.util.Set<java.lang.Character> charSet11 = locale8.getExtensionKeys();
        java.lang.String str12 = locale4.getDisplayVariant(locale8);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getNumberInstance(locale13);
        java.lang.String str16 = locale13.getDisplayCountry();
        java.lang.String str17 = locale4.getDisplayCountry(locale13);
        java.lang.String str18 = locale1.getDisplayLanguage(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = locale4.getUnicodeLocaleType("\u82f1\u6587,120)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=13689,endindex=0] (??,120)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals(locale4.toString(), "french");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "french" + "'", str7, "french");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test13856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13856");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getBeginIndex();
        int int8 = fieldPosition2.getField();
        int int9 = fieldPosition2.getEndIndex();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        numberFormat10.setMaximumIntegerDigits((int) (short) 100);
        numberFormat10.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10);
        boolean boolean18 = fieldPosition2.equals((java.lang.Object) numberFormat10);
        int int19 = fieldPosition2.getField();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test13857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13857");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        boolean boolean7 = fraction3.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction3.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction13 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.reciprocal();
        long long16 = fraction14.longValue();
        int int17 = fraction14.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction14.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int24 = fraction23.intValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.subtract(fraction23);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayLanguage(locale30);
        java.lang.String str32 = locale30.getScript();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale30, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        boolean boolean40 = fraction25.equals((java.lang.Object) localeList39);
        int int41 = fraction25.intValue();
        double double42 = fraction25.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction19.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction19.negate();
        java.lang.String str45 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction19);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction10.subtract(fraction19);
        double double47 = fraction19.doubleValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-117) + "'", int24 == (-117));
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 117 + "'", int41 == 117);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 117.0d + "'", double42 == 117.0d);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1 / 35" + "'", str45, "1 / 35");
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.02857142857142857d + "'", double47 == 0.02857142857142857d);
    }

    @Test
    public void test13858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13858");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.lang.String str5 = locale4.toLanguageTag();
        java.util.Locale.setDefault(locale4);
        boolean boolean7 = locale4.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale4.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13859");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction9 = properFractionFormat5.parse("java.text.ParseException: 100", parsePosition8);
        java.lang.String str10 = parsePosition8.toString();
        parsePosition8.setIndex((int) (short) 13689);
        int int13 = parsePosition8.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(fraction9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str10, "java.text.ParsePosition[index=0,errorIndex=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test13860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13860");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) ' ', (double) (short) 10, (int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str7 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction6.add(fraction8);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction3.add(fraction14);
        java.lang.String str16 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-117 / 1" + "'", str7, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-117 / 1" + "'", str16, "-117 / 1");
    }

    @Test
    public void test13861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13861");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.SIGN;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, 0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field0, (-13572));
        org.junit.Assert.assertNotNull(field0);
    }

    @Test
    public void test13862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13862");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.lang.String str4 = fieldPosition2.toString();
        int int5 = fieldPosition2.getBeginIndex();
        int int6 = fieldPosition2.getEndIndex();
        int int7 = fieldPosition2.getBeginIndex();
        int int8 = fieldPosition2.getEndIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test13863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13863");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale.FilteringMode filteringMode4 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList5 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3, filteringMode4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale6.getScript();
        java.lang.String str11 = locale6.getDisplayScript();
        java.lang.String str12 = locale6.getDisplayVariant();
        java.util.Set<java.lang.String> strSet13 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode14 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet13, filteringMode14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap16);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.lang.String str21 = java.util.Locale.lookupTag(languageRangeList17, (java.util.Collection<java.lang.String>) strSet20);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + filteringMode4 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode4.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + filteringMode14 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode14.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test13864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13864");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) '4');
        int int2 = fieldPosition1.getField();
        java.text.Format.Field field3 = fieldPosition1.getFieldAttribute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNull(field3);
    }

    @Test
    public void test13865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13865");
        java.util.Locale locale1 = new java.util.Locale("French");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str4 = locale1.toLanguageTag();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category7);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6, numberFormat10);
        org.junit.Assert.assertEquals(locale1.toString(), "french");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "french" + "'", str4, "french");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test13866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13866");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setWholeFormat(numberFormat48);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale51.getDisplayCountry(locale52);
        java.lang.String str57 = locale52.toLanguageTag();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance(locale52);
        boolean boolean59 = numberFormat58.isParseIntegerOnly();
        properFractionFormat17.setDenominatorFormat(numberFormat58);
        boolean boolean61 = numberFormat58.isParseIntegerOnly();
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getIntegerInstance(locale62);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getInstance(locale62);
        int int65 = numberFormat64.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getNumeratorFormat();
        int int68 = numberFormat67.getMinimumFractionDigits();
        numberFormat67.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = new org.apache.commons.math.fraction.FractionFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat73 = fractionFormat72.getNumeratorFormat();
        int int74 = numberFormat73.getMinimumFractionDigits();
        java.lang.String str76 = numberFormat73.format((double) (byte) -1);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale77.getDisplayLanguage(locale78);
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getNumberInstance(locale78);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getPercentInstance();
        numberFormat82.setMaximumIntegerDigits((-1));
        java.util.Currency currency85 = numberFormat82.getCurrency();
        numberFormat81.setCurrency(currency85);
        numberFormat80.setCurrency(currency85);
        boolean boolean88 = numberFormat80.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat89 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73, numberFormat80);
        fractionFormat71.setNumeratorFormat(numberFormat73);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58, numberFormat64, numberFormat73);
        java.text.NumberFormat numberFormat92 = properFractionFormat91.getWholeFormat();
        java.text.NumberFormat numberFormat93 = properFractionFormat91.getWholeFormat();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "French" + "'", str33, "French");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko" + "'", str57, "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1" + "'", str76, "-1");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str79, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNotNull(currency85);
        org.junit.Assert.assertEquals(currency85.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(numberFormat92);
        org.junit.Assert.assertNotNull(numberFormat93);
    }

    @Test
    public void test13867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13867");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\244113.00");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test13868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13868");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setRegion("CN");
        java.util.Locale locale10 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str12 = locale10.getISO3Language();
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale10);
        java.lang.String str15 = locale10.getDisplayName();
        java.lang.String str16 = locale10.getCountry();
        java.lang.String str17 = locale10.getScript();
        java.util.Locale.Builder builder18 = builder7.setLocale(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("java.text.FieldPosition[field=2147483647,attribute=null,beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.FieldPosition[field=2147483647,attribute=null,beginIndex=0,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test13869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13869");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setWholeFormat(numberFormat48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj56 = numberFormat52.parseObject("hi!", parsePosition55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getNumeratorFormat();
        java.text.NumberFormat numberFormat59 = fractionFormat57.getNumeratorFormat();
        java.text.ParseException parseException62 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray63 = parseException62.getSuppressed();
        boolean boolean64 = numberFormat59.equals((java.lang.Object) throwableArray63);
        numberFormat59.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.text.NumberFormat numberFormat68 = properFractionFormat67.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = new org.apache.commons.math.fraction.FractionFormat(numberFormat52, numberFormat68);
        int int70 = numberFormat68.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.text.NumberFormat numberFormat72 = properFractionFormat71.getWholeFormat();
        properFractionFormat51.setDenominatorFormat(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "French" + "'", str33, "French");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat72);
    }

    @Test
    public void test13870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13870");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int7 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.subtract(fraction6);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.multiply(fraction3);
        org.apache.commons.math.fraction.Fraction fraction11 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction12 = fraction9.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.reciprocal();
        long long18 = fraction16.longValue();
        int int19 = fraction16.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction9.add(fraction16);
        int int21 = fraction9.getDenominator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-117) + "'", int7 == (-117));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test13871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13871");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.setLanguageTag("coreano");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setVariant("cor\351en (Cor\351e du Sud)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: core?en (Core?e du Sud) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test13872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13872");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("eng");
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale7.getCountry();
        java.lang.String str12 = locale5.getDisplayName(locale7);
        java.util.Locale.Builder builder13 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder14 = builder4.clear();
        java.util.Locale.Builder builder16 = builder4.setScript("");
        java.util.Locale.Builder builder17 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder17.setRegion("java.text.FieldPosition[field=-13572,attribute=null,beginIndex=0,endIndex=100]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: java.text.FieldPosition[field=-13572,attribute=null,beginIndex=0,endIndex=100] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str12, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test13873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13873");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        numberFormat0.setMaximumIntegerDigits((int) (short) 100);
        numberFormat0.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.math.RoundingMode roundingMode8 = numberFormat0.getRoundingMode();
        numberFormat0.setGroupingUsed(true);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat12 = properFractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getNumeratorFormat();
        int int15 = numberFormat14.getMinimumFractionDigits();
        int int16 = numberFormat14.getMaximumFractionDigits();
        properFractionFormat11.setNumeratorFormat(numberFormat14);
        numberFormat14.setMaximumIntegerDigits(287);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test13874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13874");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale2);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.util.Locale locale9 = locale7.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.lang.String str11 = locale2.getDisplayLanguage(locale9);
        java.util.Set<java.lang.Character> charSet12 = locale2.getExtensionKeys();
        java.util.Locale locale14 = new java.util.Locale("zh_TW");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        java.lang.String str16 = locale2.getDisplayScript(locale14);
        java.lang.String str17 = locale14.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_tw");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test13875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13875");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        int int14 = fraction13.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction16 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str22 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction21);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int27 = fraction26.intValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction23.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction21.add(fraction23);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction18.subtract(fraction30);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction17.multiply(fraction18);
        org.apache.commons.math.fraction.Fraction fraction35 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction17.multiply(fraction35);
        org.apache.commons.math.fraction.Fraction fraction39 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        double double40 = fraction39.doubleValue();
        int int41 = fraction39.intValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction17.divide(fraction39);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction13.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-117 / 1" + "'", str22, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-117) + "'", int27 == (-117));
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.4857142857142858d + "'", double40 == 1.4857142857142858d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
    }

    @Test
    public void test13876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13876");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        numberFormat0.setMinimumFractionDigits(0);
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet40 = locale39.getExtensionKeys();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getInstance(locale39);
        numberFormat41.setParseIntegerOnly(true);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj49 = numberFormat45.parseObject("hi!", parsePosition48);
        parsePosition48.setErrorIndex(10);
        java.lang.String str52 = parsePosition48.toString();
        java.lang.Number number53 = numberFormat41.parse("1 / 1", parsePosition48);
        java.lang.Number number54 = numberFormat0.parse("anglais (Etats-Unis)", parsePosition48);
        int int55 = numberFormat0.getMaximumFractionDigits();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str59 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction58);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int64 = fraction63.intValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.subtract(fraction63);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction58.add(fraction60);
        int int67 = fraction66.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction71 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction74 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int75 = fraction74.intValue();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction71.subtract(fraction74);
        org.apache.commons.math.fraction.Fraction fraction77 = fraction70.multiply(fraction71);
        org.apache.commons.math.fraction.Fraction fraction78 = fraction66.multiply(fraction77);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction77.abs();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.negate();
        java.util.Locale locale81 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale81);
        boolean boolean83 = fraction79.equals((java.lang.Object) locale81);
        boolean boolean84 = numberFormat0.equals((java.lang.Object) locale81);
        java.lang.String str86 = numberFormat0.format((long) (-78));
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str52, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(number53);
        org.junit.Assert.assertNull(number54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-117 / 1" + "'", str59, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-117) + "'", int64 == (-117));
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-117) + "'", int75 == (-117));
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-0%" + "'", str86, "-0%");
    }

    @Test
    public void test13877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13877");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        java.text.NumberFormat numberFormat14 = fractionFormat12.getNumeratorFormat();
        java.text.ParseException parseException17 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray18 = parseException17.getSuppressed();
        boolean boolean19 = numberFormat14.equals((java.lang.Object) throwableArray18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getNumeratorFormat();
        java.text.NumberFormat numberFormat22 = fractionFormat20.getNumeratorFormat();
        java.text.ParseException parseException25 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray26 = parseException25.getSuppressed();
        boolean boolean27 = numberFormat22.equals((java.lang.Object) throwableArray26);
        numberFormat22.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.text.NumberFormat numberFormat31 = properFractionFormat30.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat31);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits((-1));
        numberFormat33.setMaximumIntegerDigits((int) (short) 100);
        numberFormat33.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33);
        java.math.RoundingMode roundingMode41 = numberFormat33.getRoundingMode();
        numberFormat33.setGroupingUsed(true);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance();
        java.lang.String str46 = numberFormat44.format(100L);
        int int47 = numberFormat44.getMinimumFractionDigits();
        numberFormat44.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance();
        numberFormat50.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode53 = numberFormat50.getRoundingMode();
        numberFormat44.setRoundingMode(roundingMode53);
        numberFormat33.setRoundingMode(roundingMode53);
        properFractionFormat32.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat57 = properFractionFormat32.getNumeratorFormat();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "JPY");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode41.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + roundingMode53 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode53.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat57);
    }

    @Test
    public void test13878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13878");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray6 = parseException5.getSuppressed();
        java.text.ParseException parseException9 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray10 = parseException9.getSuppressed();
        parseException5.addSuppressed((java.lang.Throwable) parseException9);
        java.lang.Throwable[] throwableArray12 = parseException9.getSuppressed();
        java.lang.Throwable[] throwableArray13 = parseException9.getSuppressed();
        boolean boolean14 = fieldPosition1.equals((java.lang.Object) throwableArray13);
        int int15 = fieldPosition1.getBeginIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test13879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13879");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.lang.String str10 = fieldPosition2.toString();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getDisplayVariant();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale11.getDisplayScript(locale13);
        java.util.Set<java.lang.String> strSet17 = locale13.getUnicodeLocaleKeys();
        boolean boolean18 = fieldPosition2.equals((java.lang.Object) locale13);
        int int19 = fieldPosition2.getBeginIndex();
        java.lang.String str20 = fieldPosition2.toString();
        fieldPosition2.setEndIndex((int) (short) -116);
        fieldPosition2.setEndIndex(10000);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str20, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test13880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13880");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        fieldPosition2.setEndIndex((int) 'a');
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getWholeFormat();
        boolean boolean29 = fieldPosition2.equals((java.lang.Object) properFractionFormat23);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 10);
        parsePosition36.setErrorIndex((int) (byte) 1);
        java.lang.Object obj39 = fractionFormat33.parseObject("United Kingdom", parsePosition36);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj44 = numberFormat40.parseObject("hi!", parsePosition43);
        fractionFormat33.setDenominatorFormat(numberFormat40);
        fractionFormat31.setDenominatorFormat(numberFormat40);
        java.text.NumberFormat numberFormat47 = fractionFormat31.getNumeratorFormat();
        boolean boolean48 = fieldPosition2.equals((java.lang.Object) numberFormat47);
        java.lang.String str49 = fieldPosition2.toString();
        int int50 = fieldPosition2.getEndIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "JPY");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "JPY");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=97]" + "'", str49, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=97]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
    }

    @Test
    public void test13881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13881");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        numberFormat3.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.util.Currency currency10 = numberFormat7.getCurrency();
        numberFormat6.setCurrency(currency10);
        numberFormat3.setCurrency(currency10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.util.Currency currency16 = numberFormat13.getCurrency();
        java.lang.String str18 = numberFormat13.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat3, numberFormat13);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance();
        java.lang.String str22 = numberFormat20.format(100L);
        properFractionFormat19.setWholeFormat(numberFormat20);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        int int27 = numberFormat24.getMinimumFractionDigits();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getNumberInstance(locale29);
        java.lang.String str33 = numberFormat31.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20, numberFormat24, numberFormat31);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits((-1));
        java.util.Currency currency40 = numberFormat37.getCurrency();
        java.lang.String str42 = numberFormat37.format((double) 10);
        boolean boolean44 = numberFormat37.equals((java.lang.Object) "");
        fractionFormat36.setNumeratorFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet48 = locale47.getExtensionKeys();
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance(locale47);
        numberFormat49.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37, numberFormat49);
        numberFormat49.setGroupingUsed(true);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayLanguage(locale56);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getNumberInstance(locale56);
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance();
        numberFormat60.setMaximumIntegerDigits((-1));
        java.util.Currency currency63 = numberFormat60.getCurrency();
        numberFormat59.setCurrency(currency63);
        numberFormat58.setCurrency(currency63);
        numberFormat49.setCurrency(currency63);
        boolean boolean67 = numberFormat49.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat24, numberFormat49);
        numberFormat49.setMaximumIntegerDigits(315);
        numberFormat49.setMinimumFractionDigits((int) (short) -1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "JPY");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "JPY");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0%" + "'", str18, "0%");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "100" + "'", str22, "100");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "32" + "'", str33, "32");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "JPY");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0%" + "'", str42, "0%");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str57, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(currency63);
        org.junit.Assert.assertEquals(currency63.toString(), "JPY");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test13882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13882");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("10\240000 %");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 10?000 % [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test13883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13883");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getDisplayScript();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        java.lang.String str5 = locale0.getDisplayVariant(locale4);
        java.lang.String str6 = locale4.getISO3Country();
        java.lang.String str7 = locale4.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
    }

    @Test
    public void test13884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13884");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayName(locale5);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale5);
        java.util.Locale locale11 = new java.util.Locale("francese");
        java.lang.String str12 = locale5.getDisplayScript(locale11);
        java.lang.String str13 = locale5.getDisplayVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.lang.String str15 = locale5.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cor\351en" + "'", str8, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals(locale11.toString(), "francese");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test13885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13885");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale3);
        boolean boolean5 = numberFormat2.equals((java.lang.Object) numberFormat4);
        numberFormat2.setMaximumFractionDigits((-116));
        boolean boolean8 = numberFormat2.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u30ab\u30ca\u30c0" + "'", str1, "\u30ab\u30ca\u30c0");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13886");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((-2), (int) (short) 3);
    }

    @Test
    public void test13887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13887");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat3 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj9 = numberFormat5.parseObject("hi!", parsePosition8);
        org.apache.commons.math.fraction.Fraction fraction10 = fractionFormat1.parse("-117 / 1", parsePosition8);
        java.text.NumberFormat numberFormat11 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale13);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale13);
        java.lang.String str16 = locale13.getLanguage();
        java.lang.String str17 = locale13.getDisplayCountry();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale13);
        numberFormat18.setMaximumFractionDigits((int) (short) -4);
        fractionFormat12.setNumeratorFormat(numberFormat18);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(fraction10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(numberFormat18);
    }

    @Test
    public void test13888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13888");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 10);
        parsePosition6.setErrorIndex((int) (byte) 1);
        parsePosition6.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat2.parse("French", parsePosition6);
        java.text.NumberFormat numberFormat12 = fractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        numberFormat18.setCurrency(currency22);
        numberFormat15.setCurrency(currency22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat15);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        numberFormat26.setMaximumIntegerDigits((-1));
        numberFormat26.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean32 = numberFormat31.isGroupingUsed();
        numberFormat31.setParseIntegerOnly(false);
        java.lang.Number number36 = numberFormat31.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat26, numberFormat31);
        java.text.NumberFormat numberFormat38 = properFractionFormat37.getWholeFormat();
        java.lang.String str40 = numberFormat38.format((-0.008547008547008548d));
        numberFormat38.setMinimumIntegerDigits(100);
        java.util.Currency currency43 = numberFormat38.getCurrency();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        boolean boolean45 = numberFormat12.equals((java.lang.Object) properFractionFormat44);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str1, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "JPY");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + number36 + "' != '" + 0L + "'", number36, 0L);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-0%" + "'", str40, "-0%");
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "JPY");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test13889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13889");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayName(locale5);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale5);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance();
        int int12 = numberFormat11.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getNumeratorFormat();
        int int16 = numberFormat15.getMinimumFractionDigits();
        numberFormat15.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        numberFormat26.setMaximumIntegerDigits((-1));
        java.util.Currency currency29 = numberFormat26.getCurrency();
        numberFormat25.setCurrency(currency29);
        numberFormat22.setCurrency(currency29);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.util.Currency currency35 = numberFormat32.getCurrency();
        java.lang.String str37 = numberFormat32.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21, numberFormat22, numberFormat32);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance();
        java.lang.String str42 = numberFormat40.format(100L);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj48 = numberFormat44.parseObject("hi!", parsePosition47);
        java.lang.Number number49 = numberFormat40.parse("10,000%", parsePosition47);
        int int50 = parsePosition47.getErrorIndex();
        java.lang.Object obj51 = properFractionFormat38.parseObject("French", parsePosition47);
        java.lang.Object obj52 = fractionFormat19.parseObject("kor", parsePosition47);
        java.lang.Object obj53 = numberFormat11.parseObject("java.text.NumberFormat$Field(currency)", parsePosition47);
        parsePosition47.setErrorIndex(0);
        java.lang.Object obj56 = numberFormat9.parseObject("116", parsePosition47);
        java.lang.StringBuffer stringBuffer58 = null;
        java.text.NumberFormat.Field field59 = java.text.NumberFormat.Field.SIGN;
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition((java.text.Format.Field) field59, (int) (byte) -117);
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition((java.text.Format.Field) field59, (-2));
        java.text.FieldPosition fieldPosition64 = new java.text.FieldPosition((java.text.Format.Field) field59);
        java.util.Locale locale65 = java.util.Locale.UK;
        java.util.Locale locale66 = java.util.Locale.UK;
        java.lang.String str67 = locale66.getDisplayScript();
        java.util.Set<java.lang.String> strSet68 = locale66.getUnicodeLocaleAttributes();
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.lang.String str70 = locale66.getDisplayCountry(locale69);
        java.lang.String str71 = locale69.getISO3Country();
        java.lang.String str72 = locale65.getDisplayCountry(locale69);
        java.lang.Object obj73 = locale65.clone();
        boolean boolean74 = fieldPosition64.equals(obj73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer75 = numberFormat9.format((double) (-4), stringBuffer58, fieldPosition64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cor\351en" + "'", str8, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "JPY");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "JPY");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0%" + "'", str37, "0%");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100" + "'", str42, "100");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(number49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(field59);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "United Kingdom" + "'", str70, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "United Kingdom" + "'", str72, "United Kingdom");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "en_GB");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "en_GB");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test13890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13890");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale2.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale6.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        boolean boolean12 = locale6.hasExtensions();
        java.lang.String str13 = locale6.getVariant();
        java.util.Locale locale15 = new java.util.Locale("zh_TW");
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale.setDefault(locale15);
        java.lang.String str18 = locale6.getDisplayCountry(locale15);
        java.lang.String str19 = locale2.getDisplayName(locale6);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ko" + "'", str5, "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale15.toString(), "zh_tw");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh_tw" + "'", str16, "zh_tw");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test13891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13891");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder12 = builder9.setRegion("");
        java.util.Locale.Builder builder14 = builder9.setVariant("Italian");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder9.setExtension('a', "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(integer),beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: java.text.FieldPosition[field= [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test13892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13892");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.SIGN;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) -117);
        java.lang.String str3 = fieldPosition2.toString();
        int int4 = fieldPosition2.getEndIndex();
        int int5 = fieldPosition2.getBeginIndex();
        java.text.Format.Field field6 = fieldPosition2.getFieldAttribute();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=-117,attribute=java.text.NumberFormat$Field(sign),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=-117,attribute=java.text.NumberFormat$Field(sign),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(field6);
    }

    @Test
    public void test13893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13893");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.lang.String str4 = locale2.getScript();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale2);
        java.lang.String str6 = locale2.getCountry();
        java.util.Locale locale7 = locale2.stripExtensions();
        java.lang.String str8 = locale7.getDisplayCountry();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale11.getScript();
        java.lang.String str14 = locale11.getVariant();
        java.util.Locale.setDefault(category9, locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault(category9);
        java.util.Locale locale17 = java.util.Locale.getDefault(category9);
        java.util.Locale locale18 = java.util.Locale.getDefault(category9);
        java.util.Locale locale19 = java.util.Locale.getDefault(category9);
        java.util.Locale locale20 = java.util.Locale.getDefault(category9);
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale7.getDisplayVariant(locale20);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "TW" + "'", str6, "TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Taiwan" + "'", str8, "Taiwan");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ko" + "'", str21, "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test13894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13894");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale5.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder12 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale16.getScript();
        java.lang.String str19 = locale16.getVariant();
        java.util.Locale.setDefault(category14, locale16);
        java.util.Locale locale21 = java.util.Locale.getDefault(category14);
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.util.Locale.setDefault(category14, locale22);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.setVariant("");
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayLanguage(locale30);
        java.lang.String str32 = locale29.getISO3Language();
        boolean boolean33 = locale29.hasExtensions();
        java.util.Locale.Builder builder34 = builder27.setLocale(locale29);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale29);
        java.util.Locale locale36 = locale29.stripExtensions();
        java.util.Locale.setDefault(category14, locale36);
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale40.getScript();
        java.lang.String str43 = locale40.getVariant();
        java.util.Locale.setDefault(category38, locale40);
        java.lang.String str45 = locale40.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.UK;
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleAttributes();
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.lang.String str50 = locale46.getDisplayCountry(locale49);
        java.lang.String str51 = locale40.getDisplayVariant(locale46);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str56 = locale53.getDisplayName(locale55);
        java.util.Locale.setDefault(locale55);
        java.lang.String str58 = locale40.getDisplayLanguage(locale55);
        java.util.Locale.setDefault(category14, locale55);
        java.util.Locale.Builder builder60 = builder12.setLocale(locale55);
        java.util.Locale.Category category61 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.lang.String str65 = locale63.getScript();
        java.lang.String str66 = locale63.getVariant();
        java.util.Locale.setDefault(category61, locale63);
        java.util.Locale locale68 = java.util.Locale.getDefault(category61);
        java.util.Locale locale69 = java.util.Locale.getDefault(category61);
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getInstance(locale69);
        java.util.Locale locale73 = new java.util.Locale("United Kingdom", "1");
        java.lang.String str74 = locale69.getDisplayLanguage(locale73);
        java.util.Locale.Builder builder75 = builder12.setLocale(locale69);
        java.util.Locale.Builder builder76 = builder75.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u671d\u9c9c\u6587" + "'", str11, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "kor" + "'", str32, "kor");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category38.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "United Kingdom" + "'", str50, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "coreano" + "'", str56, "coreano");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "coreano" + "'", str58, "coreano");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + category61 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category61.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str64, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals(locale73.toString(), "united kingdom_1");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Korean" + "'", str74, "Korean");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test13895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13895");
        java.util.Locale locale2 = new java.util.Locale("\244 10.00", "korean (south korea)");
        org.junit.Assert.assertEquals(locale2.toString(), "\244 10.00_KOREAN (SOUTH KOREA)");
    }

    @Test
    public void test13896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13896");
        java.util.Locale locale2 = new java.util.Locale("", "java.text.ParsePosition[index=-117,errorIndex=9]");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.util.Locale locale6 = new java.util.Locale("French");
        java.util.Locale locale7 = locale6.stripExtensions();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.lang.String str9 = locale6.toLanguageTag();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str12 = locale10.getISO3Language();
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.lang.String str14 = locale6.getDisplayVariant(locale10);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale15.getCountry();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale15);
        java.lang.String str21 = locale10.getDisplayVariant(locale15);
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.NumberFormat.Field field23 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition24 = new java.text.FieldPosition((java.text.Format.Field) field23);
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field23, 3);
        int int27 = fieldPosition26.getField();
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition(9);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.text.NumberFormat numberFormat33 = fractionFormat32.getNumeratorFormat();
        boolean boolean34 = parsePosition29.equals((java.lang.Object) numberFormat33);
        boolean boolean35 = numberFormat33.isParseIntegerOnly();
        boolean boolean36 = fieldPosition26.equals((java.lang.Object) numberFormat33);
        fieldPosition26.setBeginIndex(5);
        fieldPosition26.setBeginIndex((int) (short) 4369);
        fieldPosition26.setBeginIndex((int) (byte) 117);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer43 = properFractionFormat4.format((java.lang.Object) str21, stringBuffer22, fieldPosition26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_JAVA.TEXT.PARSEPOSITION[INDEX=-117,ERRORINDEX=9]");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals(locale6.toString(), "french");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "french" + "'", str9, "french");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str31, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test13897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13897");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str14 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int19 = fraction18.intValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction15.subtract(fraction18);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction13.add(fraction15);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction10.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int33 = fraction32.intValue();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction27.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction24.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int45 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction41.subtract(fraction44);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction40.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction37.add(fraction41);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction22.multiply(fraction37);
        java.util.Locale locale50 = java.util.Locale.UK;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale51.getDisplayLanguage(locale52);
        java.lang.String str54 = locale50.getDisplayScript(locale52);
        java.lang.String str55 = locale52.toLanguageTag();
        java.lang.String str56 = locale52.getVariant();
        boolean boolean57 = fraction49.equals((java.lang.Object) locale52);
        java.lang.String str58 = locale4.getDisplayScript(locale52);
        java.lang.String str59 = locale52.getDisplayLanguage();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayLanguage(locale61);
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getNumberInstance(locale61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getIntegerInstance(locale61);
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.util.Locale locale66 = java.util.Locale.UK;
        java.lang.String str67 = locale66.getDisplayScript();
        java.util.Set<java.lang.String> strSet68 = locale66.getUnicodeLocaleAttributes();
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.lang.String str70 = locale66.getDisplayCountry(locale69);
        java.lang.String str71 = locale65.getDisplayVariant(locale66);
        java.lang.String str72 = locale61.getDisplayName(locale65);
        java.lang.String str73 = locale52.getDisplayScript(locale65);
        java.util.Locale.Category category74 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale75.getDisplayLanguage(locale76);
        java.lang.String str78 = locale76.getScript();
        java.lang.String str79 = locale76.getVariant();
        java.util.Locale.setDefault(category74, locale76);
        java.util.Locale locale81 = java.util.Locale.getDefault(category74);
        java.util.Locale locale82 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat83 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale82);
        java.util.Locale.setDefault(category74, locale82);
        java.lang.String str85 = locale52.getDisplayScript(locale82);
        java.util.Set<java.lang.Character> charSet86 = locale82.getExtensionKeys();
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getNumberInstance(locale82);
        java.text.NumberFormat numberFormat88 = java.text.NumberFormat.getIntegerInstance(locale82);
        java.util.Locale locale89 = locale82.stripExtensions();
        java.lang.String str90 = locale89.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-117 / 1" + "'", str14, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-117) + "'", int19 == (-117));
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-117 / 1" + "'", str28, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-117) + "'", int33 == (-117));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-117) + "'", int45 == (-117));
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str53, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ko" + "'", str55, "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str59, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "United Kingdom" + "'", str70, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "coreano" + "'", str72, "coreano");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + category74 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category74.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str77, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(charSet86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "fran\347ais" + "'", str90, "fran\347ais");
    }

    @Test
    public void test13898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13898");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.removeUnicodeLocaleAttribute("zho");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale.Builder builder9 = builder4.setExtension('u', "Kanada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setVariant("java.text.ParsePosition[index=0,errorIndex=52]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: java.text.ParsePosition[index=0,errorIndex=52] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test13899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13899");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getBeginIndex();
        fieldPosition2.setEndIndex((int) '#');
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.lang.String str27 = locale25.getScript();
        java.lang.String str28 = locale25.getVariant();
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayLanguage(locale36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale38.getDisplayLanguage(locale39);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getNumberInstance(locale39);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.lang.String str46 = locale44.getScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.lang.String str50 = locale48.getScript();
        java.lang.String str51 = locale48.getVariant();
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale25, locale29, locale30, locale34, locale36, locale39, locale42, locale44, locale48 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.lang.String str61 = locale59.getScript();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray64 = new java.util.Locale[] { locale59, locale62, locale63 };
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.Locale.FilteringMode filteringMode67 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.util.Locale>) localeList65, filteringMode67);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList53, filteringMode67);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.lang.String str72 = locale70.getDisplayLanguage(locale71);
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        java.lang.String str74 = locale71.getDisplayName(locale73);
        java.util.Locale.setDefault(locale73);
        java.util.Set<java.lang.String> strSet76 = locale73.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet76);
        boolean boolean78 = fieldPosition2.equals((java.lang.Object) languageRangeList11);
        int int79 = fieldPosition2.getEndIndex();
        java.lang.String str80 = fieldPosition2.toString();
        int int81 = fieldPosition2.getEndIndex();
        fieldPosition2.setBeginIndex((int) (short) 100);
        java.lang.String str84 = fieldPosition2.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str37, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str40, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + filteringMode67 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode67.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str72, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "coreano" + "'", str74, "coreano");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=35]" + "'", str80, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=100,endIndex=35]" + "'", str84, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=100,endIndex=35]");
    }

    @Test
    public void test13900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13900");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        fieldPosition2.setBeginIndex((int) '4');
        fieldPosition2.setBeginIndex((int) (short) 1);
        java.text.Format.Field field11 = fieldPosition2.getFieldAttribute();
        int int12 = fieldPosition2.getEndIndex();
        fieldPosition2.setBeginIndex((int) (short) 1);
        fieldPosition2.setEndIndex(120);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test13901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13901");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat3.setCurrency(currency8);
        boolean boolean11 = numberFormat3.isParseIntegerOnly();
        int int12 = numberFormat3.getMaximumFractionDigits();
        numberFormat3.setMinimumIntegerDigits(4095);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition(2147483647);
        java.lang.Object obj18 = numberFormat3.parseObject("14_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100_french-French", parsePosition17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.text.NumberFormat numberFormat20 = properFractionFormat19.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test13902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13902");
        java.util.Locale locale2 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "10.000%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.text.NumberFormat numberFormat7 = fractionFormat6.getNumeratorFormat();
        java.text.NumberFormat numberFormat8 = fractionFormat6.getNumeratorFormat();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj14 = numberFormat10.parseObject("hi!", parsePosition13);
        org.apache.commons.math.fraction.Fraction fraction15 = fractionFormat6.parse("-117 / 1", parsePosition13);
        java.lang.String str16 = parsePosition13.toString();
        org.apache.commons.math.fraction.Fraction fraction17 = fractionFormat3.parse("cor\351en (Cor\351e du Sud)", parsePosition13);
        java.util.Locale locale20 = new java.util.Locale("", "TW");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getNumberInstance(locale20);
        fractionFormat3.setNumeratorFormat(numberFormat21);
        java.lang.String str24 = numberFormat21.format((double) (-13L));
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance();
        numberFormat27.setMaximumIntegerDigits((-1));
        java.util.Currency currency30 = numberFormat27.getCurrency();
        numberFormat26.setCurrency(currency30);
        java.lang.String str33 = numberFormat26.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat26, numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getNumeratorFormat();
        java.text.NumberFormat numberFormat39 = fractionFormat37.getNumeratorFormat();
        java.text.ParseException parseException42 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray43 = parseException42.getSuppressed();
        boolean boolean44 = numberFormat39.equals((java.lang.Object) throwableArray43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getNumeratorFormat();
        java.text.NumberFormat numberFormat47 = fractionFormat45.getNumeratorFormat();
        java.text.ParseException parseException50 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray51 = parseException50.getSuppressed();
        boolean boolean52 = numberFormat47.equals((java.lang.Object) throwableArray51);
        numberFormat47.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.text.NumberFormat numberFormat56 = properFractionFormat55.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat39, numberFormat56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale58.getDisplayVariant();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayLanguage(locale61);
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        java.lang.String str64 = locale61.getDisplayName(locale63);
        java.lang.String str65 = locale63.getDisplayLanguage();
        java.lang.String str66 = locale58.getDisplayName(locale63);
        java.lang.String str67 = locale58.toLanguageTag();
        java.lang.String str68 = locale58.getDisplayVariant();
        boolean boolean69 = numberFormat39.equals((java.lang.Object) locale58);
        int int70 = numberFormat39.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21, numberFormat39);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_10.000%");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(fraction15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=9]" + "'", str16, "java.text.ParsePosition[index=10,errorIndex=9]");
        org.junit.Assert.assertNull(fraction17);
        org.junit.Assert.assertEquals(locale20.toString(), "_TW");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-13" + "'", str24, "-13");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "10.000%" + "'", str33, "10.000%");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "coreano" + "'", str64, "coreano");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "italiano" + "'", str65, "italiano");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "coreano" + "'", str66, "coreano");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ko" + "'", str67, "ko");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test13903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13903");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str8 = locale5.getDisplayName(locale7);
        java.util.Locale.Builder builder9 = builder0.setLocale(locale5);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str11 = locale5.getDisplayName();
        java.lang.String str12 = locale5.getISO3Country();
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale5.getDisplayCountry(locale13);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "coreano" + "'", str8, "coreano");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "coreano" + "'", str11, "coreano");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test13904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13904");
        java.util.Locale locale2 = new java.util.Locale("2\240147\240483\240647,00 \244", "-.00000000000000000000000000000000");
        org.junit.Assert.assertEquals(locale2.toString(), "2\240147\240483\240647,00 \244_-.00000000000000000000000000000000");
    }

    @Test
    public void test13905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13905");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayName(locale5);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale5);
        java.util.Currency currency10 = numberFormat9.getCurrency();
        java.math.RoundingMode roundingMode11 = numberFormat9.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getNumeratorFormat();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        java.util.Currency currency19 = numberFormat16.getCurrency();
        numberFormat15.setCurrency(currency19);
        numberFormat14.setCurrency(currency19);
        java.math.RoundingMode roundingMode22 = numberFormat14.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode22);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int33 = fraction32.intValue();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction27.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction24.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int45 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction41.subtract(fraction44);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction40.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction37.add(fraction41);
        org.apache.commons.math.fraction.Fraction fraction51 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int59 = fraction58.intValue();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction55.subtract(fraction58);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction54.multiply(fraction55);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction51.multiply(fraction55);
        int int63 = fraction48.compareTo((java.lang.Object) fraction62);
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction67 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int68 = fraction67.intValue();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction64.subtract(fraction67);
        boolean boolean71 = fraction67.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction72 = fraction62.multiply(fraction67);
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder73.setVariant("");
        java.util.Locale.Builder builder76 = builder75.clearExtensions();
        java.util.Locale.Builder builder77 = builder75.clearExtensions();
        java.util.Locale.Builder builder78 = builder75.clearExtensions();
        boolean boolean79 = fraction62.equals((java.lang.Object) builder75);
        java.util.Locale.Builder builder80 = builder75.clearExtensions();
        java.util.Locale.Builder builder82 = builder80.addUnicodeLocaleAttribute("can");
        java.util.Locale.Builder builder83 = builder82.clearExtensions();
        java.util.Locale.Builder builder84 = builder83.clear();
        java.util.Locale locale85 = builder84.build();
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getNumberInstance(locale85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = numberFormat9.format((java.lang.Object) numberFormat86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cor\351en" + "'", str8, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode11.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode22 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode22.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-117 / 1" + "'", str28, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-117) + "'", int33 == (-117));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-117) + "'", int45 == (-117));
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-117) + "'", int59 == (-117));
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-117) + "'", int68 == (-117));
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat86);
    }

    @Test
    public void test13906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13906");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        int int2 = numberFormat1.getMinimumFractionDigits();
        numberFormat1.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        numberFormat1.setMaximumIntegerDigits((int) 'u');
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale8.getISO3Language();
        java.lang.String str12 = locale8.getDisplayCountry();
        boolean boolean13 = numberFormat1.equals((java.lang.Object) locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat15 = properFractionFormat14.getWholeFormat();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(numberFormat15);
    }

    @Test
    public void test13907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13907");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 10);
        parsePosition7.setErrorIndex((int) (byte) 1);
        parsePosition7.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction12 = fractionFormat3.parse("French", parsePosition7);
        boolean boolean13 = field0.equals((java.lang.Object) "French");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        numberFormat18.setCurrency(currency22);
        numberFormat15.setCurrency(currency22);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        java.util.Currency currency28 = numberFormat25.getCurrency();
        java.lang.String str30 = numberFormat25.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat15, numberFormat25);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.util.Currency currency35 = numberFormat32.getCurrency();
        java.lang.String str37 = numberFormat32.format((double) 10);
        boolean boolean39 = numberFormat32.equals((java.lang.Object) "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat32);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.text.NumberFormat numberFormat44 = fractionFormat43.getNumeratorFormat();
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) (short) 10);
        parsePosition47.setErrorIndex((int) (byte) 1);
        parsePosition47.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction52 = fractionFormat43.parse("French", parsePosition47);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance();
        numberFormat54.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance();
        numberFormat58.setMaximumIntegerDigits((-1));
        java.util.Currency currency61 = numberFormat58.getCurrency();
        numberFormat57.setCurrency(currency61);
        numberFormat54.setCurrency(currency61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance();
        numberFormat64.setMaximumIntegerDigits((-1));
        java.util.Currency currency67 = numberFormat64.getCurrency();
        java.lang.String str69 = numberFormat64.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53, numberFormat54, numberFormat64);
        fractionFormat43.setDenominatorFormat(numberFormat64);
        int int72 = numberFormat64.getMaximumIntegerDigits();
        fractionFormat40.setDenominatorFormat(numberFormat64);
        boolean boolean74 = field0.equals((java.lang.Object) numberFormat64);
        java.text.FieldPosition fieldPosition76 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) -116);
        java.text.Format.Field field77 = fieldPosition76.getFieldAttribute();
        int int78 = fieldPosition76.getBeginIndex();
        java.text.Format.Field field79 = fieldPosition76.getFieldAttribute();
        fieldPosition76.setBeginIndex((int) (short) -35);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "francese" + "'", str2, "francese");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(fraction12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0%" + "'", str30, "0%");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0%" + "'", str37, "0%");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "francese" + "'", str42, "francese");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(currency67);
        org.junit.Assert.assertEquals(currency67.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0%" + "'", str69, "0%");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(field77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(field79);
    }

    @Test
    public void test13908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13908");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("anglais");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale locale9 = builder7.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
    }

    @Test
    public void test13909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13909");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        fieldPosition2.setBeginIndex((int) ' ');
        int int6 = fieldPosition2.getBeginIndex();
        int int7 = fieldPosition2.getField();
        fieldPosition2.setBeginIndex(4);
        java.lang.String str10 = fieldPosition2.toString();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str14 = locale11.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.lang.String str17 = locale15.getISO3Language();
        java.util.Set<java.lang.Character> charSet18 = locale15.getExtensionKeys();
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.lang.String str23 = locale21.getScript();
        java.lang.String str24 = locale21.getVariant();
        java.util.Locale.setDefault(category19, locale21);
        java.lang.String str26 = locale21.getDisplayName();
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = locale27.getDisplayScript();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleAttributes();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.lang.String str31 = locale27.getDisplayCountry(locale30);
        java.lang.String str32 = locale21.getDisplayVariant(locale27);
        java.lang.String str33 = locale15.getDisplayName(locale27);
        java.lang.String str34 = locale11.getDisplayLanguage(locale15);
        java.lang.String str35 = locale11.getDisplayName();
        boolean boolean36 = fieldPosition2.equals((java.lang.Object) str35);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=4,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=4,endIndex=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "francese" + "'", str12, "francese");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fr" + "'", str14, "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category19.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "United Kingdom" + "'", str31, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "French" + "'", str34, "French");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str35, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test13910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13910");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra (China,5.200%)", (double) 4095);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=4095.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13911");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        boolean boolean3 = locale0.hasExtensions();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getNumberInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uce90\ub098\ub2e4" + "'", str1, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uce90\ub098\ub2e4" + "'", str4, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test13912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13912");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("anglais");
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setVariant("French");
        java.util.Locale.Builder builder11 = builder7.setVariant("Chinese");
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.lang.String str17 = locale14.getVariant();
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale19 = java.util.Locale.getDefault(category12);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale.setDefault(category12, locale20);
        java.util.Locale.Builder builder23 = builder11.setLocale(locale20);
        java.util.Locale.Builder builder24 = builder4.setLocale(locale20);
        java.util.Locale.Builder builder25 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder25.setRegion("java.text.FieldPosition[field=13689,attribute=null,beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: java.text.FieldPosition[field=13689,attribute=null,beginIndex=0,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test13913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13913");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getScript();
        java.lang.String str8 = locale5.getVariant();
        java.util.Locale.setDefault(category3, locale5);
        java.lang.String str10 = locale5.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale11.getDisplayCountry(locale14);
        java.lang.String str16 = locale5.getDisplayVariant(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale5);
        java.lang.String str19 = locale0.getDisplayName(locale5);
        boolean boolean20 = locale0.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getNumeratorFormat();
        boolean boolean23 = numberFormat22.isGroupingUsed();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale25);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        numberFormat29.setMaximumIntegerDigits((-1));
        java.util.Currency currency32 = numberFormat29.getCurrency();
        numberFormat28.setCurrency(currency32);
        numberFormat27.setCurrency(currency32);
        boolean boolean35 = numberFormat27.isGroupingUsed();
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale37);
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction44 = fractionFormat39.parse("french", parsePosition43);
        java.lang.Object obj45 = numberFormat27.parseObject("\2430.00", parsePosition43);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance();
        numberFormat46.setMaximumIntegerDigits((-1));
        numberFormat46.setMaximumIntegerDigits((int) (short) 100);
        numberFormat46.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46);
        java.math.RoundingMode roundingMode54 = numberFormat46.getRoundingMode();
        numberFormat27.setRoundingMode(roundingMode54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat27);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "United Kingdom" + "'", str15, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4" + "'", str19, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str38, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test13914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13914");
        java.text.ParseException parseException2 = new java.text.ParseException("0%", 5);
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.ParsePosition[index=3,errorIndex=10]", 4095);
        java.text.ParseException parseException8 = new java.text.ParseException("fr", (int) (byte) -117);
        java.text.ParseException parseException11 = new java.text.ParseException("\uce90\ub098\ub2e4", (int) (byte) 1);
        java.text.ParseException parseException14 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray15 = parseException14.getSuppressed();
        java.text.ParseException parseException18 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray19 = parseException18.getSuppressed();
        parseException14.addSuppressed((java.lang.Throwable) parseException18);
        parseException11.addSuppressed((java.lang.Throwable) parseException18);
        int int22 = parseException18.getErrorOffset();
        java.lang.Throwable[] throwableArray23 = parseException18.getSuppressed();
        parseException8.addSuppressed((java.lang.Throwable) parseException18);
        parseException5.addSuppressed((java.lang.Throwable) parseException8);
        parseException2.addSuppressed((java.lang.Throwable) parseException5);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test13915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13915");
        java.text.ParseException parseException2 = new java.text.ParseException("", (int) (byte) -97);
    }

    @Test
    public void test13916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13916");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder1.setVariant("");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        boolean boolean9 = locale5.hasExtensions();
        java.util.Locale.Builder builder10 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder13 = builder10.setLanguageTag("coreano");
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder15 = builder10.setLocale(locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale0.getDisplayVariant(locale14);
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale14.getDisplayCountry(locale18);
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.util.Locale locale22 = java.util.Locale.UK;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = locale22.getDisplayCountry(locale25);
        java.lang.String str27 = locale22.getDisplayLanguage();
        java.lang.String str28 = locale20.getDisplayLanguage(locale22);
        java.lang.String str29 = locale14.getDisplayLanguage(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) '4', 35);
        java.lang.StringBuffer stringBuffer34 = null;
        java.text.NumberFormat.Field field35 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition37 = new java.text.FieldPosition((java.text.Format.Field) field35, (int) (short) 0);
        int int38 = fieldPosition37.getEndIndex();
        fieldPosition37.setBeginIndex((int) (short) 100);
        int int41 = fieldPosition37.getBeginIndex();
        int int42 = fieldPosition37.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer43 = fractionFormat30.format(fraction33, stringBuffer34, fieldPosition37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str21, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "United Kingdom" + "'", str26, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc601\uc5b4" + "'", str27, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese" + "'", str28, "Chinese");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "French" + "'", str29, "French");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(field35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test13917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13917");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(3, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int7 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.subtract(fraction6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale13.getScript();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale13, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList19, filteringMode21);
        boolean boolean23 = fraction8.equals((java.lang.Object) localeList22);
        double double24 = fraction8.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction2.multiply(fraction8);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-117) + "'", int7 == (-117));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode21.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 117.0d + "'", double24 == 117.0d);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
    }

    @Test
    public void test13918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13918");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        int int3 = numberFormat2.getMaximumIntegerDigits();
        boolean boolean4 = numberFormat2.isParseIntegerOnly();
        int int5 = numberFormat2.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
    }

    @Test
    public void test13919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13919");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("US");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "us" + "'", str2, "us");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "us" + "'", str3, "us");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "us" + "'", str5, "us");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test13920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13920");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale4.getVariant();
        java.util.Locale locale6 = locale4.stripExtensions();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale4);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        int int9 = numberFormat7.getMinimumIntegerDigits();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale10);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMaximumIntegerDigits((int) (short) 100);
        numberFormat12.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12);
        java.math.RoundingMode roundingMode20 = numberFormat12.getRoundingMode();
        numberFormat12.setGroupingUsed(true);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance();
        java.lang.String str25 = numberFormat23.format(100L);
        int int26 = numberFormat23.getMinimumFractionDigits();
        numberFormat23.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        numberFormat29.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode32 = numberFormat29.getRoundingMode();
        numberFormat23.setRoundingMode(roundingMode32);
        numberFormat12.setRoundingMode(roundingMode32);
        numberFormat11.setRoundingMode(roundingMode32);
        numberFormat7.setRoundingMode(roundingMode32);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode20.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100" + "'", str25, "100");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + roundingMode32 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode32.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test13921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13921");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.util.Locale locale8 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "10.000%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale8);
        fractionFormat5.setNumeratorFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10);
        numberFormat10.setMaximumFractionDigits(96);
        java.lang.StringBuffer stringBuffer16 = null;
        java.text.NumberFormat.Field field17 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str18 = field17.toString();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance();
        numberFormat20.setMaximumIntegerDigits((-1));
        java.util.Currency currency23 = numberFormat20.getCurrency();
        numberFormat19.setCurrency(currency23);
        java.lang.String str26 = numberFormat19.format((double) 100);
        numberFormat19.setParseIntegerOnly(false);
        numberFormat19.setMaximumIntegerDigits((int) 'x');
        boolean boolean31 = field17.equals((java.lang.Object) 'x');
        java.lang.String str32 = field17.toString();
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field17);
        java.text.Format.Field field34 = fieldPosition33.getFieldAttribute();
        int int35 = fieldPosition33.getEndIndex();
        int int36 = fieldPosition33.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer37 = numberFormat10.format((long) (short) 4369, stringBuffer16, fieldPosition33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals(locale8.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_10.000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(field17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str18, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "10,000%" + "'", str26, "10,000%");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str32, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test13922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13922");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str1 = field0.toString();
        java.lang.String str2 = field0.toString();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.util.Currency currency11 = numberFormat8.getCurrency();
        numberFormat7.setCurrency(currency11);
        numberFormat4.setCurrency(currency11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits((-1));
        java.util.Currency currency17 = numberFormat14.getCurrency();
        java.lang.String str19 = numberFormat14.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat4, numberFormat14);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance();
        java.lang.String str23 = numberFormat21.format(100L);
        properFractionFormat20.setWholeFormat(numberFormat21);
        java.text.NumberFormat numberFormat25 = properFractionFormat20.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        boolean boolean27 = field0.equals((java.lang.Object) numberFormat25);
        java.lang.String str28 = field0.toString();
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 10);
        org.apache.commons.math.fraction.Fraction fraction33 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) ' ');
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str38 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction37);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int43 = fraction42.intValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction39.subtract(fraction42);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction37.add(fraction39);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction34.subtract(fraction46);
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int55 = fraction54.intValue();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction51.subtract(fraction54);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction50.multiply(fraction51);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction47.add(fraction51);
        org.apache.commons.math.fraction.Fraction fraction61 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int69 = fraction68.intValue();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction65.subtract(fraction68);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction64.multiply(fraction65);
        org.apache.commons.math.fraction.Fraction fraction72 = fraction61.multiply(fraction65);
        int int73 = fraction58.compareTo((java.lang.Object) fraction72);
        org.apache.commons.math.fraction.Fraction fraction74 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction77 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int78 = fraction77.intValue();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction74.subtract(fraction77);
        boolean boolean81 = fraction77.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction82 = fraction72.multiply(fraction77);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction77.abs();
        double double84 = fraction77.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction33.subtract(fraction77);
        boolean boolean86 = field0.equals((java.lang.Object) fraction33);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str1, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str2, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0%" + "'", str19, "0%");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100" + "'", str23, "100");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str28, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-117 / 1" + "'", str38, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-117) + "'", int43 == (-117));
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-117) + "'", int55 == (-117));
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-117) + "'", int69 == (-117));
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-117) + "'", int78 == (-117));
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-117.0d) + "'", double84 == (-117.0d));
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test13923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13923");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.lang.String str10 = locale6.getDisplayCountry(locale9);
        java.util.Locale.setDefault(locale6);
        java.lang.String str12 = locale6.getLanguage();
        java.lang.String str13 = locale3.getDisplayName(locale6);
        java.util.Set<java.lang.String> strSet14 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale1.getDisplayScript(locale6);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getCurrencyInstance(locale6);
        int int17 = numberFormat16.getMinimumIntegerDigits();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u4e2d\u6587" + "'", str2, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "United Kingdom" + "'", str10, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en" + "'", str12, "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "French" + "'", str13, "French");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test13924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13924");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        boolean boolean7 = fraction3.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int14 = fraction13.intValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction10.subtract(fraction13);
        double double16 = fraction15.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction3.divide(fraction15);
        double double18 = fraction3.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction20 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((-1));
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str27 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int32 = fraction31.intValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction28.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction26.add(fraction28);
        int int35 = fraction34.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int43 = fraction42.intValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction39.subtract(fraction42);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction34.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction45.abs();
        boolean boolean48 = parsePosition23.equals((java.lang.Object) fraction47);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction21.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction53 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        int int54 = fraction53.getDenominator();
        float float55 = fraction53.floatValue();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction47.multiply(fraction53);
        int int57 = fraction47.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction3.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str64 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction63);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.divide(fraction63);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction47.subtract(fraction60);
        double double67 = fraction47.doubleValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-117) + "'", int14 == (-117));
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 117.0d + "'", double16 == 117.0d);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-117.0d) + "'", double18 == (-117.0d));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-117 / 1" + "'", str27, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-117) + "'", int32 == (-117));
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-117) + "'", int43 == (-117));
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-1.0f) + "'", float55 == (-1.0f));
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-117 / 1" + "'", str64, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test13925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13925");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(116, 10);
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((int) (short) 100, 13689);
        java.util.Locale locale8 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "10.000%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale8);
        numberFormat10.setMaximumIntegerDigits(0);
        numberFormat10.setParseIntegerOnly(false);
        boolean boolean15 = fraction5.equals((java.lang.Object) false);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction2.multiply(fraction17);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals(locale8.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_10.000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
    }

    @Test
    public void test13926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13926");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getVariant();
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale29 = java.util.Locale.getDefault(category22);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.util.Locale.setDefault(category22, locale30);
        java.util.Locale locale33 = java.util.Locale.getDefault(category22);
        java.util.Locale.Builder builder34 = builder20.setLocale(locale33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(fractionFormat35);
    }

    @Test
    public void test13927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13927");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        numberFormat24.setCurrency(currency40);
        fractionFormat5.setDenominatorFormat(numberFormat24);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance();
        java.lang.String str47 = numberFormat45.format(100L);
        int int48 = numberFormat45.getMinimumFractionDigits();
        numberFormat45.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        numberFormat51.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode54 = numberFormat51.getRoundingMode();
        numberFormat45.setRoundingMode(roundingMode54);
        numberFormat44.setRoundingMode(roundingMode54);
        numberFormat24.setRoundingMode(roundingMode54);
        java.lang.Object obj58 = numberFormat24.clone();
        numberFormat24.setMinimumFractionDigits((int) (short) -13572);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance();
        numberFormat61.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        boolean boolean67 = numberFormat61.equals((java.lang.Object) locale65);
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj71 = numberFormat61.parseObject("China", parsePosition70);
        java.util.Locale locale72 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getIntegerInstance(locale72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat61, numberFormat73);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat74.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "GBP");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str66, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat73);
    }

    @Test
    public void test13928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13928");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = properFractionFormat17.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat23.getWholeFormat();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
    }

    @Test
    public void test13929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13929");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder7.setLocale(locale8);
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setRegion("\ub3c5\uc77c\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test13930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13930");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setVariant("Canada");
        java.util.Locale locale6 = builder5.build();
        java.lang.String str7 = locale6.toLanguageTag();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und-Canada" + "'", str7, "und-Canada");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test13931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13931");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.divide(fraction3);
        java.lang.Class<?> wildcardClass6 = fraction3.getClass();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test13932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13932");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale locale10 = locale5.stripExtensions();
        boolean boolean11 = locale5.hasExtensions();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.util.Set<java.lang.String> strSet13 = locale5.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap15);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale27.getScript();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale27, locale30, locale31 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList33, filteringMode35);
        boolean boolean37 = fraction22.equals((java.lang.Object) localeList36);
        java.util.Locale locale38 = java.util.Locale.lookup(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList40, strMap41);
        java.util.Collection<java.util.Locale> localeCollection43 = null;
        java.util.Locale.FilteringMode filteringMode44 = null;
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter(languageRangeList42, localeCollection43, filteringMode44);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode35.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(locale38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(localeList45);
    }

    @Test
    public void test13933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13933");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale locale12 = new java.util.Locale("java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale13.getDisplayName(locale14);
        java.lang.String str17 = locale12.getDisplayLanguage(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Locale.Builder builder19 = builder9.setLocale(locale13);
        java.util.Locale locale20 = builder19.build();
        java.util.Locale.Builder builder21 = builder19.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals(locale12.toString(), "java.text.parseexception: java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=0,endindex=0]");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.parseexception: java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=0,endindex=0]" + "'", str17, "java.text.parseexception: java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=0,endindex=0]");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test13934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13934");
        java.text.ParseException parseException2 = new java.text.ParseException("francese", (int) 'a');
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray6 = parseException5.getSuppressed();
        java.text.ParseException parseException9 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray10 = parseException9.getSuppressed();
        parseException5.addSuppressed((java.lang.Throwable) parseException9);
        int int12 = parseException9.getErrorOffset();
        int int13 = parseException9.getErrorOffset();
        parseException2.addSuppressed((java.lang.Throwable) parseException9);
        int int15 = parseException2.getErrorOffset();
        int int16 = parseException2.getErrorOffset();
        java.text.ParseException parseException19 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=-117]", (-32));
        parseException2.addSuppressed((java.lang.Throwable) parseException19);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
    }

    @Test
    public void test13935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13935");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getVariant();
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale29 = java.util.Locale.getDefault(category22);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.util.Locale.setDefault(category22, locale30);
        java.util.Locale locale33 = java.util.Locale.getDefault(category22);
        java.util.Locale.Builder builder34 = builder20.setLocale(locale33);
        java.util.Locale.Builder builder35 = builder20.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder37 = builder35.setScript("\uffe55");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ?5 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test13936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13936");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder6 = builder2.setVariant("Chinese");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getNumeratorFormat();
        int int9 = numberFormat8.getMinimumFractionDigits();
        numberFormat8.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        numberFormat8.setMaximumIntegerDigits((int) 'u');
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale15.getDisplayCountry();
        boolean boolean20 = numberFormat8.equals((java.lang.Object) locale15);
        java.lang.String str21 = locale15.getDisplayCountry();
        java.util.Locale.Builder builder22 = builder6.setLocale(locale15);
        java.util.Locale locale23 = builder22.build();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        java.lang.String str25 = locale23.getDisplayCountry();
        java.lang.String str26 = locale23.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test13937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13937");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale1.getDisplayCountry();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Locale.setDefault(locale1);
        java.util.Set<java.lang.Character> charSet5 = locale1.getExtensionKeys();
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Canada" + "'", str2, "Canada");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "China" + "'", str3, "China");
        org.junit.Assert.assertNotNull(charSet5);
    }

    @Test
    public void test13938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13938");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        int int30 = parsePosition26.getIndex();
        org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat17.parse("French", parsePosition26);
        java.text.NumberFormat numberFormat32 = properFractionFormat17.getNumeratorFormat();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        numberFormat36.setMaximumIntegerDigits((-1));
        java.util.Currency currency39 = numberFormat36.getCurrency();
        numberFormat35.setCurrency(currency39);
        java.lang.String str42 = numberFormat35.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat35, numberFormat44);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) (short) 10);
        parsePosition48.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat45.parse("fran\347ais", parsePosition48);
        parsePosition48.setIndex(0);
        org.apache.commons.math.fraction.Fraction fraction54 = properFractionFormat17.parse("zh-TW", parsePosition48);
        java.text.NumberFormat numberFormat55 = properFractionFormat17.getNumeratorFormat();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.lang.String str60 = locale57.getISO3Language();
        java.lang.String str61 = locale56.getDisplayCountry(locale57);
        boolean boolean62 = locale56.hasExtensions();
        java.lang.String str63 = locale56.toLanguageTag();
        java.lang.String str64 = locale56.getDisplayLanguage();
        java.util.Locale.setDefault(locale56);
        java.lang.String str66 = locale56.toLanguageTag();
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getNumberInstance(locale56);
        properFractionFormat17.setWholeFormat(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNull(fraction31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "10,000%" + "'", str42, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(fraction51);
        org.junit.Assert.assertNull(fraction54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str59, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ko" + "'", str63, "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Korean" + "'", str64, "Korean");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ko" + "'", str66, "ko");
        org.junit.Assert.assertNotNull(numberFormat67);
    }

    @Test
    public void test13939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13939");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 116.97143f, 2147483647);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "15,331,679 / 131,072" + "'", str3, "15,331,679 / 131,072");
    }

    @Test
    public void test13940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13940");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        fieldPosition2.setBeginIndex((int) '4');
        boolean boolean10 = fieldPosition2.equals((java.lang.Object) (short) -1);
        java.text.Format.Field field11 = fieldPosition2.getFieldAttribute();
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition(field11, 117);
        java.lang.String str14 = field11.toString();
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition(field11, 120);
        java.lang.String str17 = field11.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str14, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str17, "java.text.NumberFormat$Field(per mille)");
    }

    @Test
    public void test13941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13941");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getScript();
        java.lang.String str9 = locale6.getVariant();
        java.util.Locale.setDefault(category4, locale6);
        java.lang.String str11 = locale6.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        java.lang.String str17 = locale6.getDisplayVariant(locale12);
        java.lang.String str18 = locale0.getDisplayName(locale12);
        java.lang.String str19 = locale12.getDisplayScript();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getNumberInstance(locale12);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "United Kingdom" + "'", str16, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test13942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13942");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 10);
        parsePosition7.setErrorIndex((int) (byte) 1);
        parsePosition7.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction12 = fractionFormat3.parse("French", parsePosition7);
        boolean boolean13 = field0.equals((java.lang.Object) "French");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        numberFormat18.setCurrency(currency22);
        numberFormat15.setCurrency(currency22);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        java.util.Currency currency28 = numberFormat25.getCurrency();
        java.lang.String str30 = numberFormat25.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat15, numberFormat25);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.util.Currency currency35 = numberFormat32.getCurrency();
        java.lang.String str37 = numberFormat32.format((double) 10);
        boolean boolean39 = numberFormat32.equals((java.lang.Object) "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat32);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.text.NumberFormat numberFormat44 = fractionFormat43.getNumeratorFormat();
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) (short) 10);
        parsePosition47.setErrorIndex((int) (byte) 1);
        parsePosition47.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction52 = fractionFormat43.parse("French", parsePosition47);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance();
        numberFormat54.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance();
        numberFormat58.setMaximumIntegerDigits((-1));
        java.util.Currency currency61 = numberFormat58.getCurrency();
        numberFormat57.setCurrency(currency61);
        numberFormat54.setCurrency(currency61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance();
        numberFormat64.setMaximumIntegerDigits((-1));
        java.util.Currency currency67 = numberFormat64.getCurrency();
        java.lang.String str69 = numberFormat64.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53, numberFormat54, numberFormat64);
        fractionFormat43.setDenominatorFormat(numberFormat64);
        int int72 = numberFormat64.getMaximumIntegerDigits();
        fractionFormat40.setDenominatorFormat(numberFormat64);
        boolean boolean74 = field0.equals((java.lang.Object) numberFormat64);
        java.lang.String str75 = field0.toString();
        java.text.FieldPosition fieldPosition77 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) ' ');
        int int78 = fieldPosition77.getBeginIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str2, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(fraction12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0%" + "'", str30, "0%");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0%" + "'", str37, "0%");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str42, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(currency67);
        org.junit.Assert.assertEquals(currency67.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0%" + "'", str69, "0%");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.text.NumberFormat$Field(percent)" + "'", str75, "java.text.NumberFormat$Field(percent)");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test13943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13943");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str1 = field0.toString();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        numberFormat3.setMaximumIntegerDigits((-1));
        java.util.Currency currency6 = numberFormat3.getCurrency();
        numberFormat2.setCurrency(currency6);
        java.lang.String str9 = numberFormat2.format((double) 100);
        numberFormat2.setParseIntegerOnly(false);
        numberFormat2.setMaximumIntegerDigits((int) 'x');
        boolean boolean14 = field0.equals((java.lang.Object) 'x');
        java.lang.String str15 = field0.toString();
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition18 = new java.text.FieldPosition((java.text.Format.Field) field0, 10000);
        java.lang.String str19 = field0.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str1, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10,000%" + "'", str9, "10,000%");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str15, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str19, "java.text.NumberFormat$Field(per mille)");
    }

    @Test
    public void test13944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13944");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        java.lang.String str2 = numberFormat0.format(100L);
        int int3 = numberFormat0.getMinimumFractionDigits();
        numberFormat0.setMaximumIntegerDigits(1);
        boolean boolean7 = numberFormat0.equals((java.lang.Object) (-117));
        java.lang.String str9 = numberFormat0.format((double) (-1));
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat11 = properFractionFormat10.getDenominatorFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat10.getWholeFormat();
        numberFormat12.setParseIntegerOnly(true);
        numberFormat12.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100" + "'", str2, "100");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1" + "'", str9, "-1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
    }

    @Test
    public void test13945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13945");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        boolean boolean6 = locale0.hasExtensions();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale7.getDisplayCountry();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale7);
        java.lang.String str10 = locale7.getLanguage();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str12 = locale7.getDisplayCountry();
        java.lang.String str13 = locale0.getDisplayScript(locale7);
        java.lang.String str14 = locale7.toLanguageTag();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        java.util.Locale.setDefault(category15, locale17);
        java.util.Locale locale20 = java.util.Locale.getDefault(category15);
        java.lang.String str21 = locale7.getDisplayCountry(locale20);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uce90\ub098\ub2e4" + "'", str8, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en" + "'", str10, "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uce90\ub098\ub2e4" + "'", str12, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en-CA" + "'", str14, "en-CA");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u52a0\u62ff\u5927" + "'", str21, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test13946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13946");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(116);
        fieldPosition1.setBeginIndex((int) (byte) 97);
        int int4 = fieldPosition1.getEndIndex();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test13947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13947");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getScript();
        java.lang.String str8 = locale5.getVariant();
        java.util.Locale.setDefault(category3, locale5);
        java.lang.String str10 = locale5.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale11.getDisplayCountry(locale14);
        java.lang.String str16 = locale5.getDisplayVariant(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale5);
        java.lang.String str19 = locale0.getDisplayName(locale5);
        boolean boolean20 = locale0.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getNumeratorFormat();
        boolean boolean23 = numberFormat22.isGroupingUsed();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.lang.String str27 = locale24.getISO3Language();
        java.lang.String str28 = locale24.getCountry();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale24);
        java.util.Currency currency30 = numberFormat29.getCurrency();
        numberFormat22.setCurrency(currency30);
        numberFormat22.setMaximumFractionDigits((int) (byte) -44);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "United Kingdom" + "'", str15, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4" + "'", str19, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "kor" + "'", str27, "kor");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
    }

    @Test
    public void test13948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13948");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int7 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.subtract(fraction6);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.multiply(fraction3);
        org.apache.commons.math.fraction.Fraction fraction11 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction12 = fraction9.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int17 = fraction16.intValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.subtract(fraction16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale23.getScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale23, locale26, locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale.FilteringMode filteringMode31 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList29, filteringMode31);
        boolean boolean33 = fraction18.equals((java.lang.Object) localeList32);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction18.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction11.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str43 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int48 = fraction47.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction42.add(fraction44);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction39.subtract(fraction51);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction38.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction56 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction38.multiply(fraction56);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int65 = fraction64.intValue();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction61.subtract(fraction64);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction60.multiply(fraction61);
        org.apache.commons.math.fraction.Fraction fraction69 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction70 = fraction67.add(fraction69);
        int int71 = fraction69.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction56.divide(fraction69);
        org.apache.commons.math.fraction.Fraction fraction73 = fraction34.divide(fraction69);
        int int74 = fraction73.intValue();
        int int75 = fraction73.getDenominator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-117) + "'", int7 == (-117));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-117) + "'", int17 == (-117));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + filteringMode31 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode31.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-117 / 1" + "'", str43, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-117) + "'", int48 == (-117));
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-117) + "'", int65 == (-117));
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 117 + "'", int75 == 117);
    }

    @Test
    public void test13949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13949");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.lang.String str4 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ko" + "'", str4, "ko");
    }

    @Test
    public void test13950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13950");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str3 = locale0.toLanguageTag();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str6 = locale4.getISO3Language();
        java.util.Set<java.lang.Character> charSet7 = locale4.getExtensionKeys();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale10.getScript();
        java.lang.String str13 = locale10.getVariant();
        java.util.Locale.setDefault(category8, locale10);
        java.lang.String str15 = locale10.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale16.getDisplayCountry(locale19);
        java.lang.String str21 = locale10.getDisplayVariant(locale16);
        java.lang.String str22 = locale4.getDisplayName(locale16);
        java.lang.String str23 = locale0.getDisplayLanguage(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = locale0.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str1, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "United Kingdom" + "'", str20, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "French" + "'", str23, "French");
    }

    @Test
    public void test13951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13951");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, (int) (short) 13689);
        java.lang.String str3 = fieldPosition2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=13689,attribute=null,beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=13689,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test13952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13952");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getScript();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Currency currency15 = numberFormat12.getCurrency();
        numberFormat11.setCurrency(currency15);
        numberFormat10.setCurrency(currency15);
        java.math.RoundingMode roundingMode18 = numberFormat10.getRoundingMode();
        numberFormat8.setRoundingMode(roundingMode18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        numberFormat8.setParseIntegerOnly(false);
        java.lang.String str24 = numberFormat8.format((double) (-117L));
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getIntegerInstance(locale26);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getIntegerInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        properFractionFormat25.setDenominatorFormat(numberFormat28);
        fractionFormat2.setDenominatorFormat(numberFormat28);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str1, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "CNY");
        org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode18.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-117" + "'", str24, "-117");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
    }

    @Test
    public void test13953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13953");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.Format.Field field4 = fieldPosition2.getFieldAttribute();
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition(field4);
        java.text.Format.Field field6 = fieldPosition5.getFieldAttribute();
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition(field6, 7);
        int int9 = fieldPosition8.getField();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(field4);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
    }

    @Test
    public void test13954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13954");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Currency currency4 = numberFormat1.getCurrency();
        numberFormat0.setCurrency(currency4);
        java.lang.String str7 = numberFormat0.format((double) 100);
        numberFormat0.setParseIntegerOnly(false);
        numberFormat0.setMaximumIntegerDigits((int) 'x');
        java.lang.Object obj12 = numberFormat0.clone();
        java.util.Currency currency13 = numberFormat0.getCurrency();
        numberFormat0.setParseIntegerOnly(true);
        java.util.Currency currency16 = numberFormat0.getCurrency();
        int int17 = numberFormat0.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(currency4);
        org.junit.Assert.assertEquals(currency4.toString(), "CNY");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10,000%" + "'", str7, "10,000%");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "CNY");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "CNY");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test13955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13955");
        java.util.Locale locale1 = new java.util.Locale("java.text.ParsePosition[index=35,errorIndex=-1]");
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.parseposition[index=35,errorindex=-1]");
    }

    @Test
    public void test13956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13956");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        numberFormat0.setMaximumIntegerDigits((int) (short) 100);
        numberFormat0.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj14 = numberFormat10.parseObject("hi!", parsePosition13);
        java.lang.Object obj15 = fractionFormat7.parseObject("\u97d3\u6587\u6cd5\u6587)", parsePosition13);
        int int16 = parsePosition13.getIndex();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test13957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13957");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale7.getDisplayLanguage(locale12);
        java.lang.String str14 = locale1.getDisplayName(locale12);
        java.lang.String str15 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.util.Locale locale17 = locale1.stripExtensions();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getNumberInstance(locale17);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str21 = locale20.getDisplayScript();
        java.lang.String str22 = locale20.getScript();
        java.lang.String str23 = locale17.getDisplayVariant(locale20);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str26 = locale25.getDisplayScript();
        java.util.Locale locale27 = locale25.stripExtensions();
        java.lang.String str28 = locale17.getDisplayScript(locale27);
        java.util.Locale locale29 = locale27.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u671d\u9c9c\u6587" + "'", str13, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u671d\u9c9c\u6587" + "'", str14, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
    }

    @Test
    public void test13958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13958");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\ub3c5\uc77c\uc5b4\ub3c5\uc77c) (java.text.AttributedCharacterIterator$Attribute(reading))");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test13959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13959");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.lang.String str4 = fieldPosition2.toString();
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        boolean boolean12 = fraction8.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.reciprocal();
        double double14 = fraction13.doubleValue();
        boolean boolean15 = fieldPosition2.equals((java.lang.Object) fraction13);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int20 = fraction19.intValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.subtract(fraction19);
        boolean boolean23 = fraction19.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction13.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.abs();
        java.lang.String str27 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction26);
        java.util.Locale locale29 = new java.util.Locale("Korean (South Korea)");
        boolean boolean30 = fraction26.equals((java.lang.Object) locale29);
        java.lang.String str31 = locale29.getDisplayLanguage();
        java.text.NumberFormat.Field field32 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition((java.text.Format.Field) field32, (int) (short) 0);
        java.lang.String str35 = fieldPosition34.toString();
        java.lang.String str36 = fieldPosition34.toString();
        fieldPosition34.setBeginIndex((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale39.getDisplayLanguage();
        boolean boolean41 = fieldPosition34.equals((java.lang.Object) str40);
        int int42 = fieldPosition34.getBeginIndex();
        int int43 = fieldPosition34.getBeginIndex();
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(locale44);
        java.util.Set<java.lang.Character> charSet46 = locale44.getExtensionKeys();
        java.util.Locale locale47 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.lang.String str49 = locale44.getDisplayScript(locale47);
        boolean boolean50 = fieldPosition34.equals((java.lang.Object) locale47);
        java.lang.String str51 = locale47.getLanguage();
        java.lang.String str52 = locale29.getDisplayCountry(locale47);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getNumberInstance(locale47);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale54.getDisplayVariant();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale56.getDisplayLanguage(locale57);
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.lang.String str60 = locale57.getDisplayName(locale59);
        java.lang.String str61 = locale59.getDisplayLanguage();
        java.lang.String str62 = locale54.getDisplayName(locale59);
        java.lang.String str63 = locale54.toLanguageTag();
        java.util.Set<java.lang.String> strSet64 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str65 = locale54.toLanguageTag();
        java.lang.String str66 = locale47.getDisplayVariant(locale54);
        java.lang.String str67 = locale47.getDisplayName();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.008547008547008548d) + "'", double14 == (-0.008547008547008548d));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-117) + "'", int20 == (-117));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "117 / 1" + "'", str27, "117 / 1");
        org.junit.Assert.assertEquals(locale29.toString(), "korean (south korea)");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "korean (south korea)" + "'", str31, "korean (south korea)");
        org.junit.Assert.assertNotNull(field32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str35, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str36, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str40, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str58, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "coreano" + "'", str60, "coreano");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str61, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "coreano" + "'", str62, "coreano");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ko" + "'", str63, "ko");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ko" + "'", str65, "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test13960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13960");
        java.util.Locale locale1 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.util.Locale.setDefault(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale1);
        int int4 = numberFormat3.getMaximumIntegerDigits();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance();
        java.lang.String str8 = numberFormat6.format(100L);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj14 = numberFormat10.parseObject("hi!", parsePosition13);
        java.lang.Number number15 = numberFormat6.parse("10,000%", parsePosition13);
        java.lang.String str17 = numberFormat6.format((java.lang.Object) 0.0f);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance();
        numberFormat20.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance();
        numberFormat24.setMaximumIntegerDigits((-1));
        java.util.Currency currency27 = numberFormat24.getCurrency();
        numberFormat23.setCurrency(currency27);
        numberFormat20.setCurrency(currency27);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        numberFormat30.setMaximumIntegerDigits((-1));
        java.util.Currency currency33 = numberFormat30.getCurrency();
        java.lang.String str35 = numberFormat30.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19, numberFormat20, numberFormat30);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance();
        java.lang.String str39 = numberFormat37.format(100L);
        properFractionFormat36.setWholeFormat(numberFormat37);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getInstance();
        java.lang.String str43 = numberFormat41.format(100L);
        int int44 = numberFormat41.getMinimumFractionDigits();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.String str50 = numberFormat48.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat41, numberFormat48);
        java.text.NumberFormat numberFormat52 = properFractionFormat51.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getNumeratorFormat();
        int int55 = numberFormat54.getMinimumFractionDigits();
        properFractionFormat51.setWholeFormat(numberFormat54);
        org.apache.commons.math.fraction.Fraction fraction58 = properFractionFormat51.parse("-117 / 1");
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance();
        numberFormat60.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale63.getDisplayLanguage(locale64);
        boolean boolean66 = numberFormat60.equals((java.lang.Object) locale64);
        java.text.ParsePosition parsePosition69 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj70 = numberFormat60.parseObject("China", parsePosition69);
        int int71 = parsePosition69.getErrorIndex();
        java.lang.String str72 = parsePosition69.toString();
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder73.setVariant("");
        java.util.Locale.Builder builder76 = builder75.clearExtensions();
        java.util.Locale.Builder builder77 = builder75.clearExtensions();
        java.util.Locale.Builder builder78 = builder75.clearExtensions();
        boolean boolean79 = parsePosition69.equals((java.lang.Object) builder78);
        parsePosition69.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction82 = properFractionFormat51.parse("", parsePosition69);
        java.lang.Object obj83 = numberFormat6.parseObject("java.text.parseposition[index=-1,errorindex=-1]", parsePosition69);
        java.lang.Object obj84 = numberFormat3.parseObject("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition69);
        java.lang.String str85 = parsePosition69.toString();
        parsePosition69.setErrorIndex(11);
        int int88 = parsePosition69.getErrorIndex();
        org.junit.Assert.assertEquals(locale1.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100" + "'", str8, "100");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(number15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0%" + "'", str35, "0%");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "100" + "'", str39, "100");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100" + "'", str43, "100");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "32" + "'", str50, "32");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str65, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=52]" + "'", str72, "java.text.ParsePosition[index=52,errorIndex=52]");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(fraction82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=52]" + "'", str85, "java.text.ParsePosition[index=52,errorIndex=52]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 11 + "'", int88 == 11);
    }

    @Test
    public void test13961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13961");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("US");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "us" + "'", str2, "us");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "us" + "'", str3, "us");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "us" + "'", str4, "us");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test13962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13962");
        java.util.Locale locale3 = new java.util.Locale("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", "", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.lang.String str6 = locale4.getDisplayScript();
        java.lang.String str7 = locale4.toLanguageTag();
        java.lang.String str8 = locale3.getDisplayName(locale4);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.lang.String str13 = locale9.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        boolean boolean15 = locale9.hasExtensions();
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale9.getDisplayVariant(locale16);
        java.util.Locale locale19 = new java.util.Locale("100");
        java.lang.String str20 = locale19.getDisplayCountry();
        java.lang.String str21 = locale9.getDisplayLanguage(locale19);
        java.lang.String str22 = locale4.getDisplayVariant(locale19);
        java.lang.String str23 = locale4.toLanguageTag();
        java.lang.String str24 = locale4.getDisplayVariant();
        java.lang.String str25 = locale4.getISO3Language();
        org.junit.Assert.assertEquals(locale3.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c) (java.text.AttributedCharacterIterator$Attribute(reading))" + "'", str8, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c) (java.text.AttributedCharacterIterator$Attribute(reading))");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale19.toString(), "100");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Korean" + "'", str21, "Korean");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh" + "'", str23, "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zho" + "'", str25, "zho");
    }

    @Test
    public void test13963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13963");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getBeginIndex();
        int int8 = fieldPosition2.getField();
        java.lang.String str9 = fieldPosition2.toString();
        java.lang.String str10 = fieldPosition2.toString();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setVariant("");
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder13.build();
        java.util.Locale.Builder builder16 = builder13.clearExtensions();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        boolean boolean18 = fieldPosition2.equals((java.lang.Object) builder17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder17.removeUnicodeLocaleAttribute("x-lvariant-100");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: x-lvariant-100 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]" + "'", str9, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test13964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13964");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.lang.String str7 = locale2.getDisplayName();
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale8.getDisplayCountry(locale11);
        java.lang.String str13 = locale2.getDisplayVariant(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        numberFormat15.setMaximumIntegerDigits((int) (short) 100);
        numberFormat15.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        numberFormat23.setMaximumIntegerDigits((-1));
        numberFormat23.setMaximumIntegerDigits((int) (short) 100);
        numberFormat23.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23);
        fractionFormat22.setDenominatorFormat(numberFormat23);
        fractionFormat14.setNumeratorFormat(numberFormat23);
        java.text.NumberFormat numberFormat33 = fractionFormat14.getDenominatorFormat();
        java.text.NumberFormat numberFormat34 = fractionFormat14.getNumeratorFormat();
        java.lang.String str36 = numberFormat34.format((long) 32);
        int int37 = numberFormat34.getMaximumFractionDigits();
        numberFormat34.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode40 = numberFormat34.getRoundingMode();
        numberFormat34.setGroupingUsed(true);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "United Kingdom" + "'", str12, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "3,200%" + "'", str36, "3,200%");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode40 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode40.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test13965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13965");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        fieldPosition2.setEndIndex((int) (byte) 1);
        java.text.Format.Field field9 = fieldPosition2.getFieldAttribute();
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition(field9, 32);
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition(field9);
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition(field9, (int) (byte) 1);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field9);
    }

    @Test
    public void test13966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13966");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(116.97142857142858d, (int) (short) -1170);
    }

    @Test
    public void test13967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13967");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(4, 2);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        numberFormat3.setMaximumIntegerDigits((-1));
        java.util.Currency currency6 = numberFormat3.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction10 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((double) ' ', (double) (short) 10, (int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction17 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction15.divide(fraction17);
        boolean boolean19 = fraction11.equals((java.lang.Object) fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction15.abs();
        java.lang.String str21 = fractionFormat7.format((java.lang.Object) fraction15);
        java.text.NumberFormat numberFormat22 = fractionFormat7.getDenominatorFormat();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale24.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.text.NumberFormat numberFormat27 = fractionFormat26.getNumeratorFormat();
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition((int) (short) 10);
        parsePosition30.setErrorIndex((int) (byte) 1);
        parsePosition30.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction35 = fractionFormat26.parse("French", parsePosition30);
        int int36 = parsePosition30.getErrorIndex();
        java.lang.Object obj37 = fractionFormat7.parseObject("10.000%", parsePosition30);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getNumberInstance(locale40);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance();
        numberFormat44.setMaximumIntegerDigits((-1));
        java.util.Currency currency47 = numberFormat44.getCurrency();
        numberFormat43.setCurrency(currency47);
        numberFormat42.setCurrency(currency47);
        boolean boolean50 = numberFormat42.isGroupingUsed();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale52);
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction59 = fractionFormat54.parse("french", parsePosition58);
        java.lang.Object obj60 = numberFormat42.parseObject("\2430.00", parsePosition58);
        int int61 = parsePosition58.getIndex();
        java.lang.String str62 = parsePosition58.toString();
        java.lang.Object obj63 = fractionFormat7.parseObject("JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(INPUT_METHOD_SEGMENT)", parsePosition58);
        parsePosition58.setIndex((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int66 = fraction2.compareTo((java.lang.Object) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Character cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0% / 0%" + "'", str21, "0% / 0%");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str25, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNull(fraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str53, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNull(fraction59);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=52]" + "'", str62, "java.text.ParsePosition[index=52,errorIndex=52]");
        org.junit.Assert.assertNull(obj63);
    }

    @Test
    public void test13968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13968");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Chinese");
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale locale13 = builder12.build();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getScript();
        java.lang.String str18 = locale15.getCountry();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale15);
        java.util.Locale.Builder builder20 = builder12.setLocale(locale15);
        java.util.Locale.setDefault(category0, locale15);
        java.util.Locale locale25 = new java.util.Locale("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", "", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str26 = locale25.getVariant();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale25);
        java.util.Locale.setDefault(category0, locale25);
        java.util.Locale locale29 = java.util.Locale.getDefault(category0);
        java.util.Locale locale30 = locale29.stripExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "chinese");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "chinese" + "'", str7, "chinese");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals(locale25.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str26, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
    }

    @Test
    public void test13969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13969");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale14 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category0, locale14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale14);
        numberFormat16.setMaximumIntegerDigits(0);
        numberFormat16.setMaximumFractionDigits((int) (byte) 117);
        int int21 = numberFormat16.getMinimumFractionDigits();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test13970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13970");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        boolean boolean2 = field0.equals((java.lang.Object) "\u671d\u9c9c\u6587");
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field0, 13572);
        fieldPosition4.setEndIndex((int) (byte) -11);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test13971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13971");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean18 = numberFormat17.isGroupingUsed();
        numberFormat17.setParseIntegerOnly(false);
        java.lang.Number number22 = numberFormat17.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat17);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        java.lang.Object obj25 = numberFormat24.clone();
        numberFormat24.setGroupingUsed(true);
        boolean boolean28 = numberFormat24.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + 0L + "'", number22, 0L);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test13972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13972");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayName(locale5);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale5);
        java.util.Locale locale11 = new java.util.Locale("francese");
        java.lang.String str12 = locale5.getDisplayScript(locale11);
        java.lang.String str13 = locale5.getDisplayVariant();
        java.lang.String str14 = locale5.getScript();
        java.lang.String str15 = locale5.getLanguage();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getNumeratorFormat();
        java.text.NumberFormat numberFormat19 = fractionFormat17.getNumeratorFormat();
        java.text.ParseException parseException22 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray23 = parseException22.getSuppressed();
        boolean boolean24 = numberFormat19.equals((java.lang.Object) throwableArray23);
        numberFormat19.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.NumberFormat numberFormat28 = properFractionFormat27.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = numberFormat28.parseObject("italien (Italie)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cor\351en" + "'", str8, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals(locale11.toString(), "francese");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr" + "'", str15, "fr");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(numberFormat28);
    }

    @Test
    public void test13973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13973");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) (short) 52);
        java.lang.String str2 = fieldPosition1.toString();
        int int3 = fieldPosition1.getEndIndex();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=52,attribute=null,beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=52,attribute=null,beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test13974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13974");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.lang.Object obj33 = numberFormat18.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(obj33);
    }

    @Test
    public void test13975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13975");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.lang.String str8 = locale7.getDisplayScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale7);
        numberFormat10.setMinimumIntegerDigits((int) (short) 117);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test13976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13976");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setWholeFormat(numberFormat48);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale51.getDisplayCountry(locale52);
        java.lang.String str57 = locale52.toLanguageTag();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance(locale52);
        boolean boolean59 = numberFormat58.isParseIntegerOnly();
        properFractionFormat17.setDenominatorFormat(numberFormat58);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance();
        numberFormat61.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance();
        numberFormat65.setMaximumIntegerDigits((-1));
        java.util.Currency currency68 = numberFormat65.getCurrency();
        numberFormat64.setCurrency(currency68);
        numberFormat61.setCurrency(currency68);
        boolean boolean71 = numberFormat61.isParseIntegerOnly();
        properFractionFormat17.setWholeFormat(numberFormat61);
        java.text.NumberFormat numberFormat73 = properFractionFormat17.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73);
        java.text.NumberFormat numberFormat75 = fractionFormat74.getDenominatorFormat();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str33, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko" + "'", str57, "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat75);
    }

    @Test
    public void test13977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13977");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        numberFormat0.setMaximumFractionDigits(97);
        java.lang.String str15 = numberFormat0.format((long) 33);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\244 33.00" + "'", str15, "\244 33.00");
    }

    @Test
    public void test13978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13978");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 10);
        parsePosition37.setErrorIndex((int) (byte) 1);
        parsePosition37.setIndex((int) 'u');
        org.apache.commons.math.fraction.Fraction fraction42 = properFractionFormat32.parse("java.text.ParseException: ko", parsePosition37);
        java.util.Locale locale45 = new java.util.Locale("5.200%", "10,000%");
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getIntegerInstance(locale45);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getInstance(locale45);
        boolean boolean48 = parsePosition37.equals((java.lang.Object) numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(fraction42);
        org.junit.Assert.assertEquals(locale45.toString(), "5.200%_10,000%");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test13979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13979");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.util.Currency currency42 = numberFormat39.getCurrency();
        numberFormat38.setCurrency(currency42);
        numberFormat35.setCurrency(currency42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits((-1));
        java.util.Currency currency48 = numberFormat45.getCurrency();
        java.lang.String str50 = numberFormat45.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat35, numberFormat45);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.String str55 = numberFormat53.format(100L);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = numberFormat57.parseObject("hi!", parsePosition60);
        java.lang.Number number62 = numberFormat53.parse("10,000%", parsePosition60);
        int int63 = parsePosition60.getErrorIndex();
        int int64 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat51.parse("French", parsePosition60);
        int int66 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat32.parse("fran\347ais", parsePosition60);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance();
        numberFormat68.setMaximumIntegerDigits((-1));
        java.util.Currency currency71 = numberFormat68.getCurrency();
        properFractionFormat32.setWholeFormat(numberFormat68);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance();
        numberFormat73.setMaximumIntegerDigits((-1));
        java.util.Currency currency76 = numberFormat73.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73);
        numberFormat73.setMaximumFractionDigits((int) (short) -117);
        properFractionFormat32.setWholeFormat(numberFormat73);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getCurrencyInstance();
        numberFormat81.setMinimumIntegerDigits((-1));
        properFractionFormat32.setWholeFormat(numberFormat81);
        java.text.NumberFormat numberFormat85 = properFractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat86 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat85);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0%" + "'", str50, "0%");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(currency76);
        org.junit.Assert.assertEquals(currency76.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(numberFormat85);
    }

    @Test
    public void test13980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13980");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParseException: java.text.ParsePosition[index=10,errorIndex=10]", "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=100,endIndex=0]");
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseexception: java.text.parseposition[index=10,errorindex=10]_JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=100,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test13981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13981");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale locale7 = builder0.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
    }

    @Test
    public void test13982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13982");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.UK;
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        java.lang.String str21 = locale16.getDisplayCountry(locale17);
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.util.Locale locale24 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
    }

    @Test
    public void test13983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13983");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.addUnicodeLocaleAttribute("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=117,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=117,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test13984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13984");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 120, (int) (short) -2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 120 to fraction (-119/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13985");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getDisplayScript();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale3.getDisplayVariant();
        java.lang.String str5 = locale3.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayCountry();
        java.lang.String str7 = locale0.getDisplayName(locale3);
        java.lang.String str8 = locale0.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.lang.String str13 = locale9.getScript();
        java.lang.String str14 = locale9.getDisplayScript();
        java.lang.String str15 = locale9.getDisplayVariant();
        java.lang.String str16 = locale0.getDisplayLanguage(locale9);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance(locale0);
        org.apache.commons.math.fraction.Fraction fraction21 = new org.apache.commons.math.fraction.Fraction((double) (byte) -1, (double) ' ', 13455);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str25 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction24);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int30 = fraction29.intValue();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction26.subtract(fraction29);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction24.add(fraction26);
        int int33 = fraction32.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction21.subtract(fraction34);
        java.lang.StringBuffer stringBuffer36 = null;
        java.text.NumberFormat.Field field37 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition((java.text.Format.Field) field37, (int) (short) 0);
        java.lang.String str40 = fieldPosition39.toString();
        java.lang.String str41 = fieldPosition39.toString();
        fieldPosition39.setBeginIndex((int) (byte) 10);
        fieldPosition39.setBeginIndex((int) '4');
        boolean boolean47 = fieldPosition39.equals((java.lang.Object) (short) -1);
        java.text.Format.Field field48 = fieldPosition39.getFieldAttribute();
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition(field48, 117);
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition(field48, (int) (short) 1);
        int int53 = fieldPosition52.getBeginIndex();
        int int54 = fieldPosition52.getField();
        fieldPosition52.setEndIndex((int) (short) 35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer57 = numberFormat17.format((java.lang.Object) fraction35, stringBuffer36, fieldPosition52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str7, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str8, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str16, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-117 / 1" + "'", str25, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-117) + "'", int30 == (-117));
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str40, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str41, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(field48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test13986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13986");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale12 = new java.util.Locale("United Kingdom", "1");
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Set<java.lang.Character> charSet14 = locale12.getExtensionKeys();
        java.lang.String str15 = locale12.getDisplayCountry();
        java.lang.String str16 = locale12.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Set<java.lang.String> strSet18 = locale12.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet19 = locale12.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals(locale12.toString(), "united kingdom_1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Korean" + "'", str13, "Korean");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(charSet19);
    }

    @Test
    public void test13987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13987");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale.Builder builder6 = builder2.addUnicodeLocaleAttribute("Canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder2.setRegion("116_JAVA.TEXT.PARSEEXCEPTION: $52.00_12");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 116_JAVA.TEXT.PARSEEXCEPTION: $52.00_12 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test13988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13988");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder16 = builder11.setExtension('a', "Canada");
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder18 = builder16.clearExtensions();
        java.util.Locale.Builder builder19 = builder16.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.addUnicodeLocaleAttribute("en_GB");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: en_GB [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test13989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13989");
        java.util.Locale locale3 = new java.util.Locale("China", "eng", "-117 / 1");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale3);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "china_ENG_-117 / 1");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test13990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13990");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(7561, (int) (short) 4369);
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test13991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13991");
        java.util.Locale locale3 = new java.util.Locale("x-lvariant-it-IT", "-\244 .00", "\ud504\ub791\uc2a4");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "x-lvariant-it-it_-\244\ud504\ub791\uc2a4");
    }

    @Test
    public void test13992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13992");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.addUnicodeLocaleAttribute("\u53f0\u6e7e\u5730\u533a");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ???? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test13993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13993");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 0.0f);
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int6 = fraction5.intValue();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.subtract(fraction5);
        boolean boolean9 = fraction5.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.reciprocal();
        float float11 = fraction5.floatValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction1.multiply(fraction5);
        long long13 = fraction12.longValue();
        float float14 = fraction12.floatValue();
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str19 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int24 = fraction23.intValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction18.add(fraction20);
        int int27 = fraction26.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction30 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction26.multiply(fraction30);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getNumberInstance();
        boolean boolean33 = numberFormat32.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32);
        boolean boolean35 = numberFormat32.isParseIntegerOnly();
        boolean boolean36 = fraction30.equals((java.lang.Object) boolean35);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction15.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction12.subtract(fraction30);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction12.negate();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-117) + "'", int6 == (-117));
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-117.0f) + "'", float11 == (-117.0f));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-117 / 1" + "'", str19, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-117) + "'", int24 == (-117));
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
    }

    @Test
    public void test13994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13994");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayName(locale5);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale5);
        java.util.Currency currency10 = numberFormat9.getCurrency();
        java.math.RoundingMode roundingMode11 = numberFormat9.getRoundingMode();
        boolean boolean12 = numberFormat9.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cor\351en" + "'", str8, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode11.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13995");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str4 = numberFormat2.format((double) 52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat6 = null;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Currency currency15 = numberFormat12.getCurrency();
        numberFormat11.setCurrency(currency15);
        numberFormat8.setCurrency(currency15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        java.lang.String str23 = numberFormat18.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat8, numberFormat18);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance();
        java.lang.String str27 = numberFormat25.format(100L);
        properFractionFormat24.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance();
        java.lang.String str31 = numberFormat29.format(100L);
        int int32 = numberFormat29.getMinimumFractionDigits();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale34);
        java.lang.String str38 = numberFormat36.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat29, numberFormat36);
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getNumeratorFormat();
        int int43 = numberFormat42.getMinimumFractionDigits();
        properFractionFormat39.setWholeFormat(numberFormat42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        boolean boolean51 = numberFormat45.equals((java.lang.Object) locale49);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale49);
        boolean boolean53 = numberFormat42.equals((java.lang.Object) numberFormat52);
        numberFormat52.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat6, numberFormat52);
        int int57 = numberFormat2.getMinimumFractionDigits();
        numberFormat2.setMaximumFractionDigits(2147483646);
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder62 = builder60.setVariant("");
        java.util.Locale.Builder builder63 = builder62.clear();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        java.lang.String str67 = locale64.getISO3Language();
        boolean boolean68 = locale64.hasExtensions();
        java.util.Locale.Builder builder69 = builder62.setLocale(locale64);
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale64);
        java.lang.String str71 = locale64.getDisplayScript();
        java.lang.String str72 = locale64.getScript();
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getNumberInstance(locale64);
        java.util.Locale locale74 = java.util.Locale.UK;
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale75.getDisplayLanguage(locale76);
        java.lang.String str78 = locale74.getDisplayScript(locale76);
        java.lang.String str79 = locale76.getISO3Language();
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getInstance(locale76);
        java.util.Locale locale81 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getInstance(locale81);
        org.apache.commons.math.fraction.FractionFormat fractionFormat83 = new org.apache.commons.math.fraction.FractionFormat(numberFormat80, numberFormat82);
        java.lang.String str85 = numberFormat82.format((double) (short) 13689);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat86 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat73, numberFormat82);
        int int87 = numberFormat82.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uce90\ub098\ub2e4" + "'", str1, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$52.00" + "'", str4, "$52.00");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0%" + "'", str23, "0%");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "32" + "'", str38, "32");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str66, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "kor" + "'", str67, "kor");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str77, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "kor" + "'", str79, "kor");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "13,689" + "'", str85, "13,689");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test13996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13996");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((-116), (int) (byte) 116);
    }

    @Test
    public void test13997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13997");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        numberFormat0.setMinimumFractionDigits(0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getNumeratorFormat();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance();
        numberFormat41.setMaximumIntegerDigits((-1));
        java.util.Currency currency44 = numberFormat41.getCurrency();
        numberFormat40.setCurrency(currency44);
        numberFormat39.setCurrency(currency44);
        java.math.RoundingMode roundingMode47 = numberFormat39.getRoundingMode();
        numberFormat0.setRoundingMode(roundingMode47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        numberFormat0.setMinimumFractionDigits((int) (short) 10);
        java.lang.String str53 = numberFormat0.format((long) 52);
        java.util.Locale locale57 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "10.000%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale57);
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getCurrencyInstance(locale57);
        numberFormat59.setMaximumIntegerDigits((int) (short) -13572);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.text.ParsePosition parsePosition65 = new java.text.ParsePosition(120);
        java.lang.Object obj66 = numberFormat59.parseObject("\u82f1\u8a9e\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd)", parsePosition65);
        int int67 = parsePosition65.getErrorIndex();
        java.lang.Number number68 = numberFormat0.parse("", parsePosition65);
        java.util.Locale.Builder builder69 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder69.setVariant("");
        java.util.Locale.Builder builder73 = builder71.setVariant("French");
        java.util.Locale.Builder builder75 = builder71.setLanguageTag("Kanada");
        java.util.Locale locale76 = builder75.build();
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getInstance(locale76);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.lang.String str80 = locale78.getDisplayLanguage(locale79);
        java.util.Locale locale81 = locale79.stripExtensions();
        java.util.Locale locale82 = locale81.stripExtensions();
        java.lang.String str83 = locale76.getDisplayName(locale82);
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getPercentInstance(locale76);
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getPercentInstance(locale76);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator86 = numberFormat0.formatToCharacterIterator((java.lang.Object) numberFormat85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode47 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode47.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + ".0000000000%" + "'", str53, ".0000000000%");
        org.junit.Assert.assertEquals(locale57.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_10.000%");
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 120 + "'", int67 == 120);
        org.junit.Assert.assertNull(number68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "kanada");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str80, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "kanada" + "'", str83, "kanada");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(numberFormat85);
    }

    @Test
    public void test13998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13998");
        java.text.ParseException parseException2 = new java.text.ParseException("", 10);
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int6 = parseException5.getErrorOffset();
        parseException2.addSuppressed((java.lang.Throwable) parseException5);
        java.lang.Throwable[] throwableArray8 = parseException2.getSuppressed();
        java.lang.Throwable[] throwableArray9 = parseException2.getSuppressed();
        java.lang.Throwable[] throwableArray10 = parseException2.getSuppressed();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test13999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13999");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayName(locale5);
        boolean boolean9 = locale1.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str11 = locale1.getLanguage();
        java.util.Locale locale13 = new java.util.Locale("");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale13.getDisplayLanguage(locale15);
        java.lang.String str18 = locale1.getDisplayVariant(locale13);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale locale23 = builder22.build();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.lang.String str27 = locale25.getScript();
        java.lang.String str28 = locale25.getCountry();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale25);
        java.util.Locale.Builder builder30 = builder22.setLocale(locale25);
        java.util.Locale.Builder builder33 = builder22.setExtension('a', "eng");
        java.util.Locale.Builder builder34 = builder33.clear();
        boolean boolean35 = locale13.equals((java.lang.Object) builder33);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cor\351en" + "'", str8, "cor\351en");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ko" + "'", str11, "ko");
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test14000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test14000");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.getCountry();
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale1.getDisplayCountry(locale6);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale10.getScript();
        java.lang.String str13 = locale10.getVariant();
        java.util.Locale.setDefault(category8, locale10);
        java.lang.String str15 = locale10.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale16.getDisplayCountry(locale19);
        java.lang.String str21 = locale10.getDisplayVariant(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str23 = locale6.getDisplayName(locale10);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance(locale6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "United Kingdom" + "'", str20, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(fractionFormat22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str23, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertNotNull(numberFormat24);
    }
}

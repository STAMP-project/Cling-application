import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest20 {

    public static boolean debug = false;

    @Test
    public void test10001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10001");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Instant instant25 = instant9.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant28 = instant9.withDurationAdded((long) 2, 23);
        org.joda.time.Instant instant30 = instant28.plus(604198800000L);
        org.joda.time.MutableDateTime mutableDateTime31 = instant28.toMutableDateTime();
        org.joda.time.Instant instant33 = instant28.plus((long) (-1617));
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        boolean boolean44 = dateTime37.equals((java.lang.Object) dateTime43);
        int int45 = dateTime37.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime37.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property47 = dateTime37.dayOfYear();
        org.joda.time.DateTime.Property property48 = dateTime37.centuryOfEra();
        org.joda.time.Duration duration50 = org.joda.time.Duration.millis((-1L));
        java.lang.String str51 = duration50.toString();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        boolean boolean56 = dateTime54.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property57 = dateTime54.millisOfSecond();
        int int58 = property57.getLeapAmount();
        org.joda.time.DateTime dateTime59 = property57.roundHalfEvenCopy();
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.time();
        org.joda.time.Period period61 = duration50.toPeriodFrom((org.joda.time.ReadableInstant) dateTime59, periodType60);
        org.joda.time.PeriodType periodType62 = periodType60.withMonthsRemoved();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant33, (org.joda.time.ReadableInstant) dateTime37, periodType62);
        int int64 = dateTime37.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 59 + "'", int45 == 59);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT-0.001S" + "'", str51, "PT-0.001S");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 31 + "'", int64 == 31);
    }

    @Test
    public void test10002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10002");
        java.io.IOException iOException1 = new java.io.IOException("2021-12-14");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
    }

    @Test
    public void test10003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10003");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Period period3 = period1.withWeeks((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime7.toDateTimeISO();
        org.joda.time.Instant instant13 = dateTime7.toInstant();
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone17.isLocalDateTimeGap(localDateTime19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(0);
        boolean boolean24 = instant14.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant28 = instant14.withDurationAdded((org.joda.time.ReadableDuration) duration26, (-1));
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime32.toDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime37.plusMillis((int) '#');
        int int40 = instant28.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration42 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTime.Property property52 = dateTime46.weekyear();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime46, periodType53);
        int int55 = dateTime46.getSecondOfDay();
        boolean boolean56 = dateTime37.isBefore((org.joda.time.ReadableInstant) dateTime46);
        int int57 = dateTime46.getSecondOfMinute();
        org.joda.time.Duration duration58 = period3.toDurationFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((-1L), dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMonths(100);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Days days66 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod67 = days66.toMutablePeriod();
        org.joda.time.Duration duration68 = days66.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(readableInstant65, (org.joda.time.ReadableDuration) duration68);
        int int70 = mutablePeriod69.size();
        org.joda.time.DateTime dateTime71 = dateTime64.plus((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-1L), dateTimeZone74);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Calendar calendar77 = dateTime75.toCalendar(locale76);
        org.joda.time.DateTime dateTime79 = dateTime75.plusMillis((int) '4');
        org.joda.time.DateTime dateTime80 = dateTime75.toDateTimeISO();
        org.joda.time.DateTime dateTime82 = dateTime80.plusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((java.lang.Object) dateTime80, dateTimeZone84);
        org.joda.time.DateTime dateTime87 = dateTime85.plusMillis((int) 'u');
        boolean boolean88 = dateTime71.isBefore((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateMidnight dateMidnight89 = dateTime87.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration58, (org.joda.time.ReadableInstant) dateMidnight89);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 86399 + "'", int55 == 86399);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 59 + "'", int57 == 59);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateMidnight89);
    }

    @Test
    public void test10004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10004");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        mutablePeriod28.setSeconds((int) (byte) 0);
        mutablePeriod28.setDays((int) 'a');
        mutablePeriod28.setDays((int) '4');
        org.joda.time.PeriodType periodType35 = mutablePeriod28.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        java.util.GregorianCalendar gregorianCalendar39 = dateTime38.toGregorianCalendar();
        int int40 = dateTime38.getHourOfDay();
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = locale42.toLanguageTag();
        java.util.Calendar calendar44 = dateTime38.toCalendar(locale42);
        org.joda.time.DateTime.Property property45 = dateTime38.minuteOfHour();
        org.joda.time.Days days46 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod47 = days46.toMutablePeriod();
        org.joda.time.Duration duration48 = days46.toStandardDuration();
        org.joda.time.Days days49 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod50 = days49.toMutablePeriod();
        org.joda.time.Duration duration51 = days49.toStandardDuration();
        boolean boolean52 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Duration duration56 = duration51.plus((org.joda.time.ReadableDuration) duration55);
        mutablePeriod28.setPeriod((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Instant instant59 = instant24.withDurationAdded((org.joda.time.ReadableDuration) duration56, 636);
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 1);
        org.joda.time.Duration duration62 = period61.toStandardDuration();
        boolean boolean64 = duration62.equals((java.lang.Object) "datetimefield[weekofweekyear] (0,eras)");
        boolean boolean65 = duration56.isShorterThan((org.joda.time.ReadableDuration) duration62);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(gregorianCalendar39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 7 + "'", int40 == 7);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh-CN" + "'", str43, "zh-CN");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645514258639,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=38,MILLISECOND=639,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test10005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10005");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.millisOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy((int) (short) -1);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime11.plusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        int int22 = dateTime19.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime19.getZone();
        org.joda.time.TimeOfDay timeOfDay24 = dateTime19.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime.Property property34 = dateTime28.weekyear();
        org.joda.time.Duration duration36 = org.joda.time.Duration.millis((long) (short) -1);
        long long37 = duration36.getMillis();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType39 = periodType38.withMinutesRemoved();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration36, periodType38);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadablePeriod) period40);
        mutableInterval41.setEndMillis(0L);
        long long44 = mutableInterval41.toDurationMillis();
        boolean boolean45 = mutableInterval41.isAfterNow();
        org.joda.time.Days days46 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) mutableInterval41);
        mutableInterval41.setDurationBeforeEnd(1645513719942L);
        org.joda.time.Chronology chronology49 = mutableInterval41.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.weeks();
        org.joda.time.DateTime dateTime51 = dateTime11.toDateTime(chronology49);
        long long55 = chronology49.add((long) 72000000, (long) 26109, 16);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 72417744L + "'", long55 == 72417744L);
    }

    @Test
    public void test10006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10006");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 2, (long) 23);
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        mutablePeriod5.setSeconds((int) (byte) 0);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod5);
        mutablePeriod5.setPeriod((long) 100);
        org.joda.time.ReadableInterval readableInterval11 = null;
        mutablePeriod5.setPeriod(readableInterval11);
        mutablePeriod5.setMillis(577);
        int int15 = mutablePeriod5.size();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = mutablePeriod5.getValue(292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 292278993");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test10007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10007");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod2 = days1.toMutablePeriod();
        org.joda.time.Duration duration3 = days1.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        int int5 = mutablePeriod4.getDays();
        mutablePeriod4.addWeeks(570);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
    }

    @Test
    public void test10008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10008");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime3.hourOfDay();
        org.joda.time.DurationField durationField8 = property7.getRangeDurationField();
        org.joda.time.DateTime dateTime9 = property7.withMaximumValue();
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        long long18 = duration17.getStandardHours();
        mutableInterval14.setDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime20 = mutableInterval14.getStart();
        int int21 = property7.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = property7.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime26.plusMonths((int) (byte) 1);
        org.joda.time.DateTime dateTime34 = dateTime26.plus(59L);
        org.joda.time.LocalDateTime localDateTime35 = dateTime26.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.Chronology chronology44 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.millisOfDay();
        long long48 = dateTimeField46.roundCeiling((long) 6);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = dateTimeField46.getType();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        boolean boolean51 = localDateTime35.isSupported(dateTimeFieldType49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime56 = null;
        boolean boolean57 = dateTimeZone54.isLocalDateTimeGap(localDateTime56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone54);
        org.joda.time.DateTime dateTime60 = dateTime58.withHourOfDay(0);
        int int61 = dateTime60.getDayOfWeek();
        org.joda.time.Days days62 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod63 = days62.toMutablePeriod();
        org.joda.time.Duration duration64 = days62.toStandardDuration();
        long long65 = duration64.getStandardHours();
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType67 = periodType66.withYearsRemoved();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableDuration) duration64, periodType67);
        org.joda.time.DateTime dateTime70 = dateTime60.withWeekyear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime75 = null;
        boolean boolean76 = dateTimeZone73.isLocalDateTimeGap(localDateTime75);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone73);
        org.joda.time.DateTime dateTime79 = dateTime77.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime81 = dateTime79.toMutableDateTime(dateTimeZone80);
        org.joda.time.DateTime dateTime82 = dateTime60.withZoneRetainFields(dateTimeZone80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean84 = dateTime82.isSupported(dateTimeFieldType83);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean86 = dateTime82.isSupported(dateTimeFieldType85);
        java.lang.String str87 = dateTimeFieldType85.toString();
        int int88 = localDateTime35.get(dateTimeFieldType85);
        java.lang.String str89 = dateTimeFieldType85.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime91 = dateTime22.withField(dateTimeFieldType85, 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 144L + "'", long18 == 144L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 6L + "'", long48 == 6L);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 144L + "'", long65 == 144L);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "dayOfMonth" + "'", str87, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 31 + "'", int88 == 31);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "dayOfMonth" + "'", str89, "dayOfMonth");
    }

    @Test
    public void test10009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10009");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 170);
        org.joda.time.Period period3 = period1.withYears(656);
        org.joda.time.Period period5 = period1.minusMonths(0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test10010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10010");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 10, periodType3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology18);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((-1L), 59L, chronology18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 747, periodType3, chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.centuryOfEra();
        long long26 = dateTimeField23.addWrapField(1645513731014L, (int) (short) -1);
        int int28 = dateTimeField23.getMaximumValue(97200035L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1510246268986L) + "'", long26 == (-1510246268986L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2922789 + "'", int28 == 2922789);
    }

    @Test
    public void test10011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10011");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MIN_VALUE;
        org.joda.time.Hours hours2 = hours0.multipliedBy((int) (byte) 0);
        int int3 = hours2.getHours();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test10012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10012");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DurationField durationField12 = property9.getLeapDurationField();
        org.joda.time.DateTime dateTime13 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours(137);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514258893,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=38,MILLISECOND=893,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test10013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10013");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration2 = period1.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.Instant instant21 = dateTime15.toInstant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone25.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime31 = dateTime29.withHourOfDay(0);
        boolean boolean32 = instant22.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime36.toDateTimeISO();
        org.joda.time.Instant instant42 = dateTime36.toInstant();
        org.joda.time.Instant instant43 = instant42.toInstant();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone46.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime52 = dateTime50.withHourOfDay(0);
        boolean boolean53 = instant43.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant57 = instant43.withDurationAdded((org.joda.time.ReadableDuration) duration55, (-1));
        boolean boolean59 = instant57.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = dateTime63.toCalendar(locale64);
        org.joda.time.DateTime dateTime67 = dateTime63.plusMillis((int) '4');
        org.joda.time.DateTime dateTime68 = dateTime63.toDateTimeISO();
        org.joda.time.Instant instant69 = dateTime63.toInstant();
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant57, (org.joda.time.ReadableInstant) dateTime63, periodType70);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant22, (org.joda.time.ReadablePeriod) period71);
        boolean boolean73 = duration2.equals((java.lang.Object) period71);
        org.joda.time.Days days74 = duration2.toStandardDays();
        org.joda.time.Days days76 = days74.multipliedBy(1970);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(144L);
        mutablePeriod78.setHours((-59));
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((-1L), dateTimeZone85);
        org.joda.time.Interval interval87 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone85);
        boolean boolean89 = interval87.isAfter(100L);
        long long90 = interval87.getEndMillis();
        org.joda.time.Interval interval91 = interval87.toInterval();
        org.joda.time.Days days92 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval87);
        mutablePeriod78.add((org.joda.time.ReadablePeriod) days92);
        org.joda.time.Days days94 = days74.plus(days92);
        int int95 = days92.getDays();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L + "'", long90 == 1L);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(days92);
        org.junit.Assert.assertNotNull(days94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test10014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10014");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 10, periodType4);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType4);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Hours hours8 = hours0.minus(hours7);
        org.joda.time.Hours hours10 = hours0.dividedBy(9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        int int20 = dateTime19.getDayOfWeek();
        org.joda.time.DateTime dateTime22 = dateTime19.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Instant instant31 = dateTime30.toInstant();
        org.joda.time.Hours hours32 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) instant31);
        org.joda.time.Hours hours33 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours35 = hours33.plus((int) (byte) 100);
        org.joda.time.PeriodType periodType36 = hours33.getPeriodType();
        org.joda.time.Hours hours37 = hours32.plus(hours33);
        org.joda.time.Hours hours38 = hours0.minus(hours37);
        int int39 = hours37.size();
        java.lang.String str40 = hours37.toString();
        org.joda.time.MutablePeriod mutablePeriod41 = hours37.toMutablePeriod();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT-455398H" + "'", str40, "PT-455398H");
        org.junit.Assert.assertNotNull(mutablePeriod41);
    }

    @Test
    public void test10015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10015");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Period period31 = period29.withWeeks((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant41 = dateTime35.toInstant();
        org.joda.time.Instant instant42 = instant41.toInstant();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime47 = null;
        boolean boolean48 = dateTimeZone45.isLocalDateTimeGap(localDateTime47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime51 = dateTime49.withHourOfDay(0);
        boolean boolean52 = instant42.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant56 = instant42.withDurationAdded((org.joda.time.ReadableDuration) duration54, (-1));
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime60.toDateTimeISO();
        org.joda.time.DateTime dateTime67 = dateTime65.plusMillis((int) '#');
        int int68 = instant56.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration70 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Calendar calendar76 = dateTime74.toCalendar(locale75);
        org.joda.time.DateTime dateTime78 = dateTime74.plusMillis((int) '4');
        org.joda.time.DateTime dateTime79 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime.Property property80 = dateTime74.weekyear();
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime74, periodType81);
        int int83 = dateTime74.getSecondOfDay();
        boolean boolean84 = dateTime65.isBefore((org.joda.time.ReadableInstant) dateTime74);
        int int85 = dateTime74.getSecondOfMinute();
        org.joda.time.Duration duration86 = period31.toDurationFrom((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime74);
        int int88 = dateTime74.getSecondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime92 = dateTime74.withDate(28, 2022, 108);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 86399 + "'", int83 == 86399);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 59 + "'", int85 == 59);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 86399 + "'", int88 == 86399);
    }

    @Test
    public void test10016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10016");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 2, (long) 23);
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        mutablePeriod5.setSeconds((int) (byte) 0);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        boolean boolean19 = interval15.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.lang.String str25 = dateTimeZone22.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime18.withZoneRetainFields(dateTimeZone22);
        int int28 = dateTimeZone22.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone22);
        int int30 = dateTime29.getMinuteOfHour();
        boolean boolean31 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime33 = dateTime29.withYearOfEra((int) ' ');
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 17 + "'", int30 == 17);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test10017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10017");
        java.util.Locale locale1 = new java.util.Locale("P52Y1M3WT7H10M3.958S");
        org.junit.Assert.assertEquals(locale1.toString(), "p52y1m3wt7h10m3.958s");
    }

    @Test
    public void test10018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10018");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone5);
        boolean boolean9 = interval7.isAfter(100L);
        long long10 = interval7.getEndMillis();
        org.joda.time.Interval interval11 = interval7.toInterval();
        boolean boolean13 = interval7.isBefore((long) (-1));
        boolean boolean14 = interval7.isBeforeNow();
        boolean boolean15 = interval7.isAfterNow();
        org.joda.time.Seconds seconds16 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology17 = interval7.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.minutes();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.Chronology chronology20 = chronology17.withUTC();
        org.joda.time.DurationField durationField21 = chronology20.minutes();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.minuteOfDay();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 652, chronology20);
        org.joda.time.DurationField durationField24 = chronology20.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test10019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10019");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1071360068060L);
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds4 = seconds2.minus(seconds3);
        org.joda.time.Duration duration5 = seconds2.toStandardDuration();
        org.joda.time.Seconds seconds7 = seconds2.minus(0);
        org.joda.time.Seconds seconds9 = seconds2.multipliedBy(11);
        org.joda.time.PeriodType periodType10 = seconds2.getPeriodType();
        org.joda.time.Duration duration11 = seconds2.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime20.withWeekyear((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10);
        int int28 = period27.getSeconds();
        int int29 = period27.getSeconds();
        org.joda.time.DateTime dateTime30 = dateTime25.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTimeISO();
        org.joda.time.Instant instant40 = dateTime34.toInstant();
        org.joda.time.Instant instant41 = instant40.toInstant();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone44.isLocalDateTimeGap(localDateTime46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime50 = dateTime48.withHourOfDay(0);
        boolean boolean51 = instant41.isEqual((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant55 = instant41.withDurationAdded((org.joda.time.ReadableDuration) duration53, (-1));
        boolean boolean57 = instant55.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Calendar calendar63 = dateTime61.toCalendar(locale62);
        org.joda.time.DateTime dateTime65 = dateTime61.plusMillis((int) '4');
        org.joda.time.DateTime dateTime66 = dateTime61.toDateTimeISO();
        org.joda.time.Instant instant67 = dateTime61.toInstant();
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant55, (org.joda.time.ReadableInstant) dateTime61, periodType68);
        org.joda.time.PeriodType periodType70 = periodType68.withWeeksRemoved();
        java.lang.String str71 = periodType70.toString();
        org.joda.time.Period period72 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30, periodType70);
        boolean boolean73 = instant1.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PeriodType[Minutes]" + "'", str71, "PeriodType[Minutes]");
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test10020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10020");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        mutablePeriod1.setMinutes(86399);
        mutablePeriod1.addMonths((int) '#');
        mutablePeriod1.addHours((int) 'u');
        org.joda.time.Period period22 = org.joda.time.Period.days((-5));
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) period22);
        mutablePeriod1.setYears((int) 'u');
        org.joda.time.Days days26 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod27 = days26.toMutablePeriod();
        org.joda.time.Days days28 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod29 = days28.toMutablePeriod();
        mutablePeriod29.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval32 = null;
        mutablePeriod29.add(readableInterval32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.eras();
        int int35 = mutablePeriod29.get(durationFieldType34);
        boolean boolean36 = mutablePeriod27.isSupported(durationFieldType34);
        mutablePeriod27.addSeconds((int) '#');
        mutablePeriod27.addSeconds((int) (short) 0);
        java.lang.String str41 = mutablePeriod27.toString();
        org.joda.time.PeriodType periodType42 = mutablePeriod27.getPeriodType();
        int int43 = mutablePeriod27.size();
        org.joda.time.Days days44 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, periodType49);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(32820001L, periodType49);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 347, (long) 9, periodType49);
        org.joda.time.Days days53 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod54 = days53.toMutablePeriod();
        org.joda.time.Duration duration55 = days53.toStandardDuration();
        org.joda.time.Days days56 = days53.negated();
        org.joda.time.Days days57 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod58 = days57.toMutablePeriod();
        org.joda.time.Days days59 = org.joda.time.Days.MIN_VALUE;
        boolean boolean60 = days57.isLessThan(days59);
        org.joda.time.Days days62 = days57.multipliedBy(23);
        org.joda.time.Days days63 = days56.plus(days62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType64.getRangeDurationType();
        boolean boolean66 = days63.isSupported(durationFieldType65);
        boolean boolean67 = mutablePeriod52.isSupported(durationFieldType65);
        int int68 = days44.get(durationFieldType65);
        mutablePeriod1.set(durationFieldType65, 25907773);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "P6DT35S" + "'", str41, "P6DT35S");
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(days59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(days63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test10021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10021");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.Hours hours10 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours11 = hours10.negated();
        org.joda.time.DurationFieldType durationFieldType12 = hours11.getFieldType();
        org.joda.time.Hours hours14 = hours11.multipliedBy((int) 'a');
        int[] intArray17 = chronology8.get((org.joda.time.ReadablePeriod) hours11, (long) (short) 1, (long) 4);
        long long21 = chronology8.add((long) 999, (-1104537599997L), 53);
        org.joda.time.Chronology chronology22 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.secondOfMinute();
        int int27 = dateTimeField25.get(1855L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-58540492798842L) + "'", long21 == (-58540492798842L));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test10022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10022");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTime dateTime6 = property5.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        int int11 = dateTime10.getHourOfDay();
        boolean boolean12 = property5.equals((java.lang.Object) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        org.joda.time.DateTime dateTime23 = dateTime19.minusHours((int) (byte) 1);
        org.joda.time.DateTime.Property property24 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime.Property property35 = dateTime29.weekyear();
        org.joda.time.DateTime.Property property36 = dateTime29.yearOfCentury();
        boolean boolean37 = dateTime29.isBeforeNow();
        org.joda.time.DateTime dateTime40 = dateTime29.withDurationAdded((long) 829, 34);
        int int41 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test10023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10023");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime9.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        int int27 = dateTime26.getDayOfWeek();
        org.joda.time.Days days28 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod29 = days28.toMutablePeriod();
        org.joda.time.Duration duration30 = days28.toStandardDuration();
        long long31 = duration30.getStandardHours();
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType33 = periodType32.withYearsRemoved();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration30, periodType33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        org.joda.time.DateTime dateTime42 = dateTime38.plusMillis((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime38.toDateTimeISO();
        boolean boolean44 = dateTime38.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = dateTime38.toString(dateTimeFormatter45);
        org.joda.time.Period period47 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime49 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod) period47, 59);
        org.joda.time.LocalDate localDate50 = dateTime49.toLocalDate();
        java.lang.String str51 = localDate50.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int53 = localDate50.get(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 144L + "'", long31 == 144L);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str46, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2023-02-11" + "'", str51, "2023-02-11");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
    }

    @Test
    public void test10024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10024");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration29 = period28.toStandardDuration();
        org.joda.time.Instant instant30 = instant24.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone33.isLocalDateTimeGap(localDateTime35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = dateTime37.withHourOfDay(0);
        int int40 = dateTime39.getDayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime39.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.Instant instant51 = dateTime50.toInstant();
        org.joda.time.Hours hours52 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTime dateTime54 = dateTime42.plusMillis((int) (byte) 1);
        boolean boolean55 = instant24.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime56 = dateTime42.withTimeAtStartOfDay();
        int int57 = dateTime42.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1059269 + "'", int57 == 1059269);
    }

    @Test
    public void test10025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10025");
        org.joda.time.Period period4 = new org.joda.time.Period((int) (byte) 1, 0, (-1), 10);
        org.joda.time.Period period6 = period4.plusYears(652);
        org.joda.time.Period period8 = org.joda.time.Period.months((-27425129));
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.minusYears(171);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone16);
        boolean boolean20 = interval18.isAfter(100L);
        long long21 = interval18.getEndMillis();
        org.joda.time.Interval interval22 = interval18.toInterval();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = interval22.withDurationBeforeEnd(readableDuration23);
        boolean boolean26 = interval22.isAfter((long) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        boolean boolean40 = dateTime38.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        boolean boolean46 = dateTimeZone43.isStandardOffset((long) (byte) 100);
        boolean boolean48 = dateTimeZone43.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone51.isLocalDateTimeGap(localDateTime53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime57 = dateTime55.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Calendar calendar63 = dateTime61.toCalendar(locale62);
        org.joda.time.DateTime dateTime65 = dateTime61.plusMillis((int) '4');
        org.joda.time.DateTime dateTime66 = dateTime61.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        boolean boolean71 = dateTime69.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes72 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Duration duration73 = minutes72.toStandardDuration();
        org.joda.time.Duration duration74 = minutes72.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableDuration) duration74);
        int int76 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime77 = dateTime30.withZoneRetainFields(dateTimeZone43);
        boolean boolean78 = interval22.isBefore((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime80 = dateTime77.plusHours(86399);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType82 = dateTimeFieldType81.getDurationType();
        boolean boolean83 = dateTime80.isSupported(dateTimeFieldType81);
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((-1L), dateTimeZone86);
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.util.Calendar calendar89 = dateTime87.toCalendar(locale88);
        org.joda.time.DateTime dateTime91 = dateTime87.plusMillis((int) '4');
        org.joda.time.Chronology chronology92 = dateTime87.getChronology();
        org.joda.time.DateTimeField dateTimeField93 = chronology92.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField94 = chronology92.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField95 = dateTimeFieldType81.getField(chronology92);
        org.joda.time.DurationFieldType durationFieldType96 = dateTimeFieldType81.getDurationType();
        java.lang.String str97 = durationFieldType96.toString();
        int int98 = period11.indexOf(durationFieldType96);
        int int99 = period6.get(durationFieldType96);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(durationFieldType96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "millis" + "'", str97, "millis");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 7 + "'", int98 == 7);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 10 + "'", int99 == 10);
    }

    @Test
    public void test10026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10026");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (short) 0);
        mutablePeriod1.addMillis(34);
        int int4 = mutablePeriod1.getMillis();
        mutablePeriod1.addWeeks(108);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(0L, chronology8);
        int int10 = period9.getSeconds();
        org.joda.time.Period period12 = period9.withMonths((int) (byte) 10);
        int int13 = period12.getMillis();
        org.joda.time.Period period14 = period12.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod();
        mutablePeriod15.addDays(5);
        mutablePeriod15.addDays(23);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType23 = periodType22.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(522547200000L, (-1510246268986L), periodType23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.days();
        int int26 = mutablePeriod24.get(durationFieldType25);
        mutablePeriod15.add(durationFieldType25, 59);
        org.joda.time.Period period30 = period14.withFieldAdded(durationFieldType25, (-6));
        mutablePeriod1.add(durationFieldType25, 27424811);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone35.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        org.joda.time.DateTime dateTime43 = dateTime39.minusHours((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Calendar calendar50 = dateTime48.toCalendar(locale49);
        org.joda.time.DateTime dateTime52 = dateTime48.plusMillis((int) '4');
        org.joda.time.Chronology chronology53 = dateTime48.getChronology();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) '4', chronology53);
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime43.toMutableDateTime(chronology53);
        boolean boolean56 = durationFieldType25.isSupported(chronology53);
        org.joda.time.DurationField durationField57 = chronology53.millis();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 34 + "'", int4 == 34);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test10027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10027");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime5.weekyear();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime5, periodType12);
        org.joda.time.Period period15 = period13.plusYears((int) (byte) 0);
        org.joda.time.Period period17 = period15.plusMonths((int) ' ');
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        mutablePeriod19.setSeconds((int) (byte) 0);
        mutablePeriod19.setHours((int) '#');
        mutablePeriod19.addMillis((int) (byte) 100);
        mutablePeriod19.setHours(2);
        org.joda.time.Period period28 = period15.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        mutablePeriod19.setMinutes(2147483647);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType38 = periodType37.withMinutesRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, periodType38);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.Chronology chronology50 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology50);
        org.joda.time.Seconds seconds53 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds54 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds55 = seconds53.minus(seconds54);
        org.joda.time.Duration duration56 = seconds53.toStandardDuration();
        int[] intArray59 = chronology50.get((org.joda.time.ReadablePeriod) seconds53, 652278993L, (long) (-1));
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, periodType38, chronology50);
        org.joda.time.DurationField durationField61 = chronology50.centuries();
        org.joda.time.DurationField durationField62 = chronology50.years();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 360, (long) 207, chronology50);
        org.joda.time.Period period64 = new org.joda.time.Period((long) 2022, chronology50);
        org.joda.time.DateTimeField dateTimeField65 = chronology50.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod19.add(329901111678L, chronology50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 11");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(seconds53);
        org.junit.Assert.assertNotNull(seconds54);
        org.junit.Assert.assertNotNull(seconds55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-652278]");
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test10028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10028");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setDays((int) 'a');
        mutablePeriod1.setDays((int) '4');
        mutablePeriod1.setMinutes(117);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType16.getDurationType();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType16.getDurationType();
        java.lang.String str20 = dateTimeFieldType16.toString();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType16.getDurationType();
        int int22 = mutablePeriod1.get(durationFieldType21);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hourOfHalfday" + "'", str20, "hourOfHalfday");
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test10029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10029");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.Period period3 = mutableInterval0.toPeriod(periodType1);
        org.joda.time.Chronology chronology4 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test10030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10030");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setDays((int) 'a');
        mutablePeriod1.addSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology10 = null;
        mutablePeriod1.setPeriod(10L, (long) (byte) 1, chronology10);
        int int12 = mutablePeriod1.getYears();
        org.joda.time.Duration duration14 = org.joda.time.Duration.millis((long) (short) -1);
        long long15 = duration14.getStandardMinutes();
        org.joda.time.Duration duration17 = duration14.withMillis((-82737998L));
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTime20.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property23 = dateTime20.millisOfSecond();
        org.joda.time.DateTime dateTime24 = property23.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        int int29 = dateTime28.getHourOfDay();
        boolean boolean30 = property23.equals((java.lang.Object) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekOfWeekyear();
        java.lang.String str41 = dateTimeField40.getName();
        java.lang.String str43 = dateTimeField40.getAsShortText((long) (short) 10);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Locale locale46 = locale45.stripExtensions();
        java.lang.String str47 = dateTimeField40.getAsText((int) (byte) 100, locale45);
        java.util.Calendar calendar48 = dateTime28.toCalendar(locale45);
        long long49 = dateTime28.getMillis();
        org.joda.time.Period period50 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        mutablePeriod1.add((org.joda.time.ReadableDuration) duration14);
        mutablePeriod1.addDays(864);
        mutablePeriod1.addHours(408);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "weekOfWeekyear" + "'", str41, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test10031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10031");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMillis((int) '#');
        int int36 = instant24.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone40.isLocalDateTimeGap(localDateTime42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime44.withHourOfDay(0);
        org.joda.time.DateTime dateTime48 = dateTime44.minusHours((int) (byte) 1);
        org.joda.time.Days days49 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutablePeriod mutablePeriod50 = days49.toMutablePeriod();
        org.joda.time.Days days51 = org.joda.time.Days.SEVEN;
        org.joda.time.Days days52 = org.joda.time.Days.ZERO;
        org.joda.time.Days days53 = days51.minus(days52);
        boolean boolean54 = days49.isGreaterThan(days52);
        org.joda.time.DurationFieldType durationFieldType55 = days52.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(durationFieldType55);
    }

    @Test
    public void test10032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10032");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("PT1919628118M");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10033");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.Days days18 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime22.toDateTimeISO();
        org.joda.time.Instant instant28 = dateTime22.toInstant();
        org.joda.time.Instant instant29 = instant28.toInstant();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime38 = dateTime36.withHourOfDay(0);
        boolean boolean39 = instant29.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant43 = instant29.withDurationAdded((org.joda.time.ReadableDuration) duration41, (-1));
        boolean boolean45 = instant43.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.Instant instant55 = dateTime49.toInstant();
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant43, (org.joda.time.ReadableInstant) dateTime49, periodType56);
        org.joda.time.PeriodType periodType58 = periodType56.withWeeksRemoved();
        org.joda.time.Period period59 = interval17.toPeriod(periodType56);
        int int60 = period59.getMonths();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514259550,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=39,MILLISECOND=550,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test10034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10034");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone6);
        boolean boolean10 = interval8.isAfter(100L);
        long long11 = interval8.getEndMillis();
        org.joda.time.Interval interval12 = interval8.toInterval();
        org.joda.time.Days days13 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Interval interval15 = interval8.withStartMillis(0L);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        int int26 = dateTime25.getDayOfWeek();
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        org.joda.time.Duration duration29 = days27.toStandardDuration();
        long long30 = duration29.getStandardHours();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType32 = periodType31.withYearsRemoved();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration29, periodType32);
        org.joda.time.DateTime dateTime35 = dateTime25.withWeekyear((int) '#');
        org.joda.time.LocalTime localTime36 = dateTime25.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis((int) '4');
        org.joda.time.Chronology chronology45 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.millisOfDay();
        org.joda.time.DurationField durationField48 = chronology45.hours();
        boolean boolean49 = localTime36.equals((java.lang.Object) chronology45);
        long long51 = chronology16.set((org.joda.time.ReadablePartial) localTime36, (-518400L));
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, 1645513800000L, chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 144L + "'", long30 == 144L);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-85340416L) + "'", long51 == (-85340416L));
    }

    @Test
    public void test10035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10035");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-22T07:12:52.865Z/2022-02-22T07:12:52.865Z");
        java.lang.String str2 = iOException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException: 2022-02-22T07:12:52.865Z/2022-02-22T07:12:52.865Z" + "'", str2, "java.io.IOException: 2022-02-22T07:12:52.865Z/2022-02-22T07:12:52.865Z");
    }

    @Test
    public void test10036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10036");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 10, periodType4);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType4);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Hours hours8 = hours0.minus(hours7);
        org.joda.time.Hours hours10 = hours0.dividedBy(9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        int int20 = dateTime19.getDayOfWeek();
        org.joda.time.DateTime dateTime22 = dateTime19.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Instant instant31 = dateTime30.toInstant();
        org.joda.time.Hours hours32 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) instant31);
        org.joda.time.Hours hours33 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours35 = hours33.plus((int) (byte) 100);
        org.joda.time.PeriodType periodType36 = hours33.getPeriodType();
        org.joda.time.Hours hours37 = hours32.plus(hours33);
        org.joda.time.Hours hours38 = hours0.minus(hours37);
        int int39 = hours37.size();
        org.joda.time.Hours hours40 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours42 = hours40.plus((int) (byte) 100);
        org.joda.time.Hours hours44 = hours40.minus(577);
        org.joda.time.Hours hours46 = hours40.multipliedBy(3);
        org.joda.time.Hours hours47 = hours37.minus(hours40);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTimeISO();
        org.joda.time.Instant instant57 = dateTime51.toInstant();
        org.joda.time.Instant instant58 = instant57.toInstant();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((-1L), dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime63 = null;
        boolean boolean64 = dateTimeZone61.isLocalDateTimeGap(localDateTime63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime67 = dateTime65.withHourOfDay(0);
        boolean boolean68 = instant58.isEqual((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant72 = instant58.withDurationAdded((org.joda.time.ReadableDuration) duration70, (-1));
        org.joda.time.Hours hours73 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours75 = hours73.plus((int) (byte) 100);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant58, (org.joda.time.ReadablePeriod) hours75);
        org.joda.time.Hours hours77 = hours37.minus(hours75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant78 = new org.joda.time.Instant((java.lang.Object) hours37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Hours");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(hours42);
        org.junit.Assert.assertNotNull(hours44);
        org.junit.Assert.assertNotNull(hours46);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(hours73);
        org.junit.Assert.assertNotNull(hours75);
        org.junit.Assert.assertNotNull(hours77);
    }

    @Test
    public void test10037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10037");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        boolean boolean9 = mutableInterval7.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray20 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList21);
        boolean boolean24 = mutableInterval7.equals((java.lang.Object) strList21);
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval7.toMutableInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval25.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.minusYears(2922789);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test10038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10038");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("datetimefield[weekofweekyear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"datetimefield[weekofweekyear]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10039");
        org.joda.time.Period period1 = org.joda.time.Period.years((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean12 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.lang.String str18 = dateTimeZone15.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime11.withZoneRetainFields(dateTimeZone15);
        org.joda.time.Duration duration20 = period1.toDurationFrom((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = period1.plusMonths(2911679);
        int int23 = period1.getSeconds();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test10040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10040");
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        org.joda.time.PeriodType periodType6 = days3.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType6, chronology15);
        org.joda.time.Chronology chronology18 = chronology15.withUTC();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (-2147483648), chronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.Chronology chronology29 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekOfWeekyear();
        mutablePeriod19.add(229824000000L, chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.minuteOfHour();
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test10041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10041");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.Instant instant34 = dateTime28.toInstant();
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone38.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        boolean boolean45 = instant35.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant49 = instant35.withDurationAdded((org.joda.time.ReadableDuration) duration47, (-1));
        java.util.Date date50 = instant35.toDate();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadableInstant) instant35);
        org.joda.time.Period period53 = period51.plusMinutes(53);
        org.joda.time.Days days54 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DurationFieldType durationFieldType55 = days54.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(durationFieldType55);
    }

    @Test
    public void test10042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10042");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Period period13 = interval10.toPeriod();
        org.joda.time.Interval interval14 = interval10.toInterval();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone19);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        boolean boolean24 = mutableInterval22.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray35 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList36);
        boolean boolean39 = mutableInterval22.equals((java.lang.Object) strList36);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval22.toMutableInterval();
        boolean boolean41 = interval14.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime45.toDateTimeISO();
        org.joda.time.Instant instant51 = dateTime45.toInstant();
        org.joda.time.Instant instant52 = instant51.toInstant();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime57 = null;
        boolean boolean58 = dateTimeZone55.isLocalDateTimeGap(localDateTime57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime61 = dateTime59.withHourOfDay(0);
        boolean boolean62 = instant52.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant66 = instant52.withDurationAdded((org.joda.time.ReadableDuration) duration64, (-1));
        boolean boolean68 = instant66.isBefore((long) (short) 10);
        org.joda.time.Period period70 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration71 = period70.toStandardDuration();
        org.joda.time.Instant instant72 = instant66.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone74);
        boolean boolean77 = dateTime75.isAfter((long) (byte) 10);
        org.joda.time.Period period78 = duration71.toPeriodFrom((org.joda.time.ReadableInstant) dateTime75);
        boolean boolean79 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime75);
        long long80 = interval14.toDurationMillis();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 2L + "'", long80 == 2L);
    }

    @Test
    public void test10043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10043");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        java.lang.String str10 = dateTimeField9.getName();
        int int12 = dateTimeField9.get((long) (byte) 100);
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        int int14 = dateTimeField9.getMaximumShortTextLength(locale13);
        boolean boolean15 = dateTimeField9.isLenient();
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str18 = dateTimeField9.getAsText((long) 35, locale17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime.Property property29 = dateTime23.weekyear();
        org.joda.time.DateTime.Property property30 = dateTime23.yearOfCentury();
        org.joda.time.DateTime dateTime31 = property30.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone36);
        int int40 = dateTimeZone36.getStandardOffset((long) 100);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = dateTimeZone36.getName((long) 100, locale42);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        boolean boolean54 = interval50.isAfter((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        java.lang.String str60 = dateTimeZone57.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime53.withZoneRetainFields(dateTimeZone57);
        int int63 = dateTimeZone57.getStandardOffset((long) ' ');
        java.lang.String str64 = dateTimeZone57.getID();
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = dateTimeZone57.getName(600000L, locale66);
        java.lang.String str68 = locale42.getDisplayVariant(locale66);
        int int69 = property30.getMaximumShortTextLength(locale42);
        java.util.Locale locale71 = new java.util.Locale("P1970M");
        java.lang.String str72 = locale42.getDisplayName(locale71);
        java.lang.String str73 = dateTimeField9.getAsShortText(535, locale71);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekOfWeekyear" + "'", str10, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertEquals(locale71.toString(), "p1970m");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Korean" + "'", str72, "Korean");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "535" + "'", str73, "535");
    }

    @Test
    public void test10044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10044");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Days days2 = period1.toStandardDays();
        org.joda.time.Period period4 = period1.withDays(45);
        int int5 = period4.size();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test10045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10045");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        java.lang.String str10 = dateTimeField9.getName();
        org.joda.time.DurationField durationField11 = dateTimeField9.getLeapDurationField();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.lang.String str15 = dateTimeField9.getAsShortText((long) 100, locale14);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.toLanguageTag();
        java.lang.String str20 = dateTimeField9.getAsText(0, locale18);
        int int22 = dateTimeField9.getMinimumValue((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField9.getType();
        boolean boolean25 = dateTimeField9.isLeap(1047600035L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone28.isLocalDateTimeGap(localDateTime30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime40 = dateTime35.toLocalDateTime();
        boolean boolean41 = dateTimeZone28.isLocalDateTimeGap(localDateTime40);
        int int42 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime46.plusMonths((int) (byte) 1);
        org.joda.time.DateTime dateTime54 = dateTime46.plus(59L);
        org.joda.time.LocalDateTime localDateTime55 = dateTime46.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Calendar calendar61 = dateTime59.toCalendar(locale60);
        org.joda.time.DateTime dateTime63 = dateTime59.plusMillis((int) '4');
        org.joda.time.Chronology chronology64 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.millisOfDay();
        long long68 = dateTimeField66.roundCeiling((long) 6);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = dateTimeField66.getType();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        boolean boolean71 = localDateTime55.isSupported(dateTimeFieldType69);
        org.joda.time.Days days72 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod73 = days72.toMutablePeriod();
        org.joda.time.Days days74 = org.joda.time.Days.MIN_VALUE;
        boolean boolean75 = days72.isLessThan(days74);
        org.joda.time.PeriodType periodType76 = days74.getPeriodType();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime40, (org.joda.time.ReadablePartial) localDateTime55, periodType76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period79 = period77.withHours(11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekOfWeekyear" + "'", str10, "weekOfWeekyear");
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-CN" + "'", str19, "zh-CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 53 + "'", int42 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 6L + "'", long68 == 6L);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(days72);
        org.junit.Assert.assertNotNull(mutablePeriod73);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(periodType76);
    }

    @Test
    public void test10046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10046");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime26.plusDays(9);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths(360000000);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test10047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10047");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, readableInstant18);
        mutablePeriod19.setMinutes(784);
        int int22 = mutablePeriod19.getYears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514259976,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=39,MILLISECOND=976,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test10048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10048");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology12);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((-1L), 59L, chronology12);
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10);
        int int18 = period17.getSeconds();
        org.joda.time.Period period20 = period17.minusHours(100);
        mutableInterval15.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period17);
        mutableInterval15.setDurationBeforeEnd(2813123359836L);
        org.joda.time.MutableInterval mutableInterval24 = mutableInterval15.copy();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableInterval24);
    }

    @Test
    public void test10049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10049");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property29 = dateTime26.property(dateTimeFieldType28);
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        long long31 = property29.remainder();
        org.joda.time.DateTime dateTime33 = property29.addToCopy(0);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 259200051L + "'", long31 == 259200051L);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test10050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10050");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        long long13 = duration12.getStandardHours();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12, periodType15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        boolean boolean21 = dateTimeZone18.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property24 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime31.toInstant();
        org.joda.time.Instant instant38 = instant37.toInstant();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone41.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        boolean boolean48 = instant38.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant52 = instant38.withDurationAdded((org.joda.time.ReadableDuration) duration50, (-1));
        boolean boolean54 = instant52.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Calendar calendar60 = dateTime58.toCalendar(locale59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusMillis((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime58.toDateTimeISO();
        org.joda.time.Instant instant64 = dateTime58.toInstant();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant52, (org.joda.time.ReadableInstant) dateTime58, periodType65);
        org.joda.time.PeriodType periodType67 = periodType65.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((-1L), dateTimeZone70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Calendar calendar73 = dateTime71.toCalendar(locale72);
        org.joda.time.DateTime dateTime75 = dateTime71.plusMillis((int) '4');
        org.joda.time.Chronology chronology76 = dateTime71.getChronology();
        org.joda.time.Period period77 = new org.joda.time.Period((-259200000L), periodType67, chronology76);
        boolean boolean78 = dateTimeFieldType26.isSupported(chronology76);
        org.joda.time.DurationField durationField79 = durationFieldType25.getField(chronology76);
        org.joda.time.Period period81 = period16.withFieldAdded(durationFieldType25, 2);
        org.joda.time.Period period82 = period16.toPeriod();
        org.joda.time.Period period84 = period82.multipliedBy(365);
        int int85 = period82.getMonths();
        org.joda.time.Period period87 = period82.plusWeeks(2021);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 144L + "'", long13 == 144L);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(period87);
    }

    @Test
    public void test10051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10051");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.era();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(0L, chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.halfdayOfDay();
        org.joda.time.DurationField durationField14 = chronology9.days();
        long long17 = durationField14.subtract((-18662399880L), (int) (short) -1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-18575999880L) + "'", long17 == (-18575999880L));
    }

    @Test
    public void test10052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10052");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra(7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        org.joda.time.DateTime dateTime17 = dateTime14.withWeekOfWeekyear(3);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        org.joda.time.Duration duration22 = duration20.minus((long) '4');
        org.joda.time.DateTime dateTime24 = dateTime17.withDurationAdded((org.joda.time.ReadableDuration) duration20, 86399);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond(577);
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfSecond();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) 870901920);
        org.joda.time.DateTime dateTime31 = dateTime27.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime33 = dateTime27.minusYears(69);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime33.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(gregorianCalendar34);
    }

    @Test
    public void test10053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10053");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("365");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"365\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10054");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone11);
        boolean boolean15 = interval13.isAfter(100L);
        long long16 = interval13.getEndMillis();
        org.joda.time.Interval interval17 = interval13.toInterval();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Interval interval19 = interval17.withDurationBeforeEnd(readableDuration18);
        boolean boolean20 = interval6.contains((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        boolean boolean31 = interval27.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.TimeOfDay timeOfDay32 = dateTime30.toTimeOfDay();
        org.joda.time.Interval interval33 = interval6.withEnd((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', chronology35);
        org.joda.time.Interval interval37 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod36.copy();
        org.joda.time.Chronology chronology40 = null;
        mutablePeriod36.add(4665600000L, chronology40);
        mutablePeriod36.setDays(34);
        org.joda.time.Period period44 = mutablePeriod36.toPeriod();
        mutablePeriod36.addMillis((-27431057));
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test10055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10055");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((-1L));
        java.lang.String str2 = duration1.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        boolean boolean7 = dateTime5.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property8 = dateTime5.millisOfSecond();
        int int9 = property8.getLeapAmount();
        org.joda.time.DateTime dateTime10 = property8.roundHalfEvenCopy();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.time();
        org.joda.time.Period period12 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime10, periodType11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTimeISO();
        org.joda.time.Instant instant22 = dateTime16.toInstant();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        boolean boolean36 = dateTime34.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration38 = minutes37.toStandardDuration();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        java.util.GregorianCalendar gregorianCalendar43 = dateTime42.toGregorianCalendar();
        int int44 = dateTime42.getHourOfDay();
        org.joda.time.DateTime dateTime46 = dateTime42.withCenturyOfEra(7);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Calendar calendar52 = dateTime50.toCalendar(locale51);
        org.joda.time.DateTime dateTime54 = dateTime50.plusMillis((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime50.toDateTimeISO();
        org.joda.time.Instant instant56 = dateTime50.toInstant();
        org.joda.time.Instant instant57 = instant56.toInstant();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime62 = null;
        boolean boolean63 = dateTimeZone60.isLocalDateTimeGap(localDateTime62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime66 = dateTime64.withHourOfDay(0);
        boolean boolean67 = instant57.isEqual((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Duration duration69 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant71 = instant57.withDurationAdded((org.joda.time.ReadableDuration) duration69, (-1));
        boolean boolean73 = instant71.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((-1L), dateTimeZone76);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Calendar calendar79 = dateTime77.toCalendar(locale78);
        org.joda.time.DateTime dateTime81 = dateTime77.plusMillis((int) '4');
        org.joda.time.DateTime dateTime82 = dateTime77.toDateTimeISO();
        org.joda.time.Instant instant83 = dateTime77.toInstant();
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant71, (org.joda.time.ReadableInstant) dateTime77, periodType84);
        org.joda.time.PeriodType periodType86 = periodType84.withWeeksRemoved();
        org.joda.time.PeriodType periodType87 = periodType86.withYearsRemoved();
        org.joda.time.Period period88 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42, periodType86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int90 = dateTime42.get(dateTimeFieldType89);
        org.joda.time.DateTime dateTime91 = dateTime42.toDateTime();
        int int92 = dateTime42.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT-0.001S" + "'", str2, "PT-0.001S");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(gregorianCalendar43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar79);
        org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertNotNull(dateTime91);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 40 + "'", int92 == 40);
    }

    @Test
    public void test10056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10056");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Period period28 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Period period30 = period28.withWeeks((int) (short) -1);
        org.joda.time.Period period32 = period28.withDays(0);
        org.joda.time.Period period34 = period28.withWeeks(86399);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        java.util.GregorianCalendar gregorianCalendar39 = dateTime38.toGregorianCalendar();
        int int40 = dateTime38.getHourOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.withCenturyOfEra(7);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.Instant instant51 = dateTime50.toInstant();
        org.joda.time.DateTime dateTime53 = dateTime50.withWeekOfWeekyear(3);
        org.joda.time.Days days54 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod55 = days54.toMutablePeriod();
        org.joda.time.Duration duration56 = days54.toStandardDuration();
        org.joda.time.Duration duration58 = duration56.minus((long) '4');
        org.joda.time.DateTime dateTime60 = dateTime53.withDurationAdded((org.joda.time.ReadableDuration) duration56, 86399);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime60);
        boolean boolean62 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.MutableInterval mutableInterval63 = mutableInterval35.copy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(gregorianCalendar39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 7 + "'", int40 == 7);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(mutablePeriod55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(mutableInterval63);
    }

    @Test
    public void test10057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10057");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology19);
        mutablePeriod1.setPeriod((long) (-1), chronology19);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod1.copy();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.weeks();
        org.joda.time.Days days25 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod26 = days25.toMutablePeriod();
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        mutablePeriod28.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval31 = null;
        mutablePeriod28.add(readableInterval31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.eras();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = mutablePeriod26.isSupported(durationFieldType33);
        boolean boolean36 = periodType24.isSupported(durationFieldType33);
        int int37 = mutablePeriod23.get(durationFieldType33);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Days days44 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod45 = days44.toMutablePeriod();
        org.joda.time.Duration duration46 = days44.toStandardDuration();
        org.joda.time.PeriodType periodType47 = days44.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.Chronology chronology56 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.hourOfHalfday();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType47, chronology56);
        org.joda.time.DateTimeField dateTimeField59 = chronology56.weekyearOfCentury();
        mutablePeriod39.setPeriod((long) (short) 0, (-259200000L), chronology56);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.Period period62 = new org.joda.time.Period((java.lang.Object) mutablePeriod23);
        mutablePeriod23.setMillis(171);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test10058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10058");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.millisOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(3598561L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test10059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10059");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        boolean boolean5 = interval2.contains((-1L));
        org.joda.time.Duration duration6 = interval2.toDuration();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone9.isLocalDateTimeGap(localDateTime11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime15 = dateTime13.withHourOfDay(0);
        org.joda.time.DateTime dateTime17 = dateTime13.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = dateTime13.withWeekyear((int) (byte) 0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.plusMillis((int) '#');
        int int33 = dateTime32.getMillisOfSecond();
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTimeISO();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval36 = duration6.toIntervalTo((org.joda.time.ReadableInstant) dateTime21);
        long long37 = duration6.getStandardDays();
        org.joda.time.Days days38 = duration6.toStandardDays();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 34 + "'", int33 == 34);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(days38);
    }

    @Test
    public void test10060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10060");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(8, 4, 59, 34, 773, 25785, 0, 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(0L, chronology12);
        int int14 = period13.getWeeks();
        org.joda.time.PeriodType periodType15 = period13.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.Chronology chronology24 = dateTime19.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.minutes();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        boolean boolean30 = dateTimeZone27.isStandardOffset((long) (byte) 100);
        boolean boolean32 = dateTimeZone27.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone35.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime45.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        boolean boolean55 = dateTime53.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration57 = minutes56.toStandardDuration();
        org.joda.time.Duration duration58 = minutes56.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration58);
        int int60 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology61 = chronology24.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField62 = chronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField63 = chronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology24.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) (short) 0, periodType15, chronology24);
        mutablePeriod8.setPeriod(1645513826140L, chronology24);
        org.joda.time.DurationField durationField67 = chronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField68 = chronology24.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test10061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10061");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis((int) '#');
        java.util.Date date11 = dateTime8.toDate();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours(10);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property31 = dateTime29.property(dateTimeFieldType30);
        int int32 = dateTime23.get(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType30.getRangeDurationType();
        int int34 = dateTime8.get(dateTimeFieldType30);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime8.toGregorianCalendar();
        long long36 = dateTime8.getMillis();
        org.joda.time.DateTime.Property property37 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime39 = dateTime8.plusMonths(731);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(gregorianCalendar35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test10062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10062");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        boolean boolean5 = periodFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTimeISO();
        org.joda.time.Instant instant15 = dateTime9.toInstant();
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        boolean boolean26 = instant16.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant30 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration28, (-1));
        boolean boolean32 = instant30.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology33 = instant30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property40 = dateTime37.millisOfSecond();
        org.joda.time.DateTime dateTime41 = property40.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        int int46 = dateTime45.getHourOfDay();
        boolean boolean47 = property40.equals((java.lang.Object) dateTime45);
        java.util.Locale locale50 = new java.util.Locale("1969-12-31T23:59:59.999Z/2022-02-22T07:08:57.290Z", "1970");
        int int51 = property40.getMaximumTextLength(locale50);
        int int52 = dateTimeField34.getMaximumTextLength(locale50);
        org.joda.time.format.PeriodFormatter periodFormatter53 = periodFormatter2.withLocale(locale50);
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("P6DT69H35S");
        org.joda.time.format.PeriodFormatter periodFormatter56 = periodFormatter2.withLocale(locale55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime60.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        boolean boolean70 = dateTime68.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes71 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime.Property property72 = dateTime68.hourOfDay();
        org.joda.time.Interval interval73 = property72.toInterval();
        boolean boolean75 = interval73.isAfter((long) 403);
        boolean boolean76 = locale55.equals((java.lang.Object) boolean75);
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 23 + "'", int46 == 23);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals(locale50.toString(), "1969-12-31t23:59:59.999z/2022-02-22t07:08:57.290z_1970");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(periodFormatter53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(periodFormatter56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test10063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10063");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology19);
        mutablePeriod1.setPeriod((long) (-1), chronology19);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property24 = dateTime23.year();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = null;
        boolean boolean30 = dateTimeZone27.isLocalDateTimeGap(localDateTime29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay(0);
        int int34 = dateTime33.getDayOfWeek();
        org.joda.time.DateTime dateTime36 = dateTime33.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTimeISO();
        boolean boolean38 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime37);
        java.lang.String str39 = dateTime37.toString();
        org.joda.time.Duration duration42 = new org.joda.time.Duration((long) (short) 10, (long) ' ');
        org.joda.time.Duration duration45 = duration42.withDurationAdded((long) 100, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone50);
        boolean boolean54 = interval52.isAfter(100L);
        long long55 = interval52.getEndMillis();
        org.joda.time.Interval interval56 = interval52.toInterval();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Interval interval58 = interval56.withDurationBeforeEnd(readableDuration57);
        org.joda.time.Period period59 = interval56.toPeriod();
        org.joda.time.Interval interval60 = interval56.toInterval();
        org.joda.time.Days days61 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval56);
        org.joda.time.MutableInterval mutableInterval62 = interval56.toMutableInterval();
        long long63 = interval56.getStartMillis();
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration66 = period65.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((-1L), dateTimeZone69);
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.util.Calendar calendar72 = dateTime70.toCalendar(locale71);
        org.joda.time.DateTime dateTime74 = dateTime70.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration66, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration76 = duration66.toDuration();
        org.joda.time.Duration duration77 = duration76.toDuration();
        org.joda.time.Interval interval78 = interval56.withDurationAfterStart((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Duration duration79 = duration42.plus((org.joda.time.ReadableDuration) duration76);
        java.lang.String str80 = duration79.toString();
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration79);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(dateTimeZone83);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((-1L), dateTimeZone87);
        java.util.Locale locale89 = java.util.Locale.KOREAN;
        java.util.Calendar calendar90 = dateTime88.toCalendar(locale89);
        org.joda.time.DateTime dateTime92 = dateTime88.plusMillis((int) '4');
        org.joda.time.Chronology chronology93 = dateTime88.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.hourOfHalfday();
        org.joda.time.DateTime dateTime95 = dateTime84.withChronology(chronology93);
        org.joda.time.DateTime dateTime96 = dateTime84.withEarlierOffsetAtOverlap();
        boolean boolean97 = dateTime37.equals((java.lang.Object) dateTime96);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T00:17:40.601Z" + "'", str39, "2022-02-22T00:17:40.601Z");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(mutableInterval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "PT0.032S" + "'", str80, "PT0.032S");
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10064");
        org.joda.time.Period period1 = org.joda.time.Period.months(138);
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Days days4 = org.joda.time.Days.MIN_VALUE;
        boolean boolean5 = days2.isLessThan(days4);
        org.joda.time.DurationFieldType durationFieldType6 = days4.getFieldType();
        org.joda.time.Period period7 = period1.withFields((org.joda.time.ReadablePeriod) days4);
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
    }

    @Test
    public void test10065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10065");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        boolean boolean5 = dateTimeZone2.isStandardOffset((long) (byte) 100);
        int int7 = dateTimeZone2.getOffset(518397978L);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(590399051L, dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test10066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10066");
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (-292275054), 41402L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime16 = dateTime11.toLocalDateTime();
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Calendar calendar19 = dateTime11.toCalendar(locale17);
        org.joda.time.Days days20 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod21 = days20.toMutablePeriod();
        org.joda.time.Duration duration22 = days20.toStandardDuration();
        org.joda.time.Days days23 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod24 = days23.toMutablePeriod();
        org.joda.time.Duration duration25 = days23.toStandardDuration();
        boolean boolean26 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTime dateTime27 = dateTime11.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        int int37 = dateTime36.getDayOfWeek();
        org.joda.time.Days days38 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod39 = days38.toMutablePeriod();
        org.joda.time.Duration duration40 = days38.toStandardDuration();
        long long41 = duration40.getStandardHours();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType43 = periodType42.withYearsRemoved();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration40, periodType43);
        org.joda.time.DateTime dateTime46 = dateTime36.withWeekyear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone49.isLocalDateTimeGap(localDateTime51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime55 = dateTime53.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime55.toMutableDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = dateTime36.withZoneRetainFields(dateTimeZone56);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime61 = dateTime27.minusYears(1439);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Calendar calendar67 = dateTime65.toCalendar(locale66);
        org.joda.time.DateTime dateTime69 = dateTime65.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime70 = dateTime65.toLocalDateTime();
        java.util.Locale locale71 = java.util.Locale.CHINA;
        java.util.Locale locale72 = locale71.stripExtensions();
        java.util.Calendar calendar73 = dateTime65.toCalendar(locale71);
        org.joda.time.Days days74 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod75 = days74.toMutablePeriod();
        org.joda.time.Duration duration76 = days74.toStandardDuration();
        org.joda.time.Days days77 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod78 = days77.toMutablePeriod();
        org.joda.time.Duration duration79 = days77.toStandardDuration();
        boolean boolean80 = duration76.isLongerThan((org.joda.time.ReadableDuration) duration79);
        org.joda.time.DateTime dateTime81 = dateTime65.minus((org.joda.time.ReadableDuration) duration76);
        org.joda.time.DateTime.Property property82 = dateTime65.secondOfMinute();
        int int83 = dateTime61.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTimeZone dateTimeZone84 = dateTime65.getZone();
        int int86 = dateTimeZone84.getOffsetFromLocal((long) 99);
        boolean boolean87 = interval7.equals((java.lang.Object) dateTimeZone84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime(881, 0, 412, 43200000, 508, dateTimeZone84);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43200000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 144L + "'", long41 == 144L);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertNotNull(mutablePeriod75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(days77);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test10067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10067");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.Days days4 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval2);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.era();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(0L, chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.halfdayOfDay();
        org.joda.time.Interval interval19 = interval2.withChronology(chronology14);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTimeISO();
        org.joda.time.Instant instant29 = dateTime23.toInstant();
        org.joda.time.Instant instant30 = instant29.toInstant();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTimeISO();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType41 = periodType40.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant29, (org.joda.time.ReadableInstant) dateTime39, periodType40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant44 = instant29.minus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Instant instant45 = instant44.toInstant();
        long long46 = instant44.getMillis();
        boolean boolean47 = interval2.isAfter((org.joda.time.ReadableInstant) instant44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant44.plus(readableDuration48);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(instant49);
    }

    @Test
    public void test10068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10068");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("eras");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.lang.String[] strArray65 = new java.lang.String[] { "P-835D", "PT8H", "P6DT35S", "P23Y86399M-1W5DT291H829M5.291S", "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)", "2022-02-22T00:10:37.834Z", "yearOfCentury", "+00:00:00.052", "ko", "678", "\u4e0b\u5348", "Property[minuteOfHour]", "DateTimeField[yearOfCentury]", "25822364", "minuteOfHour", "CHN", "UnsupportedDurationField[eras]", "7", "2022-02-22T00:10:37.834Z", "678", "1969-12-31t23:59:59.999z/2022-02-22t07:08:57.290z", "549", "853", "ko", "zh-CN", "\u65e5\u672c\u8a9e", "DateTimeField[hourOfHalfday]", "P132D", "days", "618", "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)", "DurationField[centuries]", "1970", "70", "86399", "\u4e2d\u56fd", "Property[yearOfCentury]", "Property[secondOfMinute]", "379", "AD", "und", "DurationField[centuries]", "P6DT35H0.100S", "PT1S", "19", "weekOfWeekyear", "T07:10:23.444", "120", "hi!_HI!_weekOfWeekyear", "678", "25755185", "PT0.001S", "\u4e2d\u6587", "java.io.IOException", "985", "\uc911\uad6d\uc5b4\uc911\uad6d)", "T07:10:23.444", "P6DT35H0.100S", "1970-01-01T00:00:00.012Z/2022-02-22T07:08:51.014Z", "206", "69" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList66);
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.lang.String[] strArray86 = new java.lang.String[] { "eras", "zh-CN", "UnsupportedDurationField[eras]", "yearOfEra", "zho", "", "USA", "weekOfWeekyear", "Property[millisOfSecond]", "UnsupportedDurationField[eras]", "UnsupportedDurationField[eras]" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        java.lang.String str89 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strList87);
        java.util.Locale locale90 = java.util.Locale.getDefault();
        java.util.Locale[] localeArray91 = new java.util.Locale[] { locale90 };
        java.util.ArrayList<java.util.Locale> localeList92 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList92, localeArray91);
        java.util.Locale locale94 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList92);
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.util.Locale>) localeList92);
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList92);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap97 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList98 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap97);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(locale90);
// flaky:         org.junit.Assert.assertEquals(locale90.toString(), "");
        org.junit.Assert.assertNotNull(localeArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNull(locale94);
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNotNull(localeList96);
        org.junit.Assert.assertNotNull(languageRangeList98);
    }

    @Test
    public void test10069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10069");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setDays((int) 'a');
        mutablePeriod1.addSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology9 = null;
        mutablePeriod1.setPeriod(100L, chronology9);
        int int11 = mutablePeriod1.getYears();
        mutablePeriod1.setDays(35);
        int int14 = mutablePeriod1.getWeeks();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test10070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10070");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 27);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test10071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10071");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology12);
        long long15 = mutableInterval14.getEndMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (short) 10, (int) (byte) 100, 59, (int) (short) 100, 3, 59, (int) (short) 100);
        java.lang.Object obj25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval(obj25, chronology26);
        org.joda.time.Interval interval28 = interval27.toInterval();
        mutablePeriod24.add((org.joda.time.ReadableInterval) interval27);
        mutableInterval14.setInterval((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        boolean boolean35 = dateTimeZone32.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType37.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime45.toDateTimeISO();
        org.joda.time.Instant instant51 = dateTime45.toInstant();
        org.joda.time.Instant instant52 = instant51.toInstant();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime57 = null;
        boolean boolean58 = dateTimeZone55.isLocalDateTimeGap(localDateTime57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime61 = dateTime59.withHourOfDay(0);
        boolean boolean62 = instant52.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant66 = instant52.withDurationAdded((org.joda.time.ReadableDuration) duration64, (-1));
        boolean boolean68 = instant66.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((-1L), dateTimeZone71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Calendar calendar74 = dateTime72.toCalendar(locale73);
        org.joda.time.DateTime dateTime76 = dateTime72.plusMillis((int) '4');
        org.joda.time.DateTime dateTime77 = dateTime72.toDateTimeISO();
        org.joda.time.Instant instant78 = dateTime72.toInstant();
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant66, (org.joda.time.ReadableInstant) dateTime72, periodType79);
        org.joda.time.PeriodType periodType81 = periodType79.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((-1L), dateTimeZone84);
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        java.util.Calendar calendar87 = dateTime85.toCalendar(locale86);
        org.joda.time.DateTime dateTime89 = dateTime85.plusMillis((int) '4');
        org.joda.time.Chronology chronology90 = dateTime85.getChronology();
        org.joda.time.Period period91 = new org.joda.time.Period((-259200000L), periodType81, chronology90);
        boolean boolean92 = dateTimeFieldType40.isSupported(chronology90);
        org.joda.time.DurationField durationField93 = durationFieldType39.getField(chronology90);
        org.joda.time.DateTimeField dateTimeField94 = chronology90.yearOfCentury();
        boolean boolean95 = interval27.equals((java.lang.Object) chronology90);
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((long) (short) -1, (long) 59, chronology90);
        org.joda.time.DateTimeField dateTimeField97 = chronology90.dayOfWeek();
        org.joda.time.DateTime dateTime98 = org.joda.time.DateTime.now(chronology90);
        org.joda.time.DateTimeField dateTimeField99 = chronology90.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86399L + "'", long15 == 86399L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar87);
        org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertNotNull(dateTimeField99);
    }

    @Test
    public void test10072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10072");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant24 = instant9.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Instant instant26 = instant9.plus((long) ' ');
        org.joda.time.Instant instant29 = instant9.withDurationAdded(2353L, 27338833);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant29);
    }

    @Test
    public void test10073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10073");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime1 = mutableInterval0.getEnd();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        boolean boolean13 = instant11.isBefore((long) 100);
        org.joda.time.Instant instant15 = instant11.withMillis((-359999892L));
        mutableInterval0.setStart((org.joda.time.ReadableInstant) instant15);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(instant15);
    }

    @Test
    public void test10074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10074");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.Days days4 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval2);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.era();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(0L, chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.halfdayOfDay();
        org.joda.time.Interval interval19 = interval2.withChronology(chronology14);
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        java.util.GregorianCalendar gregorianCalendar25 = dateTime24.toGregorianCalendar();
        org.joda.time.Days days26 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod27 = days26.toMutablePeriod();
        org.joda.time.Duration duration28 = days26.toStandardDuration();
        org.joda.time.Days days29 = days26.negated();
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) days29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.DateTime dateTime33 = dateTime30.plusSeconds(34);
        boolean boolean34 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime30);
        long long35 = dateTime20.getMillis();
        org.joda.time.DateTime.Property property36 = dateTime20.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime20.withSecondOfMinute(25816406);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25816406 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(gregorianCalendar25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514260895L + "'", long35 == 1645514260895L);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test10075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10075");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime3.hourOfDay();
        org.joda.time.DurationField durationField8 = property7.getRangeDurationField();
        org.joda.time.DateTime dateTime9 = property7.withMaximumValue();
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        long long18 = duration17.getStandardHours();
        mutableInterval14.setDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime20 = mutableInterval14.getStart();
        int int21 = property7.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = property7.withMaximumValue();
        org.joda.time.DateTime dateTime24 = dateTime22.plusMillis(1439);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime22.getZone();
        java.util.Locale locale27 = java.util.Locale.PRC;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale27.getDisplayScript(locale28);
        java.util.Set<java.lang.String> strSet30 = locale27.getUnicodeLocaleKeys();
        java.lang.String str31 = dateTimeZone25.getShortName(0L, locale27);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 144L + "'", long18 == 144L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
    }

    @Test
    public void test10076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10076");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1645513821083L, 1645513884989L);
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        org.joda.time.Interval interval6 = interval5.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        boolean boolean8 = mutableInterval2.isBefore((org.joda.time.ReadableInterval) mutableInterval7);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test10077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10077");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 2002);
        org.joda.time.Period period3 = period1.withDays(302);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test10078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10078");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        org.joda.time.DateTime dateTime10 = dateTime6.minusHours((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime6.weekOfWeekyear();
        org.joda.time.DateTime dateTime13 = property11.addToCopy((long) 100);
        boolean boolean14 = dateTime13.isEqualNow();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfDay();
        org.joda.time.Duration duration17 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime21.weekyear();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime21, periodType28);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) (short) 0);
        mutablePeriod31.addMillis(34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone36.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        boolean boolean56 = dateTime54.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = minutes57.toStandardDuration();
        org.joda.time.Duration duration59 = minutes57.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration61 = duration59.toDuration();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Calendar calendar67 = dateTime65.toCalendar(locale66);
        org.joda.time.DateTime dateTime69 = dateTime65.plusMillis((int) '4');
        org.joda.time.DateTime dateTime70 = dateTime65.toDateTimeISO();
        org.joda.time.Instant instant71 = dateTime65.toInstant();
        org.joda.time.Instant instant72 = instant71.toInstant();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((-1L), dateTimeZone75);
        org.joda.time.LocalDateTime localDateTime77 = null;
        boolean boolean78 = dateTimeZone75.isLocalDateTimeGap(localDateTime77);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone75);
        org.joda.time.DateTime dateTime81 = dateTime79.withHourOfDay(0);
        boolean boolean82 = instant72.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Duration duration84 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant86 = instant72.withDurationAdded((org.joda.time.ReadableDuration) duration84, (-1));
        boolean boolean88 = instant86.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology89 = instant86.getChronology();
        mutablePeriod31.setPeriod((org.joda.time.ReadableDuration) duration61, chronology89);
        org.joda.time.DateTimeField dateTimeField91 = chronology89.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = dateTimeField91.getType();
        boolean boolean93 = dateTime21.isSupported(dateTimeFieldType92);
        java.lang.String str94 = dateTimeFieldType92.getName();
        org.joda.time.DateTime.Property property95 = dateTime13.property(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "dayOfMonth" + "'", str94, "dayOfMonth");
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test10079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10079");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2022-02-22T07:12:49.433Z/2022-02-22T07:12:49.433Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    public void test10080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10080");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        long long2 = duration1.getStandardMinutes();
        org.joda.time.Duration duration4 = duration1.withMillis((-82737998L));
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        boolean boolean9 = dateTime7.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property10 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        int int16 = dateTime15.getHourOfDay();
        boolean boolean17 = property10.equals((java.lang.Object) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        java.lang.String str28 = dateTimeField27.getName();
        java.lang.String str30 = dateTimeField27.getAsShortText((long) (short) 10);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = dateTimeField27.getAsText((int) (byte) 100, locale32);
        java.util.Calendar calendar35 = dateTime15.toCalendar(locale32);
        long long36 = dateTime15.getMillis();
        org.joda.time.Period period37 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((long) (short) -1);
        long long40 = duration39.getStandardMinutes();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType44 = periodType43.withYearsRemoved();
        org.joda.time.Days days47 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod48 = days47.toMutablePeriod();
        org.joda.time.Duration duration49 = days47.toStandardDuration();
        org.joda.time.PeriodType periodType50 = days47.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.Chronology chronology59 = dateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.hourOfHalfday();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType50, chronology59);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTimeField dateTimeField63 = chronology59.millisOfDay();
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType43, chronology59);
        org.joda.time.Period period65 = duration39.toPeriod(chronology59);
        org.joda.time.DateTime dateTime66 = dateTime15.toDateTime(chronology59);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.Days days68 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod69 = days68.toMutablePeriod();
        org.joda.time.Days days70 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod71 = days70.toMutablePeriod();
        mutablePeriod71.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval74 = null;
        mutablePeriod71.add(readableInterval74);
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.eras();
        int int77 = mutablePeriod71.get(durationFieldType76);
        boolean boolean78 = mutablePeriod69.isSupported(durationFieldType76);
        mutablePeriod69.addSeconds((int) '#');
        mutablePeriod69.addSeconds((int) (short) 0);
        mutablePeriod69.setYears(7);
        mutablePeriod69.setMonths((-100));
        org.joda.time.MutablePeriod mutablePeriod87 = mutablePeriod69.copy();
        int[] intArray89 = chronology67.get((org.joda.time.ReadablePeriod) mutablePeriod69, (-349199883000L));
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekOfWeekyear" + "'", str28, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(days68);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertNotNull(days70);
        org.junit.Assert.assertNotNull(mutablePeriod71);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mutablePeriod87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, -577, -2, -15, -58, -3, 0]");
    }

    @Test
    public void test10081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10081");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = days4.negated();
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) days7);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusSeconds(34);
        org.joda.time.DateTime.Property property12 = dateTime8.yearOfCentury();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test10082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10082");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Duration duration42 = minutes40.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42);
        int int44 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology45 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.minutes();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        boolean boolean60 = dateTimeZone57.isStandardOffset((long) (byte) 100);
        boolean boolean62 = dateTimeZone57.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone65.isLocalDateTimeGap(localDateTime67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime71 = dateTime69.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-1L), dateTimeZone74);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Calendar calendar77 = dateTime75.toCalendar(locale76);
        org.joda.time.DateTime dateTime79 = dateTime75.plusMillis((int) '4');
        org.joda.time.DateTime dateTime80 = dateTime75.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        boolean boolean85 = dateTime83.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes86 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Duration duration87 = minutes86.toStandardDuration();
        org.joda.time.Duration duration88 = minutes86.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableDuration) duration88);
        int int90 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology91 = chronology54.withZone(dateTimeZone57);
        org.joda.time.Chronology chronology92 = chronology45.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField93 = chronology92.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField94 = chronology92.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField95 = chronology92.era();
        long long98 = dateTimeField95.addWrapField(1645514079319L, 4);
        org.joda.time.DateTimeFieldType dateTimeFieldType99 = dateTimeField95.getType();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(minutes86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1645514079319L + "'", long98 == 1645514079319L);
        org.junit.Assert.assertNotNull(dateTimeFieldType99);
    }

    @Test
    public void test10083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10083");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) dateTime7);
        org.joda.time.DateTime.Property property10 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds(1439);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        java.util.GregorianCalendar gregorianCalendar17 = dateTime16.toGregorianCalendar();
        int int18 = dateTime16.getHourOfDay();
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale20.toLanguageTag();
        java.util.Calendar calendar22 = dateTime16.toCalendar(locale20);
        org.joda.time.DateTime.Property property23 = dateTime16.minuteOfHour();
        org.joda.time.Days days24 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod25 = days24.toMutablePeriod();
        org.joda.time.Duration duration26 = days24.toStandardDuration();
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        org.joda.time.Duration duration29 = days27.toStandardDuration();
        boolean boolean30 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        org.joda.time.PeriodType periodType39 = days36.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.Chronology chronology48 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType39, chronology48);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTimeField dateTimeField52 = chronology48.millisOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((-259200000L), (long) '#', chronology48);
        boolean boolean54 = interval31.isBefore((org.joda.time.ReadableInterval) interval53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType56 = periodType55.withYearsRemoved();
        org.joda.time.Duration duration58 = org.joda.time.Duration.millis((long) (short) -1);
        long long59 = duration58.getStandardMinutes();
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType63 = periodType62.withYearsRemoved();
        org.joda.time.Days days66 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod67 = days66.toMutablePeriod();
        org.joda.time.Duration duration68 = days66.toStandardDuration();
        org.joda.time.PeriodType periodType69 = days66.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((-1L), dateTimeZone72);
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.util.Calendar calendar75 = dateTime73.toCalendar(locale74);
        org.joda.time.DateTime dateTime77 = dateTime73.plusMillis((int) '4');
        org.joda.time.Chronology chronology78 = dateTime73.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfHalfday();
        org.joda.time.Period period80 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType69, chronology78);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology78);
        org.joda.time.DateTimeField dateTimeField82 = chronology78.millisOfDay();
        org.joda.time.Period period83 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType62, chronology78);
        org.joda.time.Period period84 = duration58.toPeriod(chronology78);
        org.joda.time.DateTimeField dateTimeField85 = chronology78.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((java.lang.Object) interval31, periodType56, chronology78);
        org.joda.time.MutableDateTime mutableDateTime87 = dateTime11.toMutableDateTime(chronology78);
        int int88 = dateTime11.getEra();
        org.joda.time.DateTime dateTime90 = dateTime11.minusMinutes(2147483647);
        org.joda.time.DateTime dateTime92 = dateTime90.minusWeeks(459);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(gregorianCalendar17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh-CN" + "'", str21, "zh-CN");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645514261223,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=41,MILLISECOND=223,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar75);
        org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test10084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10084");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTime dateTime6 = property5.withMaximumValue();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test10085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10085");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime3.hourOfDay();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property7.getAsText(locale9);
        org.joda.time.DateTime dateTime12 = property7.addToCopy(6);
        org.joda.time.DateTime dateTime13 = property7.withMaximumValue();
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime18.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.Instant instant34 = dateTime28.toInstant();
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) instant34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone39.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.Instant instant55 = dateTime49.toInstant();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Calendar calendar61 = dateTime59.toCalendar(locale60);
        org.joda.time.DateTime dateTime63 = dateTime59.plusMillis((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime59.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        boolean boolean69 = dateTime67.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes70 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration71 = minutes70.toStandardDuration();
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTime dateTime73 = dateTime43.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime76 = dateTime18.minusWeeks((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType77.getRangeDurationType();
        int int79 = dateTime18.get(dateTimeFieldType77);
        java.lang.String str80 = dateTimeFieldType77.toString();
        boolean boolean81 = dateTime13.isSupported(dateTimeFieldType77);
        java.lang.String str82 = dateTimeFieldType77.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23" + "'", str10, "23");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(minutes70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1969 + "'", int79 == 1969);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "yearOfEra" + "'", str80, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "yearOfEra" + "'", str82, "yearOfEra");
    }

    @Test
    public void test10086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10086");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime3.hourOfDay();
        org.joda.time.DurationField durationField8 = property7.getRangeDurationField();
        int int10 = durationField8.getValue((long) 207);
        long long13 = durationField8.subtract((long) 192, (-84376L));
        int int16 = durationField8.getValue(5037078694L, 25995571L);
        int int19 = durationField8.getDifference(601001856000000L, (-169200000L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 7290086400192L + "'", long13 == 7290086400192L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 58 + "'", int16 == 58);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6956041 + "'", int19 == 6956041);
    }

    @Test
    public void test10087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10087");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(18828, (-93368857), 0, 216);
        mutablePeriod4.addDays((-978014834));
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone13);
        boolean boolean17 = interval15.isAfter(100L);
        long long18 = interval15.getEndMillis();
        org.joda.time.Interval interval19 = interval15.toInterval();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval19.withDurationBeforeEnd(readableDuration20);
        org.joda.time.Period period22 = interval19.toPeriod();
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.PeriodType periodType24 = seconds23.getPeriodType();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 508, 86399L, periodType25);
        org.joda.time.PeriodType periodType27 = periodType25.withMinutesRemoved();
        org.joda.time.PeriodType periodType28 = periodType27.withMonthsRemoved();
        org.joda.time.PeriodType periodType29 = periodType27.withYearsRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        boolean boolean32 = periodType27.isSupported(durationFieldType31);
        int int33 = mutablePeriod4.indexOf(durationFieldType31);
        mutablePeriod4.add((long) 768);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
    }

    @Test
    public void test10088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10088");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        boolean boolean16 = dateTimeZone13.isStandardOffset((long) (byte) 100);
        boolean boolean18 = dateTimeZone13.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone21.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        boolean boolean41 = dateTime39.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration43 = minutes42.toStandardDuration();
        org.joda.time.Duration duration44 = minutes42.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration44);
        int int46 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology47 = chronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField48 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = chronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField51 = chronology10.seconds();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) (byte) 100, (long) (-100), chronology10);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime57 = null;
        boolean boolean58 = dateTimeZone55.isLocalDateTimeGap(localDateTime57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime61 = dateTime59.plusHours((int) 'a');
        org.joda.time.DateTime dateTime63 = dateTime59.plusHours(10);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        boolean boolean68 = dateTimeZone65.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone65);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property71 = dateTime69.property(dateTimeFieldType70);
        int int72 = dateTime63.get(dateTimeFieldType70);
        org.joda.time.DateTime dateTime73 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime75 = dateTime63.plusYears((int) (short) 10);
        org.joda.time.Duration duration76 = mutablePeriod52.toDurationTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutablePeriod mutablePeriod77 = mutablePeriod52.toMutablePeriod();
        mutablePeriod52.setMillis(998);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(mutablePeriod77);
    }

    @Test
    public void test10089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10089");
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime11.toDateTimeISO();
        org.joda.time.Instant instant17 = dateTime11.toInstant();
        org.joda.time.Instant instant18 = instant17.toInstant();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone21.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(0);
        boolean boolean28 = instant18.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant32 = instant18.withDurationAdded((org.joda.time.ReadableDuration) duration30, (-1));
        boolean boolean34 = instant32.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        org.joda.time.DateTime dateTime42 = dateTime38.plusMillis((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime38.toDateTimeISO();
        org.joda.time.Instant instant44 = dateTime38.toInstant();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime38, periodType45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.Chronology chronology56 = dateTime51.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.minutes();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        boolean boolean62 = dateTimeZone59.isStandardOffset((long) (byte) 100);
        boolean boolean64 = dateTimeZone59.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime69 = null;
        boolean boolean70 = dateTimeZone67.isLocalDateTimeGap(localDateTime69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime73 = dateTime71.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((-1L), dateTimeZone76);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Calendar calendar79 = dateTime77.toCalendar(locale78);
        org.joda.time.DateTime dateTime81 = dateTime77.plusMillis((int) '4');
        org.joda.time.DateTime dateTime82 = dateTime77.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone84);
        boolean boolean87 = dateTime85.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes88 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Duration duration89 = minutes88.toStandardDuration();
        org.joda.time.Duration duration90 = minutes88.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableDuration) duration90);
        int int92 = dateTimeZone59.getOffset((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Chronology chronology93 = chronology56.withZone(dateTimeZone59);
        boolean boolean94 = durationFieldType47.isSupported(chronology56);
        boolean boolean95 = periodType45.isSupported(durationFieldType47);
        int int96 = periodType45.size();
        org.joda.time.PeriodType periodType97 = periodType45.withMinutesRemoved();
        org.joda.time.PeriodType periodType98 = periodType97.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period99 = new org.joda.time.Period(748, 548, 45, (int) (short) 0, 26100916, 31, (-684), 55, periodType97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar79);
        org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(periodType97);
        org.junit.Assert.assertNotNull(periodType98);
    }

    @Test
    public void test10090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10090");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType6.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.Instant instant20 = dateTime14.toInstant();
        org.joda.time.Instant instant21 = instant20.toInstant();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        boolean boolean31 = instant21.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant35 = instant21.withDurationAdded((org.joda.time.ReadableDuration) duration33, (-1));
        boolean boolean37 = instant35.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime41.toDateTimeISO();
        org.joda.time.Instant instant47 = dateTime41.toInstant();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant35, (org.joda.time.ReadableInstant) dateTime41, periodType48);
        org.joda.time.PeriodType periodType50 = periodType48.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.Chronology chronology59 = dateTime54.getChronology();
        org.joda.time.Period period60 = new org.joda.time.Period((-259200000L), periodType50, chronology59);
        boolean boolean61 = dateTimeFieldType9.isSupported(chronology59);
        org.joda.time.DurationField durationField62 = durationFieldType8.getField(chronology59);
        org.joda.time.DateTimeField dateTimeField63 = chronology59.yearOfCentury();
        long long66 = dateTimeField63.addWrapField((long) 1922, 20);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((-1L), dateTimeZone69);
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.util.Calendar calendar72 = dateTime70.toCalendar(locale71);
        int int73 = dateTime70.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone74 = dateTime70.getZone();
        org.joda.time.TimeOfDay timeOfDay75 = dateTime70.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        org.joda.time.LocalTime localTime79 = dateTime78.toLocalTime();
        org.joda.time.Days days80 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) timeOfDay75, (org.joda.time.ReadablePartial) localTime79);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((-1L), dateTimeZone85);
        org.joda.time.Interval interval87 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone85);
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime90 = org.joda.time.DateTime.now(dateTimeZone89);
        boolean boolean91 = interval87.isAfter((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.TimeOfDay timeOfDay92 = dateTime90.toTimeOfDay();
        org.joda.time.Days days93 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localTime79, (org.joda.time.ReadablePartial) timeOfDay92);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean95 = localTime79.isSupported(dateTimeFieldType94);
        int int96 = dateTimeField63.getMinimumValue((org.joda.time.ReadablePartial) localTime79);
        org.joda.time.Chronology chronology97 = localTime79.getChronology();
        org.joda.time.DateTimeField dateTimeField98 = chronology97.centuryOfEra();
        org.joda.time.Chronology chronology99 = chronology97.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 631152001922L + "'", long66 == 631152001922L);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 59 + "'", int73 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(days80);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(timeOfDay92);
        org.junit.Assert.assertNotNull(days93);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(chronology97);
        org.junit.Assert.assertNotNull(dateTimeField98);
        org.junit.Assert.assertNotNull(chronology99);
    }

    @Test
    public void test10091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10091");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime3.hourOfDay();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property7.getAsText(locale9);
        org.joda.time.DateTime dateTime12 = property7.addToCopy(6);
        org.joda.time.DateTime dateTime13 = property7.withMaximumValue();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(0L, chronology15);
        int int17 = period16.getWeeks();
        org.joda.time.PeriodType periodType18 = period16.getPeriodType();
        org.joda.time.Duration duration19 = period16.toStandardDuration();
        int int20 = period16.getSeconds();
        org.joda.time.DateTime dateTime21 = dateTime13.minus((org.joda.time.ReadablePeriod) period16);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = period16.getValue(581);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 581");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23" + "'", str10, "23");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test10092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10092");
        org.joda.time.Period period1 = org.joda.time.Period.hours(34);
        org.joda.time.Hours hours2 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period4 = period1.withMinutes(27423260);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test10093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10093");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.DateTime dateTime2 = mutableInterval0.getEnd();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(dateTime2);
    }

    @Test
    public void test10094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10094");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology10);
        long long13 = mutableInterval12.getEndMillis();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(0L, chronology16);
        int int18 = period17.getWeeks();
        org.joda.time.PeriodType periodType19 = period17.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isStandardOffset((long) (byte) 100);
        boolean boolean36 = dateTimeZone31.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone39.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = dateTime43.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        boolean boolean59 = dateTime57.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes60 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration61 = minutes60.toStandardDuration();
        org.joda.time.Duration duration62 = minutes60.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration62);
        int int64 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology65 = chronology28.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField66 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField67 = chronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology28.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) (short) 0, periodType19, chronology28);
        mutablePeriod69.setYears(86399999);
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.Period period74 = new org.joda.time.Period((long) (byte) 10);
        int int75 = period74.getSeconds();
        org.joda.time.Period period77 = period74.minusDays((int) (short) 1);
        org.joda.time.Duration duration78 = period77.toStandardDuration();
        org.joda.time.Period period80 = period77.multipliedBy(35);
        mutablePeriod69.setPeriod((org.joda.time.ReadablePeriod) period77);
        mutablePeriod69.addHours(360);
        mutablePeriod69.addMillis(5);
        mutablePeriod69.setHours(907);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 86399L + "'", long13 == 86399L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test10095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10095");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.toLanguageTag();
        java.lang.String str3 = locale1.getDisplayLanguage();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.lang.String str8 = locale7.getDisplayCountry();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.String str10 = locale5.getLanguage();
        java.lang.String str11 = locale1.getDisplayVariant(locale5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-CN" + "'", str2, "zh-CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese" + "'", str3, "Chinese");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "China" + "'", str8, "China");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test10096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10096");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        boolean boolean11 = instant9.isBefore((long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean25 = dateTime23.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        org.joda.time.Duration duration28 = minutes26.toStandardDuration();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration32 = duration28.withDurationAdded(3L, 108);
        org.joda.time.Duration duration34 = duration32.withMillis((long) 147);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        org.joda.time.DateTime dateTime42 = dateTime38.plusMillis((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime38.toDateTimeISO();
        org.joda.time.Instant instant44 = dateTime38.toInstant();
        org.joda.time.Instant instant45 = instant44.toInstant();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime50 = null;
        boolean boolean51 = dateTimeZone48.isLocalDateTimeGap(localDateTime50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime54 = dateTime52.withHourOfDay(0);
        boolean boolean55 = instant45.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Instant instant58 = instant45.withDurationAdded((long) 7, (int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime59 = instant58.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime60 = instant58.toDateTimeISO();
        org.joda.time.Instant instant62 = instant58.minus((long) (-27425230));
        org.joda.time.Instant instant64 = instant58.withMillis((-25200000L));
        org.joda.time.Interval interval65 = duration32.toIntervalTo((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Period period67 = org.joda.time.Period.millis(2108160);
        org.joda.time.Interval interval68 = interval65.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Interval interval70 = interval68.withEndMillis(1644466215828L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval70);
    }

    @Test
    public void test10097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10097");
        org.joda.time.Days days1 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod2 = days1.toMutablePeriod();
        mutablePeriod2.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval5 = null;
        mutablePeriod2.add(readableInterval5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.eras();
        int int8 = mutablePeriod2.get(durationFieldType7);
        int int9 = mutablePeriod2.getMinutes();
        mutablePeriod2.setPeriod(1645513719942L, (long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone17);
        boolean boolean21 = interval19.isAfter(100L);
        long long22 = interval19.getEndMillis();
        org.joda.time.Interval interval23 = interval19.toInterval();
        boolean boolean25 = interval19.isBefore((long) (-1));
        boolean boolean26 = interval19.isBeforeNow();
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology28 = interval19.getChronology();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 36000, chronology28);
        org.joda.time.DurationField durationField30 = chronology28.halfdays();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test10098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10098");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        org.joda.time.DateTime dateTime10 = dateTime6.minusHours((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime6.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime6.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTimeISO();
        org.joda.time.Instant instant22 = dateTime16.toInstant();
        org.joda.time.Instant instant23 = instant22.toInstant();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone26.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        boolean boolean33 = instant23.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant37 = instant23.withDurationAdded((org.joda.time.ReadableDuration) duration35, (-1));
        org.joda.time.MutableDateTime mutableDateTime38 = instant23.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        java.util.GregorianCalendar gregorianCalendar42 = dateTime41.toGregorianCalendar();
        int int43 = dateTime41.getHourOfDay();
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Locale locale45 = locale44.stripExtensions();
        java.lang.String str46 = locale45.toLanguageTag();
        java.util.Calendar calendar47 = dateTime41.toCalendar(locale45);
        org.joda.time.DateTime.Property property48 = dateTime41.minuteOfHour();
        boolean boolean49 = property48.isLeap();
        org.joda.time.DateTime dateTime50 = property48.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean52 = dateTime50.isSupported(dateTimeFieldType51);
        org.joda.time.DateTime.Property property53 = dateTime50.centuryOfEra();
        org.joda.time.Days days54 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod55 = days54.toMutablePeriod();
        mutablePeriod55.setSeconds((int) (byte) 0);
        mutablePeriod55.setDays((int) 'a');
        mutablePeriod55.setMinutes(829);
        mutablePeriod55.addHours((int) (byte) 1);
        org.joda.time.DateTime dateTime65 = dateTime50.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod55, (int) (byte) 100);
        boolean boolean66 = instant23.isBefore((org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime69 = dateTime6.withYear(52);
        org.joda.time.DateTime dateTime71 = dateTime6.plusYears((-57));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(gregorianCalendar42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh-CN" + "'", str46, "zh-CN");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645514261703,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=41,MILLISECOND=703,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(mutablePeriod55);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test10099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10099");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-23), 44, (-525600), 618, 48, 136, (-2));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 618 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10100");
        org.joda.time.Period period1 = new org.joda.time.Period(0L);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, periodType6);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(32820001L, periodType6);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 347, (long) 9, periodType6);
        org.joda.time.Duration duration11 = org.joda.time.Duration.millis((long) (short) -1);
        long long12 = duration11.getStandardMinutes();
        org.joda.time.Duration duration14 = duration11.withMillis((-82737998L));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean19 = dateTime17.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property20 = dateTime17.millisOfSecond();
        org.joda.time.DateTime dateTime21 = property20.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        int int26 = dateTime25.getHourOfDay();
        boolean boolean27 = property20.equals((java.lang.Object) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.Chronology chronology36 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        java.lang.String str38 = dateTimeField37.getName();
        java.lang.String str40 = dateTimeField37.getAsShortText((long) (short) 10);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Locale locale43 = locale42.stripExtensions();
        java.lang.String str44 = dateTimeField37.getAsText((int) (byte) 100, locale42);
        java.util.Calendar calendar45 = dateTime25.toCalendar(locale42);
        long long46 = dateTime25.getMillis();
        org.joda.time.Period period47 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration49 = org.joda.time.Duration.millis((long) (short) -1);
        long long50 = duration49.getStandardMinutes();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType54 = periodType53.withYearsRemoved();
        org.joda.time.Days days57 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod58 = days57.toMutablePeriod();
        org.joda.time.Duration duration59 = days57.toStandardDuration();
        org.joda.time.PeriodType periodType60 = days57.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Calendar calendar66 = dateTime64.toCalendar(locale65);
        org.joda.time.DateTime dateTime68 = dateTime64.plusMillis((int) '4');
        org.joda.time.Chronology chronology69 = dateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.hourOfHalfday();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType60, chronology69);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(chronology69);
        org.joda.time.DateTimeField dateTimeField73 = chronology69.millisOfDay();
        org.joda.time.Period period74 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType53, chronology69);
        org.joda.time.Period period75 = duration49.toPeriod(chronology69);
        org.joda.time.DateTime dateTime76 = dateTime25.toDateTime(chronology69);
        org.joda.time.Period period77 = new org.joda.time.Period((java.lang.Object) period1, periodType6, chronology69);
        long long81 = chronology69.add(0L, 0L, 135);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 23 + "'", int26 == 23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "weekOfWeekyear" + "'", str38, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "100" + "'", str44, "100");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar66);
        org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
    }

    @Test
    public void test10101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10101");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime3.hourOfDay();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        int int9 = property7.getMaximumValueOverall();
        org.joda.time.DateTime dateTime11 = property7.addToCopy((long) 618);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        int int13 = property12.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
    }

    @Test
    public void test10102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10102");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = dateTime2.toLocalTime();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType6 = periodType5.withMillisRemoved();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (-1), periodType6, chronology7);
        org.joda.time.PeriodType periodType9 = mutablePeriod8.getPeriodType();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) (byte) 1);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.DateTime.Property property14 = dateTime2.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        mutablePeriod20.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval23 = null;
        mutablePeriod20.add(readableInterval23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.eras();
        int int26 = mutablePeriod20.get(durationFieldType25);
        boolean boolean27 = mutablePeriod18.isSupported(durationFieldType25);
        mutablePeriod18.addSeconds((int) '#');
        mutablePeriod18.addSeconds((int) (short) 0);
        java.lang.String str32 = mutablePeriod18.toString();
        org.joda.time.Days days33 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod34 = days33.toMutablePeriod();
        org.joda.time.Duration duration35 = days33.toStandardDuration();
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        boolean boolean39 = duration35.isLongerThan((org.joda.time.ReadableDuration) duration38);
        mutablePeriod18.setPeriod((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.addMillis(980);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "P6DT35S" + "'", str32, "P6DT35S");
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test10103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10103");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime2.minusSeconds((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        boolean boolean17 = interval13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime16.withZoneRetainFields(dateTimeZone20);
        int int26 = dateTimeZone20.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime27 = dateTime6.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime.Property property28 = dateTime6.dayOfWeek();
        org.joda.time.DateTime.Property property29 = dateTime6.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime33.plusMonths((int) (byte) 1);
        int int40 = property29.compareTo((org.joda.time.ReadableInstant) dateTime39);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = locale41.getCountry();
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayVariant(locale44);
        java.lang.String str48 = property29.getAsShortText(locale41);
        org.joda.time.DateTime dateTime49 = property29.withMinimumValue();
        org.joda.time.DateTime dateTime50 = property29.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime50, readablePeriod51);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "CN" + "'", str43, "CN");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "8" + "'", str48, "8");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test10104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10104");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '4');
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.Duration duration3 = new org.joda.time.Duration((java.lang.Object) duration2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration6 = period5.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration16 = duration6.toDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType24 = periodType23.withMinutesRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, periodType24);
        org.joda.time.Period period26 = duration17.toPeriodTo((org.joda.time.ReadableInstant) dateTime20, periodType24);
        org.joda.time.Days days27 = duration17.toStandardDays();
        int int28 = duration2.compareTo((org.joda.time.ReadableDuration) duration17);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test10105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10105");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-292275054), 870901920, 297, 59, 577, 773, (int) (byte) 1, 784);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "P-292275054Y870901920M297W59DT577H773M1.784S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "P-292275054Y870901920M297W59DT577H773M1.784S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "P-292275054Y870901920M297W59DT577H773M1.784S");
    }

    @Test
    public void test10106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.millisOfDay();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        long long12 = durationField10.getValueAsLong((long) 100);
        int int14 = durationField10.getValue((long) 292278993);
        int int17 = durationField10.getDifference((long) 'x', 1645513717718L);
        org.joda.time.DurationFieldType durationFieldType18 = durationField10.getType();
        long long21 = durationField10.add(144L, 845);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime25.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant41 = dateTime35.toInstant();
        org.joda.time.Instant instant42 = instant41.toInstant();
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) instant41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis((int) '4');
        org.joda.time.Chronology chronology52 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.weekOfWeekyear();
        org.joda.time.DateTime dateTime54 = instant41.toDateTime(chronology52);
        org.joda.time.DurationField durationField55 = chronology52.days();
        int int56 = durationField10.compareTo(durationField55);
        boolean boolean57 = durationField10.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-19045) + "'", int17 == (-19045));
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 73008000144L + "'", long21 == 73008000144L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test10107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10107");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime6.getDayOfWeek();
        int int10 = dateTime6.getDayOfWeek();
        boolean boolean12 = dateTime6.isEqual((long) 503);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) 1439, 0L);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone20);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval24 = interval22.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        boolean boolean38 = dateTime36.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration40 = minutes39.toStandardDuration();
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (byte) -1, (int) 'u');
        mutableInterval24.setDurationAfterStart((org.joda.time.ReadableDuration) duration43);
        boolean boolean45 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration43);
        long long46 = duration43.getMillis();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        org.joda.time.Duration duration49 = period48.toStandardDuration();
        boolean boolean50 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration53 = duration43.withDurationAdded(5037215028L, 146);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((java.lang.Object) 146);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645514219883L + "'", long46 == 1645514219883L);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(duration53);
    }

    @Test
    public void test10108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10108");
        java.lang.Object obj0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.Days days5 = days2.negated();
        org.joda.time.Days days6 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod7 = days6.toMutablePeriod();
        org.joda.time.Duration duration8 = days6.toStandardDuration();
        org.joda.time.Days days9 = days2.plus(days6);
        boolean boolean10 = days1.isGreaterThan(days6);
        org.joda.time.Days days12 = days1.multipliedBy((-3));
        org.joda.time.DurationFieldType durationFieldType13 = days1.getFieldType();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        boolean boolean26 = interval22.isAfter((org.joda.time.ReadableInstant) dateTime25);
        long long27 = interval22.toDurationMillis();
        org.joda.time.Duration duration28 = interval22.toDuration();
        org.joda.time.Days days29 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod30 = days29.toMutablePeriod();
        mutablePeriod30.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval33 = null;
        mutablePeriod30.add(readableInterval33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.eras();
        int int36 = mutablePeriod30.get(durationFieldType35);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.Chronology chronology48 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology48);
        mutablePeriod30.setPeriod((long) (-1), chronology48);
        org.joda.time.Days days52 = org.joda.time.Days.ZERO;
        org.joda.time.Days days53 = days52.negated();
        int[] intArray56 = chronology48.get((org.joda.time.ReadablePeriod) days52, 1L, 1645513717718L);
        org.joda.time.Period period57 = duration28.toPeriod(chronology48);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) (short) 100, periodType15, chronology48);
        org.joda.time.DateTimeField dateTimeField59 = chronology48.dayOfWeek();
        java.lang.String str60 = chronology48.toString();
        org.joda.time.DateTimeField dateTimeField61 = chronology48.millisOfSecond();
        boolean boolean62 = durationFieldType13.isSupported(chronology48);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(obj0, chronology48);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[19045]");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[UTC]" + "'", str60, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test10109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10109");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Instant instant23 = instant10.withDurationAdded((long) 7, (int) (byte) 10);
        org.joda.time.Instant instant25 = instant10.withMillis((long) 99);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        java.lang.String str30 = dateTimeZone28.toString();
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) instant25, dateTimeZone28);
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.Period period35 = org.joda.time.Period.millis((int) 'x');
        org.joda.time.Period period37 = period35.withMillis(25819387);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period35);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test10110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10110");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusDays((int) (short) 1);
        org.joda.time.Period period6 = period1.plusWeeks(848);
        org.joda.time.Period period8 = period1.withHours(1969);
        org.joda.time.Period period10 = period8.minusSeconds(0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test10111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10111");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra(7);
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration9 = period8.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration19 = duration9.toDuration();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval22 = interval20.withStartMillis((long) 408);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration19);
    }

    @Test
    public void test10112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10112");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean12 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        long long13 = interval8.toDurationMillis();
        org.joda.time.Duration duration14 = interval8.toDuration();
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        mutablePeriod16.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval19 = null;
        mutablePeriod16.add(readableInterval19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.eras();
        int int22 = mutablePeriod16.get(durationFieldType21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology34);
        mutablePeriod16.setPeriod((long) (-1), chronology34);
        org.joda.time.Days days38 = org.joda.time.Days.ZERO;
        org.joda.time.Days days39 = days38.negated();
        int[] intArray42 = chronology34.get((org.joda.time.ReadablePeriod) days38, 1L, 1645513717718L);
        org.joda.time.Period period43 = duration14.toPeriod(chronology34);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) (short) 100, periodType1, chronology34);
        org.joda.time.DateTimeField dateTimeField45 = chronology34.dayOfWeek();
        org.joda.time.DurationField durationField46 = chronology34.eras();
        org.joda.time.DateTimeField dateTimeField47 = chronology34.millisOfDay();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[19045]");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test10113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10113");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime3.hourOfDay();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property7.getAsText(locale9);
        org.joda.time.DateTime dateTime12 = property7.addToCopy(6);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds(4);
        org.joda.time.DateTime.Property property15 = dateTime12.year();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(56485L);
        long long18 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime22.toDateTimeISO();
        org.joda.time.Instant instant28 = dateTime22.toInstant();
        org.joda.time.Instant instant29 = instant28.toInstant();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime38 = dateTime36.withHourOfDay(0);
        boolean boolean39 = instant29.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant43 = instant29.withDurationAdded((org.joda.time.ReadableDuration) duration41, (-1));
        boolean boolean45 = instant43.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology46 = instant43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime17.toMutableDateTime(chronology46);
        org.joda.time.Chronology chronology50 = mutableDateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.months();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23" + "'", str10, "23");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test10114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10114");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("1970-01-01T00:00:00.012Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1970-01-01T00:00:00.012Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10115");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        int int3 = period2.getWeeks();
        int int4 = period2.getWeeks();
        org.joda.time.Period period5 = period2.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(23, 86399, (int) (byte) -1, 5, 3, 829, 5, 291);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        int int19 = dateTime17.getHourOfDay();
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Calendar calendar23 = dateTime17.toCalendar(locale21);
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        org.joda.time.Days days25 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod26 = days25.toMutablePeriod();
        org.joda.time.Duration duration27 = days25.toStandardDuration();
        org.joda.time.Days days28 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod29 = days28.toMutablePeriod();
        org.joda.time.Duration duration30 = days28.toStandardDuration();
        boolean boolean31 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Days days37 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod38 = days37.toMutablePeriod();
        org.joda.time.Duration duration39 = days37.toStandardDuration();
        org.joda.time.PeriodType periodType40 = days37.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Calendar calendar46 = dateTime44.toCalendar(locale45);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((int) '4');
        org.joda.time.Chronology chronology49 = dateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfHalfday();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType40, chronology49);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTimeField dateTimeField53 = chronology49.millisOfDay();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-259200000L), (long) '#', chronology49);
        boolean boolean55 = interval32.isBefore((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Days days56 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval32);
        boolean boolean58 = interval32.isAfter((long) 1970);
        mutablePeriod14.add((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Period period60 = period5.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        int int61 = mutablePeriod14.getMillis();
        int int62 = mutablePeriod14.getYears();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-CN" + "'", str22, "zh-CN");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645514262221,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=42,MILLISECOND=221,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 291 + "'", int61 == 291);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 23 + "'", int62 == 23);
    }

    @Test
    public void test10116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10116");
        java.util.Locale locale2 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str3 = locale2.toLanguageTag();
        java.util.Set<java.lang.Character> charSet4 = locale2.getExtensionKeys();
        java.util.Locale.setDefault(locale2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale2.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for ZH-CN");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "hi!_ZH-CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
        org.junit.Assert.assertNotNull(charSet4);
    }

    @Test
    public void test10117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10117");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        boolean boolean12 = interval6.isBefore((long) (-1));
        boolean boolean13 = interval6.isBeforeNow();
        boolean boolean14 = interval6.isAfterNow();
        org.joda.time.Seconds seconds15 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DurationFieldType durationFieldType16 = seconds15.getFieldType();
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds18 = seconds17.negated();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone23);
        boolean boolean27 = interval25.isAfter(100L);
        long long28 = interval25.getEndMillis();
        org.joda.time.Interval interval29 = interval25.toInterval();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval29.withDurationBeforeEnd(readableDuration30);
        org.joda.time.Period period32 = interval29.toPeriod();
        org.joda.time.Seconds seconds33 = period32.toStandardSeconds();
        org.joda.time.PeriodType periodType34 = seconds33.getPeriodType();
        org.joda.time.Seconds seconds35 = seconds17.minus(seconds33);
        int int36 = seconds35.getSeconds();
        org.joda.time.Seconds seconds38 = seconds35.plus(10);
        org.joda.time.PeriodType periodType39 = seconds35.getPeriodType();
        org.joda.time.Seconds seconds41 = seconds35.multipliedBy(9);
        boolean boolean42 = seconds15.isLessThan(seconds41);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test10118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10118");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Duration duration42 = minutes40.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42);
        int int44 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology45 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.minutes();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        boolean boolean60 = dateTimeZone57.isStandardOffset((long) (byte) 100);
        boolean boolean62 = dateTimeZone57.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone65.isLocalDateTimeGap(localDateTime67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime71 = dateTime69.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-1L), dateTimeZone74);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Calendar calendar77 = dateTime75.toCalendar(locale76);
        org.joda.time.DateTime dateTime79 = dateTime75.plusMillis((int) '4');
        org.joda.time.DateTime dateTime80 = dateTime75.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        boolean boolean85 = dateTime83.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes86 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Duration duration87 = minutes86.toStandardDuration();
        org.joda.time.Duration duration88 = minutes86.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableDuration) duration88);
        int int90 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology91 = chronology54.withZone(dateTimeZone57);
        org.joda.time.Chronology chronology92 = chronology45.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField93 = chronology45.hourOfHalfday();
        org.joda.time.DateTime dateTime94 = new org.joda.time.DateTime(chronology45);
        org.joda.time.DurationField durationField95 = chronology45.seconds();
        org.joda.time.DurationField durationField96 = chronology45.minutes();
        java.lang.String str97 = durationField96.getName();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(minutes86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "minutes" + "'", str97, "minutes");
    }

    @Test
    public void test10119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10119");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime13.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        boolean boolean23 = dateTime21.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration25 = minutes24.toStandardDuration();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        int int31 = dateTime29.getHourOfDay();
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra(7);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.Instant instant43 = dateTime37.toInstant();
        org.joda.time.Instant instant44 = instant43.toInstant();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone47.isLocalDateTimeGap(localDateTime49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime53 = dateTime51.withHourOfDay(0);
        boolean boolean54 = instant44.isEqual((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant58 = instant44.withDurationAdded((org.joda.time.ReadableDuration) duration56, (-1));
        boolean boolean60 = instant58.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Calendar calendar66 = dateTime64.toCalendar(locale65);
        org.joda.time.DateTime dateTime68 = dateTime64.plusMillis((int) '4');
        org.joda.time.DateTime dateTime69 = dateTime64.toDateTimeISO();
        org.joda.time.Instant instant70 = dateTime64.toInstant();
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant58, (org.joda.time.ReadableInstant) dateTime64, periodType71);
        org.joda.time.PeriodType periodType73 = periodType71.withWeeksRemoved();
        org.joda.time.PeriodType periodType74 = periodType73.withYearsRemoved();
        org.joda.time.Period period75 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29, periodType73);
        int int76 = period75.getDays();
        org.joda.time.Period period77 = period75.normalizedStandard();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar66);
        org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(period77);
    }

    @Test
    public void test10120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10120");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds1 = seconds0.negated();
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds4 = seconds2.dividedBy(23);
        org.joda.time.Seconds seconds5 = seconds0.plus(seconds4);
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds7 = seconds6.negated();
        org.joda.time.Seconds seconds8 = seconds4.minus(seconds6);
        org.joda.time.DurationFieldType durationFieldType9 = seconds6.getFieldType();
        org.joda.time.Period period10 = seconds6.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType12 = seconds6.getFieldType(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test10121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10121");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.standardDaysIn(readablePeriod0);
        org.joda.time.PeriodType periodType2 = days1.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod3 = days1.toMutablePeriod();
        mutablePeriod3.addDays((int) (byte) 0);
        org.joda.time.Days days6 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod7 = days6.toMutablePeriod();
        org.joda.time.Duration duration8 = days6.toStandardDuration();
        org.joda.time.Duration duration10 = org.joda.time.Duration.millis((long) (short) -1);
        long long11 = duration10.getMillis();
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        long long15 = duration14.getStandardHours();
        boolean boolean16 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration14);
        int int17 = duration8.compareTo((org.joda.time.ReadableDuration) duration10);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration19 = duration10.toDuration();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths(100);
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration29 = period28.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration39 = duration29.toDuration();
        org.joda.time.Duration duration40 = duration39.toDuration();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        java.util.GregorianCalendar gregorianCalendar44 = dateTime43.toGregorianCalendar();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType47 = periodType46.withMinutesRemoved();
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, periodType47);
        org.joda.time.Period period49 = duration40.toPeriodTo((org.joda.time.ReadableInstant) dateTime43, periodType47);
        org.joda.time.Period period50 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25, periodType47);
        long long51 = duration19.getStandardMinutes();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime56 = null;
        boolean boolean57 = dateTimeZone54.isLocalDateTimeGap(localDateTime56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone54);
        org.joda.time.DateTime dateTime60 = dateTime58.withHourOfDay(0);
        int int61 = dateTime60.getDayOfWeek();
        org.joda.time.DateTime dateTime63 = dateTime60.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime65 = dateTime60.withWeekyear((int) '4');
        org.joda.time.DateTime dateTime66 = dateTime60.toDateTime();
        org.joda.time.Period period67 = duration19.toPeriodTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Instant instant69 = new org.joda.time.Instant(457087L);
        org.joda.time.DateTime dateTime70 = instant69.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period67, (org.joda.time.ReadableInstant) instant69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 144L + "'", long15 == 144L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(gregorianCalendar44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test10122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10122");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone4.isLocalDateTimeGap(localDateTime6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime16 = dateTime11.toLocalDateTime();
        boolean boolean17 = dateTimeZone4.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = dateTime1.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.era();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(0L, chronology28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.Instant instant40 = dateTime39.toInstant();
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekOfWeekyear(3);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone47);
        org.joda.time.MutableInterval mutableInterval50 = interval49.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval51 = interval49.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Calendar calendar57 = dateTime55.toCalendar(locale56);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMillis((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime55.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        boolean boolean65 = dateTime63.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes66 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration67 = minutes66.toStandardDuration();
        org.joda.time.Duration duration70 = duration67.withDurationAdded((long) (byte) -1, (int) 'u');
        mutableInterval51.setDurationAfterStart((org.joda.time.ReadableDuration) duration70);
        boolean boolean72 = dateTime39.equals((java.lang.Object) duration70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int74 = dateTime39.get(dateTimeFieldType73);
        boolean boolean75 = dateTime31.isSupported(dateTimeFieldType73);
        org.joda.time.DateTime.Property property76 = dateTime18.property(dateTimeFieldType73);
        org.joda.time.DurationField durationField77 = property76.getDurationField();
        java.lang.String str78 = property76.getName();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "yearOfEra" + "'", str78, "yearOfEra");
    }

    @Test
    public void test10123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10123");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime5.plusMonths((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.PeriodType periodType17 = days14.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfHalfday();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType17, chronology26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.millisOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) dateTime11, chronology26);
        org.joda.time.Period period32 = new org.joda.time.Period(0L, (long) (byte) 100, chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.hourOfDay();
        java.lang.String str34 = chronology26.toString();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[UTC]" + "'", str34, "ISOChronology[UTC]");
    }

    @Test
    public void test10124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10124");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        long long10 = dateTimeZone4.convertLocalToUTC((long) (short) 1, false, 259200051L);
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime27 = dateTime22.toLocalDateTime();
        boolean boolean28 = dateTimeZone15.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTime dateTime29 = dateTime12.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        boolean boolean36 = localDateTime27.equals((java.lang.Object) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime40.plusMonths((int) (byte) 1);
        org.joda.time.Days days49 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod50 = days49.toMutablePeriod();
        org.joda.time.Duration duration51 = days49.toStandardDuration();
        org.joda.time.PeriodType periodType52 = days49.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.Chronology chronology61 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.hourOfHalfday();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType52, chronology61);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTimeField dateTimeField65 = chronology61.millisOfDay();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((java.lang.Object) dateTime46, chronology61);
        org.joda.time.DateTimeField dateTimeField67 = chronology61.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology61.hourOfDay();
        long long71 = dateTimeField68.add((long) 35, 6L);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = dateTimeField68.getType();
        int int73 = localDateTime27.get(dateTimeFieldType72);
        boolean boolean74 = dateTimeZone4.isLocalDateTimeGap(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 21600035L + "'", long71 == 21600035L);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 23 + "'", int73 == 23);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test10125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10125");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTimeISO();
        org.joda.time.Instant instant30 = dateTime24.toInstant();
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        boolean boolean41 = instant31.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant45 = instant31.withDurationAdded((org.joda.time.ReadableDuration) duration43, (-1));
        boolean boolean47 = instant45.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTimeISO();
        org.joda.time.Instant instant57 = dateTime51.toInstant();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant45, (org.joda.time.ReadableInstant) dateTime51, periodType58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadablePeriod) period59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
    }

    @Test
    public void test10126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10126");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        boolean boolean14 = interval10.isAfter((long) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        boolean boolean28 = dateTime26.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isStandardOffset((long) (byte) 100);
        boolean boolean36 = dateTimeZone31.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone39.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = dateTime43.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        boolean boolean59 = dateTime57.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes60 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration61 = minutes60.toStandardDuration();
        org.joda.time.Duration duration62 = minutes60.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration62);
        int int64 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime65 = dateTime18.withZoneRetainFields(dateTimeZone31);
        boolean boolean66 = interval10.isBefore((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime68 = dateTime65.plusHours(86399);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((-1L), dateTimeZone71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Calendar calendar74 = dateTime72.toCalendar(locale73);
        org.joda.time.DateTime dateTime76 = dateTime72.plusMillis((int) '4');
        org.joda.time.DateTime dateTime77 = dateTime72.toDateTimeISO();
        org.joda.time.Instant instant78 = dateTime72.toInstant();
        org.joda.time.Instant instant79 = instant78.toInstant();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((-1L), dateTimeZone82);
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.util.Calendar calendar85 = dateTime83.toCalendar(locale84);
        org.joda.time.DateTime dateTime87 = dateTime83.plusMillis((int) '4');
        org.joda.time.DateTime dateTime88 = dateTime83.toDateTimeISO();
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType90 = periodType89.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant78, (org.joda.time.ReadableInstant) dateTime88, periodType89);
        org.joda.time.Instant instant94 = instant78.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant96 = instant94.plus((long) (byte) -1);
        org.joda.time.Duration duration97 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) instant94);
        int int98 = dateTime68.getWeekOfWeekyear();
        int int99 = dateTime68.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(instant94);
        org.junit.Assert.assertNotNull(instant96);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 45 + "'", int98 == 45);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 5 + "'", int99 == 5);
    }

    @Test
    public void test10127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10127");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration15 = minutes14.toStandardDuration();
        org.joda.time.Minutes minutes17 = minutes14.minus((int) (byte) 100);
        org.joda.time.Minutes minutes19 = minutes14.minus(1970);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType21 = minutes20.getFieldType();
        org.joda.time.Minutes minutes23 = minutes20.plus(1);
        boolean boolean24 = minutes19.isGreaterThan(minutes20);
        org.joda.time.Minutes minutes26 = minutes19.multipliedBy(70);
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        org.joda.time.Minutes minutes29 = minutes26.minus(432);
        java.lang.String str30 = minutes29.toString();
        org.joda.time.Duration duration31 = minutes29.toStandardDuration();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(minutes29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT1919628258M" + "'", str30, "PT1919628258M");
        org.junit.Assert.assertNotNull(duration31);
    }

    @Test
    public void test10128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10128");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        boolean boolean9 = mutableInterval7.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray20 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList21);
        boolean boolean24 = mutableInterval7.equals((java.lang.Object) strList21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = null;
        boolean boolean30 = dateTimeZone27.isLocalDateTimeGap(localDateTime29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay(0);
        int int34 = dateTime33.getDayOfWeek();
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        org.joda.time.Duration duration37 = days35.toStandardDuration();
        long long38 = duration37.getStandardHours();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType40 = periodType39.withYearsRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration37, periodType40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int43 = dateTime33.get(dateTimeFieldType42);
        mutableInterval7.setEnd((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime46 = dateTime33.plusMinutes(132);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime48 = dateTime46.withCenturyOfEra((-268));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -268 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 144L + "'", long38 == 144L);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test10129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10129");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.addMonths((int) (byte) -1);
        mutablePeriod1.addYears(1970);
        int int8 = mutablePeriod1.getSeconds();
        mutablePeriod1.addDays((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean21 = interval17.isAfter((org.joda.time.ReadableInstant) dateTime20);
        long long22 = interval17.toDurationMillis();
        org.joda.time.Days days23 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime27.toDateTimeISO();
        org.joda.time.Instant instant33 = dateTime27.toInstant();
        org.joda.time.Instant instant34 = instant33.toInstant();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = null;
        boolean boolean40 = dateTimeZone37.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime43 = dateTime41.withHourOfDay(0);
        boolean boolean44 = instant34.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant48 = instant34.withDurationAdded((org.joda.time.ReadableDuration) duration46, (-1));
        java.util.Date date49 = instant34.toDate();
        boolean boolean50 = interval17.isAfter((org.joda.time.ReadableInstant) instant34);
        org.joda.time.MutableDateTime mutableDateTime51 = instant34.toMutableDateTimeISO();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod1, (org.joda.time.ReadableInstant) instant34);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(6, 0);
        int int57 = dateTimeZone55.getOffsetFromLocal(0L);
        org.joda.time.DateTime dateTime58 = instant34.toDateTime(dateTimeZone55);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 21600000 + "'", int57 == 21600000);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test10130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10130");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone4.isLocalDateTimeGap(localDateTime6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime16 = dateTime11.toLocalDateTime();
        boolean boolean17 = dateTimeZone4.isLocalDateTimeGap(localDateTime16);
        long long20 = dateTimeZone4.adjustOffset(2L, true);
        boolean boolean21 = dateTimeZone4.isFixed();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (-73060), 0L, dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test10131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10131");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.Days days1 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod2 = days1.toMutablePeriod();
        org.joda.time.Duration duration3 = days1.toStandardDuration();
        org.joda.time.Days days4 = days1.negated();
        org.joda.time.Days days5 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod6 = days5.toMutablePeriod();
        org.joda.time.Duration duration7 = days5.toStandardDuration();
        org.joda.time.Days days8 = days5.negated();
        boolean boolean9 = days4.isLessThan(days5);
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        int int12 = days10.getDays();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        boolean boolean15 = days10.equals((java.lang.Object) locale14);
        boolean boolean16 = days5.isLessThan(days10);
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Days days19 = org.joda.time.Days.MIN_VALUE;
        boolean boolean20 = days17.isLessThan(days19);
        boolean boolean21 = days10.isLessThan(days19);
        org.joda.time.Days days22 = days0.minus(days10);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_ZH-CN");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(days22);
    }

    @Test
    public void test10132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10132");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.Period period3 = mutableInterval0.toPeriod(periodType1);
        org.joda.time.DateTime dateTime4 = mutableInterval0.getEnd();
        mutableInterval0.setDurationAfterStart(518400000L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType17 = periodType16.withMinutesRemoved();
        org.joda.time.Period period18 = interval14.toPeriod(periodType17);
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        mutablePeriod20.addWeeks((int) (short) -1);
        mutablePeriod20.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        org.joda.time.Duration duration37 = days35.toStandardDuration();
        org.joda.time.PeriodType periodType38 = days35.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMillis((int) '4');
        org.joda.time.Chronology chronology47 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.hourOfHalfday();
        org.joda.time.Period period49 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType38, chronology47);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology47);
        mutablePeriod20.setPeriod(1L, chronology47);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.Period period53 = new org.joda.time.Period((long) 'x', periodType17, chronology47);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int57 = dateTimeZone55.getOffsetFromLocal((long) '4');
        org.joda.time.Chronology chronology58 = chronology47.withZone(dateTimeZone55);
        mutableInterval0.setChronology(chronology47);
        org.joda.time.DurationField durationField60 = chronology47.eras();
        org.joda.time.DateTimeField dateTimeField61 = chronology47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField62 = chronology47.monthOfYear();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test10133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10133");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder0.setRegion("zh");
        java.util.Locale.Builder builder6 = builder4.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.removeUnicodeLocaleAttribute("JAVA.IO.IOEXCEPTION: PT0.002S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: JAVA.IO.IOEXCEPTION: PT0.002S [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test10134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10134");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        org.joda.time.PeriodType periodType15 = days12.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.Chronology chronology24 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType15, chronology24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.millisOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime9, chronology24);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime41 = dateTime36.toLocalDateTime();
        boolean boolean42 = dateTimeZone32.isLocalDateTimeGap(localDateTime41);
        int int43 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime52 = dateTime47.toLocalDateTime();
        int int53 = localDateTime52.size();
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType57 = periodType56.withYearsRemoved();
        org.joda.time.Days days60 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod61 = days60.toMutablePeriod();
        org.joda.time.Duration duration62 = days60.toStandardDuration();
        org.joda.time.PeriodType periodType63 = days60.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((-1L), dateTimeZone66);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Calendar calendar69 = dateTime67.toCalendar(locale68);
        org.joda.time.DateTime dateTime71 = dateTime67.plusMillis((int) '4');
        org.joda.time.Chronology chronology72 = dateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.hourOfHalfday();
        org.joda.time.Period period74 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType63, chronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(chronology72);
        org.joda.time.DateTimeField dateTimeField76 = chronology72.millisOfDay();
        org.joda.time.Period period77 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType56, chronology72);
        org.joda.time.DateTimeField dateTimeField78 = chronology72.dayOfYear();
        org.joda.time.format.PeriodPrinter periodPrinter80 = null;
        org.joda.time.format.PeriodParser periodParser81 = null;
        org.joda.time.format.PeriodFormatter periodFormatter82 = new org.joda.time.format.PeriodFormatter(periodPrinter80, periodParser81);
        org.joda.time.PeriodType periodType83 = periodFormatter82.getParseType();
        org.joda.time.PeriodType periodType84 = periodFormatter82.getParseType();
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter86 = periodFormatter82.withLocale(locale85);
        java.lang.String str87 = dateTimeField78.getAsText(86399, locale85);
        boolean boolean88 = localDateTime52.equals((java.lang.Object) dateTimeField78);
        java.util.Locale locale90 = java.util.Locale.UK;
        java.lang.String str91 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime52, 9, locale90);
        java.lang.String str93 = dateTimeField30.getAsShortText((-85374145L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNull(periodType83);
        org.junit.Assert.assertNull(periodType84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "86399" + "'", str87, "86399");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "9" + "'", str91, "9");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0" + "'", str93, "0");
    }

    @Test
    public void test10135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10135");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) dateTime7);
        org.joda.time.DateTime.Property property10 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds(1439);
        int int14 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology23.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.weekyearOfCentury();
        org.joda.time.DateTime dateTime28 = dateTime11.toDateTime(chronology23);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime32.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime41.toDateTimeISO();
        org.joda.time.Instant instant47 = dateTime41.toInstant();
        org.joda.time.Instant instant48 = instant47.toInstant();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone51.isLocalDateTimeGap(localDateTime53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime57 = dateTime55.withHourOfDay(0);
        boolean boolean58 = instant48.isEqual((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant62 = instant48.withDurationAdded((org.joda.time.ReadableDuration) duration60, (-1));
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Calendar calendar68 = dateTime66.toCalendar(locale67);
        org.joda.time.DateTime dateTime70 = dateTime66.plusMillis((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime66.toDateTimeISO();
        org.joda.time.DateTime dateTime73 = dateTime71.plusMillis((int) '#');
        int int74 = instant62.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Days days75 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod76 = days75.toMutablePeriod();
        org.joda.time.Duration duration77 = days75.toStandardDuration();
        org.joda.time.Days days78 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod79 = days78.toMutablePeriod();
        org.joda.time.Duration duration80 = days78.toStandardDuration();
        boolean boolean81 = duration77.isLongerThan((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Instant instant83 = instant62.withDurationAdded((org.joda.time.ReadableDuration) duration80, 10);
        org.joda.time.DateTime dateTime84 = dateTime37.plus((org.joda.time.ReadableDuration) duration80);
        java.lang.String str85 = dateTime84.toString();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Period period88 = new org.joda.time.Period(0L, chronology87);
        int int89 = period88.getWeeks();
        int int90 = period88.getMillis();
        org.joda.time.PeriodType periodType91 = period88.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime84, periodType91);
        org.joda.time.MutableDateTime mutableDateTime93 = dateTime11.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(days75);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(days78);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1970-01-06T23:59:59.999Z" + "'", str85, "1970-01-06T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(mutableDateTime93);
    }

    @Test
    public void test10136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10136");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        boolean boolean9 = mutableInterval7.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray20 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList21);
        boolean boolean24 = mutableInterval7.equals((java.lang.Object) strList21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        boolean boolean38 = dateTime36.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration40 = minutes39.toStandardDuration();
        org.joda.time.Minutes minutes42 = minutes39.minus((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        boolean boolean56 = dateTime54.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = minutes57.toStandardDuration();
        org.joda.time.Minutes minutes60 = minutes57.minus((int) (byte) 100);
        boolean boolean61 = minutes42.isLessThan(minutes60);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        int int66 = dateTime65.getHourOfDay();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) minutes42, (org.joda.time.ReadableInstant) dateTime65);
        mutableInterval7.setStart((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime.Property property69 = dateTime65.dayOfWeek();
        org.joda.time.DateTime.Property property70 = dateTime65.monthOfYear();
        int int71 = property70.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 23 + "'", int66 == 23);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test10137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10137");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 86399);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        boolean boolean18 = dateTimeZone15.isStandardOffset((long) (byte) 100);
        boolean boolean20 = dateTimeZone15.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        boolean boolean43 = dateTime41.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes44 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = minutes44.toStandardDuration();
        org.joda.time.Duration duration46 = minutes44.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration46);
        int int48 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology49 = chronology12.withZone(dateTimeZone15);
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10);
        int int52 = period51.getSeconds();
        org.joda.time.Period period54 = period51.minusHours(100);
        int int55 = period54.getDays();
        int[] intArray58 = chronology12.get((org.joda.time.ReadablePeriod) period54, (-1L), (long) 'a');
        org.joda.time.DateTimeField dateTimeField59 = chronology12.minuteOfHour();
        org.joda.time.DurationField durationField60 = chronology12.centuries();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 108, 172800000L, chronology12);
        int int62 = period61.getSeconds();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period65 = period61.withDays(717);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 98]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 59 + "'", int62 == 59);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test10138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10138");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone4.isLocalDateTimeGap(localDateTime6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime10 = dateTime8.withHourOfDay(0);
        int int11 = dateTime10.getDayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTimeISO();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime10);
        int int16 = period15.getHours();
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds18 = seconds17.negated();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone23);
        boolean boolean27 = interval25.isAfter(100L);
        long long28 = interval25.getEndMillis();
        org.joda.time.Interval interval29 = interval25.toInterval();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval29.withDurationBeforeEnd(readableDuration30);
        org.joda.time.Period period32 = interval29.toPeriod();
        org.joda.time.Seconds seconds33 = period32.toStandardSeconds();
        org.joda.time.PeriodType periodType34 = seconds33.getPeriodType();
        org.joda.time.Seconds seconds35 = seconds17.minus(seconds33);
        int int36 = seconds35.getSeconds();
        org.joda.time.Seconds seconds38 = seconds35.plus(10);
        org.joda.time.Seconds seconds39 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds40 = seconds39.negated();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone45);
        boolean boolean49 = interval47.isAfter(100L);
        long long50 = interval47.getEndMillis();
        org.joda.time.Interval interval51 = interval47.toInterval();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Interval interval53 = interval51.withDurationBeforeEnd(readableDuration52);
        org.joda.time.Period period54 = interval51.toPeriod();
        org.joda.time.Seconds seconds55 = period54.toStandardSeconds();
        org.joda.time.PeriodType periodType56 = seconds55.getPeriodType();
        org.joda.time.Seconds seconds57 = seconds39.minus(seconds55);
        int int58 = seconds57.getSeconds();
        org.joda.time.PeriodType periodType59 = seconds57.getPeriodType();
        org.joda.time.Seconds seconds60 = seconds35.plus(seconds57);
        org.joda.time.Period period61 = period15.withFields((org.joda.time.ReadablePeriod) seconds60);
        org.joda.time.Duration duration62 = period61.toStandardDuration();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(seconds55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(seconds57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(seconds60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(duration62);
    }

    @Test
    public void test10139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10139");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        boolean boolean14 = interval10.isAfter((long) 10);
        org.joda.time.Chronology chronology15 = interval10.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DurationField durationField17 = chronology15.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test10140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10140");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        org.joda.time.PeriodType periodType15 = days12.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.Chronology chronology24 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType15, chronology24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.millisOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime9, chronology24);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime41 = dateTime36.toLocalDateTime();
        boolean boolean42 = dateTimeZone32.isLocalDateTimeGap(localDateTime41);
        int int43 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime52 = dateTime47.toLocalDateTime();
        int int53 = localDateTime52.size();
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType57 = periodType56.withYearsRemoved();
        org.joda.time.Days days60 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod61 = days60.toMutablePeriod();
        org.joda.time.Duration duration62 = days60.toStandardDuration();
        org.joda.time.PeriodType periodType63 = days60.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((-1L), dateTimeZone66);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Calendar calendar69 = dateTime67.toCalendar(locale68);
        org.joda.time.DateTime dateTime71 = dateTime67.plusMillis((int) '4');
        org.joda.time.Chronology chronology72 = dateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.hourOfHalfday();
        org.joda.time.Period period74 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType63, chronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(chronology72);
        org.joda.time.DateTimeField dateTimeField76 = chronology72.millisOfDay();
        org.joda.time.Period period77 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType56, chronology72);
        org.joda.time.DateTimeField dateTimeField78 = chronology72.dayOfYear();
        org.joda.time.format.PeriodPrinter periodPrinter80 = null;
        org.joda.time.format.PeriodParser periodParser81 = null;
        org.joda.time.format.PeriodFormatter periodFormatter82 = new org.joda.time.format.PeriodFormatter(periodPrinter80, periodParser81);
        org.joda.time.PeriodType periodType83 = periodFormatter82.getParseType();
        org.joda.time.PeriodType periodType84 = periodFormatter82.getParseType();
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter86 = periodFormatter82.withLocale(locale85);
        java.lang.String str87 = dateTimeField78.getAsText(86399, locale85);
        boolean boolean88 = localDateTime52.equals((java.lang.Object) dateTimeField78);
        java.util.Locale locale90 = java.util.Locale.UK;
        java.lang.String str91 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime52, 9, locale90);
        int int93 = dateTimeField30.get(1855L);
        long long96 = dateTimeField30.addWrapField(36000000L, (-850284));
        long long99 = dateTimeField30.add((long) 500, 491);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNull(periodType83);
        org.junit.Assert.assertNull(periodType84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "86399" + "'", str87, "86399");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "9" + "'", str91, "9");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 36000000L + "'", long96 == 36000000L);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 1767600500L + "'", long99 == 1767600500L);
    }

    @Test
    public void test10141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10141");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Duration duration4 = duration2.minus((long) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone7.isLocalDateTimeGap(localDateTime9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(0);
        int int14 = dateTime13.getDayOfWeek();
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        long long18 = duration17.getStandardHours();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType20 = periodType19.withYearsRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration17, periodType20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTimeISO();
        boolean boolean31 = dateTime25.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime25.toString(dateTimeFormatter32);
        org.joda.time.Period period34 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration35 = duration2.minus((org.joda.time.ReadableDuration) duration17);
        long long36 = duration2.getStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        boolean boolean41 = dateTime39.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property42 = dateTime39.millisOfSecond();
        org.joda.time.DateTime dateTime43 = property42.getDateTime();
        org.joda.time.DateTime dateTime45 = dateTime43.plusSeconds(10);
        org.joda.time.DateTime dateTime47 = dateTime43.minusMinutes((int) (byte) -1);
        org.joda.time.DateTime.Property property48 = dateTime47.hourOfDay();
        org.joda.time.DateTime dateTime50 = dateTime47.plusMillis(12);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime54.toDateTimeISO();
        org.joda.time.DateTime.Property property60 = dateTime54.weekyear();
        org.joda.time.Duration duration62 = org.joda.time.Duration.millis((long) (short) -1);
        long long63 = duration62.getMillis();
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType65 = periodType64.withMinutesRemoved();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration62, periodType64);
        org.joda.time.DateMidnight dateMidnight67 = dateTime54.toDateMidnight();
        int int68 = dateTime54.getYearOfEra();
        int int69 = dateTime50.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime75 = dateTime50.withTime(359, 806, 848, 741);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 359 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 144L + "'", long18 == 144L);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str33, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 518400L + "'", long36 == 518400L);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1969 + "'", int68 == 1969);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test10142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10142");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Period period3 = period1.withWeeks((int) (short) -1);
        org.joda.time.Period period5 = period1.withDays(0);
        org.joda.time.Period period7 = period1.withWeeks(86399);
        org.joda.time.Minutes minutes8 = period7.toStandardMinutes();
        org.joda.time.Minutes minutes10 = minutes8.dividedBy(263);
        org.joda.time.Minutes minutes12 = minutes8.dividedBy(333);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
    }

    @Test
    public void test10143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10143");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval(obj9, chronology10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        long long17 = duration16.getStandardHours();
        mutableInterval13.setDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime dateTime19 = mutableInterval13.getStart();
        org.joda.time.DateTime dateTime21 = dateTime19.plus((long) 86399999);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone26);
        boolean boolean30 = interval28.isAfter(100L);
        long long31 = interval28.getEndMillis();
        org.joda.time.Interval interval32 = interval28.toInterval();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 59);
        boolean boolean35 = interval28.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime39.toDateTimeISO();
        org.joda.time.DateTime dateTime46 = dateTime44.plusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) dateTime44, dateTimeZone48);
        org.joda.time.DateTime dateTime50 = dateTime34.toDateTime(dateTimeZone48);
        int int52 = dateTimeZone48.getStandardOffset((long) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime21.withZone(dateTimeZone48);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(631152001922L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes((long) 0);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = dateTime63.toCalendar(locale64);
        org.joda.time.Days days68 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod69 = days68.toMutablePeriod();
        org.joda.time.Duration duration70 = days68.toStandardDuration();
        org.joda.time.PeriodType periodType71 = days68.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-1L), dateTimeZone74);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Calendar calendar77 = dateTime75.toCalendar(locale76);
        org.joda.time.DateTime dateTime79 = dateTime75.plusMillis((int) '4');
        org.joda.time.Chronology chronology80 = dateTime75.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.hourOfHalfday();
        org.joda.time.Period period82 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType71, chronology80);
        org.joda.time.Period period83 = duration59.toPeriodTo((org.joda.time.ReadableInstant) dateTime63, periodType71);
        org.joda.time.PeriodType periodType84 = periodType71.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) 3, (long) 12, periodType71);
        java.lang.String str86 = periodType71.getName();
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration55, periodType71);
        mutableInterval8.setDurationAfterStart((org.joda.time.ReadableDuration) duration55);
        java.lang.String str89 = mutableInterval8.toString();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 144L + "'", long17 == 144L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days68);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Days" + "'", str86, "Days");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1969-12-31T23:59:59.999Z/21970-05-31T00:32:01.999Z" + "'", str89, "1969-12-31T23:59:59.999Z/21970-05-31T00:32:01.999Z");
    }

    @Test
    public void test10144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10144");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfHalfday();
        org.joda.time.DateTime dateTime13 = dateTime2.withChronology(chronology11);
        org.joda.time.DateTime dateTime15 = dateTime2.minusHours(87);
        boolean boolean17 = dateTime15.isAfter(247541L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test10145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10145");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Period period3 = period1.withDays((int) '#');
        org.joda.time.Period period5 = period3.withMinutes(0);
        org.joda.time.Period period7 = period5.multipliedBy(864);
        org.joda.time.Period period9 = period5.plusMonths(86399);
        org.joda.time.Period period11 = period5.withWeeks(27338833);
        org.joda.time.Period period13 = period11.withMinutes(332);
        org.joda.time.Period period15 = period13.plusDays(503);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test10146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10146");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.setPeriod((long) 34);
        int int4 = mutablePeriod1.getMinutes();
        int int5 = mutablePeriod1.getMonths();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test10147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10147");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.Instant instant18 = dateTime12.toInstant();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        boolean boolean32 = dateTime30.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration34 = minutes33.toStandardDuration();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime6.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime40.toDateTimeISO();
        org.joda.time.Instant instant46 = dateTime40.toInstant();
        org.joda.time.Instant instant47 = instant46.toInstant();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTimeISO();
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType58 = periodType57.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant46, (org.joda.time.ReadableInstant) dateTime56, periodType57);
        org.joda.time.Instant instant62 = instant46.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Interval interval63 = duration34.toIntervalTo((org.joda.time.ReadableInstant) instant46);
        long long64 = duration34.getMillis();
        long long65 = duration34.getStandardSeconds();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(interval63);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645514220000L + "'", long64 == 1645514220000L);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645514220L + "'", long65 == 1645514220L);
    }

    @Test
    public void test10148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10148");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        org.joda.time.DateTime dateTime10 = dateTime6.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime12 = dateTime6.withWeekyear((int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMillis(5);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        int int22 = dateTime19.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime19.getZone();
        org.joda.time.DateTime dateTime25 = dateTime19.withWeekyear(69);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property27 = dateTime19.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test10149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10149");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 2, 2L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        org.joda.time.DateTime dateTime13 = dateTime10.withWeekOfWeekyear(3);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone18);
        org.joda.time.MutableInterval mutableInterval21 = interval20.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval22 = interval20.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        boolean boolean36 = dateTime34.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration38 = minutes37.toStandardDuration();
        org.joda.time.Duration duration41 = duration38.withDurationAdded((long) (byte) -1, (int) 'u');
        mutableInterval22.setDurationAfterStart((org.joda.time.ReadableDuration) duration41);
        boolean boolean43 = dateTime10.equals((java.lang.Object) duration41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int45 = dateTime10.get(dateTimeFieldType44);
        org.joda.time.Duration duration46 = mutablePeriod2.toDurationFrom((org.joda.time.ReadableInstant) dateTime10);
        mutablePeriod2.add(333, 773, (int) 'a', 248, 147, 348, (int) 'x', 53);
        mutablePeriod2.addWeeks(953);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(duration46);
    }

    @Test
    public void test10150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10150");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        org.joda.time.Period period4 = period2.plusMillis(100);
        org.joda.time.Period period5 = period2.toPeriod();
        org.joda.time.Period period6 = period2.normalizedStandard();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime10.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant26 = dateTime20.toInstant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.Chronology chronology37 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekOfWeekyear();
        long long40 = dateTimeField38.roundHalfEven(1L);
        int int41 = dateTime10.get(dateTimeField38);
        org.joda.time.DateMidnight dateMidnight42 = dateTime10.toDateMidnight();
        org.joda.time.DateTime dateTime44 = dateTime10.plusSeconds((int) (short) 100);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period2, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-259200000L) + "'", long40 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval46);
    }

    @Test
    public void test10151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10151");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime15 = dateTime10.toLocalDateTime();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.util.Calendar calendar18 = dateTime10.toCalendar(locale16);
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        org.joda.time.Duration duration21 = days19.toStandardDuration();
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        boolean boolean25 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime26 = dateTime10.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Days days29 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod30 = days29.toMutablePeriod();
        org.joda.time.Duration duration31 = days29.toStandardDuration();
        org.joda.time.PeriodType periodType32 = days29.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfHalfday();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType32, chronology41);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.millisOfDay();
        org.joda.time.Period period46 = duration21.toPeriod(chronology41);
        org.joda.time.Period period47 = new org.joda.time.Period((long) '4', (long) 11, chronology41);
        org.joda.time.DateTimeField dateTimeField48 = chronology41.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(870901920, 38090, 806, 971, 347, chronology41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 971 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test10152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10152");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = days0.negated();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = days4.negated();
        boolean boolean8 = days3.isLessThan(days4);
        org.joda.time.Days days10 = days3.multipliedBy(2);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Duration duration15 = duration13.withMillis((long) (short) -1);
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime32 = dateTime27.toLocalDateTime();
        boolean boolean33 = dateTimeZone20.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = dateTime17.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        boolean boolean41 = localDateTime32.equals((java.lang.Object) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.withMillisOfDay(348);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Days days45 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period44);
        boolean boolean46 = days3.isGreaterThan(days45);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType50 = periodType49.withMinutesRemoved();
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, periodType50);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(periodType50);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.Chronology chronology65 = dateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology65);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((-1L), 59L, chronology65);
        org.joda.time.Period period69 = new org.joda.time.Period((long) 747, periodType50, chronology65);
        org.joda.time.Days days70 = period69.toStandardDays();
        boolean boolean71 = days45.isLessThan(days70);
        org.joda.time.Days days72 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod73 = days72.toMutablePeriod();
        org.joda.time.Days days74 = org.joda.time.Days.MIN_VALUE;
        boolean boolean75 = days72.isLessThan(days74);
        org.joda.time.Days days76 = days72.negated();
        org.joda.time.Days days78 = days72.dividedBy(999);
        boolean boolean79 = days70.isGreaterThan(days78);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(days70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(days72);
        org.junit.Assert.assertNotNull(mutablePeriod73);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertNotNull(days78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test10153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10153");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration29 = period28.toStandardDuration();
        org.joda.time.Instant instant30 = instant24.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTimeISO();
        org.joda.time.Instant instant40 = dateTime34.toInstant();
        org.joda.time.Instant instant41 = instant40.toInstant();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone44.isLocalDateTimeGap(localDateTime46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime50 = dateTime48.withHourOfDay(0);
        boolean boolean51 = instant41.isEqual((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant55 = instant41.withDurationAdded((org.joda.time.ReadableDuration) duration53, (-1));
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Calendar calendar61 = dateTime59.toCalendar(locale60);
        org.joda.time.DateTime dateTime63 = dateTime59.plusMillis((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime59.toDateTimeISO();
        org.joda.time.DateTime dateTime66 = dateTime64.plusMillis((int) '#');
        int int67 = instant55.compareTo((org.joda.time.ReadableInstant) dateTime64);
        int int68 = dateTime64.getDayOfWeek();
        org.joda.time.Minutes minutes69 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) instant30, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime71 = dateTime64.minusHours((-7));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test10154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10154");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.000Z");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone4.isLocalDateTimeGap(localDateTime6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime10 = dateTime8.withHourOfDay(0);
        int int11 = dateTime10.getDayOfWeek();
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        long long15 = duration14.getStandardHours();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType17 = periodType16.withYearsRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration14, periodType17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime21 = dateTime10.plus(1646032265601L);
        int int22 = dateTime21.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 144L + "'", long15 == 144L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 111 + "'", int22 == 111);
    }

    @Test
    public void test10155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10155");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.MIN_VALUE;
        boolean boolean3 = days0.isLessThan(days2);
        org.joda.time.Days days4 = days0.negated();
        org.joda.time.Days days6 = days0.dividedBy(999);
        org.joda.time.MutablePeriod mutablePeriod7 = days6.toMutablePeriod();
        org.joda.time.Days days8 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod9 = days8.toMutablePeriod();
        org.joda.time.Duration duration10 = days8.toStandardDuration();
        org.joda.time.Days days11 = days8.negated();
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        org.joda.time.Days days15 = days8.plus(days12);
        int int16 = days15.getDays();
        boolean boolean17 = days6.isLessThan(days15);
        org.joda.time.Days days19 = days6.multipliedBy((-73060));
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(days19);
    }

    @Test
    public void test10156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10156");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        mutablePeriod1.setYears(7);
        mutablePeriod1.setMillis(69);
        org.joda.time.Period period19 = mutablePeriod1.toPeriod();
        org.joda.time.Period period20 = period19.toPeriod();
        org.joda.time.Period period22 = period19.minusYears(671);
        org.joda.time.Period period24 = period22.withMillis(136);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType26 = period22.getFieldType(1826);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test10157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10157");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setHours((int) '#');
        mutablePeriod1.addMillis((int) (byte) 100);
        mutablePeriod1.setHours(2);
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        mutablePeriod11.setSeconds((int) (byte) 0);
        mutablePeriod11.setHours((int) '#');
        mutablePeriod11.addWeeks(0);
        int int18 = mutablePeriod11.getWeeks();
        int int19 = mutablePeriod11.getMillis();
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod11.toMutablePeriod();
        mutablePeriod1.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        int int22 = mutablePeriod1.size();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
    }

    @Test
    public void test10158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10158");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime13.toDateTimeISO();
        org.joda.time.Instant instant19 = dateTime13.toInstant();
        org.joda.time.Instant instant20 = instant19.toInstant();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) instant19);
        org.joda.time.MutableDateTime mutableDateTime22 = instant19.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime22.getZone();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        int int26 = dateTimeZone23.getStandardOffset((-4L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test10159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10159");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = days0.negated();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = days0.plus(days4);
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(34, 34, (int) (short) 0, 7);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.addHours(20);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone21);
        boolean boolean25 = interval23.isAfter(100L);
        long long26 = interval23.getEndMillis();
        org.joda.time.Interval interval27 = interval23.toInterval();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Interval interval29 = interval27.withDurationBeforeEnd(readableDuration28);
        org.joda.time.Period period30 = interval27.toPeriod();
        mutablePeriod13.add((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period33 = period30.plusMinutes(845);
        org.joda.time.Period period35 = period33.plusMillis(291);
        org.joda.time.Period period37 = period33.plusDays(823);
        org.joda.time.Period period39 = period37.withMillis(86313601);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test10160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10160");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property12 = dateTime8.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property12.getFieldType();
        org.joda.time.DateTime dateTime15 = property12.getDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfMinute();
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds18 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds19 = seconds17.minus(seconds18);
        org.joda.time.Duration duration20 = seconds17.toStandardDuration();
        org.joda.time.Seconds seconds22 = seconds17.minus(0);
        org.joda.time.Seconds seconds24 = seconds17.multipliedBy(11);
        org.joda.time.PeriodType periodType25 = seconds17.getPeriodType();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) seconds17);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(periodType25);
    }

    @Test
    public void test10161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10161");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        long long2 = duration1.getStandardMinutes();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTimeISO();
        org.joda.time.Instant instant12 = dateTime6.toInstant();
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone16.isLocalDateTimeGap(localDateTime18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(0);
        boolean boolean23 = instant13.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant27 = instant13.withDurationAdded((org.joda.time.ReadableDuration) duration25, (-1));
        boolean boolean29 = instant27.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTimeISO();
        org.joda.time.Instant instant39 = dateTime33.toInstant();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant27, (org.joda.time.ReadableInstant) dateTime33, periodType40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime33);
        int int43 = period42.getMonths();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        boolean boolean48 = dateTime46.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property49 = dateTime46.millisOfSecond();
        int int50 = property49.getLeapAmount();
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str52 = property49.getAsText(locale51);
        org.joda.time.Interval interval53 = property49.toInterval();
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardMinutes((long) 0);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Calendar calendar63 = dateTime61.toCalendar(locale62);
        org.joda.time.Days days66 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod67 = days66.toMutablePeriod();
        org.joda.time.Duration duration68 = days66.toStandardDuration();
        org.joda.time.PeriodType periodType69 = days66.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((-1L), dateTimeZone72);
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.util.Calendar calendar75 = dateTime73.toCalendar(locale74);
        org.joda.time.DateTime dateTime77 = dateTime73.plusMillis((int) '4');
        org.joda.time.Chronology chronology78 = dateTime73.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfHalfday();
        org.joda.time.Period period80 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType69, chronology78);
        org.joda.time.Period period81 = duration57.toPeriodTo((org.joda.time.ReadableInstant) dateTime61, periodType69);
        org.joda.time.Period period82 = new org.joda.time.Period((long) 2, periodType69);
        org.joda.time.Period period83 = interval53.toPeriod(periodType69);
        org.joda.time.Period period84 = period42.normalizedStandard(periodType69);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "803" + "'", str52, "803");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar75);
        org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period84);
    }

    @Test
    public void test10162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10162");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.Days days6 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod7 = days6.toMutablePeriod();
        org.joda.time.Duration duration8 = days6.toStandardDuration();
        org.joda.time.PeriodType periodType9 = days6.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.Period period20 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType9, chronology18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.millisOfDay();
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType2, chronology18);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.dayOfYear();
        org.joda.time.format.PeriodPrinter periodPrinter26 = null;
        org.joda.time.format.PeriodParser periodParser27 = null;
        org.joda.time.format.PeriodFormatter periodFormatter28 = new org.joda.time.format.PeriodFormatter(periodPrinter26, periodParser27);
        org.joda.time.PeriodType periodType29 = periodFormatter28.getParseType();
        org.joda.time.PeriodType periodType30 = periodFormatter28.getParseType();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter32 = periodFormatter28.withLocale(locale31);
        java.lang.String str33 = dateTimeField24.getAsText(86399, locale31);
        java.lang.String str34 = locale31.getDisplayScript();
        java.util.Set<java.lang.String> strSet35 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale31.getDisplayLanguage();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNull(periodType29);
        org.junit.Assert.assertNull(periodType30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "86399" + "'", str33, "86399");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Korean" + "'", str36, "Korean");
    }

    @Test
    public void test10163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10163");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        boolean boolean9 = mutableInterval7.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray20 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList21);
        boolean boolean24 = mutableInterval7.equals((java.lang.Object) strList21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        boolean boolean38 = dateTime36.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration40 = minutes39.toStandardDuration();
        org.joda.time.Minutes minutes42 = minutes39.minus((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        boolean boolean56 = dateTime54.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = minutes57.toStandardDuration();
        org.joda.time.Minutes minutes60 = minutes57.minus((int) (byte) 100);
        boolean boolean61 = minutes42.isLessThan(minutes60);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        int int66 = dateTime65.getHourOfDay();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) minutes42, (org.joda.time.ReadableInstant) dateTime65);
        mutableInterval7.setStart((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime.Property property69 = dateTime65.dayOfWeek();
        org.joda.time.DateTime.Property property70 = dateTime65.monthOfYear();
        org.joda.time.DateTime dateTime71 = property70.withMinimumValue();
        org.joda.time.DateTime dateTime72 = property70.getDateTime();
        org.joda.time.DateTime dateTime73 = property70.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 23 + "'", int66 == 23);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test10164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10164");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime3.toCalendar(locale9);
        org.joda.time.DateTime dateTime13 = dateTime3.plusYears((int) (short) 0);
        boolean boolean14 = dateTime3.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime3.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime3.minusMinutes(291);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime3.toMutableDateTime();
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        org.joda.time.Duration duration21 = days19.toStandardDuration();
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        boolean boolean25 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration28 = new org.joda.time.Duration(0L, (long) 848);
        boolean boolean29 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime31 = dateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration24, 4);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime3.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime3.getZone();
        int int34 = dateTime3.getYearOfCentury();
        org.joda.time.DateTime dateTime36 = dateTime3.plusYears((int) ' ');
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 69 + "'", int34 == 69);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test10165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10165");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime5.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.Instant instant21 = dateTime15.toInstant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) instant21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.Chronology chronology32 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.weekOfWeekyear();
        org.joda.time.DateTime dateTime34 = instant21.toDateTime(chronology32);
        org.joda.time.DurationField durationField35 = chronology32.days();
        org.joda.time.DurationField durationField36 = chronology32.millis();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 417, (long) (-27), chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test10166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10166");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.Hours hours33 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime35 = dateTime23.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        int int37 = property9.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime39 = property9.addToCopy(999);
        org.joda.time.DateTime dateTime40 = property9.getDateTime();
        org.joda.time.DateTime dateTime41 = property9.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514264022,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=44,MILLISECOND=22,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10167");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Interval interval16 = interval7.gap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTimeZone28.isStandardOffset((long) (byte) 100);
        boolean boolean33 = dateTimeZone28.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone36.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        boolean boolean56 = dateTime54.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = minutes57.toStandardDuration();
        org.joda.time.Duration duration59 = minutes57.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration59);
        int int61 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology62 = chronology25.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField63 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField64 = chronology25.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology25.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) interval14, chronology25);
        org.joda.time.DateTimeField dateTimeField67 = chronology25.secondOfDay();
        java.lang.String str69 = dateTimeField67.getAsText(18748799999L);
        int int71 = dateTimeField67.getMinimumValue(8179561926864000618L);
        int int72 = dateTimeField67.getMaximumValue();
        long long75 = dateTimeField67.addWrapField(1645514116027L, 86405);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "86399" + "'", str69, "86399");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 86399 + "'", int72 == 86399);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1645514121027L + "'", long75 == 1645514121027L);
    }

    @Test
    public void test10168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10168");
        org.joda.time.Days days0 = org.joda.time.Days.FOUR;
        org.joda.time.Days days1 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod2 = days1.toMutablePeriod();
        org.joda.time.Duration duration3 = days1.toStandardDuration();
        org.joda.time.Days days4 = days1.negated();
        org.joda.time.Days days5 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod6 = days5.toMutablePeriod();
        org.joda.time.Duration duration7 = days5.toStandardDuration();
        org.joda.time.Days days8 = days1.plus(days5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        int int15 = dateTime12.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime12.getZone();
        org.joda.time.TimeOfDay timeOfDay17 = dateTime12.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.Days days22 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) timeOfDay17, (org.joda.time.ReadablePartial) localTime21);
        boolean boolean23 = days8.isGreaterThan(days22);
        org.joda.time.Days days25 = days8.minus((int) (short) -1);
        boolean boolean26 = days0.isLessThan(days25);
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        int int29 = days27.getDays();
        org.joda.time.DurationFieldType durationFieldType30 = days27.getFieldType();
        int int31 = days0.get(durationFieldType30);
        int int32 = days0.getDays();
        org.joda.time.Days days34 = days0.plus(1970);
        org.joda.time.Days days36 = days34.multipliedBy((-5));
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days36);
    }

    @Test
    public void test10169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10169");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-6380815651199988L));
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(679);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfEra();
        org.joda.time.DateTime.Property property6 = dateTime4.weekyear();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes9 = minutes7.minus(2);
        org.joda.time.Minutes minutes11 = minutes9.minus(1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes14 = minutes12.minus(2);
        boolean boolean15 = minutes11.isGreaterThan(minutes12);
        org.joda.time.DateTime dateTime16 = dateTime4.plus((org.joda.time.ReadablePeriod) minutes11);
        org.joda.time.DateTime.Property property17 = dateTime4.era();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test10170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10170");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.addWeeks((int) (short) -1);
        mutablePeriod1.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        org.joda.time.Days days16 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod17 = days16.toMutablePeriod();
        org.joda.time.Duration duration18 = days16.toStandardDuration();
        org.joda.time.PeriodType periodType19 = days16.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        org.joda.time.Period period30 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType19, chronology28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology28);
        mutablePeriod1.setPeriod(1L, chronology28);
        mutablePeriod1.setSeconds((int) (byte) 10);
        mutablePeriod1.addDays(0);
        int int37 = mutablePeriod1.getMonths();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test10171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10171");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Instant instant23 = instant10.withDurationAdded((long) 7, (int) (byte) 10);
        org.joda.time.Instant instant25 = instant10.withMillis((long) 99);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-24L));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.Instant instant36 = dateTime35.toInstant();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) dateTime35);
        org.joda.time.DateTime.Property property38 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime39 = property38.getDateTime();
        org.joda.time.DateTime dateTime41 = dateTime39.minusSeconds(1439);
        int int42 = dateTime39.getSecondOfMinute();
        boolean boolean43 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime39);
        int int44 = instant25.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Calendar calendar50 = dateTime48.toCalendar(locale49);
        int int51 = dateTime48.getSecondOfMinute();
        org.joda.time.DateTime.Property property52 = dateTime48.hourOfDay();
        org.joda.time.DurationField durationField53 = property52.getRangeDurationField();
        org.joda.time.DateTime dateTime55 = property52.addWrapFieldToCopy((int) ' ');
        java.lang.String str56 = property52.toString();
        org.joda.time.DateTime dateTime57 = property52.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime57.toMutableDateTime();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 59 + "'", int51 == 59);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Property[hourOfDay]" + "'", str56, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
    }

    @Test
    public void test10172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10172");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setHours((int) '#');
        mutablePeriod1.addMillis((int) (byte) 100);
        mutablePeriod1.addYears(0);
        mutablePeriod1.addWeeks((int) (short) 100);
        mutablePeriod1.setSeconds(138);
        mutablePeriod1.setMonths(0);
        mutablePeriod1.setMillis(712);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test10173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10173");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime4.toDateTimeISO();
        org.joda.time.Instant instant10 = dateTime4.toInstant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        boolean boolean21 = instant11.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant25 = instant11.withDurationAdded((org.joda.time.ReadableDuration) duration23, (-1));
        boolean boolean27 = instant25.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime31.toInstant();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant25, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        org.joda.time.PeriodType periodType40 = periodType38.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Calendar calendar46 = dateTime44.toCalendar(locale45);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((int) '4');
        org.joda.time.Chronology chronology49 = dateTime44.getChronology();
        org.joda.time.Period period50 = new org.joda.time.Period((-259200000L), periodType40, chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.monthOfYear();
        org.joda.time.Chronology chronology53 = chronology49.withUTC();
        org.joda.time.DateTimeField dateTimeField54 = chronology49.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = dateTimeField54.getType();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
    }

    @Test
    public void test10174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10174");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        boolean boolean10 = mutableInterval8.isBefore((long) (-100));
        long long11 = mutableInterval8.toDurationMillis();
        org.joda.time.Days days12 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) mutableInterval8);
        org.joda.time.Days days13 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) mutableInterval8);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
    }

    @Test
    public void test10175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10175");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTimeISO();
        org.joda.time.Instant instant36 = dateTime30.toInstant();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadableInstant) dateTime30, periodType37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.Chronology chronology48 = dateTime43.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.minutes();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        boolean boolean54 = dateTimeZone51.isStandardOffset((long) (byte) 100);
        boolean boolean56 = dateTimeZone51.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime61 = null;
        boolean boolean62 = dateTimeZone59.isLocalDateTimeGap(localDateTime61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime65 = dateTime63.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-1L), dateTimeZone68);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.util.Calendar calendar71 = dateTime69.toCalendar(locale70);
        org.joda.time.DateTime dateTime73 = dateTime69.plusMillis((int) '4');
        org.joda.time.DateTime dateTime74 = dateTime69.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone76);
        boolean boolean79 = dateTime77.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes80 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Duration duration81 = minutes80.toStandardDuration();
        org.joda.time.Duration duration82 = minutes80.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableDuration) duration82);
        int int84 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology85 = chronology48.withZone(dateTimeZone51);
        boolean boolean86 = durationFieldType39.isSupported(chronology48);
        boolean boolean87 = periodType37.isSupported(durationFieldType39);
        int int88 = periodType37.size();
        org.joda.time.PeriodType periodType89 = periodType37.withMinutesRemoved();
        org.joda.time.PeriodType periodType90 = periodType89.withMillisRemoved();
        org.joda.time.PeriodType periodType91 = periodType90.withMillisRemoved();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(minutes80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(periodType91);
    }

    @Test
    public void test10176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10176");
        org.joda.time.Period period2 = org.joda.time.Period.hours((int) (short) 0);
        org.joda.time.PeriodType periodType3 = period2.getPeriodType();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) (-1), periodType3, chronology4);
        org.joda.time.Period period7 = period5.plusSeconds((int) 'x');
        org.joda.time.Period period9 = period7.minusMinutes((-268));
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test10177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10177");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property29 = dateTime26.property(dateTimeFieldType28);
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        long long31 = property29.remainder();
        java.util.Locale locale32 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = property29.getAsShortText(locale33);
        java.lang.String str35 = locale33.getISO3Country();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 259200051L + "'", long31 == 259200051L);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CAN" + "'", str35, "CAN");
    }

    @Test
    public void test10178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10178");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        boolean boolean9 = mutableInterval7.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray20 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList21);
        boolean boolean24 = mutableInterval7.equals((java.lang.Object) strList21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        boolean boolean38 = dateTime36.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration40 = minutes39.toStandardDuration();
        org.joda.time.Minutes minutes42 = minutes39.minus((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        boolean boolean56 = dateTime54.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = minutes57.toStandardDuration();
        org.joda.time.Minutes minutes60 = minutes57.minus((int) (byte) 100);
        boolean boolean61 = minutes42.isLessThan(minutes60);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        int int66 = dateTime65.getHourOfDay();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) minutes42, (org.joda.time.ReadableInstant) dateTime65);
        mutableInterval7.setStart((org.joda.time.ReadableInstant) dateTime65);
        int int69 = dateTime65.getWeekyear();
        org.joda.time.DateTime.Property property70 = dateTime65.year();
        org.joda.time.DateTime dateTime71 = dateTime65.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 23 + "'", int66 == 23);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1970 + "'", int69 == 1970);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test10179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10179");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        boolean boolean10 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusMinutes((int) ' ');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period31);
        long long35 = interval34.getStartMillis();
        org.joda.time.Interval interval36 = interval34.toInterval();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        java.util.GregorianCalendar gregorianCalendar40 = dateTime39.toGregorianCalendar();
        int int41 = dateTime39.getHourOfDay();
        org.joda.time.DateTime dateTime43 = dateTime39.withCenturyOfEra(7);
        org.joda.time.DateTime.Property property44 = dateTime43.weekyear();
        org.joda.time.DurationField durationField45 = property44.getLeapDurationField();
        int int46 = property44.getLeapAmount();
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str48 = locale47.getDisplayLanguage();
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.util.Locale locale50 = locale49.stripExtensions();
        java.lang.String str51 = locale47.getDisplayName(locale50);
        int int52 = property44.getMaximumShortTextLength(locale50);
        org.joda.time.Interval interval53 = property44.toInterval();
        org.joda.time.Interval interval54 = interval34.gap((org.joda.time.ReadableInterval) interval53);
        org.joda.time.Duration duration55 = interval34.toDuration();
        long long56 = duration55.getStandardMinutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514264546L + "'", long35 == 1645514264546L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(gregorianCalendar40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 7 + "'", int41 == 7);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese" + "'", str48, "Chinese");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str51, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 8640L + "'", long56 == 8640L);
    }

    @Test
    public void test10180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10180");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.addWeeks((int) (short) -1);
        mutablePeriod1.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        mutablePeriod1.addYears((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod15 = mutablePeriod1.toMutablePeriod();
        mutablePeriod1.clear();
        org.joda.time.PeriodType periodType17 = mutablePeriod1.getPeriodType();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(periodType17);
    }

    @Test
    public void test10181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10181");
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType5, chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.millisOfDay();
        boolean boolean20 = dateTimeField18.isLeap((long) 1439);
        long long22 = dateTimeField18.roundHalfCeiling(185542587100800000L);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 185542587100800000L + "'", long22 == 185542587100800000L);
    }

    @Test
    public void test10182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10182");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis((int) '#');
        java.util.Date date11 = dateTime8.toDate();
        org.joda.time.DateTime dateTime13 = dateTime8.withMillisOfSecond(636);
        int int14 = dateTime13.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
    }

    @Test
    public void test10183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10183");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = dateTime2.toLocalTime();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType6 = periodType5.withMillisRemoved();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (-1), periodType6, chronology7);
        org.joda.time.PeriodType periodType9 = mutablePeriod8.getPeriodType();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) (byte) 1);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.DateTime.Property property14 = dateTime2.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        mutablePeriod20.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval23 = null;
        mutablePeriod20.add(readableInterval23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.eras();
        int int26 = mutablePeriod20.get(durationFieldType25);
        boolean boolean27 = mutablePeriod18.isSupported(durationFieldType25);
        mutablePeriod18.addSeconds((int) '#');
        mutablePeriod18.addSeconds((int) (short) 0);
        java.lang.String str32 = mutablePeriod18.toString();
        org.joda.time.Days days33 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod34 = days33.toMutablePeriod();
        org.joda.time.Duration duration35 = days33.toStandardDuration();
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        boolean boolean39 = duration35.isLongerThan((org.joda.time.ReadableDuration) duration38);
        mutablePeriod18.setPeriod((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.ReadableInterval readableInterval42 = null;
        mutablePeriod18.setPeriod(readableInterval42);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "P6DT35S" + "'", str32, "P6DT35S");
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test10184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10184");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis((int) '#');
        java.util.Date date11 = dateTime8.toDate();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours(10);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property31 = dateTime29.property(dateTimeFieldType30);
        int int32 = dateTime23.get(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType30.getRangeDurationType();
        int int34 = dateTime8.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime36 = dateTime8.minusHours((int) (byte) 0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test10185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10185");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds1 = seconds0.negated();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone6);
        boolean boolean10 = interval8.isAfter(100L);
        long long11 = interval8.getEndMillis();
        org.joda.time.Interval interval12 = interval8.toInterval();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Interval interval14 = interval12.withDurationBeforeEnd(readableDuration13);
        org.joda.time.Period period15 = interval12.toPeriod();
        org.joda.time.Seconds seconds16 = period15.toStandardSeconds();
        org.joda.time.PeriodType periodType17 = seconds16.getPeriodType();
        org.joda.time.Seconds seconds18 = seconds0.minus(seconds16);
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds21 = seconds19.minus(seconds20);
        org.joda.time.Seconds seconds22 = seconds16.minus(seconds19);
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.THREE;
        int int24 = seconds23.getSeconds();
        org.joda.time.Seconds seconds25 = seconds16.minus(seconds23);
        org.joda.time.Seconds seconds27 = seconds23.minus(249);
        org.joda.time.Seconds seconds29 = seconds27.multipliedBy(136);
        org.joda.time.Seconds seconds30 = seconds29.negated();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds30);
    }

    @Test
    public void test10186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10186");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) dateTime7);
        org.joda.time.DateTime.Property property10 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds(1439);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        java.util.GregorianCalendar gregorianCalendar17 = dateTime16.toGregorianCalendar();
        int int18 = dateTime16.getHourOfDay();
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale20.toLanguageTag();
        java.util.Calendar calendar22 = dateTime16.toCalendar(locale20);
        org.joda.time.DateTime.Property property23 = dateTime16.minuteOfHour();
        org.joda.time.Days days24 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod25 = days24.toMutablePeriod();
        org.joda.time.Duration duration26 = days24.toStandardDuration();
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        org.joda.time.Duration duration29 = days27.toStandardDuration();
        boolean boolean30 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        org.joda.time.PeriodType periodType39 = days36.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.Chronology chronology48 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType39, chronology48);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTimeField dateTimeField52 = chronology48.millisOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((-259200000L), (long) '#', chronology48);
        boolean boolean54 = interval31.isBefore((org.joda.time.ReadableInterval) interval53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType56 = periodType55.withYearsRemoved();
        org.joda.time.Duration duration58 = org.joda.time.Duration.millis((long) (short) -1);
        long long59 = duration58.getStandardMinutes();
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType63 = periodType62.withYearsRemoved();
        org.joda.time.Days days66 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod67 = days66.toMutablePeriod();
        org.joda.time.Duration duration68 = days66.toStandardDuration();
        org.joda.time.PeriodType periodType69 = days66.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((-1L), dateTimeZone72);
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.util.Calendar calendar75 = dateTime73.toCalendar(locale74);
        org.joda.time.DateTime dateTime77 = dateTime73.plusMillis((int) '4');
        org.joda.time.Chronology chronology78 = dateTime73.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfHalfday();
        org.joda.time.Period period80 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType69, chronology78);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology78);
        org.joda.time.DateTimeField dateTimeField82 = chronology78.millisOfDay();
        org.joda.time.Period period83 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType62, chronology78);
        org.joda.time.Period period84 = duration58.toPeriod(chronology78);
        org.joda.time.DateTimeField dateTimeField85 = chronology78.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((java.lang.Object) interval31, periodType56, chronology78);
        org.joda.time.MutableDateTime mutableDateTime87 = dateTime11.toMutableDateTime(chronology78);
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime90 = org.joda.time.DateTime.now(dateTimeZone89);
        boolean boolean92 = dateTime90.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property93 = dateTime90.millisOfSecond();
        org.joda.time.DateTime dateTime94 = property93.getDateTime();
        boolean boolean95 = dateTime94.isBeforeNow();
        org.joda.time.Days days96 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) mutableDateTime87, (org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.DateTime dateTime98 = dateTime94.withMillis((long) (-292275054));
        org.joda.time.DateTime.Property property99 = dateTime98.year();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(gregorianCalendar17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh-CN" + "'", str21, "zh-CN");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645514264728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=44,MILLISECOND=728,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar75);
        org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(days96);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test10187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10187");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        boolean boolean10 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusMinutes((int) ' ');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period31);
        int int35 = dateTime2.getWeekyear();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        org.joda.time.PeriodType periodType45 = days42.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.hourOfHalfday();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType45, chronology54);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTimeField dateTimeField58 = chronology54.millisOfDay();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((-259200000L), (long) '#', chronology54);
        mutableInterval36.setChronology(chronology54);
        org.joda.time.DateTime dateTime61 = dateTime2.withChronology(chronology54);
        org.joda.time.DateTimeField dateTimeField62 = chronology54.dayOfMonth();
        long long64 = dateTimeField62.roundCeiling(4665600000L);
        long long66 = dateTimeField62.roundFloor((-168L));
        int int68 = dateTimeField62.getMinimumValue(1646032534750L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 4665600000L + "'", long64 == 4665600000L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-86400000L) + "'", long66 == (-86400000L));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test10188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10188");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        boolean boolean6 = dateTime3.isAfterNow();
        int int7 = dateTime3.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 999 + "'", int7 == 999);
    }

    @Test
    public void test10189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10189");
        org.joda.time.Period period1 = org.joda.time.Period.parse("PT43891200S");
        org.joda.time.Period period3 = period1.minusYears(2108160);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test10190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10190");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property29 = dateTime26.property(dateTimeFieldType28);
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.DurationField durationField31 = property29.getDurationField();
        long long34 = durationField31.getMillis(100, (long) 2870);
        boolean boolean35 = durationField31.isPrecise();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 60480000000L + "'", long34 == 60480000000L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test10191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10191");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        long long11 = interval6.toDurationMillis();
        org.joda.time.Days days12 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval6);
        long long13 = interval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((long) 2, (long) 23);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        mutablePeriod19.setSeconds((int) (byte) 0);
        mutableInterval16.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod19);
        mutableInterval16.setEndMillis((long) 6);
        org.joda.time.DateTime dateTime25 = mutableInterval16.getEnd();
        mutableInterval16.setEndMillis(44150400000L);
        org.joda.time.Interval interval28 = interval6.overlap((org.joda.time.ReadableInterval) mutableInterval16);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval28);
    }

    @Test
    public void test10192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10192");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime3.toCalendar(locale9);
        org.joda.time.DateTime dateTime13 = dateTime3.plusYears((int) (short) 0);
        boolean boolean14 = dateTime3.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime3.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime3.minusMinutes(291);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime3.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = mutableDateTime18.toDateTime(dateTimeZone19);
        java.util.Date date21 = dateTime20.toDate();
        org.joda.time.DateTime.Property property22 = dateTime20.centuryOfEra();
        org.joda.time.DateTime dateTime23 = property22.withMinimumValue();
        org.joda.time.DurationField durationField24 = property22.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNull(durationField24);
    }

    @Test
    public void test10193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10193");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Days days5 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod6 = days5.toMutablePeriod();
        org.joda.time.Duration duration7 = days5.toStandardDuration();
        long long8 = duration7.getStandardHours();
        mutableInterval4.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.DateTime dateTime10 = mutableInterval4.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.plus((long) 86399999);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        int int17 = dateTime15.getHourOfDay();
        java.util.Locale locale18 = java.util.Locale.CHINA;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Calendar calendar21 = dateTime15.toCalendar(locale19);
        org.joda.time.DateTime dateTime23 = dateTime15.plusHours((int) 'x');
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime.Property property25 = dateTime12.millisOfSecond();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 144L + "'", long8 == 144L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh-CN" + "'", str20, "zh-CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645514264948,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=44,MILLISECOND=948,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test10194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10194");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.Interval interval4 = interval3.toInterval();
        org.joda.time.Days days5 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.era();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(0L, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.halfdayOfDay();
        org.joda.time.Interval interval20 = interval3.withChronology(chronology15);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 25785, chronology15);
        org.joda.time.DurationField durationField22 = chronology15.seconds();
        java.lang.String str23 = chronology15.toString();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology15.monthOfYear();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10195");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        boolean boolean10 = dateTime3.equals((java.lang.Object) dateTime9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime3.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime3.toYearMonthDay();
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration15 = period14.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime26 = dateTime19.withMonthOfYear(9);
        org.joda.time.LocalDate localDate27 = dateTime19.toLocalDate();
        org.joda.time.Seconds seconds28 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadablePartial) yearMonthDay12, (org.joda.time.ReadablePartial) localDate27);
        int int29 = localDate27.size();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
    }

    @Test
    public void test10196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10196");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((java.lang.Object) interval3);
        boolean boolean5 = interval3.containsNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        boolean boolean14 = interval12.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.Instant instant24 = dateTime18.toInstant();
        org.joda.time.Instant instant25 = instant24.toInstant();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone28.isLocalDateTimeGap(localDateTime30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        boolean boolean35 = instant25.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Instant instant38 = instant25.withDurationAdded((long) 7, (int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime39 = instant38.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime40 = instant38.toDateTimeISO();
        org.joda.time.Instant instant42 = instant38.minus((long) 999);
        boolean boolean43 = interval12.contains((org.joda.time.ReadableInstant) instant38);
        boolean boolean44 = interval3.abuts((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Interval interval45 = interval12.toInterval();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval45);
    }

    @Test
    public void test10197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10197");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.Hours hours33 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime35 = dateTime23.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        int int37 = property9.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeField dateTimeField38 = property9.getField();
        java.util.Locale locale41 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str42 = property9.getAsShortText(locale41);
        int int43 = property9.getMinimumValue();
        org.joda.time.DateTime dateTime44 = property9.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField45 = property9.getField();
        int int47 = dateTimeField45.getMaximumValue((long) (-4));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514265085,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=45,MILLISECOND=85,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_ZH-CN");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "17" + "'", str42, "17");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
    }

    @Test
    public void test10198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10198");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((java.lang.Object) "8");
        org.joda.time.Instant instant3 = instant1.minus((-100L));
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime6.toGregorianCalendar();
        int int8 = dateTime6.getHourOfDay();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.lang.String str11 = locale10.toLanguageTag();
        java.util.Calendar calendar12 = dateTime6.toCalendar(locale10);
        org.joda.time.DateTime.Property property13 = dateTime6.minuteOfHour();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Duration duration19 = days17.toStandardDuration();
        boolean boolean20 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration23 = duration19.minus((long) 2022);
        org.joda.time.Instant instant25 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration19, 19);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        boolean boolean36 = dateTime29.equals((java.lang.Object) dateTime35);
        java.util.GregorianCalendar gregorianCalendar37 = dateTime29.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime29.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone41.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime47.toMutableDateTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime47.getZone();
        org.joda.time.DateTime dateTime51 = yearMonthDay38.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        java.util.GregorianCalendar gregorianCalendar55 = dateTime54.toGregorianCalendar();
        int int56 = dateTime54.getHourOfDay();
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Locale locale58 = locale57.stripExtensions();
        java.lang.String str59 = locale58.toLanguageTag();
        java.util.Calendar calendar60 = dateTime54.toCalendar(locale58);
        org.joda.time.DateTime.Property property61 = dateTime54.minuteOfHour();
        org.joda.time.Days days62 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod63 = days62.toMutablePeriod();
        org.joda.time.Duration duration64 = days62.toStandardDuration();
        org.joda.time.Days days65 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod66 = days65.toMutablePeriod();
        org.joda.time.Duration duration67 = days65.toStandardDuration();
        boolean boolean68 = duration64.isLongerThan((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration67);
        long long70 = duration67.getStandardHours();
        org.joda.time.DateTime dateTime71 = dateTime51.minus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Instant instant73 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration67, 25973005);
        org.joda.time.MutableDateTime mutableDateTime74 = instant3.toMutableDateTime();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh-CN" + "'", str11, "zh-CN");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645514265119,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=45,MILLISECOND=119,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(gregorianCalendar55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh-CN" + "'", str59, "zh-CN");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1645514265119,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=45,MILLISECOND=119,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(days65);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 144L + "'", long70 == 144L);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
    }

    @Test
    public void test10199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10199");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (short) 0);
        mutablePeriod1.setMinutes((int) (byte) 100);
        mutablePeriod1.setDays(53);
        org.joda.time.PeriodType periodType6 = mutablePeriod1.getPeriodType();
        mutablePeriod1.setMillis(270);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test10200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10200");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime3.toCalendar(locale9);
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        boolean boolean18 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime19 = dateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.withHourOfDay(0);
        int int29 = dateTime28.getDayOfWeek();
        org.joda.time.Days days30 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod31 = days30.toMutablePeriod();
        org.joda.time.Duration duration32 = days30.toStandardDuration();
        long long33 = duration32.getStandardHours();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration32, periodType35);
        org.joda.time.DateTime dateTime38 = dateTime28.withWeekyear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone41.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime47.toMutableDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = dateTime28.withZoneRetainFields(dateTimeZone48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime53 = dateTime19.minusYears(1439);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime62 = dateTime57.toLocalDateTime();
        java.util.Locale locale63 = java.util.Locale.CHINA;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.util.Calendar calendar65 = dateTime57.toCalendar(locale63);
        org.joda.time.Days days66 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod67 = days66.toMutablePeriod();
        org.joda.time.Duration duration68 = days66.toStandardDuration();
        org.joda.time.Days days69 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod70 = days69.toMutablePeriod();
        org.joda.time.Duration duration71 = days69.toStandardDuration();
        boolean boolean72 = duration68.isLongerThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTime dateTime73 = dateTime57.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.DateTime.Property property74 = dateTime57.secondOfMinute();
        int int75 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime57.getZone();
        org.joda.time.DateTime.Property property77 = dateTime57.era();
        org.joda.time.DateTimeField dateTimeField78 = property77.getField();
        int int80 = dateTimeField78.getMaximumValue((long) 618);
        java.lang.String str82 = dateTimeField78.getAsText(1639440535538L);
        int int84 = dateTimeField78.getMinimumValue(254620800000L);
        int int85 = dateTimeField78.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 144L + "'", long33 == 144L);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "AD" + "'", str82, "AD");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test10201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10201");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(38090);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test10202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10202");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime10 = dateTime7.withWeekOfWeekyear(3);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Duration duration15 = duration13.minus((long) '4');
        org.joda.time.DateTime dateTime17 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration13, 86399);
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        java.lang.String str29 = dateTimeField28.getName();
        java.util.Locale locale32 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)", "hi!");
        int int33 = dateTimeField28.getMaximumTextLength(locale32);
        java.lang.String str34 = property18.getAsShortText(locale32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((java.lang.Object) locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekOfWeekyear" + "'", str29, "weekOfWeekyear");
        org.junit.Assert.assertEquals(locale32.toString(), "\u4e2d\u6587\u4e2d\u56fd)_HI!");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "51" + "'", str34, "51");
    }

    @Test
    public void test10203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10203");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime3.hourOfDay();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property7.getAsText(locale9);
        org.joda.time.DateTime dateTime12 = property7.addToCopy(6);
        org.joda.time.DateTime dateTime13 = property7.withMaximumValue();
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime23.plusMillis((int) '#');
        int int26 = dateTime25.getMillisOfSecond();
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTimeISO();
        boolean boolean28 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone31.isLocalDateTimeGap(localDateTime33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = dateTime35.withHourOfDay(0);
        int int38 = dateTime37.getDayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime37.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime37.withWeekyear((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime37.toDateTime();
        org.joda.time.DateTime.Property property44 = dateTime43.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int49 = dateTimeZone47.getStandardOffset((long) 'x');
        java.lang.String str50 = dateTimeZone47.getID();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.Instant instant59 = dateTime58.toInstant();
        org.joda.time.Chronology chronology60 = dateTime58.getChronology();
        int int61 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime27.toMutableDateTime(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone67);
        boolean boolean71 = interval69.isAfter(100L);
        long long72 = interval69.getEndMillis();
        org.joda.time.DateTime dateTime73 = interval69.getEnd();
        org.joda.time.DateTime dateTime75 = dateTime73.minusMonths(7);
        org.joda.time.DateTime.Property property76 = dateTime75.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((-1L), dateTimeZone79);
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.util.Calendar calendar82 = dateTime80.toCalendar(locale81);
        int int83 = dateTime80.getSecondOfMinute();
        org.joda.time.DateTime.Property property84 = dateTime80.hourOfDay();
        org.joda.time.DurationField durationField85 = property84.getRangeDurationField();
        org.joda.time.DateTime dateTime86 = property84.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime88 = dateTime86.minusMonths(53);
        org.joda.time.DateTime.Property property89 = dateTime88.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property89.getFieldType();
        int int91 = dateTime75.get(dateTimeFieldType90);
        java.lang.String str92 = dateTimeFieldType90.getName();
        org.joda.time.DateTime.Property property93 = dateTime27.property(dateTimeFieldType90);
        int int94 = dateTime27.getDayOfMonth();
        int int95 = dateTime27.getMinuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = org.joda.time.DateTimeFieldType.weekyear();
        int int97 = dateTime27.get(dateTimeFieldType96);
        org.joda.time.Chronology chronology98 = null;
        boolean boolean99 = dateTimeFieldType96.isSupported(chronology98);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23" + "'", str10, "23");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 34 + "'", int26 == 34);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar82);
        org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 59 + "'", int83 == 59);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "minuteOfDay" + "'", str92, "minuteOfDay");
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1970 + "'", int97 == 1970);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test10204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10204");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        mutablePeriod1.setMinutes(86399);
        mutablePeriod1.clear();
        mutablePeriod1.addMonths(13);
        org.joda.time.Days days20 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod21 = days20.toMutablePeriod();
        mutablePeriod21.addWeeks((int) (short) -1);
        mutablePeriod21.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        org.joda.time.PeriodType periodType39 = days36.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.Chronology chronology48 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType39, chronology48);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology48);
        mutablePeriod21.setPeriod(1L, chronology48);
        mutablePeriod21.setSeconds((int) (byte) 10);
        org.joda.time.Period period56 = new org.joda.time.Period((long) (byte) 10);
        int int57 = period56.getSeconds();
        org.joda.time.Period period59 = period56.minusHours(100);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.days();
        java.lang.String str62 = durationFieldType61.getName();
        mutablePeriod21.set(durationFieldType61, (-19045));
        mutablePeriod1.set(durationFieldType61, 333);
        mutablePeriod1.setSeconds(586);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "days" + "'", str62, "days");
    }

    @Test
    public void test10205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10205");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime3.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime3.getZone();
        boolean boolean17 = dateTimeZone16.isFixed();
        java.lang.String str19 = dateTimeZone16.getName((long) 618);
        boolean boolean20 = dateTimeZone16.isFixed();
        java.util.TimeZone timeZone21 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test10206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10206");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        mutableInterval0.setDurationAfterStart(23L);
        org.joda.time.Period period3 = mutableInterval0.toPeriod();
        mutableInterval0.setEndMillis((long) 207);
        java.lang.String str6 = mutableInterval0.toString();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.207Z" + "'", str6, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.207Z");
    }

    @Test
    public void test10207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10207");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration15 = minutes14.toStandardDuration();
        org.joda.time.Minutes minutes17 = minutes14.minus((int) (byte) 100);
        org.joda.time.Minutes minutes19 = minutes14.minus(1970);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType21 = minutes20.getFieldType();
        org.joda.time.Minutes minutes23 = minutes20.plus(1);
        boolean boolean24 = minutes19.isGreaterThan(minutes20);
        org.joda.time.Minutes minutes26 = minutes19.multipliedBy(70);
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        org.joda.time.Minutes minutes29 = minutes26.minus(432);
        org.joda.time.Minutes minutes31 = minutes26.plus((-59));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes31);
    }

    @Test
    public void test10208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10208");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime26.withMillis(86399L);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType40 = periodType39.withMinutesRemoved();
        org.joda.time.Period period41 = interval37.toPeriod(periodType40);
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        mutablePeriod43.addWeeks((int) (short) -1);
        mutablePeriod43.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        org.joda.time.Days days58 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod59 = days58.toMutablePeriod();
        org.joda.time.Duration duration60 = days58.toStandardDuration();
        org.joda.time.PeriodType periodType61 = days58.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Calendar calendar67 = dateTime65.toCalendar(locale66);
        org.joda.time.DateTime dateTime69 = dateTime65.plusMillis((int) '4');
        org.joda.time.Chronology chronology70 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.hourOfHalfday();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType61, chronology70);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology70);
        mutablePeriod43.setPeriod(1L, chronology70);
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(chronology70);
        org.joda.time.Period period76 = new org.joda.time.Period((long) 'x', periodType40, chronology70);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int80 = dateTimeZone78.getOffsetFromLocal((long) '4');
        org.joda.time.Chronology chronology81 = chronology70.withZone(dateTimeZone78);
        org.joda.time.DateTime dateTime82 = dateTime26.toDateTime(chronology70);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(chronology70);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test10209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10209");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        java.lang.String str10 = dateTimeField9.getName();
        org.joda.time.DurationField durationField11 = dateTimeField9.getLeapDurationField();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.lang.String str15 = dateTimeField9.getAsShortText((long) 100, locale14);
        int int16 = dateTimeField9.getMaximumValue();
        long long18 = dateTimeField9.roundFloor((-62162722124392L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekOfWeekyear" + "'", str10, "weekOfWeekyear");
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_ZH-CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-62162812800000L) + "'", long18 == (-62162812800000L));
    }

    @Test
    public void test10210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10210");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 8, 600000L, chronology2);
        int int4 = mutablePeriod3.getYears();
        mutablePeriod3.addMinutes(182);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType18 = periodType17.withMinutesRemoved();
        org.joda.time.Period period19 = interval15.toPeriod(periodType18);
        org.joda.time.Days days20 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod21 = days20.toMutablePeriod();
        mutablePeriod21.addWeeks((int) (short) -1);
        mutablePeriod21.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        org.joda.time.PeriodType periodType39 = days36.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.Chronology chronology48 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType39, chronology48);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology48);
        mutablePeriod21.setPeriod(1L, chronology48);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.Period period54 = new org.joda.time.Period((long) 'x', periodType18, chronology48);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int58 = dateTimeZone56.getOffsetFromLocal((long) '4');
        org.joda.time.Chronology chronology59 = chronology48.withZone(dateTimeZone56);
        mutablePeriod3.add((long) 601, chronology48);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology48);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
    }

    @Test
    public void test10211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10211");
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType5, chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        long long26 = dateTimeZone20.previousTransition(518400000L);
        long long30 = dateTimeZone20.convertLocalToUTC((long) (short) 1, true, 652278993L);
        org.joda.time.Chronology chronology31 = chronology14.withZone(dateTimeZone20);
        long long35 = chronology14.add(0L, (-348L), (-86399));
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 518400000L + "'", long26 == 518400000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 30066852L + "'", long35 == 30066852L);
    }

    @Test
    public void test10212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10212");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Period period13 = interval10.toPeriod();
        org.joda.time.Period period15 = period13.minusMonths((-1));
        org.joda.time.Period period17 = period13.minusSeconds(502);
        int int18 = period17.getSeconds();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-502) + "'", int18 == (-502));
    }

    @Test
    public void test10213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10213");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.weekyear();
        org.joda.time.DateTime.Property property10 = dateTime3.yearOfCentury();
        int int11 = dateTime3.getDayOfYear();
        org.joda.time.DateTime.Property property12 = dateTime3.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 365 + "'", int11 == 365);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test10214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10214");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 10, periodType3);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology15);
        org.joda.time.Seconds seconds18 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds20 = seconds18.minus(seconds19);
        org.joda.time.Duration duration21 = seconds18.toStandardDuration();
        int[] intArray24 = chronology15.get((org.joda.time.ReadablePeriod) seconds18, 652278993L, (long) (-1));
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, periodType3, chronology15);
        org.joda.time.DurationField durationField26 = chronology15.centuries();
        org.joda.time.DurationField durationField27 = chronology15.years();
        long long30 = durationField27.getDifferenceAsLong((long) 570, 97L);
        long long32 = durationField27.getValueAsLong(604L);
        long long35 = durationField27.getDifferenceAsLong(1645513952199L, 1645514021916L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-652278]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test10215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10215");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis((int) '#');
        java.util.Date date11 = dateTime8.toDate();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.LocalTime localTime13 = dateTime8.toLocalTime();
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Days days20 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod21 = days20.toMutablePeriod();
        org.joda.time.Duration duration22 = days20.toStandardDuration();
        long long23 = duration22.getStandardHours();
        mutableInterval19.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Days days29 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod30 = days29.toMutablePeriod();
        org.joda.time.Duration duration31 = days29.toStandardDuration();
        org.joda.time.PeriodType periodType32 = days29.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfHalfday();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType32, chronology41);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.millisOfDay();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((-259200000L), (long) '#', chronology41);
        mutableInterval19.setChronology(chronology41);
        org.joda.time.MutableInterval mutableInterval48 = mutableInterval19.toMutableInterval();
        boolean boolean49 = localTime13.equals((java.lang.Object) mutableInterval48);
        org.joda.time.DateTime dateTime50 = mutableInterval48.getEnd();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 144L + "'", long23 == 144L);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test10216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10216");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter2.getPrinter();
        boolean boolean5 = periodFormatter2.isParser();
        boolean boolean6 = periodFormatter2.isPrinter();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        java.util.Locale locale9 = periodFormatter8.getLocale();
        java.util.Locale locale10 = periodFormatter8.getLocale();
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodPrinter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
    }

    @Test
    public void test10217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10217");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.standardDaysIn(readablePeriod0);
        org.joda.time.PeriodType periodType2 = days1.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod3 = days1.toMutablePeriod();
        mutablePeriod3.addDays((int) (byte) 0);
        mutablePeriod3.setHours(412);
        mutablePeriod3.addHours(586);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod3.toMutablePeriod();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod10);
    }

    @Test
    public void test10218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10218");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fr_CA" + "'", str2, "fr_CA");
    }

    @Test
    public void test10219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10219");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-292275054), 870901920, 297, 59, 577, 773, (int) (byte) 1, 784);
        mutablePeriod8.setSeconds(302);
        mutablePeriod8.setSeconds(1969);
        mutablePeriod8.setPeriod(876, 25798227, 0, 26005, 791, 415, 0, (-978014834));
        mutablePeriod8.addDays(46);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType26 = periodType25.withMillisRemoved();
        org.joda.time.Period period27 = mutableInterval24.toPeriod(periodType25);
        org.joda.time.Days days28 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod29 = days28.toMutablePeriod();
        org.joda.time.Days days30 = org.joda.time.Days.MIN_VALUE;
        boolean boolean31 = days28.isLessThan(days30);
        org.joda.time.Days days32 = days28.negated();
        mutableInterval24.setPeriodAfterStart((org.joda.time.ReadablePeriod) days28);
        org.joda.time.DurationFieldType durationFieldType34 = days28.getFieldType();
        int int35 = mutablePeriod8.get(durationFieldType34);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 26051 + "'", int35 == 26051);
    }

    @Test
    public void test10220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10220");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays(0);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test10221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10221");
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType5, chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.millisOfDay();
        long long20 = dateTimeField18.roundFloor((long) (-1));
        java.lang.String str22 = dateTimeField18.getAsText((long) 'x');
        int int24 = dateTimeField18.getLeapAmount((long) (-83954416));
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "120" + "'", str22, "120");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test10222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10222");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(324, (-27425128), 0, 27423259);
        mutablePeriod4.addMinutes((-502));
    }

    @Test
    public void test10223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10223");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfHalfday();
        org.joda.time.DateTime dateTime13 = dateTime2.withChronology(chronology11);
        int int14 = dateTime2.getYear();
        int int15 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime26 = dateTime21.toLocalDateTime();
        boolean boolean27 = dateTimeZone17.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = dateTime2.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear(117);
        long long31 = dateTime28.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 848 + "'", int15 == 848);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645514265848L + "'", long31 == 1645514265848L);
    }

    @Test
    public void test10224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10224");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime3.toCalendar(locale9);
        org.joda.time.DateTime dateTime13 = dateTime3.plusYears((int) (short) 0);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(23);
        org.joda.time.DateTime dateTime16 = dateTime13.minus((org.joda.time.ReadablePeriod) period15);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test10225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10225");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        boolean boolean12 = interval6.isBefore((long) (-1));
        boolean boolean13 = interval6.isBeforeNow();
        boolean boolean14 = interval6.isAfterNow();
        org.joda.time.Seconds seconds15 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.Chronology chronology16 = interval6.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        int int20 = dateTimeField18.get(1646032261263L);
        long long22 = dateTimeField18.roundHalfFloor((long) 21);
        org.joda.time.DurationField durationField23 = dateTimeField18.getRangeDurationField();
        long long26 = dateTimeField18.add(671L, (long) (-978014834));
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 431 + "'", int20 == 431);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-58680890039329L) + "'", long26 == (-58680890039329L));
    }

    @Test
    public void test10226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10226");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        boolean boolean23 = dateTime21.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property24 = dateTime21.millisOfSecond();
        org.joda.time.DateTime dateTime25 = property24.getDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds(10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(0L, chronology29);
        org.joda.time.Period period32 = period30.plusMillis(100);
        int int33 = period32.getHours();
        org.joda.time.Period period35 = period32.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime39.toDateTimeISO();
        org.joda.time.Instant instant45 = dateTime39.toInstant();
        org.joda.time.Instant instant46 = instant45.toInstant();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone49.isLocalDateTimeGap(localDateTime51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime55 = dateTime53.withHourOfDay(0);
        boolean boolean56 = instant46.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant60 = instant46.withDurationAdded((org.joda.time.ReadableDuration) duration58, (-1));
        boolean boolean62 = instant60.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Calendar calendar68 = dateTime66.toCalendar(locale67);
        org.joda.time.DateTime dateTime70 = dateTime66.plusMillis((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime66.toDateTimeISO();
        org.joda.time.Instant instant72 = dateTime66.toInstant();
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant60, (org.joda.time.ReadableInstant) dateTime66, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withWeeksRemoved();
        org.joda.time.PeriodType periodType76 = periodType75.withYearsRemoved();
        org.joda.time.Period period77 = period32.normalizedStandard(periodType76);
        org.joda.time.Days days78 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod79 = days78.toMutablePeriod();
        mutablePeriod79.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval82 = null;
        mutablePeriod79.add(readableInterval82);
        org.joda.time.DurationFieldType durationFieldType84 = org.joda.time.DurationFieldType.eras();
        int int85 = mutablePeriod79.get(durationFieldType84);
        int int86 = periodType76.indexOf(durationFieldType84);
        org.joda.time.Period period87 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27, periodType76);
        org.joda.time.PeriodType periodType88 = periodType76.withMinutesRemoved();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(days78);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(periodType88);
    }

    @Test
    public void test10227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10227");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.Instant instant20 = dateTime19.toInstant();
        org.joda.time.Hours hours21 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTime dateTime23 = dateTime11.plusMillis((int) (byte) 1);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfWeek();
        org.joda.time.DateTime dateTime25 = property24.roundCeilingCopy();
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks(4);
        org.joda.time.Hours hours28 = org.joda.time.Hours.THREE;
        int int29 = hours28.getHours();
        org.joda.time.Hours hours31 = hours28.multipliedBy(2);
        org.joda.time.Hours hours33 = hours31.minus((int) '#');
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10);
        int int36 = period35.getSeconds();
        org.joda.time.Period period38 = period35.minusHours(100);
        org.joda.time.Period period40 = period35.minusSeconds((int) '4');
        org.joda.time.Hours hours41 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Hours hours42 = hours31.minus(hours41);
        org.joda.time.Hours hours43 = org.joda.time.Hours.THREE;
        int int44 = hours43.getHours();
        org.joda.time.Hours hours46 = hours43.multipliedBy(2);
        org.joda.time.Hours hours48 = hours46.minus((int) '#');
        org.joda.time.Hours hours49 = hours41.minus(hours46);
        org.joda.time.DateTime dateTime51 = dateTime25.withPeriodAdded((org.joda.time.ReadablePeriod) hours49, 26136);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertNotNull(hours42);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(hours46);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertNotNull(hours49);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test10228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10228");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.addUnicodeLocaleAttribute("ITA");
        java.util.Locale.Builder builder4 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.addUnicodeLocaleAttribute("0000-02-22T07:12:23.381Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0000-02-22T07:12:23.381Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test10229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10229");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMillis((int) '#');
        int int36 = instant24.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone40.isLocalDateTimeGap(localDateTime42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime44.withHourOfDay(0);
        int int47 = dateTime46.getDayOfWeek();
        org.joda.time.DateTime dateTime49 = dateTime46.minusWeeks((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime49);
        int int51 = dateTime33.getMillisOfDay();
        org.joda.time.DateTime dateTime53 = dateTime33.plusMinutes((-27425128));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 86399999 + "'", int51 == 86399999);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test10230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10230");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(870901920, 459);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 459");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10231");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.Instant instant34 = dateTime28.toInstant();
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone38.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        boolean boolean45 = instant35.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant49 = instant35.withDurationAdded((org.joda.time.ReadableDuration) duration47, (-1));
        java.util.Date date50 = instant35.toDate();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadableInstant) instant35);
        org.joda.time.Period period53 = period51.minusHours((-3));
        org.joda.time.Period period54 = period51.normalizedStandard();
        org.joda.time.Period period55 = period51.negated();
        org.joda.time.Period period56 = period55.toPeriod();
        org.joda.time.Period period58 = period55.plusDays(128);
        org.joda.time.Period period60 = period58.withDays((-264960));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
    }

    @Test
    public void test10232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10232");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime3.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime3, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        boolean boolean20 = dateTimeZone17.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime21, readableDuration22);
        boolean boolean24 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime21.getZone();
        int int27 = dateTimeZone25.getOffset((long) 699);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test10233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10233");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone3.isLocalDateTimeGap(localDateTime5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime9 = dateTime7.withHourOfDay(0);
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        long long14 = duration13.getStandardHours();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType16 = periodType15.withYearsRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration13, periodType16);
        org.joda.time.DateTime dateTime19 = dateTime9.withWeekyear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime28.toMutableDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = dateTime9.withZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean33 = dateTime31.isSupported(dateTimeFieldType32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean35 = dateTime31.isSupported(dateTimeFieldType34);
        java.lang.Object obj36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval(obj36, chronology37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone43.isLocalDateTimeGap(localDateTime45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime49 = dateTime47.withHourOfDay(0);
        org.joda.time.DateTime dateTime51 = dateTime47.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime53 = dateTime47.withWeekyear((int) (byte) 0);
        boolean boolean54 = interval39.contains((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Days days55 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.PeriodType periodType56 = days55.getPeriodType();
        org.joda.time.PeriodType periodType57 = periodType56.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime53, periodType57);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(periodType57);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(288L, periodType57);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 144L + "'", long14 == 144L);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
    }

    @Test
    public void test10234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10234");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        java.lang.String str10 = dateTimeField9.getName();
        int int12 = dateTimeField9.get((long) (byte) 100);
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        int int14 = dateTimeField9.getMaximumShortTextLength(locale13);
        int int16 = dateTimeField9.getLeapAmount((-18575999880L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekOfWeekyear" + "'", str10, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test10235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10235");
        org.joda.time.Period period1 = org.joda.time.Period.hours(544);
        org.joda.time.Period period3 = period1.minusSeconds(146);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test10236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10236");
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType5, chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        long long26 = dateTimeZone20.previousTransition(518400000L);
        long long30 = dateTimeZone20.convertLocalToUTC((long) (short) 1, true, 652278993L);
        org.joda.time.Chronology chronology31 = chronology14.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone32 = chronology31.getZone();
        java.lang.String str34 = dateTimeZone32.getNameKey(0L);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 518400000L + "'", long26 == 518400000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
    }

    @Test
    public void test10237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10237");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        java.lang.String str10 = dateTimeField9.getName();
        int int12 = dateTimeField9.get((long) (byte) 100);
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        int int14 = dateTimeField9.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        java.util.GregorianCalendar gregorianCalendar19 = dateTime18.toGregorianCalendar();
        int int20 = dateTime18.getHourOfDay();
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = locale22.toLanguageTag();
        java.util.Calendar calendar24 = dateTime18.toCalendar(locale22);
        java.lang.String str25 = dateTimeField9.getAsShortText(23, locale22);
        long long27 = dateTimeField9.remainder((long) 34);
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.lang.String str30 = locale29.getISO3Country();
        java.lang.String str31 = dateTimeField9.getAsShortText(948, locale29);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekOfWeekyear" + "'", str10, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(gregorianCalendar19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-CN" + "'", str23, "zh-CN");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645514266252,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=46,MILLISECOND=252,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "23" + "'", str25, "23");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 259200034L + "'", long27 == 259200034L);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "JPN" + "'", str30, "JPN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "948" + "'", str31, "948");
    }

    @Test
    public void test10238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10238");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        int int3 = period2.getWeeks();
        org.joda.time.PeriodType periodType4 = period2.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType6 = periodType4.getFieldType(1059269);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1059269");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test10239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10239");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant24 = instant9.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Instant instant25 = instant24.toInstant();
        boolean boolean26 = instant25.isAfterNow();
        boolean boolean28 = instant25.isAfter((long) (-53));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test10240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10240");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        boolean boolean10 = dateTime3.equals((java.lang.Object) dateTime9);
        int int11 = dateTime3.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        boolean boolean17 = dateTime15.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property18 = dateTime15.millisOfSecond();
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.plusSeconds(10);
        org.joda.time.DateTime.Property property22 = dateTime19.yearOfEra();
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale24 = java.util.Locale.getDefault(category23);
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        int int26 = property22.getMaximumShortTextLength(locale24);
        org.joda.time.DateTime dateTime27 = property22.withMinimumValue();
        org.joda.time.DateTime dateTime29 = property22.addToCopy((-259200000L));
        org.joda.time.DateTime dateTime31 = property22.addWrapFieldToCopy((int) (byte) 100);
        boolean boolean32 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime3.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category23.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_ZH-CN");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
    }

    @Test
    public void test10241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10241");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 10, periodType4);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology16);
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds21 = seconds19.minus(seconds20);
        org.joda.time.Duration duration22 = seconds19.toStandardDuration();
        int[] intArray25 = chronology16.get((org.joda.time.ReadablePeriod) seconds19, 652278993L, (long) (-1));
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, periodType4, chronology16);
        org.joda.time.DurationField durationField27 = chronology16.centuries();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (-53), chronology16);
        mutablePeriod28.setMillis(56);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-652278]");
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test10242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10242");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMillis((int) '#');
        int int36 = instant24.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.DateTime dateTime39 = dateTime33.plusMinutes(25907773);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test10243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10243");
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType5, chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.hourOfDay();
        boolean boolean21 = dateTimeField19.isLeap((-177528405206520L));
        org.joda.time.Days days24 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod25 = days24.toMutablePeriod();
        org.joda.time.Duration duration26 = days24.toStandardDuration();
        org.joda.time.PeriodType periodType27 = days24.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.Chronology chronology36 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfHalfday();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType27, chronology36);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.millisOfDay();
        boolean boolean42 = dateTimeField40.isLeap((long) 1439);
        long long44 = dateTimeField40.roundHalfCeiling((-82737998L));
        java.lang.String str46 = dateTimeField40.getAsText(10L);
        int int48 = dateTimeField40.getLeapAmount((-100L));
        java.util.Locale locale51 = java.util.Locale.forLanguageTag("PT518400S");
        java.lang.String str52 = locale51.getDisplayName();
        java.lang.String str53 = dateTimeField40.getAsText(718, locale51);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMillis((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime57.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay64 = dateTime57.toYearMonthDay();
        int int65 = yearMonthDay64.size();
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("Chinese (China)");
        java.lang.String str69 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) yearMonthDay64, (int) (short) -1, locale68);
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((-1L), dateTimeZone76);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone76);
        int int80 = dateTimeZone76.getStandardOffset((long) 100);
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.lang.String str83 = dateTimeZone76.getName((long) 100, locale82);
        java.util.Locale locale84 = locale82.stripExtensions();
        java.lang.String str85 = locale71.getDisplayName(locale84);
        java.lang.String str86 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) yearMonthDay64, 87, locale84);
        java.lang.String str87 = locale84.getISO3Country();
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-82737998L) + "'", long44 == (-82737998L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "10" + "'", str46, "10");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "718" + "'", str53, "718");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-1" + "'", str69, "-1");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str85, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "87" + "'", str86, "87");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test10244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10244");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("333");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 333");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10245");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.monthOfYear();
        org.joda.time.Chronology chronology16 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10246");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        boolean boolean10 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusMinutes((int) ' ');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period31);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        boolean boolean40 = interval37.contains((-1L));
        boolean boolean41 = interval34.contains((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Interval interval42 = interval37.toInterval();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone47);
        org.joda.time.MutableInterval mutableInterval50 = interval49.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval51 = interval49.toMutableInterval();
        boolean boolean53 = mutableInterval51.isBefore((long) (-100));
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMillis((int) '4');
        org.joda.time.Chronology chronology62 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.millisOfDay();
        mutableInterval51.setChronology(chronology62);
        boolean boolean66 = interval37.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        boolean boolean79 = interval75.isAfter((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((-1L), dateTimeZone82);
        java.lang.String str85 = dateTimeZone82.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime86 = dateTime78.withZoneRetainFields(dateTimeZone82);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone82);
        org.joda.time.Interval interval88 = new org.joda.time.Interval((long) 12, 1645513731014L, dateTimeZone82);
        mutableInterval51.setInterval((org.joda.time.ReadableInterval) interval88);
        long long90 = mutableInterval51.getEndMillis();
        org.joda.time.MutableInterval mutableInterval91 = mutableInterval51.copy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00" + "'", str85, "+00:00");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1645513731014L + "'", long90 == 1645513731014L);
        org.junit.Assert.assertNotNull(mutableInterval91);
    }

    @Test
    public void test10247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10247");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 8, 600000L, chronology2);
        int int4 = mutablePeriod3.getYears();
        mutablePeriod3.addMinutes(182);
        mutablePeriod3.addHours(367);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology19);
        long long22 = mutableInterval21.getEndMillis();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (short) 10, (int) (byte) 100, 59, (int) (short) 100, 3, 59, (int) (short) 100);
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        mutablePeriod31.add((org.joda.time.ReadableInterval) interval34);
        mutableInterval21.setInterval((org.joda.time.ReadableInterval) interval34);
        mutableInterval21.setDurationBeforeEnd(1645513785703L);
        mutablePeriod3.add((org.joda.time.ReadableInterval) mutableInterval21);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86399L + "'", long22 == 86399L);
        org.junit.Assert.assertNotNull(interval35);
    }

    @Test
    public void test10248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10248");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfHalfday();
        org.joda.time.DateTime dateTime13 = dateTime2.withChronology(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime16 = dateTime2.plusSeconds(3);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = dateTime2.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        boolean boolean34 = interval30.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.lang.String str40 = dateTimeZone37.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime41 = dateTime33.withZoneRetainFields(dateTimeZone37);
        int int43 = dateTimeZone37.getStandardOffset((long) ' ');
        java.lang.String str44 = dateTimeZone37.getID();
        int int46 = dateTimeZone37.getOffsetFromLocal((long) 2074);
        org.joda.time.DateTime dateTime47 = dateTime2.withZone(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test10249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10249");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) 100, 1922L);
    }

    @Test
    public void test10250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10250");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        java.lang.String str1 = days0.toString();
        org.joda.time.Days days3 = days0.dividedBy(70);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) days0);
        org.joda.time.Duration duration5 = days4.toStandardDuration();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(0L, chronology7);
        int int9 = period8.getSeconds();
        org.joda.time.Period period11 = period8.withMonths((int) (byte) 10);
        int int12 = period11.getMillis();
        org.joda.time.Period period14 = period11.minusHours(138);
        org.joda.time.Period period16 = period11.minusDays(86399999);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays((int) (short) -1);
        int int24 = instant18.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime25 = instant18.toMutableDateTime();
        org.joda.time.Duration duration26 = period16.toDurationFrom((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        org.joda.time.Duration duration29 = days27.toStandardDuration();
        org.joda.time.Days days30 = days27.negated();
        boolean boolean31 = duration26.equals((java.lang.Object) days27);
        boolean boolean32 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration26);
        java.lang.String str33 = duration5.toString();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P6D" + "'", str1, "P6D");
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT518400S" + "'", str33, "PT518400S");
    }

    @Test
    public void test10251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10251");
        org.joda.time.Period period8 = new org.joda.time.Period(0, 2022, (-485), 138, 0, 0, 0, 135);
        org.joda.time.Days days9 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod10 = days9.toMutablePeriod();
        org.joda.time.Duration duration11 = days9.toStandardDuration();
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        boolean boolean15 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Days days16 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod17 = days16.toMutablePeriod();
        org.joda.time.Duration duration18 = days16.toStandardDuration();
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        org.joda.time.Duration duration21 = days19.toStandardDuration();
        boolean boolean22 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Days days23 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod24 = days23.toMutablePeriod();
        org.joda.time.Duration duration25 = days23.toStandardDuration();
        boolean boolean26 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration25);
        boolean boolean27 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property38 = dateTime35.property(dateTimeFieldType37);
        org.joda.time.DateTimeField dateTimeField39 = property38.getField();
        org.joda.time.DurationField durationField40 = property38.getDurationField();
        long long43 = durationField40.getMillis(100, (long) 2870);
        boolean boolean44 = period8.equals((java.lang.Object) long43);
        java.lang.String str45 = period8.toString();
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 60480000000L + "'", long43 == 60480000000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "P2022M-485W138DT0.135S" + "'", str45, "P2022M-485W138DT0.135S");
    }

    @Test
    public void test10252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10252");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property16 = dateTime10.weekyear();
        int int17 = property16.getLeapAmount();
        org.joda.time.DateTime dateTime19 = property16.setCopy(5);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = locale20.stripExtensions();
        int int22 = property16.getMaximumTextLength(locale20);
        java.lang.String str23 = locale20.getLanguage();
        java.util.Locale locale24 = locale20.stripExtensions();
        java.lang.String str25 = locale20.getLanguage();
        org.joda.time.format.PeriodFormatter periodFormatter26 = periodFormatter6.withLocale(locale20);
        java.util.Locale locale27 = periodFormatter26.getLocale();
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("yearOfEra");
        java.lang.String str30 = locale29.getVariant();
        java.lang.String str31 = locale29.getDisplayLanguage();
        java.lang.String str32 = locale29.getISO3Language();
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("yearOfEra");
        java.lang.String str35 = locale34.getVariant();
        java.lang.String str36 = locale34.getDisplayLanguage();
        java.lang.String str37 = locale34.getISO3Language();
        java.lang.String str38 = locale29.getDisplayLanguage(locale34);
        java.lang.String str39 = locale34.getDisplayName();
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter26.withLocale(locale34);
        org.joda.time.PeriodType periodType41 = periodFormatter26.getParseType();
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr" + "'", str23, "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr" + "'", str25, "fr");
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(periodType41);
    }

    @Test
    public void test10253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10253");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone12);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval16 = interval14.toMutableInterval();
        boolean boolean18 = mutableInterval16.isBefore((long) (-100));
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone23);
        boolean boolean27 = interval25.isAfter(100L);
        long long28 = interval25.getEndMillis();
        org.joda.time.Interval interval29 = interval25.toInterval();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval29.withDurationBeforeEnd(readableDuration30);
        org.joda.time.Duration duration32 = interval31.toDuration();
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Interval interval34 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        org.joda.time.Duration duration37 = days35.toStandardDuration();
        org.joda.time.Days days38 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod39 = days38.toMutablePeriod();
        org.joda.time.Duration duration40 = days38.toStandardDuration();
        boolean boolean41 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        org.joda.time.Days days45 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod46 = days45.toMutablePeriod();
        org.joda.time.Duration duration47 = days45.toStandardDuration();
        boolean boolean48 = duration44.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Days days49 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod50 = days49.toMutablePeriod();
        org.joda.time.Duration duration51 = days49.toStandardDuration();
        boolean boolean52 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration51);
        boolean boolean53 = duration40.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMillis((int) '4');
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property64 = dateTime61.property(dateTimeFieldType63);
        org.joda.time.DateTimeField dateTimeField65 = property64.getField();
        org.joda.time.DateTime dateTime66 = property64.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        boolean boolean71 = dateTimeZone68.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone68);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime72, readableDuration73);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType76 = periodType75.withMillisRemoved();
        org.joda.time.Period period77 = mutableInterval74.toPeriod(periodType75);
        long long78 = mutableInterval74.getStartMillis();
        boolean boolean79 = property64.equals((java.lang.Object) mutableInterval74);
        boolean boolean80 = interval34.overlaps((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.Interval interval81 = mutableInterval74.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval74.getEnd();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1645514266678L + "'", long78 == 1645514266678L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test10254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10254");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.MIN_VALUE;
        boolean boolean3 = days0.isLessThan(days2);
        org.joda.time.Days days4 = days0.negated();
        org.joda.time.Period period5 = days4.toPeriod();
        org.joda.time.Period period7 = period5.plusDays(829);
        org.joda.time.Period period8 = period7.toPeriod();
        org.joda.time.Period period10 = period8.minusMillis(247);
        org.joda.time.Period period12 = period8.plusMillis((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology25);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((-1L), 59L, chronology25);
        org.joda.time.DateTime dateTime29 = mutableInterval28.getEnd();
        org.joda.time.Instant instant30 = dateTime29.toInstant();
        org.joda.time.Instant instant32 = instant30.withMillis(1645513805919L);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((long) 117, 2911679);
        org.joda.time.MutableDateTime mutableDateTime36 = instant35.toMutableDateTime();
        org.joda.time.Duration duration37 = period12.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.Duration duration38 = duration37.toDuration();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration38);
    }

    @Test
    public void test10255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10255");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '4');
        org.joda.time.Duration duration4 = duration1.withDurationAdded((-3124051200001L), (int) (byte) 0);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test10256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10256");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        boolean boolean10 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusMinutes((int) ' ');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period31);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        boolean boolean40 = interval37.contains((-1L));
        boolean boolean41 = interval34.contains((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Interval interval42 = interval37.toInterval();
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        mutableInterval44.setDurationAfterStart(23L);
        org.joda.time.Period period47 = mutableInterval44.toPeriod();
        org.joda.time.Days days48 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod49 = days48.toMutablePeriod();
        mutablePeriod49.setSeconds((int) (byte) 0);
        mutablePeriod49.setDays((int) 'a');
        mutablePeriod49.addSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology58 = null;
        mutablePeriod49.setPeriod(10L, (long) (byte) 1, chronology58);
        int int60 = mutablePeriod49.getYears();
        org.joda.time.Period period65 = new org.joda.time.Period((int) (byte) 1, 0, (-1), 10);
        mutablePeriod49.mergePeriod((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period68 = period65.withDays(1439);
        org.joda.time.PeriodType periodType69 = period65.getPeriodType();
        org.joda.time.Period period71 = period65.plusMillis(360000000);
        mutableInterval44.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period65);
        boolean boolean73 = interval42.abuts((org.joda.time.ReadableInterval) mutableInterval44);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test10257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10257");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        java.lang.String str8 = interval7.toString();
        org.joda.time.DateTime dateTime9 = interval7.getEnd();
        org.joda.time.Interval interval10 = interval7.toInterval();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) 0);
        mutablePeriod12.addMillis(34);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone17.isLocalDateTimeGap(localDateTime19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime27.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        boolean boolean37 = dateTime35.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration39 = minutes38.toStandardDuration();
        org.joda.time.Duration duration40 = minutes38.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration42 = duration40.toDuration();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.Instant instant52 = dateTime46.toInstant();
        org.joda.time.Instant instant53 = instant52.toInstant();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime58 = null;
        boolean boolean59 = dateTimeZone56.isLocalDateTimeGap(localDateTime58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime62 = dateTime60.withHourOfDay(0);
        boolean boolean63 = instant53.isEqual((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration65 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant67 = instant53.withDurationAdded((org.joda.time.ReadableDuration) duration65, (-1));
        boolean boolean69 = instant67.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology70 = instant67.getChronology();
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration42, chronology70);
        int int73 = mutablePeriod12.getValue(0);
        boolean boolean74 = interval7.equals((java.lang.Object) int73);
        boolean boolean75 = interval7.isAfterNow();
        org.joda.time.MutableInterval mutableInterval76 = interval7.toMutableInterval();
        org.joda.time.Period period77 = org.joda.time.Period.ZERO;
        int int78 = period77.getDays();
        org.joda.time.Period period80 = period77.withYears((int) (byte) 1);
        org.joda.time.Period period82 = period80.withYears((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((-1L), dateTimeZone85);
        java.lang.String str88 = dateTimeZone85.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime89 = org.joda.time.DateTime.now(dateTimeZone85);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period80, (org.joda.time.ReadableInstant) dateTime89);
        boolean boolean91 = interval7.contains((org.joda.time.ReadableInterval) mutableInterval90);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z" + "'", str8, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mutableInterval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00" + "'", str88, "+00:00");
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test10258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10258");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime3.toCalendar(locale9);
        org.joda.time.DateTime dateTime13 = dateTime3.plusYears((int) (short) 0);
        boolean boolean14 = dateTime3.isBeforeNow();
        org.joda.time.DateTime dateTime16 = dateTime3.plusMonths((int) (short) 1);
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Duration duration19 = days17.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTimeISO();
        org.joda.time.Instant instant29 = dateTime23.toInstant();
        org.joda.time.Instant instant30 = instant29.toInstant();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone33.isLocalDateTimeGap(localDateTime35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = dateTime37.withHourOfDay(0);
        boolean boolean40 = instant30.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant44 = instant30.withDurationAdded((org.joda.time.ReadableDuration) duration42, (-1));
        boolean boolean46 = instant44.isBefore((long) (short) 10);
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration49 = period48.toStandardDuration();
        org.joda.time.Instant instant50 = instant44.plus((org.joda.time.ReadableDuration) duration49);
        boolean boolean51 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Calendar calendar57 = dateTime55.toCalendar(locale56);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMillis((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime55.toDateTimeISO();
        org.joda.time.Instant instant61 = dateTime55.toInstant();
        org.joda.time.Instant instant62 = instant61.toInstant();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone65.isLocalDateTimeGap(localDateTime67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime71 = dateTime69.withHourOfDay(0);
        boolean boolean72 = instant62.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration74 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant76 = instant62.withDurationAdded((org.joda.time.ReadableDuration) duration74, (-1));
        boolean boolean78 = instant76.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((-1L), dateTimeZone81);
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.util.Calendar calendar84 = dateTime82.toCalendar(locale83);
        org.joda.time.DateTime dateTime86 = dateTime82.plusMillis((int) '4');
        org.joda.time.DateTime dateTime87 = dateTime82.toDateTimeISO();
        org.joda.time.Instant instant88 = dateTime82.toInstant();
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant76, (org.joda.time.ReadableInstant) dateTime82, periodType89);
        org.joda.time.PeriodType periodType91 = periodType89.withWeeksRemoved();
        org.joda.time.PeriodType periodType92 = periodType91.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration49, periodType92);
        org.joda.time.DateTime dateTime95 = dateTime3.minus(604198800000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime97 = dateTime95.withDayOfMonth(870901920);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 870901920 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test10259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10259");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds2 = seconds0.dividedBy(4);
        org.joda.time.Seconds seconds3 = seconds0.negated();
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds6 = seconds4.minus(seconds5);
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds9 = seconds7.minus(seconds8);
        org.joda.time.Seconds seconds10 = seconds6.minus(seconds7);
        org.joda.time.Seconds seconds11 = seconds10.negated();
        boolean boolean12 = seconds0.isLessThan(seconds11);
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds15 = seconds13.minus(seconds14);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone20);
        boolean boolean24 = interval22.isAfter(100L);
        long long25 = interval22.getEndMillis();
        org.joda.time.Interval interval26 = interval22.toInterval();
        boolean boolean28 = interval22.isBefore((long) (-1));
        boolean boolean29 = interval22.isBeforeNow();
        boolean boolean30 = interval22.isAfterNow();
        org.joda.time.Seconds seconds31 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval22);
        boolean boolean32 = seconds15.isLessThan(seconds31);
        int int33 = seconds15.getSeconds();
        org.joda.time.Seconds seconds34 = null;
        org.joda.time.Seconds seconds35 = seconds15.minus(seconds34);
        org.joda.time.Seconds seconds36 = seconds11.plus(seconds15);
        org.joda.time.Seconds seconds37 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds38 = seconds37.negated();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone43);
        boolean boolean47 = interval45.isAfter(100L);
        long long48 = interval45.getEndMillis();
        org.joda.time.Interval interval49 = interval45.toInterval();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Interval interval51 = interval49.withDurationBeforeEnd(readableDuration50);
        org.joda.time.Period period52 = interval49.toPeriod();
        org.joda.time.Seconds seconds53 = period52.toStandardSeconds();
        org.joda.time.PeriodType periodType54 = seconds53.getPeriodType();
        org.joda.time.Seconds seconds55 = seconds37.minus(seconds53);
        org.joda.time.Seconds seconds56 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds57 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds58 = seconds56.minus(seconds57);
        boolean boolean59 = seconds55.isGreaterThan(seconds56);
        boolean boolean60 = seconds36.isGreaterThan(seconds56);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(seconds53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(seconds55);
        org.junit.Assert.assertNotNull(seconds56);
        org.junit.Assert.assertNotNull(seconds57);
        org.junit.Assert.assertNotNull(seconds58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10260");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime2.withYear(829);
        int int12 = dateTime2.getMillisOfDay();
        boolean boolean14 = dateTime2.isEqual(259200051L);
        org.joda.time.LocalDate localDate15 = dateTime2.toLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514266919,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=46,MILLISECOND=919,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 26266919 + "'", int12 == 26266919);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test10261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10261");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology19);
        mutablePeriod1.setPeriod((long) (-1), chronology19);
        org.joda.time.Days days23 = org.joda.time.Days.ZERO;
        org.joda.time.Days days24 = days23.negated();
        int[] intArray27 = chronology19.get((org.joda.time.ReadablePeriod) days23, 1L, 1645513717718L);
        org.joda.time.Days days29 = days23.minus((int) 'x');
        java.lang.String str30 = days23.toString();
        org.joda.time.PeriodType periodType31 = days23.getPeriodType();
        org.joda.time.PeriodType periodType32 = periodType31.withMillisRemoved();
        java.lang.String str33 = periodType31.toString();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[19045]");
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "P0D" + "'", str30, "P0D");
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PeriodType[Days]" + "'", str33, "PeriodType[Days]");
    }

    @Test
    public void test10262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10262");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime4.plusMonths((int) (byte) 1);
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        org.joda.time.PeriodType periodType16 = days13.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType16, chronology25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.millisOfDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) dateTime10, chronology25);
        org.joda.time.DateTimeField dateTimeField31 = chronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology25.centuryOfEra();
        org.joda.time.Period period34 = new org.joda.time.Period(288L, chronology25);
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        org.joda.time.Duration duration37 = days35.toStandardDuration();
        org.joda.time.Days days38 = days35.negated();
        org.joda.time.Days days39 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod40 = days39.toMutablePeriod();
        org.joda.time.Duration duration41 = days39.toStandardDuration();
        org.joda.time.Days days42 = days35.plus(days39);
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        int int44 = mutablePeriod43.getDays();
        int[] intArray47 = chronology25.get((org.joda.time.ReadablePeriod) mutablePeriod43, 1639440000138L, 568L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 12 + "'", int44 == 12);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-51, -11, -1, -5, -23, -59, -59, -570]");
    }

    @Test
    public void test10263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10263");
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.PeriodType periodType7 = days4.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.Chronology chronology16 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType7, chronology16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.millisOfDay();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-259200000L), (long) '#', chronology16);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = interval21.isBefore(readableInstant24);
        org.joda.time.DateTime dateTime26 = interval21.getEnd();
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test10264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10264");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology12);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((-1L), 59L, chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.year();
        org.joda.time.DurationField durationField18 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology12.getZone();
        java.lang.String str22 = dateTimeZone20.getShortName((-1639440603L));
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
    }

    @Test
    public void test10265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10265");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((-72));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test10266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10266");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration2 = period1.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration12 = duration2.toDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        boolean boolean18 = dateTimeZone15.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        int int20 = dateTime19.getDayOfYear();
        int int21 = dateTime19.getDayOfWeek();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        boolean boolean27 = dateTime25.isAfter((long) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime25.minusSeconds((int) (byte) -1);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType31 = periodType30.withYearsRemoved();
        org.joda.time.PeriodType periodType32 = periodType31.withSecondsRemoved();
        org.joda.time.PeriodType periodType33 = periodType32.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant22, (org.joda.time.ReadableInstant) dateTime25, periodType32);
        org.joda.time.Period period35 = duration13.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType32);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-24L));
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime41.toDateTimeISO();
        org.joda.time.Instant instant47 = dateTime41.toInstant();
        org.joda.time.Instant instant48 = instant47.toInstant();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone51.isLocalDateTimeGap(localDateTime53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime57 = dateTime55.withHourOfDay(0);
        boolean boolean58 = instant48.isEqual((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant62 = instant48.withDurationAdded((org.joda.time.ReadableDuration) duration60, (-1));
        boolean boolean64 = instant62.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology65 = instant62.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.weekOfWeekyear();
        boolean boolean67 = dateTime37.equals((java.lang.Object) chronology65);
        org.joda.time.Minutes minutes68 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType69 = minutes68.getFieldType();
        org.joda.time.Duration duration70 = minutes68.toStandardDuration();
        org.joda.time.PeriodType periodType71 = minutes68.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime37, periodType71);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod72.add(225, 246, (-2), 529, 735, 636, 2147483647, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(minutes68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(periodType71);
    }

    @Test
    public void test10267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10267");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        long long13 = duration12.getStandardHours();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12, periodType15);
        org.joda.time.DateTime dateTime18 = dateTime8.withWeekyear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone21.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime27.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = dateTime8.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean32 = dateTime30.isSupported(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime33 = dateTime30.toLocalDateTime();
        org.joda.time.DateTime dateTime35 = dateTime30.withYearOfCentury(0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 144L + "'", long13 == 144L);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test10268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10268");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = dateTime2.toLocalTime();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType6 = periodType5.withMillisRemoved();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (-1), periodType6, chronology7);
        org.joda.time.PeriodType periodType9 = mutablePeriod8.getPeriodType();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) (byte) 1);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.DateTime.Property property14 = dateTime2.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        mutablePeriod20.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval23 = null;
        mutablePeriod20.add(readableInterval23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.eras();
        int int26 = mutablePeriod20.get(durationFieldType25);
        boolean boolean27 = mutablePeriod18.isSupported(durationFieldType25);
        mutablePeriod18.addSeconds((int) '#');
        mutablePeriod18.addSeconds((int) (short) 0);
        java.lang.String str32 = mutablePeriod18.toString();
        org.joda.time.Days days33 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod34 = days33.toMutablePeriod();
        org.joda.time.Duration duration35 = days33.toStandardDuration();
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        boolean boolean39 = duration35.isLongerThan((org.joda.time.ReadableDuration) duration38);
        mutablePeriod18.setPeriod((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10);
        int int44 = period43.getSeconds();
        org.joda.time.Period period46 = period43.minusHours(100);
        int int47 = period46.getDays();
        org.joda.time.Period period49 = period46.plusMillis((int) (byte) 1);
        org.joda.time.Days days50 = period46.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval41.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "P6DT35S" + "'", str32, "P6DT35S");
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(days50);
    }

    @Test
    public void test10269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10269");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        boolean boolean14 = interval10.isAfter((long) 10);
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime22.toDateTimeISO();
        org.joda.time.Instant instant28 = dateTime22.toInstant();
        org.joda.time.Instant instant29 = instant28.toInstant();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTimeISO();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType40 = periodType39.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant28, (org.joda.time.ReadableInstant) dateTime38, periodType39);
        org.joda.time.Period period42 = interval17.toPeriod(periodType39);
        boolean boolean43 = interval10.abuts((org.joda.time.ReadableInterval) interval17);
        boolean boolean44 = interval10.containsNow();
        long long45 = interval10.getStartMillis();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514267156L + "'", long18 == 1645514267156L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
    }

    @Test
    public void test10270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10270");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        long long13 = duration12.getStandardHours();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12, periodType15);
        org.joda.time.DateTime dateTime18 = dateTime8.withWeekyear((int) '#');
        org.joda.time.LocalTime localTime19 = dateTime8.toLocalTime();
        java.util.Date date20 = dateTime8.toDate();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone25);
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval27.toMutableInterval();
        boolean boolean31 = mutableInterval29.isBefore((long) (-100));
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone36);
        boolean boolean40 = interval38.isAfter(100L);
        long long41 = interval38.getEndMillis();
        org.joda.time.Interval interval42 = interval38.toInterval();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Interval interval44 = interval42.withDurationBeforeEnd(readableDuration43);
        org.joda.time.Duration duration45 = interval44.toDuration();
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period47 = duration45.toPeriod();
        org.joda.time.Period period48 = duration45.toPeriod();
        org.joda.time.Duration duration50 = duration45.plus((long) 59);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((java.lang.Object) "8");
        org.joda.time.Instant instant54 = instant52.plus(86399L);
        org.joda.time.MutableDateTime mutableDateTime55 = instant52.toMutableDateTimeISO();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) instant52);
        boolean boolean57 = dateTime8.isBefore((org.joda.time.ReadableInstant) instant52);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 144L + "'", long13 == 144L);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Feb 22 00:17:47 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test10271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10271");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        boolean boolean14 = interval10.isAfter((long) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        boolean boolean28 = dateTime26.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isStandardOffset((long) (byte) 100);
        boolean boolean36 = dateTimeZone31.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone39.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = dateTime43.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        boolean boolean59 = dateTime57.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes60 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration61 = minutes60.toStandardDuration();
        org.joda.time.Duration duration62 = minutes60.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration62);
        int int64 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime65 = dateTime18.withZoneRetainFields(dateTimeZone31);
        boolean boolean66 = interval10.isBefore((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime.Property property67 = dateTime65.dayOfWeek();
        org.joda.time.DateTime dateTime69 = dateTime65.plusMinutes(359);
        org.joda.time.DateTime dateTime71 = dateTime69.withWeekyear(0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test10272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10272");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(864, 108, 0, 292278993);
        mutablePeriod4.setPeriod(864, 503, 45, 829, 25785, 216, (-100), 57);
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = mutablePeriod4.get(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test10273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10273");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        boolean boolean15 = dateTimeZone12.isStandardOffset((long) (byte) 100);
        boolean boolean17 = dateTimeZone12.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        boolean boolean40 = dateTime38.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration42 = minutes41.toStandardDuration();
        org.joda.time.Duration duration43 = minutes41.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration43);
        int int45 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology46 = chronology9.withZone(dateTimeZone12);
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10);
        int int49 = period48.getSeconds();
        org.joda.time.Period period51 = period48.minusHours(100);
        int int52 = period51.getDays();
        int[] intArray55 = chronology9.get((org.joda.time.ReadablePeriod) period51, (-1L), (long) 'a');
        org.joda.time.DateTimeField dateTimeField56 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField57 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField58 = chronology9.yearOfCentury();
        org.joda.time.Period period59 = new org.joda.time.Period((long) 2022, chronology9);
        org.joda.time.Minutes minutes60 = period59.toStandardMinutes();
        int int61 = period59.getWeeks();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 98]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test10274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10274");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(59);
        org.joda.time.Period period3 = org.joda.time.Period.hours((int) (short) 0);
        org.joda.time.PeriodType periodType4 = period3.getPeriodType();
        org.joda.time.Minutes minutes5 = period3.toStandardMinutes();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTimeISO();
        org.joda.time.Instant instant15 = dateTime9.toInstant();
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant26 = dateTime20.toInstant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        boolean boolean37 = instant27.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant41 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration39, (-1));
        boolean boolean43 = instant41.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime47.toDateTimeISO();
        org.joda.time.Instant instant53 = dateTime47.toInstant();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant41, (org.joda.time.ReadableInstant) dateTime47, periodType54);
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) instant16, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Minutes minutes58 = minutes56.multipliedBy(69);
        boolean boolean59 = minutes5.isGreaterThan(minutes58);
        int int60 = minutes58.getMinutes();
        org.joda.time.DurationFieldType durationFieldType61 = null;
        boolean boolean62 = minutes58.isSupported(durationFieldType61);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone67);
        org.joda.time.MutableInterval mutableInterval70 = interval69.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval71 = interval69.toMutableInterval();
        mutableInterval71.setDurationBeforeEnd((long) 170);
        org.joda.time.Minutes minutes74 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) mutableInterval71);
        boolean boolean75 = minutes58.isGreaterThan(minutes74);
        org.joda.time.Minutes minutes76 = minutes1.plus(minutes74);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(mutableInterval71);
        org.junit.Assert.assertNotNull(minutes74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(minutes76);
    }

    @Test
    public void test10275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10275");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.weekyear();
        org.joda.time.DateTime.Property property10 = dateTime3.yearOfCentury();
        int int11 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime13 = dateTime3.withYearOfEra(32820);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 365 + "'", int11 == 365);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test10276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10276");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        long long2 = duration1.getStandardMinutes();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTimeISO();
        org.joda.time.Instant instant12 = dateTime6.toInstant();
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone16.isLocalDateTimeGap(localDateTime18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(0);
        boolean boolean23 = instant13.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant27 = instant13.withDurationAdded((org.joda.time.ReadableDuration) duration25, (-1));
        boolean boolean29 = instant27.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTimeISO();
        org.joda.time.Instant instant39 = dateTime33.toInstant();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant27, (org.joda.time.ReadableInstant) dateTime33, periodType40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period44 = period42.minusHours(75311);
        org.joda.time.Period period46 = period42.multipliedBy(659);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
    }

    @Test
    public void test10277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10277");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        int int6 = property5.getLeapAmount();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        boolean boolean8 = property5.isLeap();
        org.joda.time.DateTime dateTime10 = property5.addWrapFieldToCopy(791);
        int int11 = property5.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test10278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10278");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType3 = periodType2.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(172800000L, (long) '4', periodType2);
        org.joda.time.format.PeriodPrinter periodPrinter5 = null;
        org.joda.time.format.PeriodParser periodParser6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = new org.joda.time.format.PeriodFormatter(periodPrinter5, periodParser6);
        org.joda.time.PeriodType periodType8 = periodFormatter7.getParseType();
        org.joda.time.PeriodType periodType9 = periodFormatter7.getParseType();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter7.withLocale(locale10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.Instant instant21 = dateTime15.toInstant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone25.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime31 = dateTime29.withHourOfDay(0);
        boolean boolean32 = instant22.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant36 = instant22.withDurationAdded((org.joda.time.ReadableDuration) duration34, (-1));
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime40.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.plusMillis((int) '#');
        int int48 = instant36.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime49 = dateTime45.toDateTime();
        java.util.Locale locale50 = java.util.Locale.CHINA;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.lang.String str52 = locale50.getISO3Language();
        java.lang.String str53 = locale50.getDisplayScript();
        java.util.Calendar calendar54 = dateTime45.toCalendar(locale50);
        org.joda.time.format.PeriodFormatter periodFormatter55 = periodFormatter11.withLocale(locale50);
        boolean boolean56 = periodFormatter11.isParser();
        org.joda.time.format.PeriodParser periodParser57 = periodFormatter11.getParser();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((long) 2, (long) 23);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.Days days62 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod63 = days62.toMutablePeriod();
        mutablePeriod63.setSeconds((int) (byte) 0);
        mutableInterval60.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod63);
        mutablePeriod63.setPeriod((long) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray69 = mutablePeriod63.getFieldTypes();
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.forFields(durationFieldTypeArray69);
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter11.withParseType(periodType70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = mutablePeriod4.toString(periodFormatter71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNull(periodType8);
        org.junit.Assert.assertNull(periodType9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "zho" + "'", str52, "zho");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(periodFormatter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(periodParser57);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(durationFieldTypeArray69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodFormatter71);
    }

    @Test
    public void test10279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10279");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTimeISO();
        org.joda.time.Instant instant30 = dateTime24.toInstant();
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        boolean boolean41 = instant31.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant45 = instant31.withDurationAdded((org.joda.time.ReadableDuration) duration43, (-1));
        boolean boolean47 = instant45.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTimeISO();
        org.joda.time.Instant instant57 = dateTime51.toInstant();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant45, (org.joda.time.ReadableInstant) dateTime51, periodType58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        java.util.GregorianCalendar gregorianCalendar64 = dateTime63.toGregorianCalendar();
        int int65 = dateTime63.getHourOfDay();
        java.util.Locale locale66 = java.util.Locale.CHINA;
        java.util.Locale locale67 = locale66.stripExtensions();
        java.lang.String str68 = locale67.toLanguageTag();
        java.util.Calendar calendar69 = dateTime63.toCalendar(locale67);
        org.joda.time.DateTime.Property property70 = dateTime63.minuteOfHour();
        boolean boolean71 = property70.isLeap();
        org.joda.time.DateTime dateTime72 = property70.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean74 = dateTime72.isSupported(dateTimeFieldType73);
        org.joda.time.Duration duration75 = period59.toDurationFrom((org.joda.time.ReadableInstant) dateTime72);
        int int76 = dateTime72.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight77 = dateTime72.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(gregorianCalendar64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 7 + "'", int65 == 7);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "zh-CN" + "'", str68, "zh-CN");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645514267507,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=47,MILLISECOND=507,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight77);
    }

    @Test
    public void test10280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10280");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((-1L));
        java.lang.String str2 = duration1.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        boolean boolean7 = dateTime5.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property8 = dateTime5.millisOfSecond();
        int int9 = property8.getLeapAmount();
        org.joda.time.DateTime dateTime10 = property8.roundHalfEvenCopy();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.time();
        org.joda.time.Period period12 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime10, periodType11);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType11);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT-0.001S" + "'", str2, "PT-0.001S");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test10281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10281");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.addWeeks((int) (short) -1);
        mutablePeriod1.addYears((-100));
        mutablePeriod1.setDays((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology18);
        long long21 = mutableInterval20.getEndMillis();
        org.joda.time.Days days22 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.DurationFieldType durationFieldType23 = days22.getFieldType();
        java.lang.String str24 = durationFieldType23.toString();
        boolean boolean25 = mutablePeriod1.isSupported(durationFieldType23);
        mutablePeriod1.setPeriod(1047600035L, (long) 53);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = mutablePeriod1.getValue(25977556);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25977556");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 86399L + "'", long21 == 86399L);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "days" + "'", str24, "days");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test10282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10282");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        boolean boolean9 = dateTime7.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property10 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds(10);
        org.joda.time.DateTime.Property property14 = dateTime11.yearOfEra();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        int int18 = property14.getMaximumShortTextLength(locale16);
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter2.withLocale(locale16);
        boolean boolean20 = periodFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        boolean boolean34 = dateTime32.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration36 = minutes35.toStandardDuration();
        org.joda.time.Minutes minutes38 = minutes35.minus((int) (byte) 100);
        org.joda.time.Minutes minutes40 = minutes35.minus(1970);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType42 = minutes41.getFieldType();
        org.joda.time.Minutes minutes44 = minutes41.plus(1);
        boolean boolean45 = minutes40.isGreaterThan(minutes41);
        org.joda.time.MutablePeriod mutablePeriod46 = minutes41.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int49 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod46, "years", 660);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_ZH-CN");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mutablePeriod46);
    }

    @Test
    public void test10283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10283");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone5);
        boolean boolean9 = interval7.isAfter(100L);
        long long10 = interval7.getEndMillis();
        org.joda.time.Interval interval11 = interval7.toInterval();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = interval11.withDurationBeforeEnd(readableDuration12);
        org.joda.time.Period period14 = interval11.toPeriod();
        org.joda.time.Interval interval15 = interval11.toInterval();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Interval interval17 = interval11.withPeriodBeforeEnd(readablePeriod16);
        org.joda.time.Chronology chronology18 = interval11.getChronology();
        org.joda.time.Days days23 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod24 = days23.toMutablePeriod();
        org.joda.time.Duration duration25 = days23.toStandardDuration();
        org.joda.time.PeriodType periodType26 = days23.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfHalfday();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType26, chronology35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField39 = chronology35.millisOfDay();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((-259200000L), (long) '#', chronology35);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period42 = interval40.toPeriod(periodType41);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(periodType41);
        long long46 = chronology18.add((org.joda.time.ReadablePeriod) mutablePeriod43, (-58540492798842L), 2022);
        java.lang.Object obj48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval(obj48, chronology49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.MutableInterval mutableInterval52 = interval51.toMutableInterval();
        org.joda.time.Days days53 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod54 = days53.toMutablePeriod();
        org.joda.time.Duration duration55 = days53.toStandardDuration();
        long long56 = duration55.getStandardHours();
        mutableInterval52.setDurationAfterStart((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Days days62 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod63 = days62.toMutablePeriod();
        org.joda.time.Duration duration64 = days62.toStandardDuration();
        org.joda.time.PeriodType periodType65 = days62.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-1L), dateTimeZone68);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.util.Calendar calendar71 = dateTime69.toCalendar(locale70);
        org.joda.time.DateTime dateTime73 = dateTime69.plusMillis((int) '4');
        org.joda.time.Chronology chronology74 = dateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.hourOfHalfday();
        org.joda.time.Period period76 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType65, chronology74);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology74);
        org.joda.time.DateTimeField dateTimeField78 = chronology74.millisOfDay();
        org.joda.time.Interval interval79 = new org.joda.time.Interval((-259200000L), (long) '#', chronology74);
        mutableInterval52.setChronology(chronology74);
        mutablePeriod43.setPeriod((-1639440687L), chronology74);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(502L, chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-58540492798842L) + "'", long46 == (-58540492798842L));
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 144L + "'", long56 == 144L);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test10284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10284");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Instant instant25 = instant9.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant28 = instant9.withDurationAdded((long) 2, 23);
        org.joda.time.Instant instant30 = instant28.plus(604198800000L);
        org.joda.time.MutableDateTime mutableDateTime31 = instant28.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant28, readableDuration32);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
    }

    @Test
    public void test10285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10285");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        boolean boolean5 = dateTime3.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property6 = dateTime3.millisOfSecond();
        int int7 = property6.getLeapAmount();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.lang.String str11 = property6.getAsText(locale9);
        java.lang.String str12 = locale0.getDisplayCountry(locale9);
        java.lang.String str13 = locale9.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "690" + "'", str11, "690");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u5fb7\u56fd" + "'", str12, "\u5fb7\u56fd");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test10286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10286");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setDays((int) 'a');
        mutablePeriod1.addSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology10 = null;
        mutablePeriod1.setPeriod(10L, (long) (byte) 1, chronology10);
        int int12 = mutablePeriod1.getWeeks();
        org.joda.time.Days days13 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) mutablePeriod1);
        org.joda.time.Period period14 = days13.toPeriod();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test10287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10287");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.Hours hours33 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime35 = dateTime23.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        int int37 = property9.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        boolean boolean48 = interval44.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.TimeOfDay timeOfDay49 = dateTime47.toTimeOfDay();
        int int50 = property9.compareTo((org.joda.time.ReadablePartial) timeOfDay49);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime55 = null;
        boolean boolean56 = dateTimeZone53.isLocalDateTimeGap(localDateTime55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime59 = dateTime57.withHourOfDay(0);
        int int60 = dateTime59.getDayOfWeek();
        org.joda.time.DateTime dateTime62 = dateTime59.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime63 = timeOfDay49.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime.Property property64 = dateTime63.year();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        int int69 = dateTime68.getHourOfDay();
        org.joda.time.DateTime dateTime71 = dateTime68.minusWeeks(59);
        org.joda.time.Duration duration73 = org.joda.time.Duration.millis(10L);
        org.joda.time.DateTime dateTime74 = dateTime68.plus((org.joda.time.ReadableDuration) duration73);
        boolean boolean75 = dateTime68.isAfterNow();
        org.joda.time.Instant instant76 = dateTime68.toInstant();
        org.joda.time.DateTime.Property property77 = dateTime68.centuryOfEra();
        int int78 = property64.getDifference((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime79 = property64.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514267723,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=47,MILLISECOND=723,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 23 + "'", int69 == 23);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test10288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10288");
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType5, chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.millisOfDay();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = dateTimeField18.getAsText(20, locale20);
        java.lang.String str23 = locale20.getISO3Country();
        java.util.Locale.setDefault(locale20);
        java.lang.String str25 = locale20.getDisplayScript();
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "20" + "'", str22, "20");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CHN" + "'", str23, "CHN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test10289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10289");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusHours(100);
        int int5 = period4.getMillis();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.Duration duration12 = period4.toDurationTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        boolean boolean23 = interval19.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.lang.String str29 = dateTimeZone26.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime30 = dateTime22.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = dateTime9.withZoneRetainFields(dateTimeZone26);
        java.lang.String str34 = dateTimeZone26.getNameKey(291L);
        int int36 = dateTimeZone26.getStandardOffset((-13384770220774098L));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test10290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10290");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        mutablePeriod1.setYears(7);
        mutablePeriod1.setMonths((-100));
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod1.copy();
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod19.copy();
        mutablePeriod19.add((-604800000L));
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 7, (long) (byte) 10, chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1645513851211L, chronology35);
        mutablePeriod19.setPeriod((long) 823, chronology35);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology35);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test10291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10291");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        java.lang.String str1 = days0.toString();
        org.joda.time.Days days3 = days0.dividedBy(70);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        int int10 = dateTime7.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime7.getZone();
        org.joda.time.TimeOfDay timeOfDay12 = dateTime7.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.Days days17 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) timeOfDay12, (org.joda.time.ReadablePartial) localTime16);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        boolean boolean28 = interval24.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.TimeOfDay timeOfDay29 = dateTime27.toTimeOfDay();
        org.joda.time.Days days30 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) timeOfDay29);
        org.joda.time.Days days32 = days30.multipliedBy(292278993);
        org.joda.time.Days days33 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod34 = days33.toMutablePeriod();
        org.joda.time.Duration duration35 = days33.toStandardDuration();
        org.joda.time.Days days36 = days33.negated();
        org.joda.time.Days days37 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod38 = days37.toMutablePeriod();
        org.joda.time.Days days39 = org.joda.time.Days.MIN_VALUE;
        boolean boolean40 = days37.isLessThan(days39);
        org.joda.time.Days days42 = days37.multipliedBy(23);
        org.joda.time.Days days43 = days36.plus(days42);
        boolean boolean44 = days30.isLessThan(days42);
        org.joda.time.Days days46 = days30.plus(2108160);
        boolean boolean47 = days3.isLessThan(days30);
        org.joda.time.Days days49 = days3.minus(68);
        org.joda.time.Days days51 = days3.multipliedBy((int) (byte) 0);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P6D" + "'", str1, "P6D");
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(days51);
    }

    @Test
    public void test10292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10292");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology12);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((-1L), 59L, chronology12);
        org.joda.time.DateTime dateTime16 = mutableInterval15.getEnd();
        org.joda.time.Period period17 = mutableInterval15.toPeriod();
        boolean boolean19 = mutableInterval15.equals((java.lang.Object) "56");
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval15.setInterval((long) 2721, 9L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10293");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.MIN_VALUE;
        boolean boolean3 = days0.isLessThan(days2);
        org.joda.time.Days days4 = days0.negated();
        org.joda.time.Days days6 = days0.dividedBy(999);
        org.joda.time.MutablePeriod mutablePeriod7 = days6.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime11.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime11.toYearMonthDay();
        org.joda.time.DateTime dateTime20 = dateTime11.plusYears(27423259);
        java.lang.Object obj21 = null;
        boolean boolean22 = dateTime11.equals(obj21);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) days6, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Days days25 = days6.dividedBy(6);
        org.joda.time.Period period26 = days25.toPeriod();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test10294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10294");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime14 = dateTime9.toLocalDateTime();
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Calendar calendar17 = dateTime9.toCalendar(locale15);
        org.joda.time.DateTime dateTime19 = dateTime9.plusYears((int) (short) 0);
        boolean boolean20 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime9.toDateTime();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone25.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime31 = dateTime29.withHourOfDay(0);
        org.joda.time.DateTime dateTime33 = dateTime29.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime35 = dateTime29.withWeekyear((int) (byte) 0);
        int int36 = dateTime35.getEra();
        boolean boolean37 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property38 = dateTime9.weekOfWeekyear();
        org.joda.time.DateTime.Property property39 = dateTime9.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test10295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10295");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        boolean boolean15 = dateTimeZone12.isStandardOffset((long) (byte) 100);
        boolean boolean17 = dateTimeZone12.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        boolean boolean40 = dateTime38.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration42 = minutes41.toStandardDuration();
        org.joda.time.Duration duration43 = minutes41.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration43);
        int int45 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology46 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Calendar calendar52 = dateTime50.toCalendar(locale51);
        org.joda.time.DateTime dateTime54 = dateTime50.plusMillis((int) '4');
        org.joda.time.Chronology chronology55 = dateTime50.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.minutes();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        boolean boolean61 = dateTimeZone58.isStandardOffset((long) (byte) 100);
        boolean boolean63 = dateTimeZone58.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((-1L), dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime68 = null;
        boolean boolean69 = dateTimeZone66.isLocalDateTimeGap(localDateTime68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime72 = dateTime70.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((-1L), dateTimeZone75);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Calendar calendar78 = dateTime76.toCalendar(locale77);
        org.joda.time.DateTime dateTime80 = dateTime76.plusMillis((int) '4');
        org.joda.time.DateTime dateTime81 = dateTime76.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(dateTimeZone83);
        boolean boolean86 = dateTime84.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes87 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Duration duration88 = minutes87.toStandardDuration();
        org.joda.time.Duration duration89 = minutes87.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableDuration) duration89);
        int int91 = dateTimeZone58.getOffset((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Chronology chronology92 = chronology55.withZone(dateTimeZone58);
        org.joda.time.Chronology chronology93 = chronology46.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime94 = new org.joda.time.DateTime((java.lang.Object) 502L, chronology46);
        int int95 = dateTime94.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar78);
        org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(minutes87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
    }

    @Test
    public void test10296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10296");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.Hours hours33 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime35 = dateTime23.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        int int37 = property9.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeField dateTimeField38 = property9.getField();
        int int39 = dateTimeField38.getMinimumValue();
        long long42 = dateTimeField38.getDifferenceAsLong((long) (-27425129), 100L);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        int int49 = dateTime46.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime46.getZone();
        org.joda.time.TimeOfDay timeOfDay51 = dateTime46.toTimeOfDay();
        int int52 = timeOfDay51.size();
        org.joda.time.Chronology chronology53 = timeOfDay51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        int int60 = dateTime57.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime57.getZone();
        org.joda.time.TimeOfDay timeOfDay62 = dateTime57.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Calendar calendar68 = dateTime66.toCalendar(locale67);
        org.joda.time.DateTime dateTime70 = dateTime66.plusMillis((int) '4');
        org.joda.time.DateTime dateTime71 = timeOfDay62.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        int int72 = timeOfDay51.compareTo((org.joda.time.ReadablePartial) timeOfDay62);
        org.joda.time.Period period76 = new org.joda.time.Period((long) 8640, (long) 656);
        int[] intArray77 = period76.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray79 = dateTimeField38.set((org.joda.time.ReadablePartial) timeOfDay62, 722, intArray77, 71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514268102,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=48,MILLISECOND=102,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-457L) + "'", long42 == (-457L));
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 59 + "'", int49 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 59 + "'", int60 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 0, 0, 0, 0, 0, -7, -984]");
    }

    @Test
    public void test10297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10297");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusDays((int) (short) 1);
        org.joda.time.Duration duration5 = period4.toStandardDuration();
        org.joda.time.Period period7 = period4.multipliedBy(35);
        org.joda.time.Period period9 = period4.withHours(50);
        org.joda.time.Period period11 = period9.minusMillis(226);
        org.joda.time.Period period13 = period11.withMonths(30240);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test10298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10298");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval9 = interval6.toMutableInterval();
        boolean boolean10 = mutableInterval9.isBeforeNow();
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        mutablePeriod12.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval15 = null;
        mutablePeriod12.add(readableInterval15);
        mutablePeriod12.setMinutes((int) 'u');
        mutableInterval9.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Interval interval20 = mutableInterval9.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(interval20);
    }

    @Test
    public void test10299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10299");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Duration duration20 = duration15.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        int int25 = dateTime24.getHourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.minusWeeks(59);
        org.joda.time.Duration duration29 = org.joda.time.Duration.millis(10L);
        org.joda.time.DateTime dateTime30 = dateTime24.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone35);
        int int39 = dateTimeZone35.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone35);
        boolean boolean42 = dateTimeZone35.isStandardOffset(0L);
        long long45 = dateTimeZone35.convertLocalToUTC((long) (-1), false);
        org.joda.time.DateTime dateTime46 = dateTime24.withZone(dateTimeZone35);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime46, periodType47);
        org.joda.time.DateTime.Property property49 = dateTime46.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514268160,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=48,MILLISECOND=160,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 23 + "'", int25 == 23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test10300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10300");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        long long13 = duration12.getStandardHours();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12, periodType15);
        org.joda.time.PeriodType periodType17 = periodType15.withMonthsRemoved();
        java.lang.String str18 = periodType17.getName();
        org.joda.time.PeriodType periodType19 = periodType17.withSecondsRemoved();
        int int20 = periodType17.size();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 144L + "'", long13 == 144L);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "YearWeekDayTimeNoYears" + "'", str18, "YearWeekDayTimeNoYears");
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
    }

    @Test
    public void test10301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10301");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime2.minusSeconds((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        boolean boolean17 = interval13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime16.withZoneRetainFields(dateTimeZone20);
        int int26 = dateTimeZone20.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime27 = dateTime6.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime.Property property28 = dateTime6.dayOfWeek();
        org.joda.time.DateTime.Property property29 = dateTime6.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime33.plusMonths((int) (byte) 1);
        int int40 = property29.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime.Property property41 = dateTime39.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test10302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10302");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        boolean boolean10 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusMinutes((int) ' ');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period31);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        boolean boolean40 = interval37.contains((-1L));
        boolean boolean41 = interval34.contains((org.joda.time.ReadableInterval) interval37);
        boolean boolean42 = interval34.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone47);
        org.joda.time.MutableInterval mutableInterval50 = interval49.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval51 = interval49.toMutableInterval();
        boolean boolean53 = mutableInterval51.isBefore((long) (-100));
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone58);
        boolean boolean62 = interval60.isAfter(100L);
        long long63 = interval60.getEndMillis();
        org.joda.time.Interval interval64 = interval60.toInterval();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Interval interval66 = interval64.withDurationBeforeEnd(readableDuration65);
        org.joda.time.Duration duration67 = interval66.toDuration();
        mutableInterval51.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Period period69 = mutableInterval51.toPeriod();
        boolean boolean70 = interval34.isBefore((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Interval interval71 = interval34.toInterval();
        org.joda.time.Period period72 = interval34.toPeriod();
        int int73 = period72.getWeeks();
        java.lang.String str74 = period72.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "P6D" + "'", str74, "P6D");
    }

    @Test
    public void test10303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10303");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        boolean boolean14 = interval10.isAfter((long) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        boolean boolean28 = dateTime26.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isStandardOffset((long) (byte) 100);
        boolean boolean36 = dateTimeZone31.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone39.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = dateTime43.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        boolean boolean59 = dateTime57.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes60 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration61 = minutes60.toStandardDuration();
        org.joda.time.Duration duration62 = minutes60.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration62);
        int int64 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime65 = dateTime18.withZoneRetainFields(dateTimeZone31);
        boolean boolean66 = interval10.isBefore((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime68 = dateTime65.plusHours(86399);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        boolean boolean71 = dateTime68.isSupported(dateTimeFieldType69);
        org.joda.time.DateTime dateTime73 = dateTime68.withMillis((long) (byte) 1);
        org.joda.time.Chronology chronology74 = dateTime73.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test10304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10304");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.seconds();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Calendar calendar10 = dateTime8.toCalendar(locale9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusMillis((int) '4');
        org.joda.time.Chronology chronology13 = dateTime8.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean19 = dateTimeZone16.isStandardOffset((long) (byte) 100);
        boolean boolean21 = dateTimeZone16.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        boolean boolean44 = dateTime42.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration46 = minutes45.toStandardDuration();
        org.joda.time.Duration duration47 = minutes45.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration47);
        int int49 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology50 = chronology13.withZone(dateTimeZone16);
        boolean boolean51 = durationFieldType4.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField52 = chronology13.weekyear();
        org.joda.time.Period period53 = new org.joda.time.Period((long) 'u', periodType3, chronology13);
        org.joda.time.DateTimeField dateTimeField54 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField55 = chronology13.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone56 = chronology13.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval57 = new org.joda.time.Interval(2308201815828L, 45970L, dateTimeZone56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
    }

    @Test
    public void test10305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10305");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(34, 34, (int) (short) 0, 7);
        mutablePeriod4.setMinutes(86399999);
        mutablePeriod4.addMillis(829);
        mutablePeriod4.setHours(207);
    }

    @Test
    public void test10306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10306");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("DurationField[years]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DurationField[years]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10307");
        org.joda.time.Period period1 = org.joda.time.Period.millis(25948);
        org.joda.time.Period period3 = period1.minusSeconds(27338829);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test10308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10308");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField12 = dateTimeField11.getLeapDurationField();
        int int13 = dateTimeField11.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test10309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10309");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Period period13 = interval10.toPeriod();
        org.joda.time.Chronology chronology14 = interval10.getChronology();
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        org.joda.time.Duration duration21 = days19.toStandardDuration();
        org.joda.time.PeriodType periodType22 = days19.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Chronology chronology31 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfHalfday();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType22, chronology31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.millisOfDay();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((-259200000L), (long) '#', chronology31);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period38 = interval36.toPeriod(periodType37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = interval36.isBefore(readableInstant39);
        org.joda.time.Interval interval41 = interval10.overlap((org.joda.time.ReadableInterval) interval36);
        boolean boolean42 = interval36.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test10310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10310");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes2 = minutes0.minus(2);
        org.joda.time.Minutes minutes4 = minutes2.minus(1);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes7 = minutes5.minus(2);
        boolean boolean8 = minutes4.isGreaterThan(minutes5);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes10 = minutes4.minus(minutes9);
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes13 = minutes11.minus(2);
        org.joda.time.Minutes minutes15 = minutes13.minus(1);
        int int16 = minutes13.size();
        org.joda.time.Minutes minutes17 = minutes4.minus(minutes13);
        org.joda.time.Minutes minutes18 = minutes17.negated();
        org.joda.time.Minutes minutes20 = minutes18.minus(270);
        org.joda.time.Minutes minutes21 = minutes18.negated();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
    }

    @Test
    public void test10311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10311");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        java.lang.String str10 = dateTimeField9.getName();
        java.lang.String str12 = dateTimeField9.getAsShortText((long) (short) 10);
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = dateTimeField9.getAsText((int) (byte) 100, locale14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale21.getDisplayCountry(locale23);
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        org.joda.time.Duration duration29 = days27.toStandardDuration();
        org.joda.time.PeriodType periodType30 = days27.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.Chronology chronology39 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.hourOfHalfday();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType30, chronology39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTimeField dateTimeField43 = chronology39.millisOfDay();
        boolean boolean45 = dateTimeField43.isLeap((long) 1439);
        long long47 = dateTimeField43.roundHalfCeiling((-82737998L));
        java.lang.String str49 = dateTimeField43.getAsText(10L);
        int int51 = dateTimeField43.getLeapAmount((-100L));
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("PT518400S");
        java.lang.String str55 = locale54.getDisplayName();
        java.lang.String str56 = dateTimeField43.getAsText(718, locale54);
        java.lang.String str57 = locale21.getDisplayLanguage(locale54);
        java.lang.String str58 = locale14.getDisplayLanguage(locale54);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekOfWeekyear" + "'", str10, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100" + "'", str16, "100");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-82737998L) + "'", long47 == (-82737998L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "10" + "'", str49, "10");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "718" + "'", str56, "718");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Korean" + "'", str57, "Korean");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Chinese" + "'", str58, "Chinese");
    }

    @Test
    public void test10312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10312");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone4.isLocalDateTimeGap(localDateTime6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime16 = dateTime11.toLocalDateTime();
        boolean boolean17 = dateTimeZone4.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = dateTime1.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.era();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(0L, chronology28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.Instant instant40 = dateTime39.toInstant();
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekOfWeekyear(3);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone47);
        org.joda.time.MutableInterval mutableInterval50 = interval49.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval51 = interval49.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Calendar calendar57 = dateTime55.toCalendar(locale56);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMillis((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime55.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        boolean boolean65 = dateTime63.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes66 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration67 = minutes66.toStandardDuration();
        org.joda.time.Duration duration70 = duration67.withDurationAdded((long) (byte) -1, (int) 'u');
        mutableInterval51.setDurationAfterStart((org.joda.time.ReadableDuration) duration70);
        boolean boolean72 = dateTime39.equals((java.lang.Object) duration70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int74 = dateTime39.get(dateTimeFieldType73);
        boolean boolean75 = dateTime31.isSupported(dateTimeFieldType73);
        org.joda.time.DateTime.Property property76 = dateTime18.property(dateTimeFieldType73);
        org.joda.time.DurationField durationField77 = property76.getDurationField();
        org.joda.time.DateTime dateTime79 = property76.setCopy("59");
        org.joda.time.LocalDateTime localDateTime80 = dateTime79.toLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localDateTime80);
    }

    @Test
    public void test10313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10313");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis((int) '#');
        java.util.Date date11 = dateTime8.toDate();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology26);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((-1L), 59L, chronology26);
        org.joda.time.DateTime dateTime30 = mutableInterval29.getEnd();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        int int37 = dateTime34.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime34.getZone();
        org.joda.time.TimeOfDay timeOfDay39 = dateTime34.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.DateTime dateTime48 = timeOfDay39.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Calendar calendar54 = dateTime52.toCalendar(locale53);
        int int55 = dateTime52.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime52.getZone();
        org.joda.time.TimeOfDay timeOfDay57 = dateTime52.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Calendar calendar63 = dateTime61.toCalendar(locale62);
        org.joda.time.DateTime dateTime65 = dateTime61.plusMillis((int) '4');
        org.joda.time.DateTime dateTime66 = timeOfDay57.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Period period67 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay39, (org.joda.time.ReadablePartial) timeOfDay57);
        int int68 = timeOfDay57.size();
        java.lang.String str69 = timeOfDay57.toString();
        boolean boolean70 = mutableInterval29.equals((java.lang.Object) timeOfDay57);
        org.joda.time.Period period73 = new org.joda.time.Period((long) (byte) -1);
        org.joda.time.Period period75 = period73.plusMinutes((-1));
        org.joda.time.Hours hours76 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period73);
        int[] intArray77 = period73.getValues();
        int[] intArray79 = dateTimeField13.set((org.joda.time.ReadablePartial) timeOfDay57, 0, intArray77, 59);
        java.util.Locale locale82 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long83 = dateTimeField13.set(9537600000L, "java.io.IOException: 2022-02-22T07:12:52.865Z/2022-02-22T07:12:52.865Z", locale82);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.io.IOException: 2022-02-22T07:12:52.865Z/2022-02-22T07:12:52.865Z\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 59 + "'", int55 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "T23:59:59.999" + "'", str69, "T23:59:59.999");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(hours76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[59, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[59, 0, 0, 0, 0, 0, 0, -1]");
    }

    @Test
    public void test10314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10314");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.era();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(0L, chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (short) -1, chronology11);
        org.joda.time.Period period17 = new org.joda.time.Period(15724841402L, chronology11);
        org.joda.time.DateTimeField dateTimeField18 = chronology11.minuteOfHour();
        long long20 = dateTimeField18.roundHalfEven((-307881240006L));
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.format.PeriodPrinter periodPrinter23 = null;
        org.joda.time.format.PeriodParser periodParser24 = null;
        org.joda.time.format.PeriodFormatter periodFormatter25 = new org.joda.time.format.PeriodFormatter(periodPrinter23, periodParser24);
        org.joda.time.PeriodType periodType26 = periodFormatter25.getParseType();
        org.joda.time.PeriodType periodType27 = periodFormatter25.getParseType();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        boolean boolean32 = dateTime30.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property33 = dateTime30.millisOfSecond();
        org.joda.time.DateTime dateTime34 = property33.getDateTime();
        org.joda.time.DateTime dateTime36 = dateTime34.plusSeconds(10);
        org.joda.time.DateTime.Property property37 = dateTime34.yearOfEra();
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale39 = java.util.Locale.getDefault(category38);
        java.util.Set<java.lang.Character> charSet40 = locale39.getExtensionKeys();
        int int41 = property37.getMaximumShortTextLength(locale39);
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter25.withLocale(locale39);
        java.lang.String str43 = locale39.getDisplayLanguage();
        java.util.Calendar calendar44 = dateTime22.toCalendar(locale39);
        java.lang.String str45 = dateTimeField18.getAsShortText(3600045, locale39);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime50 = null;
        boolean boolean51 = dateTimeZone48.isLocalDateTimeGap(localDateTime50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Calendar calendar57 = dateTime55.toCalendar(locale56);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime60 = dateTime55.toLocalDateTime();
        boolean boolean61 = dateTimeZone48.isLocalDateTimeGap(localDateTime60);
        java.util.Locale locale63 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.lang.String str65 = dateTimeZone48.getShortName((long) 948, locale63);
        java.lang.String str66 = locale39.getDisplayName(locale63);
        java.lang.Object obj67 = locale39.clone();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-307881240000L) + "'", long20 == (-307881240000L));
        org.junit.Assert.assertNull(periodType26);
        org.junit.Assert.assertNull(periodType27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category38.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u6587" + "'", str43, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645514268702,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=48,MILLISECOND=702,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "3600045" + "'", str45, "3600045");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "chinois (Chine)" + "'", str66, "chinois (Chine)");
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "zh_CN");
    }

    @Test
    public void test10315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10315");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Duration duration4 = duration2.minus((long) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Calendar calendar10 = dateTime8.toCalendar(locale9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusMillis((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime8.toDateTimeISO();
        org.joda.time.Instant instant14 = dateTime8.toInstant();
        org.joda.time.Instant instant15 = instant14.toInstant();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone18.isLocalDateTimeGap(localDateTime20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime24 = dateTime22.withHourOfDay(0);
        boolean boolean25 = instant15.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) 1439, 0L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.millis((long) (short) -1);
        long long31 = duration30.getMillis();
        org.joda.time.Days days32 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod33 = days32.toMutablePeriod();
        org.joda.time.Duration duration34 = days32.toStandardDuration();
        long long35 = duration34.getStandardHours();
        boolean boolean36 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration38 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) 'x');
        org.joda.time.Duration duration40 = duration28.plus((long) (-1));
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration28);
        boolean boolean42 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.Instant instant52 = dateTime46.toInstant();
        org.joda.time.Instant instant53 = instant52.toInstant();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime58 = null;
        boolean boolean59 = dateTimeZone56.isLocalDateTimeGap(localDateTime58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime62 = dateTime60.withHourOfDay(0);
        boolean boolean63 = instant53.isEqual((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration65 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant67 = instant53.withDurationAdded((org.joda.time.ReadableDuration) duration65, (-1));
        org.joda.time.Instant instant69 = instant53.plus(4665600000L);
        org.joda.time.DateTime dateTime70 = instant53.toDateTime();
        boolean boolean71 = dateTime70.isEqualNow();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Days days73 = duration4.toStandardDays();
        org.joda.time.Days days75 = days73.plus(40);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 144L + "'", long35 == 144L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(days73);
        org.junit.Assert.assertNotNull(days75);
    }

    @Test
    public void test10316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10316");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(24083049600000L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test10317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10317");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 'a', (long) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone5.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getDayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.Instant instant23 = dateTime22.toInstant();
        org.joda.time.Hours hours24 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTime dateTime26 = dateTime14.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight27 = dateTime26.toDateMidnight();
        org.joda.time.Period period28 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property29 = dateTime26.millisOfSecond();
        org.joda.time.DurationField durationField30 = property29.getRangeDurationField();
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder31.clear();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale33.getDisplayCountry();
        java.util.Locale.Builder builder35 = builder32.setLocale(locale33);
        java.lang.String str36 = property29.getAsShortText(locale33);
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("678");
        java.util.Locale.setDefault(locale39);
        org.joda.time.DateTime dateTime41 = property29.setCopy("781", locale39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((java.lang.Object) property29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "811" + "'", str36, "811");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10318");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        boolean boolean11 = instant9.isBefore((long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean25 = dateTime23.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        org.joda.time.Duration duration28 = minutes26.toStandardDuration();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration32 = duration28.withDurationAdded(3L, 108);
        org.joda.time.Duration duration34 = duration32.withMillis((long) 147);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        org.joda.time.DateTime dateTime42 = dateTime38.plusMillis((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime38.toDateTimeISO();
        org.joda.time.Instant instant44 = dateTime38.toInstant();
        org.joda.time.Instant instant45 = instant44.toInstant();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime50 = null;
        boolean boolean51 = dateTimeZone48.isLocalDateTimeGap(localDateTime50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime54 = dateTime52.withHourOfDay(0);
        boolean boolean55 = instant45.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Instant instant58 = instant45.withDurationAdded((long) 7, (int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime59 = instant58.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime60 = instant58.toDateTimeISO();
        org.joda.time.Instant instant62 = instant58.minus((long) (-27425230));
        org.joda.time.Instant instant64 = instant58.withMillis((-25200000L));
        org.joda.time.Interval interval65 = duration32.toIntervalTo((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Period period67 = org.joda.time.Period.millis(2108160);
        org.joda.time.Interval interval68 = interval65.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period67);
        long long69 = interval65.getEndMillis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 69L + "'", long69 == 69L);
    }

    @Test
    public void test10319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10319");
        org.joda.time.Period period4 = new org.joda.time.Period(0, (int) (short) -1, 0, 2);
        org.joda.time.Period period6 = period4.minusWeeks((int) '4');
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod7.copy();
        mutablePeriod7.setMinutes(636);
        mutablePeriod7.setSeconds(87);
        int int13 = mutablePeriod7.getDays();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test10320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10320");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = days0.negated();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = days4.negated();
        boolean boolean8 = days3.isLessThan(days4);
        org.joda.time.Days days10 = days3.multipliedBy(2);
        org.joda.time.Duration duration11 = days3.toStandardDuration();
        org.joda.time.Days days13 = days3.multipliedBy((-996));
        org.joda.time.Days days15 = days3.dividedBy(96);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days15);
    }

    @Test
    public void test10321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10321");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Period period13 = interval10.toPeriod();
        org.joda.time.Interval interval14 = interval10.toInterval();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Interval interval16 = interval10.withPeriodBeforeEnd(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        int int27 = dateTime26.getDayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime26.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = dateTime26.withWeekyear((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime26.plusHours(948);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType36 = periodType35.withMillisRemoved();
        org.joda.time.Period period37 = mutableInterval34.toPeriod(periodType35);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant17, (org.joda.time.ReadableInstant) dateTime26, periodType35);
        org.joda.time.Period period39 = interval16.toPeriod(periodType35);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone44);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        boolean boolean49 = mutableInterval47.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.lang.String[] strArray60 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strList61);
        boolean boolean64 = mutableInterval47.equals((java.lang.Object) strList61);
        boolean boolean66 = mutableInterval47.isAfter((long) 2022);
        mutableInterval47.setInterval((long) (byte) 10, 174700800000L);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int75 = dateTimeZone73.getStandardOffset((long) 'x');
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) 12, (long) 367, dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((-1L), dateTimeZone79);
        int int81 = dateTime80.getHourOfDay();
        org.joda.time.DateTime dateTime83 = dateTime80.minusWeeks(59);
        org.joda.time.DateTime dateTime85 = dateTime80.withWeekOfWeekyear((int) ' ');
        int int86 = dateTimeZone73.getOffset((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime89 = dateTime85.withDurationAdded(63072000144L, 671);
        boolean boolean90 = mutableInterval47.equals((java.lang.Object) dateTime89);
        org.joda.time.Interval interval91 = interval16.overlap((org.joda.time.ReadableInterval) mutableInterval47);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 23 + "'", int81 == 23);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(interval91);
    }

    @Test
    public void test10322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10322");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setHours((int) '#');
        mutablePeriod1.addMillis((int) (byte) 100);
        mutablePeriod1.addYears(0);
        mutablePeriod1.setDays(86399999);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((int) (byte) 0, (int) 'x', (int) (byte) 10, 59);
        mutablePeriod16.addHours(10);
        int[] intArray19 = mutablePeriod16.getValues();
        org.joda.time.Days days20 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod21 = days20.toMutablePeriod();
        org.joda.time.Days days22 = org.joda.time.Days.MIN_VALUE;
        boolean boolean23 = days20.isLessThan(days22);
        org.joda.time.DurationFieldType durationFieldType24 = days22.getFieldType();
        mutablePeriod16.set(durationFieldType24, 652);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(0L, chronology28);
        org.joda.time.Period period31 = period29.plusMillis(100);
        int int32 = period31.getHours();
        org.joda.time.Period period34 = period31.plusMonths(100);
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.Days days37 = days35.multipliedBy(100);
        org.joda.time.Period period38 = period34.withFields((org.joda.time.ReadablePeriod) days35);
        org.joda.time.Period period40 = period38.minusSeconds(59);
        org.joda.time.Period period42 = period40.withMillis(881);
        org.joda.time.Period period44 = period42.minusMillis(999);
        mutablePeriod16.mergePeriod((org.joda.time.ReadablePeriod) period44);
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) period44);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 10, 120, 10, 59]");
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test10323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10323");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        java.lang.String str19 = dateTimeField18.getName();
        int int21 = dateTimeField18.get((long) (byte) 100);
        java.lang.String str23 = dateTimeField18.getAsShortText((long) (byte) 1);
        int int25 = dateTimeField18.getMinimumValue((long) 12);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        boolean boolean37 = interval33.isAfter((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.lang.String str43 = dateTimeZone40.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime44 = dateTime36.withZoneRetainFields(dateTimeZone40);
        int int46 = dateTimeZone40.getStandardOffset((long) ' ');
        java.lang.String str47 = dateTimeZone40.getID();
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = dateTimeZone40.getName(600000L, locale49);
        java.lang.String str51 = locale49.getDisplayCountry();
        java.util.Set<java.lang.String> strSet52 = locale49.getUnicodeLocaleKeys();
        java.lang.String str53 = dateTimeField18.getAsShortText(144L, locale49);
        java.lang.String str54 = locale49.getDisplayName();
        org.joda.time.format.PeriodFormatter periodFormatter55 = periodFormatter8.withLocale(locale49);
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "weekOfWeekyear" + "'", str19, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Italy" + "'", str51, "Italy");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Italian (Italy)" + "'", str54, "Italian (Italy)");
        org.junit.Assert.assertNotNull(periodFormatter55);
    }

    @Test
    public void test10324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10324");
        org.joda.time.Period period1 = org.joda.time.Period.months(179);
        org.joda.time.Period period3 = period1.minusWeeks(53);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test10325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10325");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone4.isLocalDateTimeGap(localDateTime6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime10 = dateTime8.withHourOfDay(0);
        int int11 = dateTime10.getDayOfWeek();
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        long long15 = duration14.getStandardHours();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType17 = periodType16.withYearsRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration14, periodType17);
        org.joda.time.PeriodType periodType19 = periodType17.withMonthsRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime24.plusMonths((int) (byte) 1);
        org.joda.time.Days days33 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod34 = days33.toMutablePeriod();
        org.joda.time.Duration duration35 = days33.toStandardDuration();
        org.joda.time.PeriodType periodType36 = days33.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis((int) '4');
        org.joda.time.Chronology chronology45 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType36, chronology45);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology45);
        org.joda.time.DateTimeField dateTimeField49 = chronology45.millisOfDay();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) dateTime30, chronology45);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1645514134206L, 0L, periodType20, chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 144L + "'", long15 == 144L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test10326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10326");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone6);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime13.toDateTimeISO();
        org.joda.time.Instant instant19 = dateTime13.toInstant();
        org.joda.time.Instant instant20 = instant19.toInstant();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(0);
        boolean boolean30 = instant20.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Instant instant33 = instant20.withDurationAdded((long) 7, (int) (byte) 10);
        boolean boolean34 = interval8.isBefore((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.Period period36 = new org.joda.time.Period(obj0, periodType1, chronology35);
        int[] intArray37 = period36.getValues();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test10327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10327");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone4.isLocalDateTimeGap(localDateTime6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime10 = dateTime8.withHourOfDay(0);
        int int11 = dateTime10.getDayOfWeek();
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        long long15 = duration14.getStandardHours();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType17 = periodType16.withYearsRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration14, periodType17);
        org.joda.time.Period period19 = period1.withPeriodType(periodType17);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withMonthsRemoved();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 144L + "'", long15 == 144L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
    }

    @Test
    public void test10328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10328");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.era();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(0L, chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.era();
        java.lang.String str14 = chronology9.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
    }

    @Test
    public void test10329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10329");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(34, 34, (int) (short) 0, 7);
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10);
        int int7 = period6.getSeconds();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period10 = period6.withFieldAdded(durationFieldType8, 86399);
        org.joda.time.DurationFieldType durationFieldType12 = period6.getFieldType(1);
        mutablePeriod4.set(durationFieldType12, (int) 'u');
        mutablePeriod4.addHours((int) (short) 100);
        mutablePeriod4.setSeconds((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone24);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType29 = periodType28.withMinutesRemoved();
        org.joda.time.Period period30 = interval26.toPeriod(periodType29);
        org.joda.time.Days days31 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod32 = days31.toMutablePeriod();
        mutablePeriod32.addWeeks((int) (short) -1);
        mutablePeriod32.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        org.joda.time.Days days47 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod48 = days47.toMutablePeriod();
        org.joda.time.Duration duration49 = days47.toStandardDuration();
        org.joda.time.PeriodType periodType50 = days47.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.Chronology chronology59 = dateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.hourOfHalfday();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType50, chronology59);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology59);
        mutablePeriod32.setPeriod(1L, chronology59);
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology59);
        org.joda.time.Period period65 = new org.joda.time.Period((long) 'x', periodType29, chronology59);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) period65);
        mutablePeriod4.setDays(415);
        mutablePeriod4.addMillis(86399999);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test10330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10330");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        boolean boolean9 = dateTime3.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime3.toString(dateTimeFormatter10);
        org.joda.time.DateTime dateTime13 = dateTime3.withMillisOfDay(86399);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.DateTime.Property property15 = dateTime13.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        int int17 = property15.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str11, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test10331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10331");
        org.joda.time.PeriodType periodType1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((java.lang.Object) "Thu", periodType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Thu\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10332");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        boolean boolean16 = dateTime9.equals((java.lang.Object) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean18 = dateTime15.isSupported(dateTimeFieldType17);
        org.joda.time.DateTime dateTime20 = dateTime5.withField(dateTimeFieldType17, 20);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        int int23 = dateTime20.get(dateTimeFieldType21);
        org.joda.time.DateTime dateTime25 = dateTime20.plusMonths(27423259);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        int int30 = dateTime29.getHourOfDay();
        org.joda.time.DateTime dateTime32 = dateTime29.minusWeeks(59);
        org.joda.time.DateTime dateTime34 = dateTime29.withWeekOfWeekyear((int) ' ');
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) (short) -1);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) (byte) 1);
        org.joda.time.Duration duration39 = duration38.toDuration();
        org.joda.time.Duration duration40 = duration36.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, chronology42);
        org.joda.time.DurationFieldType[] durationFieldTypeArray44 = mutablePeriod43.getFieldTypes();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.forFields(durationFieldTypeArray44);
        org.joda.time.PeriodType periodType46 = periodType45.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration40, periodType46);
        org.joda.time.Period period48 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateTime20, periodType46);
        int int49 = period48.getMinutes();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 26269155 + "'", int23 == 26269155);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 23 + "'", int30 == 23);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(durationFieldTypeArray44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test10333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10333");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.Days days1 = seconds0.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds3 = seconds0.plus(773);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 773");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(days1);
    }

    @Test
    public void test10334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10334");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval9 = interval6.toMutableInterval();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        mutablePeriod11.setSeconds((int) (byte) 0);
        mutablePeriod11.setDays((int) 'a');
        mutablePeriod11.addSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology20 = null;
        mutablePeriod11.setPeriod(10L, (long) (byte) 1, chronology20);
        int int22 = mutablePeriod11.getWeeks();
        boolean boolean23 = interval6.equals((java.lang.Object) mutablePeriod11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((java.lang.Object) mutablePeriod11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test10335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10335");
        org.joda.time.Hours hours0 = org.joda.time.Hours.THREE;
        int int1 = hours0.getHours();
        org.joda.time.Hours hours3 = hours0.multipliedBy(2);
        org.joda.time.Hours hours5 = hours3.minus((int) '#');
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10);
        int int8 = period7.getSeconds();
        org.joda.time.Period period10 = period7.minusHours(100);
        org.joda.time.Period period12 = period7.minusSeconds((int) '4');
        org.joda.time.Hours hours13 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Hours hours14 = hours3.minus(hours13);
        org.joda.time.Hours hours15 = org.joda.time.Hours.THREE;
        int int16 = hours15.getHours();
        org.joda.time.Hours hours18 = hours15.multipliedBy(2);
        org.joda.time.Hours hours20 = hours18.minus((int) '#');
        org.joda.time.Hours hours21 = hours13.minus(hours18);
        org.joda.time.Hours hours22 = hours18.negated();
        org.joda.time.Hours hours24 = hours18.plus(256);
        org.joda.time.DurationFieldType durationFieldType25 = hours18.getFieldType();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(durationFieldType25);
    }

    @Test
    public void test10336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10336");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("\u661f\u671f\u56db");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"???\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10337");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        boolean boolean10 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusMinutes((int) ' ');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period31);
        int int35 = dateTime2.getWeekyear();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        org.joda.time.PeriodType periodType45 = days42.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.hourOfHalfday();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType45, chronology54);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTimeField dateTimeField58 = chronology54.millisOfDay();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((-259200000L), (long) '#', chronology54);
        mutableInterval36.setChronology(chronology54);
        org.joda.time.DateTime dateTime61 = dateTime2.withChronology(chronology54);
        org.joda.time.DateTime dateTime63 = dateTime2.plusDays(11);
        org.joda.time.DateTime dateTime65 = dateTime2.minusMillis(1025);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test10338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10338");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology15);
        long long18 = mutableInterval17.getEndMillis();
        boolean boolean19 = mutableInterval4.isBefore((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime23.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTimeISO();
        org.joda.time.Instant instant39 = dateTime33.toInstant();
        org.joda.time.Instant instant40 = instant39.toInstant();
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) instant39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.Chronology chronology50 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = instant39.toDateTime(chronology50);
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration55 = period54.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Calendar calendar61 = dateTime59.toCalendar(locale60);
        org.joda.time.DateTime dateTime63 = dateTime59.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime66 = dateTime59.withMonthOfYear(9);
        org.joda.time.Duration duration68 = new org.joda.time.Duration(0L);
        org.joda.time.DateTime dateTime70 = dateTime66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (short) -1);
        org.joda.time.Duration duration72 = duration68.plus(48528L);
        org.joda.time.Period period73 = duration68.toPeriod();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant39, (org.joda.time.ReadableDuration) duration68);
        mutableInterval17.setDurationAfterStart((org.joda.time.ReadableDuration) duration68);
        long long76 = mutableInterval17.toDurationMillis();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86399L + "'", long18 == 86399L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
    }

    @Test
    public void test10339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10339");
        org.joda.time.Period period1 = org.joda.time.Period.hours(408);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test10340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10340");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        org.joda.time.Period period4 = period2.plusMillis(100);
        org.joda.time.Period period5 = period2.toPeriod();
        org.joda.time.Days days6 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod7 = days6.toMutablePeriod();
        org.joda.time.Duration duration8 = days6.toStandardDuration();
        org.joda.time.Duration duration10 = duration8.minus((long) '4');
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.Instant instant20 = dateTime14.toInstant();
        org.joda.time.Instant instant21 = instant20.toInstant();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        boolean boolean31 = instant21.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) 1439, 0L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.millis((long) (short) -1);
        long long37 = duration36.getMillis();
        org.joda.time.Days days38 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod39 = days38.toMutablePeriod();
        org.joda.time.Duration duration40 = days38.toStandardDuration();
        long long41 = duration40.getStandardHours();
        boolean boolean42 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration44 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) 'x');
        org.joda.time.Duration duration46 = duration34.plus((long) (-1));
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration34);
        boolean boolean48 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.000Z");
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime55 = null;
        boolean boolean56 = dateTimeZone53.isLocalDateTimeGap(localDateTime55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime59 = dateTime57.withHourOfDay(0);
        int int60 = dateTime59.getDayOfWeek();
        org.joda.time.Days days61 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod62 = days61.toMutablePeriod();
        org.joda.time.Duration duration63 = days61.toStandardDuration();
        long long64 = duration63.getStandardHours();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType66 = periodType65.withYearsRemoved();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableDuration) duration63, periodType66);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime70 = dateTime59.plus(1646032265601L);
        org.joda.time.Period period71 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration72 = period2.toDurationTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DurationFieldType[] durationFieldTypeArray73 = period2.getFieldTypes();
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.forFields(durationFieldTypeArray73);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 144L + "'", long41 == 144L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 144L + "'", long64 == 144L);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(durationFieldTypeArray73);
        org.junit.Assert.assertNotNull(periodType74);
    }

    @Test
    public void test10341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10341");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTime20.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration24 = minutes23.toStandardDuration();
        org.joda.time.Duration duration25 = minutes23.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime8.getZone();
        org.joda.time.DateTime dateTime29 = dateTime8.plus(1645513917914L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test10342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10342");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1969-12-31T23:59:59.999Z");
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.addWeeks((int) (short) -1);
        mutablePeriod3.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        org.joda.time.PeriodType periodType21 = days18.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '4');
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfHalfday();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType21, chronology30);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology30);
        mutablePeriod3.setPeriod(1L, chronology30);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DurationField durationField36 = chronology30.centuries();
        org.joda.time.DateTime dateTime37 = dateTime1.toDateTime(chronology30);
        org.joda.time.DateTime dateTime39 = dateTime37.minusSeconds(728674);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        java.util.GregorianCalendar gregorianCalendar43 = dateTime42.toGregorianCalendar();
        int int44 = dateTime42.getHourOfDay();
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Locale locale46 = locale45.stripExtensions();
        java.lang.String str47 = locale46.toLanguageTag();
        java.util.Calendar calendar48 = dateTime42.toCalendar(locale46);
        org.joda.time.DateTime.Property property49 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime42.withYear(829);
        int int52 = dateTime42.getMillisOfDay();
        boolean boolean53 = dateTime39.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(gregorianCalendar43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zh-CN" + "'", str47, "zh-CN");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645514269438,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=49,MILLISECOND=438,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 26269438 + "'", int52 == 26269438);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test10343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10343");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology27 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfHalfday();
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str31 = locale30.getISO3Language();
        java.lang.String str32 = dateTimeField28.getAsShortText((long) 1969, locale30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime42 = dateTime37.toLocalDateTime();
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.util.Calendar calendar45 = dateTime37.toCalendar(locale43);
        java.util.Set<java.lang.Character> charSet46 = locale43.getExtensionKeys();
        java.lang.String str47 = dateTimeField28.getAsText((long) 503, locale43);
        int int49 = dateTimeField28.getMaximumValue((long) 773);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fra" + "'", str31, "fra");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "12" + "'", str32, "12");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "12" + "'", str47, "12");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 12 + "'", int49 == 12);
    }

    @Test
    public void test10344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10344");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone3.isLocalDateTimeGap(localDateTime5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime9 = dateTime7.withHourOfDay(0);
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime9.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property13 = dateTime9.millisOfSecond();
        org.joda.time.DateTime dateTime14 = property13.withMinimumValue();
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(848);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone21.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(0);
        int int28 = dateTime27.getDayOfWeek();
        org.joda.time.DateTime dateTime30 = dateTime27.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTimeISO();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology34 = mutableInterval33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1645513808983L, chronology34);
        org.joda.time.DurationField durationField36 = chronology34.years();
        org.joda.time.DurationField durationField37 = chronology34.millis();
        java.lang.String str38 = durationField37.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DurationField[millis]" + "'", str38, "DurationField[millis]");
    }

    @Test
    public void test10345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10345");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMonths(100);
        org.joda.time.Instant instant6 = dateTime3.toInstant();
        int int7 = dateTime3.getMillisOfDay();
        org.joda.time.LocalTime localTime8 = dateTime3.toLocalTime();
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        java.lang.String str10 = localTime8.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23:59:59.999" + "'", str10, "23:59:59.999");
    }

    @Test
    public void test10346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10346");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.Days days2 = days0.multipliedBy(100);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        mutablePeriod3.addMillis((int) 'a');
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10);
        int int8 = period7.getSeconds();
        org.joda.time.Period period10 = period7.minusDays((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        mutablePeriod11.addMonths((int) (short) 0);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod3.setDays(19045);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
    }

    @Test
    public void test10347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10347");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.Instant instant10 = dateTime9.toInstant();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) dateTime9);
        org.joda.time.DateTime.Property property12 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime13 = property12.getDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds(1439);
        int int16 = dateTime13.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfDay();
        org.joda.time.DurationField durationField28 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.weekyearOfCentury();
        org.joda.time.DateTime dateTime30 = dateTime13.toDateTime(chronology25);
        org.joda.time.DateTimeZone dateTimeZone31 = chronology25.getZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        long long40 = dateTimeZone36.convertLocalToUTC(10L, true);
        java.lang.String str41 = dateTimeZone36.getID();
        java.lang.String str43 = dateTimeZone36.getName((long) (short) 10);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.Interval interval45 = new org.joda.time.Interval(52L, (long) 100, dateTimeZone36);
        long long47 = dateTimeZone31.getMillisKeepLocal(dateTimeZone36, (-259200000L));
        boolean boolean48 = dateTimeZone31.isFixed();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((-85519318L), (long) (-2), dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-259200000L) + "'", long47 == (-259200000L));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test10348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10348");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        org.joda.time.PeriodType periodType15 = days12.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.Chronology chronology24 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType15, chronology24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.millisOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime9, chronology24);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField31 = chronology24.year();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test10349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10349");
        org.joda.time.Period period1 = org.joda.time.Period.millis(433);
        org.joda.time.Period period3 = period1.multipliedBy(36);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test10350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10350");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(23L, (long) 86399999);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds8 = seconds6.minus(seconds7);
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds10 = seconds9.negated();
        boolean boolean11 = seconds8.isGreaterThan(seconds9);
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.ONE;
        boolean boolean13 = seconds9.isGreaterThan(seconds12);
        int int14 = seconds12.getSeconds();
        org.joda.time.Seconds seconds15 = seconds5.minus(seconds12);
        org.joda.time.Seconds seconds17 = seconds12.dividedBy(179);
        boolean boolean18 = seconds4.isGreaterThan(seconds12);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone23);
        boolean boolean27 = interval25.isAfter(100L);
        long long28 = interval25.getEndMillis();
        org.joda.time.Interval interval29 = interval25.toInterval();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval29.withDurationBeforeEnd(readableDuration30);
        org.joda.time.Period period32 = interval29.toPeriod();
        org.joda.time.Seconds seconds33 = period32.toStandardSeconds();
        org.joda.time.PeriodType periodType34 = seconds33.getPeriodType();
        org.joda.time.PeriodType periodType35 = periodType34.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone41);
        org.joda.time.MutableInterval mutableInterval44 = interval43.toMutableInterval();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(1645513785703L, chronology45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period47 = new org.joda.time.Period((java.lang.Object) seconds12, periodType35, chronology45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 86399999L + "'", long3 == 86399999L);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
    }

    @Test
    public void test10351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10351");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        boolean boolean6 = dateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime11.toDateTimeISO();
        org.joda.time.Instant instant17 = dateTime11.toInstant();
        org.joda.time.Instant instant18 = instant17.toInstant();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone21.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(0);
        boolean boolean28 = instant18.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant32 = instant18.withDurationAdded((org.joda.time.ReadableDuration) duration30, (-1));
        boolean boolean34 = instant32.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        org.joda.time.DateTime dateTime42 = dateTime38.plusMillis((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime38.toDateTimeISO();
        org.joda.time.Instant instant44 = dateTime38.toInstant();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime38, periodType45);
        org.joda.time.PeriodType periodType47 = periodType45.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.Chronology chronology56 = dateTime51.getChronology();
        org.joda.time.Period period57 = new org.joda.time.Period((-259200000L), periodType47, chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.monthOfYear();
        org.joda.time.Chronology chronology60 = chronology56.withUTC();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.clockhourOfDay();
        org.joda.time.DateTime dateTime63 = dateTime3.toDateTime(chronology60);
        org.joda.time.DateTime.Property property64 = dateTime3.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test10352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10352");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        java.lang.String str8 = interval7.toString();
        org.joda.time.DateTime dateTime9 = interval7.getEnd();
        org.joda.time.Interval interval11 = interval7.withEndMillis((long) 502);
        org.joda.time.Chronology chronology12 = interval7.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyear();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        boolean boolean30 = dateTime28.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        boolean boolean36 = dateTimeZone33.isStandardOffset((long) (byte) 100);
        boolean boolean38 = dateTimeZone33.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone41.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        boolean boolean61 = dateTime59.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes62 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration63 = minutes62.toStandardDuration();
        org.joda.time.Duration duration64 = minutes62.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration64);
        int int66 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime67 = dateTime20.withZoneRetainFields(dateTimeZone33);
        long long70 = dateTimeZone33.adjustOffset((long) 6, true);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(59L, dateTimeZone33);
        java.util.Locale locale73 = java.util.Locale.CHINA;
        java.util.Locale locale74 = locale73.stripExtensions();
        java.lang.String str75 = locale73.getISO3Language();
        java.lang.String str76 = locale73.getDisplayScript();
        java.lang.String str78 = locale73.getExtension('a');
        java.util.Locale locale79 = null;
        java.lang.String str80 = locale73.getDisplayScript(locale79);
        java.lang.String str81 = dateTimeZone33.getName((long) 246, locale73);
        java.util.Locale.setDefault(category14, locale73);
        int int83 = dateTimeField13.getMaximumTextLength(locale73);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z" + "'", str8, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 6L + "'", long70 == 6L);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "zho" + "'", str75, "zho");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
    }

    @Test
    public void test10353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10353");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MIN_VALUE;
        java.lang.String str1 = hours0.toString();
        int int2 = hours0.getHours();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT-2147483648H" + "'", str1, "PT-2147483648H");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-2147483648) + "'", int2 == (-2147483648));
    }

    @Test
    public void test10354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10354");
        java.io.IOException iOException2 = new java.io.IOException("PT0.002S");
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException("56", (java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException3);
    }

    @Test
    public void test10355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10355");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withWeeksRemoved();
        org.joda.time.PeriodType periodType6 = periodType3.withDaysRemoved();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone11);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        boolean boolean16 = mutableInterval14.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray27 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList28);
        boolean boolean31 = mutableInterval14.equals((java.lang.Object) strList28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        int int41 = dateTime40.getDayOfWeek();
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        long long45 = duration44.getStandardHours();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType47 = periodType46.withYearsRemoved();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration44, periodType47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int50 = dateTime40.get(dateTimeFieldType49);
        mutableInterval14.setEnd((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology52 = mutableInterval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(1645513805919L, (long) 'u', periodType3, chronology52);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 144L + "'", long45 == 144L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(chronology52);
    }

    @Test
    public void test10356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10356");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.era();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(0L, chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (short) -1, chronology11);
        org.joda.time.Period period17 = new org.joda.time.Period(15724841402L, chronology11);
        org.joda.time.DateTimeField dateTimeField18 = chronology11.minuteOfHour();
        long long20 = dateTimeField18.roundHalfEven((-307881240006L));
        int int22 = dateTimeField18.getMaximumValue((long) 230);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-307881240000L) + "'", long20 == (-307881240000L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
    }

    @Test
    public void test10357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10357");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder0.setRegion("zh");
        java.util.Locale locale5 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.removeUnicodeLocaleAttribute("pt518400s");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: pt518400s [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_ZH");
    }

    @Test
    public void test10358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10358");
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.millis();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.Instant instant10 = dateTime9.toInstant();
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        org.joda.time.Days days21 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod22 = days21.toMutablePeriod();
        org.joda.time.Duration duration23 = days21.toStandardDuration();
        boolean boolean24 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Days days25 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod26 = days25.toMutablePeriod();
        org.joda.time.Duration duration27 = days25.toStandardDuration();
        boolean boolean28 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        boolean boolean29 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period40 = period38.minusMinutes((int) ' ');
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadablePeriod) period38);
        int int42 = dateTime9.getWeekyear();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.Days days49 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod50 = days49.toMutablePeriod();
        org.joda.time.Duration duration51 = days49.toStandardDuration();
        org.joda.time.PeriodType periodType52 = days49.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.Chronology chronology61 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.hourOfHalfday();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType52, chronology61);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTimeField dateTimeField65 = chronology61.millisOfDay();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((-259200000L), (long) '#', chronology61);
        mutableInterval43.setChronology(chronology61);
        org.joda.time.DateTime dateTime68 = dateTime9.withChronology(chronology61);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((-1L), dateTimeZone71);
        org.joda.time.LocalDateTime localDateTime73 = null;
        boolean boolean74 = dateTimeZone71.isLocalDateTimeGap(localDateTime73);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((-1L), dateTimeZone77);
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.util.Calendar calendar80 = dateTime78.toCalendar(locale79);
        org.joda.time.DateTime dateTime82 = dateTime78.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime83 = dateTime78.toLocalDateTime();
        boolean boolean84 = dateTimeZone71.isLocalDateTimeGap(localDateTime83);
        int[] intArray86 = chronology61.get((org.joda.time.ReadablePartial) localDateTime83, (long) 100);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((-82737998L), 3600000L, periodType6, chronology61);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((long) 0, periodType3, chronology61);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((-7L), 262828799500L, chronology61);
        org.joda.time.Chronology chronology90 = mutableInterval89.getChronology();
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(chronology90);
    }

    @Test
    public void test10359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10359");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 10, periodType4);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType4);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(0L, chronology9);
        org.joda.time.Period period12 = period10.plusMillis(100);
        int int13 = period12.getHours();
        org.joda.time.Period period15 = period12.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTimeISO();
        org.joda.time.Instant instant25 = dateTime19.toInstant();
        org.joda.time.Instant instant26 = instant25.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone29.isLocalDateTimeGap(localDateTime31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        boolean boolean36 = instant26.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant40 = instant26.withDurationAdded((org.joda.time.ReadableDuration) duration38, (-1));
        boolean boolean42 = instant40.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.Instant instant52 = dateTime46.toInstant();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant40, (org.joda.time.ReadableInstant) dateTime46, periodType53);
        org.joda.time.PeriodType periodType55 = periodType53.withWeeksRemoved();
        org.joda.time.PeriodType periodType56 = periodType55.withYearsRemoved();
        org.joda.time.Period period57 = period12.normalizedStandard(periodType56);
        org.joda.time.Period period58 = new org.joda.time.Period((java.lang.Object) mutablePeriod6, periodType56);
        org.joda.time.PeriodType periodType59 = periodType56.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(34L, 229824000000L, periodType56);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Calendar calendar68 = dateTime66.toCalendar(locale67);
        org.joda.time.DateTime dateTime70 = dateTime66.plusMillis((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime66.toDateTimeISO();
        org.joda.time.Instant instant72 = dateTime66.toInstant();
        org.joda.time.Instant instant73 = instant72.toInstant();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((-1L), dateTimeZone76);
        org.joda.time.LocalDateTime localDateTime78 = null;
        boolean boolean79 = dateTimeZone76.isLocalDateTimeGap(localDateTime78);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone76);
        org.joda.time.DateTime dateTime82 = dateTime80.withHourOfDay(0);
        boolean boolean83 = instant73.isEqual((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Duration duration85 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant87 = instant73.withDurationAdded((org.joda.time.ReadableDuration) duration85, (-1));
        boolean boolean89 = instant87.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology90 = instant87.getChronology();
        org.joda.time.DateTimeField dateTimeField91 = chronology90.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField92 = chronology90.dayOfYear();
        org.joda.time.DateTimeField dateTimeField93 = chronology90.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField94 = chronology90.clockhourOfDay();
        mutablePeriod60.setPeriod(1010016000660L, 26099713L, chronology90);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test10360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10360");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("25822364", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=25822364");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10361");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        boolean boolean17 = dateTimeZone14.isStandardOffset((long) (byte) 100);
        boolean boolean19 = dateTimeZone14.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime32.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        boolean boolean42 = dateTime40.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration44 = minutes43.toStandardDuration();
        org.joda.time.Duration duration45 = minutes43.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration45);
        int int47 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology48 = chronology11.withZone(dateTimeZone14);
        boolean boolean49 = durationFieldType2.isSupported(chronology11);
        org.joda.time.DateTimeField dateTimeField50 = chronology11.weekyear();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 'u', periodType1, chronology11);
        org.joda.time.DateTimeField dateTimeField52 = chronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone54 = chronology11.getZone();
        org.joda.time.DateTimeField dateTimeField55 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology11.monthOfYear();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test10362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10362");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.Hours hours11 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours12 = hours11.negated();
        org.joda.time.DurationFieldType durationFieldType13 = hours12.getFieldType();
        org.joda.time.Hours hours15 = hours12.multipliedBy((int) 'a');
        int[] intArray18 = chronology9.get((org.joda.time.ReadablePeriod) hours12, (long) (short) 1, (long) 4);
        long long22 = chronology9.add((long) 999, (-1104537599997L), 53);
        org.joda.time.Chronology chronology23 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.secondOfMinute();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(21427200791L, chronology23);
        org.joda.time.DurationField durationField28 = chronology23.minutes();
        boolean boolean29 = durationField28.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-58540492798842L) + "'", long22 == (-58540492798842L));
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test10363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10363");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusHours(100);
        int int5 = period4.getMillis();
        org.joda.time.Period period7 = period4.withMillis((-292275054));
        org.joda.time.Period period9 = period7.withMillis(25785);
        org.joda.time.Period period11 = period9.plusMonths(192);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test10364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10364");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.Hours hours12 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) interval10);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) 2, (long) 23);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        java.lang.String str17 = interval16.toString();
        org.joda.time.MutableInterval mutableInterval18 = interval16.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        boolean boolean27 = mutableInterval18.contains((org.joda.time.ReadableInterval) interval25);
        boolean boolean28 = interval10.contains((org.joda.time.ReadableInterval) interval25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval30 = interval10.withStartMillis(27425234L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.023Z" + "'", str17, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.023Z");
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test10365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10365");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        java.lang.String str15 = mutablePeriod1.toString();
        mutablePeriod1.addSeconds(636);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        org.joda.time.Days days21 = days18.negated();
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        org.joda.time.Days days25 = days18.plus(days22);
        org.joda.time.MutablePeriod mutablePeriod26 = days25.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(34, 34, (int) (short) 0, 7);
        mutablePeriod26.add((org.joda.time.ReadablePeriod) mutablePeriod31);
        mutablePeriod26.setMinutes((int) (short) 100);
        boolean boolean35 = mutablePeriod1.equals((java.lang.Object) mutablePeriod26);
        mutablePeriod1.addWeeks(629);
        org.joda.time.Duration duration40 = new org.joda.time.Duration(666575L, 348969600000L);
        mutablePeriod1.add((org.joda.time.ReadableDuration) duration40);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P6DT35S" + "'", str15, "P6DT35S");
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test10366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10366");
        org.joda.time.Period period1 = org.joda.time.Period.years(0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(0L, chronology3);
        int int5 = period4.getWeeks();
        org.joda.time.PeriodType periodType6 = period4.getPeriodType();
        org.joda.time.Period period7 = period1.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration9 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime13.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime13.weekyear();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime13, periodType20);
        org.joda.time.Period period23 = period21.plusWeeks(1439);
        org.joda.time.Period period25 = period23.plusMillis(69);
        org.joda.time.Period period26 = period1.withFields((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period28 = period1.plusDays(117);
        org.joda.time.Minutes minutes29 = period1.toStandardMinutes();
        int int30 = minutes29.getMinutes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test10367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10367");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime3.hourOfDay();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property7.getAsText(locale9);
        org.joda.time.DateTime dateTime11 = property7.roundFloorCopy();
        int int12 = dateTime11.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23" + "'", str10, "23");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test10368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10368");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.lang.String str5 = dateTimeZone2.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.Instant instant8 = org.joda.time.Instant.parse("804");
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        int int18 = dateTime12.getDayOfWeek();
        boolean boolean19 = instant8.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) 53, (long) 747);
        org.joda.time.Instant instant24 = instant8.withDurationAdded((org.joda.time.ReadableDuration) duration22, 22);
        org.joda.time.Hours hours25 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.MutablePeriod mutablePeriod26 = hours25.toMutablePeriod();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
    }

    @Test
    public void test10369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10369");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(503);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test10370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10370");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Days days5 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod6 = days5.toMutablePeriod();
        org.joda.time.Duration duration7 = days5.toStandardDuration();
        long long8 = duration7.getStandardHours();
        mutableInterval4.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        long long10 = duration7.getMillis();
        java.lang.String str11 = duration7.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone16);
        boolean boolean20 = interval18.isAfter(100L);
        long long21 = interval18.getEndMillis();
        org.joda.time.Interval interval22 = interval18.toInterval();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.Instant instant32 = dateTime26.toInstant();
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType44 = periodType43.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime42, periodType43);
        boolean boolean46 = interval18.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Period period47 = duration7.toPeriodTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property48 = dateTime42.year();
        org.joda.time.DurationField durationField49 = property48.getDurationField();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 144L + "'", long8 == 144L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 518400000L + "'", long10 == 518400000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT518400S" + "'", str11, "PT518400S");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test10371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10371");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        long long7 = interval6.toDurationMillis();
        org.joda.time.ReadableInterval readableInterval8 = null;
        boolean boolean9 = interval6.overlaps(readableInterval8);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(34, 34, (int) (short) 0, 7);
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10);
        int int17 = period16.getSeconds();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period20 = period16.withFieldAdded(durationFieldType18, 86399);
        org.joda.time.DurationFieldType durationFieldType22 = period16.getFieldType(1);
        mutablePeriod14.set(durationFieldType22, (int) 'u');
        org.joda.time.Interval interval25 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod14);
        long long26 = interval25.getStartMillis();
        long long27 = interval25.toDurationMillis();
        org.joda.time.Chronology chronology28 = interval25.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-307881240006L) + "'", long26 == (-307881240006L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 307881240007L + "'", long27 == 307881240007L);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test10372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10372");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusHours(100);
        org.joda.time.Period period6 = period1.minusSeconds((int) '4');
        org.joda.time.Period period8 = period1.withHours(10);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        int int19 = dateTime17.getHourOfDay();
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Calendar calendar23 = dateTime17.toCalendar(locale21);
        org.joda.time.DateTime dateTime25 = dateTime17.plusHours((int) 'x');
        boolean boolean26 = interval14.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Interval interval28 = interval14.withStartMillis((long) '#');
        org.joda.time.Seconds seconds29 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval14);
        long long30 = interval14.toDurationMillis();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-CN" + "'", str22, "zh-CN");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645514270315,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=50,MILLISECOND=315,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 36000010L + "'", long30 == 36000010L);
    }

    @Test
    public void test10373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10373");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(259200051L);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        boolean boolean22 = instant12.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant26 = instant12.withDurationAdded((org.joda.time.ReadableDuration) duration24, (-1));
        boolean boolean28 = instant26.isBefore((long) (short) 10);
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration31 = period30.toStandardDuration();
        org.joda.time.Instant instant32 = instant26.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration31.plus((-86400000L));
        java.lang.String str35 = duration34.toString();
        org.joda.time.Period period36 = duration34.toPeriod();
        int int37 = duration1.compareTo((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.Instant instant46 = dateTime45.toInstant();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) dateTime45);
        org.joda.time.DateTime.Property property48 = dateTime45.weekyear();
        org.joda.time.DateTime dateTime49 = property48.getDateTime();
        org.joda.time.DateTime dateTime51 = dateTime49.minusSeconds(1439);
        int int52 = dateTime49.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.Chronology chronology61 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.millisOfDay();
        org.joda.time.DurationField durationField64 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.weekyearOfCentury();
        org.joda.time.DateTime dateTime66 = dateTime49.toDateTime(chronology61);
        org.joda.time.Period period67 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime.Property property68 = dateTime49.weekOfWeekyear();
        java.lang.String str69 = property68.getName();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT-86399.990S" + "'", str35, "PT-86399.990S");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "weekOfWeekyear" + "'", str69, "weekOfWeekyear");
    }

    @Test
    public void test10374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10374");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (byte) -1, (long) 10);
        org.joda.time.Chronology chronology3 = interval2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.centuries();
        long long7 = durationField4.add((long) 652, 638);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2013333580800652L + "'", long7 == 2013333580800652L);
    }

    @Test
    public void test10375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10375");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray17 = new java.lang.String[] { "eras", "zh-CN", "UnsupportedDurationField[eras]", "yearOfEra", "zho", "", "USA", "weekOfWeekyear", "Property[millisOfSecond]", "UnsupportedDurationField[eras]", "UnsupportedDurationField[eras]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList18);
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Locale[] localeArray22 = new java.util.Locale[] { locale21 };
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.lang.String[] strArray37 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strList38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        boolean boolean46 = dateTime44.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property47 = dateTime44.millisOfSecond();
        org.joda.time.DateTime dateTime48 = property47.getDateTime();
        org.joda.time.DateTime dateTime50 = dateTime48.plusSeconds(10);
        org.joda.time.DateTime.Property property51 = dateTime48.yearOfEra();
        java.util.Locale.Category category52 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale53 = java.util.Locale.getDefault(category52);
        java.util.Set<java.lang.Character> charSet54 = locale53.getExtensionKeys();
        int int55 = property51.getMaximumShortTextLength(locale53);
        java.lang.String str56 = locale53.getDisplayCountry();
        java.util.Set<java.lang.String> strSet57 = locale53.getUnicodeLocaleKeys();
        java.lang.String str58 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Calendar calendar68 = dateTime66.toCalendar(locale67);
        org.joda.time.DateTime dateTime70 = dateTime66.plusMillis((int) '4');
        org.joda.time.DateTime dateTime72 = dateTime66.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((-1L), dateTimeZone75);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Calendar calendar78 = dateTime76.toCalendar(locale77);
        org.joda.time.DateTime dateTime80 = dateTime76.plusMillis((int) '4');
        org.joda.time.DateTime dateTime81 = dateTime76.toDateTimeISO();
        org.joda.time.Instant instant82 = dateTime76.toInstant();
        org.joda.time.Instant instant83 = instant82.toInstant();
        org.joda.time.Minutes minutes84 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) instant82);
        org.joda.time.PeriodType periodType85 = minutes84.getPeriodType();
        org.joda.time.PeriodType periodType86 = periodType85.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(periodType86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((java.lang.Object) languageRangeList1, periodType86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.util.ArrayList");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + category52 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category52.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e2d\u56fd" + "'", str56, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(languageRangeList62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar78);
        org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(minutes84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType86);
    }

    @Test
    public void test10376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10376");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(910, (-2), 703, 853);
    }

    @Test
    public void test10377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10377");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(0L, chronology1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray3 = mutablePeriod2.getFieldTypes();
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((java.lang.Object) interval7);
        boolean boolean9 = interval7.containsNow();
        org.joda.time.Duration duration10 = interval7.toDuration();
        org.joda.time.Chronology chronology11 = interval7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths(100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        org.joda.time.Duration duration21 = days19.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant18, (org.joda.time.ReadableDuration) duration21);
        int int23 = mutablePeriod22.size();
        org.joda.time.DateTime dateTime24 = dateTime17.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.Instant instant34 = dateTime28.toInstant();
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone38.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        boolean boolean45 = instant35.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant49 = instant35.withDurationAdded((org.joda.time.ReadableDuration) duration47, (-1));
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Calendar calendar55 = dateTime53.toCalendar(locale54);
        org.joda.time.DateTime dateTime57 = dateTime53.plusMillis((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime53.toDateTimeISO();
        org.joda.time.Instant instant59 = dateTime53.toInstant();
        org.joda.time.Instant instant60 = instant59.toInstant();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime65 = null;
        boolean boolean66 = dateTimeZone63.isLocalDateTimeGap(localDateTime65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone63);
        org.joda.time.DateTime dateTime69 = dateTime67.withHourOfDay(0);
        boolean boolean70 = instant60.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Duration duration72 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant74 = instant60.withDurationAdded((org.joda.time.ReadableDuration) duration72, (-1));
        java.util.Date date75 = instant60.toDate();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant35, (org.joda.time.ReadableInstant) instant60);
        int int78 = period76.getValue((int) (short) 0);
        org.joda.time.Period period79 = period76.toPeriod();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) period76);
        org.joda.time.DateTime dateTime81 = mutableInterval80.getEnd();
        boolean boolean82 = interval7.equals((java.lang.Object) mutableInterval80);
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.years();
        org.joda.time.Period period86 = new org.joda.time.Period((-82737998L), (long) 'u', periodType85);
        org.joda.time.PeriodType periodType87 = periodType85.withYearsRemoved();
        org.joda.time.Period period88 = interval7.toPeriod(periodType87);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval7);
        org.junit.Assert.assertNotNull(durationFieldTypeArray3);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(period88);
    }

    @Test
    public void test10378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10378");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) 0, (int) 'x', (int) (byte) 10, 59);
        mutablePeriod4.setPeriod((long) (short) 0);
        mutablePeriod4.addYears(360000000);
        org.joda.time.DurationFieldType durationFieldType10 = mutablePeriod4.getFieldType(0);
        org.junit.Assert.assertNotNull(durationFieldType10);
    }

    @Test
    public void test10379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10379");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) '4', chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime21.toMutableDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = dateTime21.withYear((int) '4');
        int int33 = mutableDateTime9.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardMinutes((long) 147);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration35);
        java.lang.Object obj37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval(obj37, chronology38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        boolean boolean42 = interval39.contains((-1L));
        org.joda.time.Duration duration43 = interval39.toDuration();
        org.joda.time.Period period44 = interval39.toPeriod();
        org.joda.time.Duration duration45 = interval39.toDuration();
        org.joda.time.DateTime dateTime46 = dateTime21.minus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTime dateTime48 = dateTime21.withHourOfDay(10);
        org.joda.time.DateTime dateTime49 = dateTime21.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test10380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10380");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusDays((int) (short) 1);
        org.joda.time.Period period6 = period4.plusDays(53);
        org.joda.time.Period period8 = period6.withSeconds((-485));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test10381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10381");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        boolean boolean10 = mutableInterval8.isBefore((long) (-100));
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone15);
        boolean boolean19 = interval17.isAfter(100L);
        long long20 = interval17.getEndMillis();
        org.joda.time.Interval interval21 = interval17.toInterval();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Interval interval23 = interval21.withDurationBeforeEnd(readableDuration22);
        org.joda.time.Duration duration24 = interval23.toDuration();
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = duration24.toPeriod();
        org.joda.time.Period period27 = duration24.toPeriod();
        org.joda.time.Duration duration29 = duration24.plus((long) 59);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((java.lang.Object) 89424000000L);
        org.joda.time.Period period32 = duration31.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone37);
        org.joda.time.Interval interval40 = interval39.toInterval();
        java.lang.String str41 = interval40.toString();
        org.joda.time.DateTime dateTime42 = interval40.getEnd();
        org.joda.time.Interval interval44 = interval40.withEndMillis((long) 502);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone56);
        boolean boolean60 = interval58.isAfter(100L);
        long long61 = interval58.getEndMillis();
        org.joda.time.Interval interval62 = interval58.toInterval();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Interval interval64 = interval62.withDurationBeforeEnd(readableDuration63);
        boolean boolean65 = interval51.contains((org.joda.time.ReadableInterval) interval62);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((-1L), dateTimeZone70);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone70);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone74);
        boolean boolean76 = interval72.isAfter((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.TimeOfDay timeOfDay77 = dateTime75.toTimeOfDay();
        org.joda.time.Interval interval78 = interval51.withEnd((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) '4', chronology80);
        org.joda.time.Interval interval82 = interval51.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod81);
        boolean boolean83 = interval44.abuts((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Duration duration84 = interval44.toDuration();
        boolean boolean85 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration84);
        org.joda.time.Duration duration87 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration84, (-2));
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z" + "'", str41, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(duration87);
    }

    @Test
    public void test10382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10382");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setHours((int) '#');
        mutablePeriod1.addMillis((int) (byte) 100);
        mutablePeriod1.setHours(2);
        mutablePeriod1.addHours((-457087));
        mutablePeriod1.addMillis(26100916);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test10383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10383");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("P-835D");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10384");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds2 = seconds0.dividedBy(4);
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.MIN_VALUE;
        int int4 = seconds3.getSeconds();
        boolean boolean5 = seconds2.isGreaterThan(seconds3);
        org.joda.time.Seconds seconds7 = seconds3.dividedBy(829);
        org.joda.time.Period period8 = seconds3.toPeriod();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-2147483648) + "'", int4 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test10385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10385");
        org.joda.time.Period period4 = new org.joda.time.Period((int) (short) 10, 203, 27, 226);
        org.joda.time.Period period6 = period4.minusHours(179);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test10386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10386");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime14 = dateTime9.toLocalDateTime();
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Calendar calendar17 = dateTime9.toCalendar(locale15);
        org.joda.time.DateTime dateTime19 = dateTime9.plusYears((int) (short) 0);
        boolean boolean20 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime9.toDateTime();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean23 = dateTime3.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test10387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10387");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 22, 1645513719942L, periodType3);
        org.joda.time.Period period5 = new org.joda.time.Period(0L, periodType3);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) dateTime14, dateTimeZone18);
        org.joda.time.DateTime.Property property20 = dateTime14.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTimeISO();
        org.joda.time.Instant instant30 = dateTime24.toInstant();
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        boolean boolean41 = instant31.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant45 = instant31.withDurationAdded((org.joda.time.ReadableDuration) duration43, (-1));
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.DateTime dateTime56 = dateTime54.plusMillis((int) '#');
        int int57 = instant45.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = dateTime54.toDateTime();
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.util.Locale locale60 = locale59.stripExtensions();
        java.lang.String str61 = locale59.getISO3Language();
        java.lang.String str62 = locale59.getDisplayScript();
        java.util.Calendar calendar63 = dateTime54.toCalendar(locale59);
        int int64 = property20.getMaximumShortTextLength(locale59);
        org.joda.time.DateTime dateTime65 = property20.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        java.util.GregorianCalendar gregorianCalendar69 = dateTime68.toGregorianCalendar();
        int int70 = dateTime68.getHourOfDay();
        java.util.Locale locale71 = java.util.Locale.CHINA;
        java.util.Locale locale72 = locale71.stripExtensions();
        java.lang.String str73 = locale72.toLanguageTag();
        java.util.Calendar calendar74 = dateTime68.toCalendar(locale72);
        org.joda.time.DateTime.Property property75 = dateTime68.minuteOfHour();
        boolean boolean76 = property75.isLeap();
        org.joda.time.DateTime dateTime77 = property75.roundCeilingCopy();
        org.joda.time.DurationField durationField78 = property75.getLeapDurationField();
        org.joda.time.DateTime dateTime79 = property75.roundFloorCopy();
        org.joda.time.DateTime dateTime81 = dateTime79.plusYears((-100));
        int int82 = dateTime81.getWeekyear();
        org.joda.time.DateTime dateTime84 = dateTime81.plusYears(948);
        org.joda.time.DateTime dateTime86 = dateTime84.plusMillis(59);
        int int87 = dateTime65.compareTo((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Duration duration88 = period5.toDurationFrom((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zho" + "'", str61, "zho");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(gregorianCalendar69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 7 + "'", int70 == 7);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "zh-CN" + "'", str73, "zh-CN");
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1645514270781,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=50,MILLISECOND=781,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNull(durationField78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1922 + "'", int82 == 1922);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(duration88);
    }

    @Test
    public void test10388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10388");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Instant instant23 = instant10.withDurationAdded((long) 7, (int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime25 = instant23.toDateTimeISO();
        org.joda.time.Instant instant27 = instant23.minus((long) 999);
        org.joda.time.Instant instant30 = instant23.withDurationAdded(86400000L, 53);
        org.joda.time.Instant instant32 = instant23.minus(348969600000L);
        boolean boolean33 = instant23.isEqualNow();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test10389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10389");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = dateTime8.withSecondOfMinute(1);
        int int15 = dateTime8.getYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        int int20 = dateTime19.getHourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.minusWeeks(59);
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis(10L);
        org.joda.time.DateTime dateTime25 = dateTime19.plus((org.joda.time.ReadableDuration) duration24);
        boolean boolean26 = dateTime19.isAfterNow();
        org.joda.time.Instant instant27 = dateTime19.toInstant();
        org.joda.time.DateTime.Property property28 = dateTime19.centuryOfEra();
        org.joda.time.DateTime dateTime30 = dateTime19.withMillisOfSecond(248);
        org.joda.time.format.PeriodPrinter periodPrinter31 = null;
        org.joda.time.format.PeriodParser periodParser32 = null;
        org.joda.time.format.PeriodFormatter periodFormatter33 = new org.joda.time.format.PeriodFormatter(periodPrinter31, periodParser32);
        org.joda.time.PeriodType periodType34 = periodFormatter33.getParseType();
        org.joda.time.PeriodType periodType35 = periodFormatter33.getParseType();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.millis();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(periodType36);
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter33.withParseType(periodType36);
        org.joda.time.PeriodType periodType39 = periodType36.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime30, periodType36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1645489071630");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNull(periodType34);
        org.junit.Assert.assertNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodType39);
    }

    @Test
    public void test10390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10390");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMillis((int) '#');
        int int36 = instant24.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Days days37 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod38 = days37.toMutablePeriod();
        org.joda.time.Duration duration39 = days37.toStandardDuration();
        org.joda.time.Days days40 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod41 = days40.toMutablePeriod();
        org.joda.time.Duration duration42 = days40.toStandardDuration();
        boolean boolean43 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Instant instant45 = instant24.withDurationAdded((org.joda.time.ReadableDuration) duration42, 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        boolean boolean56 = interval52.isAfter((org.joda.time.ReadableInstant) dateTime55);
        long long57 = interval52.toDurationMillis();
        org.joda.time.Duration duration58 = interval52.toDuration();
        org.joda.time.Days days61 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod62 = days61.toMutablePeriod();
        org.joda.time.Duration duration63 = days61.toStandardDuration();
        org.joda.time.PeriodType periodType64 = days61.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Calendar calendar70 = dateTime68.toCalendar(locale69);
        org.joda.time.DateTime dateTime72 = dateTime68.plusMillis((int) '4');
        org.joda.time.Chronology chronology73 = dateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.hourOfHalfday();
        org.joda.time.Period period75 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType64, chronology73);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadableDuration) duration58, periodType64);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((-1L), dateTimeZone79);
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.util.Calendar calendar82 = dateTime80.toCalendar(locale81);
        org.joda.time.DateTime dateTime84 = dateTime80.plusMillis((int) '4');
        org.joda.time.DateTime dateTime85 = dateTime80.toDateTimeISO();
        org.joda.time.DateTime dateTime87 = dateTime85.plusMillis((int) '#');
        int int88 = dateTime87.getMillisOfSecond();
        org.joda.time.DateTime dateTime89 = dateTime87.toDateTimeISO();
        org.joda.time.Interval interval90 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration58, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTime dateTime91 = interval90.getStart();
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval(0L, 457087L);
        org.joda.time.Interval interval95 = interval90.overlap((org.joda.time.ReadableInterval) mutableInterval94);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 2L + "'", long57 == 2L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar82);
        org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 34 + "'", int88 == 34);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(interval95);
    }

    @Test
    public void test10391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10391");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone12);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval16 = interval14.toMutableInterval();
        boolean boolean18 = mutableInterval16.isBefore((long) (-100));
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone23);
        boolean boolean27 = interval25.isAfter(100L);
        long long28 = interval25.getEndMillis();
        org.joda.time.Interval interval29 = interval25.toInterval();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval29.withDurationBeforeEnd(readableDuration30);
        org.joda.time.Duration duration32 = interval31.toDuration();
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Interval interval34 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Hours hours35 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone38.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        int int45 = dateTime44.getDayOfWeek();
        org.joda.time.DateTime dateTime47 = dateTime44.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property48 = dateTime47.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        java.util.GregorianCalendar gregorianCalendar52 = dateTime51.toGregorianCalendar();
        int int53 = dateTime51.getHourOfDay();
        java.util.Locale locale54 = java.util.Locale.CHINA;
        java.util.Locale locale55 = locale54.stripExtensions();
        java.lang.String str56 = locale55.toLanguageTag();
        java.util.Calendar calendar57 = dateTime51.toCalendar(locale55);
        org.joda.time.DateTime.Property property58 = dateTime51.minuteOfHour();
        boolean boolean59 = property58.isLeap();
        org.joda.time.DateTime dateTime60 = property58.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean62 = dateTime60.isSupported(dateTimeFieldType61);
        org.joda.time.DateTime dateTime64 = dateTime60.minusMonths(8);
        org.joda.time.LocalDate localDate65 = dateTime64.toLocalDate();
        org.joda.time.DateTime dateTime66 = dateTime47.withFields((org.joda.time.ReadablePartial) localDate65);
        boolean boolean67 = interval6.isBefore((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(gregorianCalendar52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "zh-CN" + "'", str56, "zh-CN");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1645514271016,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=51,MILLISECOND=16,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test10392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10392");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.setValue(4, 69);
        mutablePeriod1.addHours((int) (byte) 100);
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        mutablePeriod20.addWeeks((int) (short) -1);
        mutablePeriod20.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        org.joda.time.Duration duration37 = days35.toStandardDuration();
        org.joda.time.PeriodType periodType38 = days35.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMillis((int) '4');
        org.joda.time.Chronology chronology47 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.hourOfHalfday();
        org.joda.time.Period period49 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType38, chronology47);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology47);
        mutablePeriod20.setPeriod(1L, chronology47);
        mutablePeriod1.setPeriod((long) 5, chronology47);
        mutablePeriod1.setPeriod(1767600500L);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test10393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10393");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("PT27425133M");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10394");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Instant instant25 = instant9.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime26 = instant9.toMutableDateTimeISO();
        org.joda.time.Instant instant27 = mutableDateTime26.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(instant27);
    }

    @Test
    public void test10395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10395");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        int int3 = period2.getWeeks();
        int int4 = period2.getMillis();
        org.joda.time.PeriodType periodType5 = period2.getPeriodType();
        int int6 = period2.size();
        org.joda.time.Period period7 = period2.toPeriod();
        org.joda.time.Period period9 = period7.plusMillis(3);
        org.joda.time.Duration duration10 = period7.toStandardDuration();
        long long11 = duration10.getStandardDays();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths(100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        org.joda.time.Duration duration21 = days19.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant18, (org.joda.time.ReadableDuration) duration21);
        int int23 = mutablePeriod22.size();
        org.joda.time.DateTime dateTime24 = dateTime17.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) dateTime33, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMillis((int) 'u');
        boolean boolean41 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Instant instant42 = dateTime40.toInstant();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime40);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(instant42);
    }

    @Test
    public void test10396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10396");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(7185L);
    }

    @Test
    public void test10397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10397");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths((int) (byte) 1);
        org.joda.time.Days days16 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod17 = days16.toMutablePeriod();
        org.joda.time.Duration duration18 = days16.toStandardDuration();
        org.joda.time.PeriodType periodType19 = days16.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        org.joda.time.Period period30 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType19, chronology28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.millisOfDay();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) dateTime13, chronology28);
        org.joda.time.Period period34 = new org.joda.time.Period(0L, (long) (byte) 100, chronology28);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DurationField durationField36 = chronology28.minutes();
        org.joda.time.DateTimeField dateTimeField37 = chronology28.clockhourOfHalfday();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(5037197528L, 1071360068060L, chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test10398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10398");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        boolean boolean9 = mutableInterval7.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray20 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList21);
        boolean boolean24 = mutableInterval7.equals((java.lang.Object) strList21);
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval7.toMutableInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval25.getStart();
        org.joda.time.Chronology chronology27 = mutableInterval25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        int int32 = dateTime31.getHourOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.minusWeeks(59);
        org.joda.time.DateTime dateTime36 = dateTime31.withWeekOfWeekyear((int) ' ');
        org.joda.time.DateTime dateTime38 = dateTime36.minusYears((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime36.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime43.toDateTimeISO();
        org.joda.time.Instant instant49 = dateTime43.toInstant();
        org.joda.time.Instant instant50 = instant49.toInstant();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime55 = null;
        boolean boolean56 = dateTimeZone53.isLocalDateTimeGap(localDateTime55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime59 = dateTime57.withHourOfDay(0);
        boolean boolean60 = instant50.isEqual((org.joda.time.ReadableInstant) dateTime59);
        int int61 = property39.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology62 = dateTime59.getChronology();
        org.joda.time.Instant instant63 = dateTime59.toInstant();
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime65 = instant63.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval25.setStart((org.joda.time.ReadableInstant) mutableDateTime65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
    }

    @Test
    public void test10399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10399");
        org.joda.time.Period period1 = org.joda.time.Period.hours(890);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test10400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10400");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        long long7 = interval6.toDurationMillis();
        org.joda.time.ReadableInterval readableInterval8 = null;
        boolean boolean9 = interval6.overlaps(readableInterval8);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(34, 34, (int) (short) 0, 7);
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10);
        int int17 = period16.getSeconds();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period20 = period16.withFieldAdded(durationFieldType18, 86399);
        org.joda.time.DurationFieldType durationFieldType22 = period16.getFieldType(1);
        mutablePeriod14.set(durationFieldType22, (int) 'u');
        org.joda.time.Interval interval25 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTime dateTime26 = interval25.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withMillisOfDay(50);
        org.joda.time.Days days29 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod30 = days29.toMutablePeriod();
        mutablePeriod30.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval33 = null;
        mutablePeriod30.add(readableInterval33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.eras();
        int int36 = mutablePeriod30.get(durationFieldType35);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.Chronology chronology48 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology48);
        mutablePeriod30.setPeriod((long) (-1), chronology48);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime.Property property53 = dateTime52.year();
        org.joda.time.Duration duration55 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Calendar calendar61 = dateTime59.toCalendar(locale60);
        org.joda.time.DateTime dateTime63 = dateTime59.plusMillis((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime59.toDateTimeISO();
        org.joda.time.DateTime.Property property65 = dateTime59.weekyear();
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime59, periodType66);
        org.joda.time.Period period69 = period67.plusYears((int) (byte) 0);
        org.joda.time.Period period70 = period67.toPeriod();
        org.joda.time.Period period72 = period67.plusYears(96);
        org.joda.time.Period period74 = period72.withHours(107);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadablePeriod) period74);
        boolean boolean76 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test10401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10401");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType9 = periodType8.withMinutesRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.Hours hours12 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(0L, chronology14);
        org.joda.time.Period period17 = period15.plusMillis(100);
        int int18 = period17.getHours();
        org.joda.time.Period period20 = period17.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTimeISO();
        org.joda.time.Instant instant30 = dateTime24.toInstant();
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        boolean boolean41 = instant31.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant45 = instant31.withDurationAdded((org.joda.time.ReadableDuration) duration43, (-1));
        boolean boolean47 = instant45.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTimeISO();
        org.joda.time.Instant instant57 = dateTime51.toInstant();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant45, (org.joda.time.ReadableInstant) dateTime51, periodType58);
        org.joda.time.PeriodType periodType60 = periodType58.withWeeksRemoved();
        org.joda.time.PeriodType periodType61 = periodType60.withYearsRemoved();
        org.joda.time.Period period62 = period17.normalizedStandard(periodType61);
        org.joda.time.Period period63 = new org.joda.time.Period((java.lang.Object) mutablePeriod11, periodType61);
        org.joda.time.format.PeriodFormatter periodFormatter64 = periodFormatter2.withParseType(periodType61);
        int int65 = periodType61.size();
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodFormatter64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test10402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10402");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645513740L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime3 = dateTime1.withYearOfCentury(397);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 397 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10403");
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone14);
        boolean boolean18 = interval16.isAfter(100L);
        long long19 = interval16.getEndMillis();
        org.joda.time.Interval interval20 = interval16.toInterval();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Interval interval22 = interval20.withDurationBeforeEnd(readableDuration21);
        org.joda.time.Period period23 = interval20.toPeriod();
        org.joda.time.Seconds seconds24 = period23.toStandardSeconds();
        org.joda.time.PeriodType periodType25 = seconds24.getPeriodType();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 508, 86399L, periodType26);
        org.joda.time.PeriodType periodType28 = periodType26.withMinutesRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withYearsRemoved();
        org.joda.time.PeriodType periodType30 = periodType29.withMillisRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(699, 529, 0, 679, (-3), 291, 687, 28, periodType31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
    }

    @Test
    public void test10404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10404");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod2 = days1.toMutablePeriod();
        org.joda.time.Duration duration3 = days1.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        mutablePeriod4.addMinutes((int) (byte) 0);
        mutablePeriod4.setMonths((int) '#');
        mutablePeriod4.add(35, 1439, (int) (short) 1, 1439, 0, (int) (short) -1, (int) (byte) 0, 59);
        mutablePeriod4.setMonths((-3));
        org.joda.time.Days days20 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod21 = days20.toMutablePeriod();
        org.joda.time.Duration duration22 = days20.toStandardDuration();
        org.joda.time.Days days23 = days20.negated();
        org.joda.time.Days days24 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod25 = days24.toMutablePeriod();
        org.joda.time.Duration duration26 = days24.toStandardDuration();
        org.joda.time.Days days27 = days24.negated();
        boolean boolean28 = days23.isLessThan(days24);
        org.joda.time.Days days30 = days23.minus(829);
        org.joda.time.PeriodType periodType31 = days23.getPeriodType();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(0L, chronology33);
        int int35 = period34.getSeconds();
        org.joda.time.Period period37 = period34.withMonths((int) (byte) 10);
        int int38 = period37.getMillis();
        org.joda.time.Period period39 = period37.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod();
        mutablePeriod40.addDays(5);
        mutablePeriod40.addDays(23);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType48 = periodType47.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(522547200000L, (-1510246268986L), periodType48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.days();
        int int51 = mutablePeriod49.get(durationFieldType50);
        mutablePeriod40.add(durationFieldType50, 59);
        org.joda.time.Period period55 = period39.withFieldAdded(durationFieldType50, (-6));
        boolean boolean56 = days23.isSupported(durationFieldType50);
        int int57 = mutablePeriod4.get(durationFieldType50);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1445 + "'", int57 == 1445);
    }

    @Test
    public void test10405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10405");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.toString();
        java.lang.String str5 = dateTimeZone2.getID();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(1645513886603L, dateTimeZone2);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale8.getDisplayName(locale11);
        java.util.Set<java.lang.String> strSet13 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str14 = dateTimeZone2.getShortName((long) 26068415, locale8);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587" + "'", str9, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str12, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
    }

    @Test
    public void test10406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10406");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.Instant instant34 = dateTime28.toInstant();
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone38.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        boolean boolean45 = instant35.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant49 = instant35.withDurationAdded((org.joda.time.ReadableDuration) duration47, (-1));
        java.util.Date date50 = instant35.toDate();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant53 = instant10.plus(89424000000L);
        org.joda.time.Instant instant56 = instant10.withDurationAdded(1L, 3);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime61 = null;
        boolean boolean62 = dateTimeZone59.isLocalDateTimeGap(localDateTime61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime65 = dateTime63.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime67 = dateTime65.toMutableDateTime(dateTimeZone66);
        org.joda.time.Days days68 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod69 = days68.toMutablePeriod();
        mutablePeriod69.setSeconds((int) (byte) 0);
        mutablePeriod69.setDays((int) 'a');
        mutablePeriod69.addSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology77 = null;
        mutablePeriod69.setPeriod(100L, chronology77);
        int int79 = mutablePeriod69.getYears();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant56, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime82 = instant56.toDateTimeISO();
        org.joda.time.Instant instant83 = instant56.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(days68);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(instant83);
    }

    @Test
    public void test10407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10407");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 69, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(96);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test10408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10408");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology19);
        mutablePeriod1.setPeriod((long) (-1), chronology19);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod1.copy();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Days days30 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod31 = days30.toMutablePeriod();
        org.joda.time.Duration duration32 = days30.toStandardDuration();
        org.joda.time.PeriodType periodType33 = days30.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.Chronology chronology42 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.hourOfHalfday();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType33, chronology42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTimeField dateTimeField46 = chronology42.millisOfDay();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((-259200000L), (long) '#', chronology42);
        mutableInterval24.setChronology(chronology42);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) mutableInterval24);
        boolean boolean51 = mutableInterval24.contains((long) 864);
        org.joda.time.MutableInterval mutableInterval52 = mutableInterval24.copy();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(mutableInterval52);
    }

    @Test
    public void test10409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10409");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        long long2 = duration1.getStandardMinutes();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTimeISO();
        org.joda.time.Instant instant12 = dateTime6.toInstant();
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone16.isLocalDateTimeGap(localDateTime18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(0);
        boolean boolean23 = instant13.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant27 = instant13.withDurationAdded((org.joda.time.ReadableDuration) duration25, (-1));
        boolean boolean29 = instant27.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTimeISO();
        org.joda.time.Instant instant39 = dateTime33.toInstant();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant27, (org.joda.time.ReadableInstant) dateTime33, periodType40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Hours hours43 = period42.toStandardHours();
        org.joda.time.Period period45 = period42.withMillis(848);
        int int46 = period45.getSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test10410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10410");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime13.toDateTimeISO();
        org.joda.time.Instant instant19 = dateTime13.toInstant();
        org.joda.time.Instant instant20 = instant19.toInstant();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '4');
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekOfWeekyear();
        long long33 = dateTimeField31.roundHalfEven(1L);
        int int34 = dateTime3.get(dateTimeField31);
        org.joda.time.DateTime.Property property35 = dateTime3.weekyear();
        long long36 = dateTime3.getMillis();
        org.joda.time.DateTime.Property property37 = dateTime3.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMillis((int) '4');
        org.joda.time.Chronology chronology47 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.era();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(0L, chronology47);
        org.joda.time.DateTimeField dateTimeField51 = chronology47.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.year();
        org.joda.time.DateTimeField dateTimeField53 = chronology47.year();
        org.joda.time.DateTime dateTime54 = dateTime3.withChronology(chronology47);
        java.lang.String str55 = chronology47.toString();
        org.joda.time.DateTimeField dateTimeField56 = chronology47.era();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-259200000L) + "'", long33 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test10411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10411");
        org.joda.time.Hours hours0 = org.joda.time.Hours.TWO;
        int int1 = hours0.getHours();
        org.joda.time.PeriodType periodType2 = hours0.getPeriodType();
        org.joda.time.Weeks weeks3 = hours0.toStandardWeeks();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = days4.negated();
        org.joda.time.Days days8 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod9 = days8.toMutablePeriod();
        org.joda.time.Days days10 = org.joda.time.Days.MIN_VALUE;
        boolean boolean11 = days8.isLessThan(days10);
        org.joda.time.Days days13 = days8.multipliedBy(23);
        org.joda.time.Days days14 = days7.plus(days13);
        org.joda.time.Days days16 = days14.multipliedBy(0);
        org.joda.time.Days days17 = org.joda.time.Days.THREE;
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        org.joda.time.Days days21 = days18.negated();
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        org.joda.time.Days days25 = days18.plus(days22);
        boolean boolean26 = days17.isGreaterThan(days22);
        org.joda.time.Days days28 = days17.multipliedBy((-3));
        boolean boolean29 = days14.isGreaterThan(days28);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = hours0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days28);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Hours cannot be compared to class org.joda.time.Days");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test10412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10412");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        java.lang.String str3 = duration2.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime6);
        java.lang.String str8 = duration2.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getHourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.withCenturyOfEra(7);
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration28 = duration18.toDuration();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Interval interval30 = duration2.toIntervalFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = interval30.withChronology(chronology31);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT518400S" + "'", str3, "PT518400S");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT518400S" + "'", str8, "PT518400S");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval32);
    }

    @Test
    public void test10413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10413");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.weekyear();
        org.joda.time.DateTime.Property property10 = dateTime3.yearOfCentury();
        boolean boolean11 = property10.isLeap();
        org.joda.time.DateTime dateTime12 = property10.roundCeilingCopy();
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(20);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime.Property property24 = dateTime18.weekyear();
        org.joda.time.Duration duration26 = org.joda.time.Duration.millis((long) (short) -1);
        long long27 = duration26.getMillis();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType29 = periodType28.withMinutesRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration26, periodType28);
        org.joda.time.DateTime.Property property31 = dateTime18.dayOfMonth();
        org.joda.time.Hours hours32 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.PeriodType periodType33 = hours32.getPeriodType();
        org.joda.time.PeriodType periodType34 = periodType33.withMillisRemoved();
        org.joda.time.PeriodType periodType35 = periodType33.withMinutesRemoved();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
    }

    @Test
    public void test10414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10414");
        org.joda.time.Days days0 = org.joda.time.Days.FOUR;
        org.joda.time.Days days1 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod2 = days1.toMutablePeriod();
        org.joda.time.Duration duration3 = days1.toStandardDuration();
        org.joda.time.Days days4 = days1.negated();
        org.joda.time.Days days5 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod6 = days5.toMutablePeriod();
        org.joda.time.Duration duration7 = days5.toStandardDuration();
        org.joda.time.Days days8 = days1.plus(days5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        int int15 = dateTime12.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime12.getZone();
        org.joda.time.TimeOfDay timeOfDay17 = dateTime12.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.Days days22 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) timeOfDay17, (org.joda.time.ReadablePartial) localTime21);
        boolean boolean23 = days8.isGreaterThan(days22);
        org.joda.time.Days days25 = days8.minus((int) (short) -1);
        boolean boolean26 = days0.isLessThan(days25);
        org.joda.time.Duration duration27 = days25.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((java.lang.Object) days25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Days");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
    }

    @Test
    public void test10415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10415");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 170);
        org.joda.time.Period period3 = period1.minusHours((int) '#');
        org.joda.time.Period period5 = period1.withMonths(0);
        org.joda.time.Period period7 = period5.plusMonths(677);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test10416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10416");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime9.withZoneRetainFields(dateTimeZone13);
        java.lang.String str19 = dateTimeZone13.getName(2L);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.Instant instant21 = dateTime20.toInstant();
        long long22 = instant21.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514271731L + "'", long22 == 1645514271731L);
    }

    @Test
    public void test10417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10417");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.Hours hours3 = hours0.minus((int) (byte) 1);
        org.joda.time.Hours hours4 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours5 = hours4.negated();
        org.joda.time.DurationFieldType durationFieldType6 = hours5.getFieldType();
        org.joda.time.Hours hours8 = hours5.multipliedBy((int) 'a');
        org.joda.time.Hours hours9 = hours3.plus(hours8);
        org.joda.time.PeriodType periodType10 = hours3.getPeriodType();
        org.joda.time.Hours hours12 = hours3.multipliedBy(138);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.era();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(0L, chronology22);
        org.joda.time.DurationField durationField26 = chronology22.eras();
        org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) hours3, chronology22);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test10418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10418");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        boolean boolean9 = dateTime7.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property10 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds(10);
        org.joda.time.DateTime.Property property14 = dateTime11.yearOfEra();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        int int18 = property14.getMaximumShortTextLength(locale16);
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter2.withLocale(locale16);
        org.joda.time.PeriodType periodType20 = periodFormatter19.getParseType();
        org.joda.time.PeriodType periodType21 = periodFormatter19.getParseType();
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str23 = locale22.getISO3Language();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = locale22.getDisplayName(locale24);
        java.lang.String str28 = locale24.getDisplayName();
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter19.withLocale(locale24);
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNull(periodType20);
        org.junit.Assert.assertNull(periodType21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fra" + "'", str23, "fra");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "German" + "'", str26, "German");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Franz\366sisch (Kanada)" + "'", str27, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u5fb7\u6587" + "'", str28, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(periodFormatter29);
    }

    @Test
    public void test10419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10419");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime3.getZone();
        org.joda.time.TimeOfDay timeOfDay8 = dateTime3.toTimeOfDay();
        org.joda.time.DateTime.Property property9 = dateTime3.dayOfYear();
        org.joda.time.TimeOfDay timeOfDay10 = dateTime3.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean21 = interval17.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.TimeOfDay timeOfDay22 = dateTime20.toTimeOfDay();
        org.joda.time.Chronology chronology23 = timeOfDay22.getChronology();
        org.joda.time.Seconds seconds24 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadablePartial) timeOfDay10, (org.joda.time.ReadablePartial) timeOfDay22);
        org.joda.time.Seconds seconds25 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds26 = seconds25.negated();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone31);
        boolean boolean35 = interval33.isAfter(100L);
        long long36 = interval33.getEndMillis();
        org.joda.time.Interval interval37 = interval33.toInterval();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Interval interval39 = interval37.withDurationBeforeEnd(readableDuration38);
        org.joda.time.Period period40 = interval37.toPeriod();
        org.joda.time.Seconds seconds41 = period40.toStandardSeconds();
        org.joda.time.PeriodType periodType42 = seconds41.getPeriodType();
        org.joda.time.Seconds seconds43 = seconds25.minus(seconds41);
        org.joda.time.Seconds seconds45 = org.joda.time.Seconds.seconds(86399);
        org.joda.time.Seconds seconds46 = seconds45.negated();
        org.joda.time.Seconds seconds47 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds49 = seconds47.dividedBy(4);
        boolean boolean50 = seconds46.isLessThan(seconds49);
        int int51 = seconds41.compareTo((org.joda.time.base.BaseSingleFieldPeriod) seconds46);
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10);
        int int54 = period53.getSeconds();
        org.joda.time.Period period56 = period53.minusDays((int) (short) 1);
        org.joda.time.Duration duration57 = period56.toStandardDuration();
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Seconds seconds59 = period58.toStandardSeconds();
        org.joda.time.Seconds seconds60 = seconds41.plus(seconds59);
        org.joda.time.Seconds seconds61 = seconds24.minus(seconds41);
        org.joda.time.Duration duration62 = seconds41.toStandardDuration();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(seconds59);
        org.junit.Assert.assertNotNull(seconds60);
        org.junit.Assert.assertNotNull(seconds61);
        org.junit.Assert.assertNotNull(duration62);
    }

    @Test
    public void test10420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10420");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        boolean boolean15 = dateTimeZone12.isStandardOffset((long) (byte) 100);
        boolean boolean17 = dateTimeZone12.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        boolean boolean40 = dateTime38.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration42 = minutes41.toStandardDuration();
        org.joda.time.Duration duration43 = minutes41.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration43);
        int int45 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology46 = chronology9.withZone(dateTimeZone12);
        boolean boolean47 = durationFieldType0.isSupported(chronology9);
        org.joda.time.DurationField durationField48 = chronology9.centuries();
        org.joda.time.DurationFieldType durationFieldType49 = durationField48.getType();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone54);
        boolean boolean58 = interval56.isAfter(100L);
        long long59 = interval56.getEndMillis();
        org.joda.time.Interval interval60 = interval56.toInterval();
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.Chronology chronology62 = interval61.getChronology();
        org.joda.time.DurationField durationField63 = durationFieldType49.getField(chronology62);
        long long66 = durationField63.add(1047600035L, 0L);
        long long69 = durationField63.getDifferenceAsLong(679L, (long) (-8));
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1047600035L + "'", long66 == 1047600035L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test10421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10421");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime5.plusMonths((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.PeriodType periodType17 = days14.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfHalfday();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType17, chronology26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.millisOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) dateTime11, chronology26);
        org.joda.time.Period period32 = new org.joda.time.Period(0L, (long) (byte) 100, chronology26);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField34 = chronology26.yearOfEra();
        long long36 = dateTimeField34.roundHalfFloor(259199999L);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test10422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10422");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMonths(100);
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone9.isLocalDateTimeGap(localDateTime11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime15 = dateTime13.withHourOfDay(0);
        int int16 = dateTime15.getDayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime15.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property19 = dateTime15.millisOfSecond();
        org.joda.time.DateTime dateTime20 = property19.withMinimumValue();
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear(848);
        boolean boolean23 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime5.withMillisOfSecond(999);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        int int32 = dateTime29.getSecondOfMinute();
        org.joda.time.DateTime.Property property33 = dateTime29.hourOfDay();
        org.joda.time.DurationField durationField34 = property33.getDurationField();
        java.util.Locale locale35 = null;
        java.lang.String str36 = property33.getAsText(locale35);
        org.joda.time.DateTime dateTime38 = property33.addToCopy(6);
        org.joda.time.DateTime dateTime40 = dateTime38.minusSeconds(4);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone43.isLocalDateTimeGap(localDateTime45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime49 = dateTime47.withHourOfDay(0);
        org.joda.time.DateTime dateTime51 = dateTime47.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime53 = dateTime47.withWeekyear((int) (byte) 0);
        int int54 = dateTime53.getEra();
        org.joda.time.Duration duration55 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = dateTime25.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "23" + "'", str36, "23");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test10423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10423");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Period period13 = interval10.toPeriod();
        org.joda.time.Interval interval14 = interval10.toInterval();
        org.joda.time.Days days15 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval10);
        org.joda.time.MutableInterval mutableInterval16 = interval10.toMutableInterval();
        long long17 = interval10.getStartMillis();
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration20 = period19.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration30 = duration20.toDuration();
        org.joda.time.Duration duration31 = duration30.toDuration();
        org.joda.time.Interval interval32 = interval10.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        long long33 = interval32.getStartMillis();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withMillisRemoved();
        org.joda.time.Period period37 = interval32.toPeriod(periodType36);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test10424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10424");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        int int4 = dateTime3.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        boolean boolean8 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.LocalDate localDate9 = dateTime3.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(6, 0);
        org.joda.time.DateTime dateTime13 = dateTime3.withZoneRetainFields(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime3.getChronology();
        int int15 = dateTime3.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1969 + "'", int15 == 1969);
    }

    @Test
    public void test10425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10425");
        org.joda.time.Days days1 = org.joda.time.Days.days((-485));
        java.lang.String str2 = days1.toString();
        org.joda.time.MutablePeriod mutablePeriod3 = days1.toMutablePeriod();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "P-485D" + "'", str2, "P-485D");
        org.junit.Assert.assertNotNull(mutablePeriod3);
    }

    @Test
    public void test10426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10426");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime2.minusSeconds((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        boolean boolean17 = interval13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime16.withZoneRetainFields(dateTimeZone20);
        int int26 = dateTimeZone20.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime27 = dateTime6.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime.Property property28 = dateTime6.dayOfWeek();
        org.joda.time.DateTime.Property property29 = dateTime6.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        org.joda.time.PeriodType periodType39 = days36.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.Chronology chronology48 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType39, chronology48);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTimeField dateTimeField52 = chronology48.millisOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((-259200000L), (long) '#', chronology48);
        mutableInterval30.setChronology(chronology48);
        org.joda.time.DateTimeField dateTimeField55 = chronology48.era();
        org.joda.time.DateTimeField dateTimeField56 = chronology48.millisOfDay();
        org.joda.time.DateTime dateTime57 = dateTime6.withChronology(chronology48);
        org.joda.time.DateTimeField dateTimeField58 = chronology48.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField59 = chronology48.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test10427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10427");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        boolean boolean10 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusMinutes((int) ' ');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period31);
        int int35 = dateTime2.getWeekyear();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        org.joda.time.PeriodType periodType45 = days42.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.hourOfHalfday();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType45, chronology54);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTimeField dateTimeField58 = chronology54.millisOfDay();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((-259200000L), (long) '#', chronology54);
        mutableInterval36.setChronology(chronology54);
        org.joda.time.DateTime dateTime61 = dateTime2.withChronology(chronology54);
        org.joda.time.DateTimeField dateTimeField62 = chronology54.dayOfMonth();
        long long64 = dateTimeField62.roundCeiling(4665600000L);
        int int66 = dateTimeField62.getMaximumValue((-131058007620000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 4665600000L + "'", long64 == 4665600000L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 31 + "'", int66 == 31);
    }

    @Test
    public void test10428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10428");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.MIN_VALUE;
        boolean boolean3 = days0.isLessThan(days2);
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.Duration duration8 = duration6.toDuration();
        long long9 = duration6.getMillis();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-185542587187200000L) + "'", long9 == (-185542587187200000L));
    }

    @Test
    public void test10429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10429");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.MIN_VALUE;
        boolean boolean3 = days0.isLessThan(days2);
        org.joda.time.Days days4 = days0.negated();
        org.joda.time.Period period5 = days4.toPeriod();
        org.joda.time.Period period7 = period5.plusDays(829);
        org.joda.time.Period period8 = period7.toPeriod();
        org.joda.time.Period period10 = period8.minusMillis(247);
        org.joda.time.Period period12 = period8.plusMillis((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology25);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((-1L), 59L, chronology25);
        org.joda.time.DateTime dateTime29 = mutableInterval28.getEnd();
        org.joda.time.Instant instant30 = dateTime29.toInstant();
        org.joda.time.Instant instant32 = instant30.withMillis(1645513805919L);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((long) 117, 2911679);
        org.joda.time.MutableDateTime mutableDateTime36 = instant35.toMutableDateTime();
        org.joda.time.Duration duration37 = period12.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime36);
        int int38 = period12.getMonths();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test10430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10430");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (short) 0);
        mutablePeriod1.addMillis(34);
        int int4 = mutablePeriod1.getMinutes();
        int int5 = mutablePeriod1.getMonths();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test10431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10431");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        int int9 = dateTime3.getDayOfWeek();
        org.joda.time.Hours hours10 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours11 = hours10.negated();
        org.joda.time.DurationFieldType durationFieldType12 = hours11.getFieldType();
        org.joda.time.Hours hours14 = hours11.multipliedBy((int) 'a');
        org.joda.time.Duration duration15 = hours11.toStandardDuration();
        org.joda.time.Duration duration17 = duration15.withMillis((long) 347);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone21.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(0);
        org.joda.time.DateTime dateTime29 = dateTime25.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime31 = dateTime25.withWeekyear((int) (byte) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.minus(63072000144L);
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(25819387);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType44 = periodType43.withMillisRemoved();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) (-1), periodType44, chronology45);
        org.joda.time.PeriodType periodType47 = mutablePeriod46.getPeriodType();
        org.joda.time.Duration duration49 = new org.joda.time.Duration((long) (byte) 1);
        mutablePeriod46.setPeriod((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration52 = duration49.toDuration();
        org.joda.time.Duration duration53 = duration52.toDuration();
        boolean boolean54 = dateTime37.equals((java.lang.Object) duration52);
        org.joda.time.DateTime.Property property55 = dateTime37.weekOfWeekyear();
        boolean boolean56 = duration17.equals((java.lang.Object) property55);
        org.joda.time.Interval interval57 = property55.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval57);
    }

    @Test
    public void test10432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10432");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        boolean boolean5 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter2.getPrinter();
        java.lang.StringBuffer stringBuffer7 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, periodType10);
        org.joda.time.PeriodType periodType12 = periodType10.withWeeksRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 671, periodType12);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer7, (org.joda.time.ReadablePeriod) mutablePeriod14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test10433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10433");
        org.joda.time.Period period1 = org.joda.time.Period.days(171);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test10434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10434");
        org.joda.time.Period period1 = org.joda.time.Period.millis(2108160);
        org.joda.time.Period period3 = period1.withDays((-1));
        org.joda.time.Period period5 = period1.withMonths(783);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTimeISO();
        org.joda.time.Instant instant15 = dateTime9.toInstant();
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        boolean boolean26 = instant16.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant30 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration28, (-1));
        boolean boolean32 = instant30.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime36.toDateTimeISO();
        org.joda.time.Instant instant42 = dateTime36.toInstant();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant30, (org.joda.time.ReadableInstant) dateTime36, periodType43);
        org.joda.time.PeriodType periodType45 = periodType43.withWeeksRemoved();
        org.joda.time.PeriodType periodType46 = periodType43.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period47 = period5.normalizedStandard(periodType46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
    }

    @Test
    public void test10435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10435");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Instant instant25 = instant9.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant27 = instant25.plus((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime28 = instant25.toMutableDateTimeISO();
        int int29 = mutableDateTime28.getDayOfMonth();
        boolean boolean31 = mutableDateTime28.isBefore(1645514203508L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test10436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10436");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes3 = minutes1.minus(2);
        org.joda.time.Minutes minutes5 = minutes3.minus(1);
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes8 = minutes6.minus(2);
        boolean boolean9 = minutes5.isGreaterThan(minutes6);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes11 = minutes5.minus(minutes10);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes14 = minutes12.minus(2);
        org.joda.time.Minutes minutes16 = minutes14.minus(1);
        int int17 = minutes14.size();
        org.joda.time.Minutes minutes18 = minutes5.minus(minutes14);
        boolean boolean19 = minutes0.isGreaterThan(minutes14);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        boolean boolean33 = dateTime31.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration35 = minutes34.toStandardDuration();
        org.joda.time.Minutes minutes37 = minutes34.minus((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime41.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        boolean boolean51 = dateTime49.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes52 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration53 = minutes52.toStandardDuration();
        org.joda.time.Minutes minutes55 = minutes52.minus((int) (byte) 100);
        boolean boolean56 = minutes37.isLessThan(minutes55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime60.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        boolean boolean70 = dateTime68.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes71 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration72 = minutes71.toStandardDuration();
        org.joda.time.Minutes minutes74 = minutes71.minus((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((-1L), dateTimeZone77);
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.util.Calendar calendar80 = dateTime78.toCalendar(locale79);
        org.joda.time.DateTime dateTime82 = dateTime78.plusMillis((int) '4');
        org.joda.time.DateTime dateTime83 = dateTime78.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime86 = org.joda.time.DateTime.now(dateTimeZone85);
        boolean boolean88 = dateTime86.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes89 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.Duration duration90 = minutes89.toStandardDuration();
        org.joda.time.Minutes minutes92 = minutes89.minus((int) (byte) 100);
        boolean boolean93 = minutes74.isLessThan(minutes92);
        org.joda.time.Minutes minutes94 = minutes55.plus(minutes74);
        org.joda.time.Minutes minutes95 = minutes0.plus(minutes74);
        org.joda.time.PeriodType periodType96 = minutes95.getPeriodType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(minutes74);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(minutes89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(minutes92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(minutes94);
        org.junit.Assert.assertNotNull(minutes95);
        org.junit.Assert.assertNotNull(periodType96);
    }

    @Test
    public void test10437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10437");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime5.plusMonths((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.PeriodType periodType17 = days14.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfHalfday();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType17, chronology26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.millisOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) dateTime11, chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.clockhourOfDay();
        org.joda.time.Period period34 = new org.joda.time.Period(15724841402L, chronology26);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(1645513804839L, chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test10438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10438");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.Days days4 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        int int9 = dateTime8.getHourOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks(59);
        org.joda.time.Duration duration13 = org.joda.time.Duration.millis(10L);
        org.joda.time.DateTime dateTime14 = dateTime8.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean19 = dateTime17.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property20 = dateTime17.millisOfSecond();
        java.lang.String str21 = property20.getName();
        org.joda.time.DateTime dateTime23 = property20.addWrapFieldToCopy((-59));
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = null;
        boolean boolean30 = dateTimeZone27.isLocalDateTimeGap(localDateTime29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime33.toMutableDateTime(dateTimeZone34);
        org.joda.time.LocalDate localDate36 = dateTime33.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        java.util.GregorianCalendar gregorianCalendar40 = dateTime39.toGregorianCalendar();
        int int41 = dateTime39.getHourOfDay();
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Locale locale43 = locale42.stripExtensions();
        java.lang.String str44 = locale43.toLanguageTag();
        java.util.Calendar calendar45 = dateTime39.toCalendar(locale43);
        org.joda.time.DateTime.Property property46 = dateTime39.minuteOfHour();
        boolean boolean47 = property46.isLeap();
        org.joda.time.DateTime dateTime48 = property46.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone51.isLocalDateTimeGap(localDateTime53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime57 = dateTime55.withHourOfDay(0);
        int int58 = dateTime57.getDayOfWeek();
        org.joda.time.DateTime dateTime60 = dateTime57.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Calendar calendar66 = dateTime64.toCalendar(locale65);
        org.joda.time.DateTime dateTime68 = dateTime64.plusMillis((int) '4');
        org.joda.time.Instant instant69 = dateTime68.toInstant();
        org.joda.time.Hours hours70 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) instant69);
        org.joda.time.DateTime dateTime72 = dateTime60.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight73 = dateTime72.toDateMidnight();
        int int74 = property46.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime76 = dateTime72.withYearOfCentury(3);
        org.joda.time.DateTime dateTime78 = dateTime76.plusMonths(0);
        org.joda.time.DateTime dateTime80 = dateTime76.minusYears(4);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime85 = dateTime24.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((-1L), dateTimeZone88);
        org.joda.time.LocalDateTime localDateTime90 = null;
        boolean boolean91 = dateTimeZone88.isLocalDateTimeGap(localDateTime90);
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime(dateTimeZone88);
        org.joda.time.DateTime dateTime94 = dateTime92.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone95 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime96 = dateTime94.toMutableDateTime(dateTimeZone95);
        org.joda.time.DateTime dateTime97 = dateTime85.toDateTime(dateTimeZone95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval98 = interval2.withEnd((org.joda.time.ReadableInstant) dateTime85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "millisOfSecond" + "'", str21, "millisOfSecond");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(gregorianCalendar40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 7 + "'", int41 == 7);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh-CN" + "'", str44, "zh-CN");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645514272349,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=52,MILLISECOND=349,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar66);
        org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(hours70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertNotNull(mutableDateTime96);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test10439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10439");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod2 = days1.toMutablePeriod();
        org.joda.time.Duration duration3 = days1.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        int int5 = mutablePeriod4.size();
        mutablePeriod4.setMonths((-27425128));
        mutablePeriod4.add(0, 25913348, (int) 'x', (int) (byte) 0, 403, 27423260, (int) (short) 10, 333);
        mutablePeriod4.setMillis(722);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test10440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10440");
        java.io.IOException iOException2 = new java.io.IOException("2021-12-14T00:00:00.000Z");
        java.io.IOException iOException3 = new java.io.IOException("German", (java.lang.Throwable) iOException2);
        java.lang.String str4 = iOException2.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.io.IOException: 2021-12-14T00:00:00.000Z" + "'", str4, "java.io.IOException: 2021-12-14T00:00:00.000Z");
    }

    @Test
    public void test10441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10441");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        org.joda.time.PeriodType periodType15 = days12.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.Chronology chronology24 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType15, chronology24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.millisOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime9, chronology24);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        long long38 = dateTimeZone34.convertLocalToUTC(10L, true);
        java.lang.String str39 = dateTimeZone34.getID();
        java.lang.String str41 = dateTimeZone34.getName((long) (short) 10);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone34);
        boolean boolean44 = dateTimeZone34.isStandardOffset(0L);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(436278993L, dateTimeZone34);
        org.joda.time.DateTime dateTime46 = dateTime29.toDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(360);
        org.joda.time.DateTime dateTime50 = dateTime46.withHourOfDay(12);
        org.joda.time.DateTime dateTime52 = dateTime46.plusHours(86313601);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = dateTime52.withCenturyOfEra((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2678399999L + "'", long30 == 2678399999L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test10442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10442");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Days days5 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod6 = days5.toMutablePeriod();
        org.joda.time.Duration duration7 = days5.toStandardDuration();
        long long8 = duration7.getStandardHours();
        mutableInterval4.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        long long10 = duration7.getMillis();
        java.lang.String str11 = duration7.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone16);
        boolean boolean20 = interval18.isAfter(100L);
        long long21 = interval18.getEndMillis();
        org.joda.time.Interval interval22 = interval18.toInterval();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.Instant instant32 = dateTime26.toInstant();
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType44 = periodType43.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime42, periodType43);
        boolean boolean46 = interval18.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Period period47 = duration7.toPeriodTo((org.joda.time.ReadableInstant) dateTime42);
        int int48 = dateTime42.getMillisOfDay();
        org.joda.time.DateTime dateTime50 = dateTime42.withCenturyOfEra((int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, readableInstant51);
        org.joda.time.Period period53 = interval52.toPeriod();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 144L + "'", long8 == 144L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 518400000L + "'", long10 == 518400000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT518400S" + "'", str11, "PT518400S");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 86399999 + "'", int48 == 86399999);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period53);
    }

    @Test
    public void test10443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10443");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Period period5 = interval3.toPeriod();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        java.lang.String str8 = durationFieldType7.toString();
        boolean boolean9 = minutes6.isSupported(durationFieldType7);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "days" + "'", str8, "days");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test10444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10444");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setDays((int) 'a');
        mutablePeriod1.setDays((int) '4');
        org.joda.time.PeriodType periodType8 = mutablePeriod1.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getHourOfDay();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.toLanguageTag();
        java.util.Calendar calendar17 = dateTime11.toCalendar(locale15);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        org.joda.time.Duration duration21 = days19.toStandardDuration();
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        boolean boolean25 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Duration duration29 = duration24.plus((org.joda.time.ReadableDuration) duration28);
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        int int37 = dateTime34.getSecondOfMinute();
        org.joda.time.DateTime.Property property38 = dateTime34.hourOfDay();
        org.joda.time.DurationField durationField39 = property38.getDurationField();
        java.util.Locale locale40 = null;
        java.lang.String str41 = property38.getAsText(locale40);
        org.joda.time.DateTime dateTime43 = property38.addToCopy(6);
        org.joda.time.DateTime dateTime45 = dateTime43.minusSeconds(4);
        org.joda.time.DateTime dateTime47 = dateTime45.plusDays(348);
        org.joda.time.Interval interval48 = duration29.toIntervalFrom((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime50 = dateTime47.plusMonths(0);
        int int51 = dateTime47.getDayOfYear();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-CN" + "'", str16, "zh-CN");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645514272526,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=52,MILLISECOND=526,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "23" + "'", str41, "23");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 349 + "'", int51 == 349);
    }

    @Test
    public void test10445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10445");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.era();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(0L, chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.halfdayOfDay();
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = dateTimeField13.getAsText((long) 829, locale15);
        long long19 = dateTimeField13.remainder((long) 138);
        org.joda.time.Days days23 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod24 = days23.toMutablePeriod();
        org.joda.time.Duration duration25 = days23.toStandardDuration();
        org.joda.time.PeriodType periodType26 = days23.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfHalfday();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType26, chronology35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField39 = chronology35.millisOfDay();
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = dateTimeField39.getAsText(20, locale41);
        java.lang.String str44 = dateTimeField13.getAsText((int) (short) 0, locale41);
        java.util.Locale locale47 = new java.util.Locale("\u4e2d\u6587", "698");
        java.lang.String str48 = locale41.getDisplayScript(locale47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        boolean boolean53 = dateTime51.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property54 = dateTime51.millisOfSecond();
        org.joda.time.DateTime dateTime55 = property54.getDateTime();
        org.joda.time.DateTime dateTime57 = dateTime55.plusSeconds(10);
        org.joda.time.DateTime.Property property58 = dateTime55.yearOfEra();
        java.util.Locale.Category category59 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale60 = java.util.Locale.getDefault(category59);
        java.util.Set<java.lang.Character> charSet61 = locale60.getExtensionKeys();
        int int62 = property58.getMaximumShortTextLength(locale60);
        java.lang.String str63 = locale60.getLanguage();
        java.lang.String str64 = locale47.getDisplayCountry(locale60);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e0a\u5348" + "'", str17, "\u4e0a\u5348");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 138L + "'", long19 == 138L);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "20" + "'", str43, "20");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u4e0a\u5348" + "'", str44, "\u4e0a\u5348");
        org.junit.Assert.assertEquals(locale47.toString(), "\u4e2d\u6587_698");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + category59 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category59.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "zh" + "'", str63, "zh");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "698" + "'", str64, "698");
    }

    @Test
    public void test10446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10446");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        boolean boolean16 = dateTimeZone13.isStandardOffset((long) (byte) 100);
        boolean boolean18 = dateTimeZone13.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone21.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        boolean boolean41 = dateTime39.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration43 = minutes42.toStandardDuration();
        org.joda.time.Duration duration44 = minutes42.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration44);
        int int46 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology47 = chronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.Chronology chronology56 = dateTime51.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.minutes();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        boolean boolean62 = dateTimeZone59.isStandardOffset((long) (byte) 100);
        boolean boolean64 = dateTimeZone59.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime69 = null;
        boolean boolean70 = dateTimeZone67.isLocalDateTimeGap(localDateTime69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime73 = dateTime71.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((-1L), dateTimeZone76);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Calendar calendar79 = dateTime77.toCalendar(locale78);
        org.joda.time.DateTime dateTime81 = dateTime77.plusMillis((int) '4');
        org.joda.time.DateTime dateTime82 = dateTime77.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone84);
        boolean boolean87 = dateTime85.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes88 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Duration duration89 = minutes88.toStandardDuration();
        org.joda.time.Duration duration90 = minutes88.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableDuration) duration90);
        int int92 = dateTimeZone59.getOffset((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Chronology chronology93 = chronology56.withZone(dateTimeZone59);
        org.joda.time.Chronology chronology94 = chronology47.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField95 = chronology47.hourOfHalfday();
        org.joda.time.DateTime dateTime96 = new org.joda.time.DateTime(chronology47);
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod(1645513731014L, (long) 35, chronology47);
        org.joda.time.DurationField durationField98 = chronology47.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar79);
        org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(durationField98);
    }

    @Test
    public void test10447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10447");
        java.io.IOException iOException1 = new java.io.IOException("DATETIMEFIELD[YEAR]");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
    }

    @Test
    public void test10448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10448");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(108);
        org.joda.time.Period period2 = period1.negated();
        org.joda.time.Period period4 = period2.multipliedBy(604);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test10449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10449");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.Instant instant18 = dateTime12.toInstant();
        org.joda.time.Instant instant19 = instant18.toInstant();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.withHourOfDay(0);
        boolean boolean29 = instant19.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant33 = instant19.withDurationAdded((org.joda.time.ReadableDuration) duration31, (-1));
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime dateTime44 = dateTime42.plusMillis((int) '#');
        int int45 = instant33.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Days days46 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod47 = days46.toMutablePeriod();
        org.joda.time.Duration duration48 = days46.toStandardDuration();
        org.joda.time.Days days49 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod50 = days49.toMutablePeriod();
        org.joda.time.Duration duration51 = days49.toStandardDuration();
        boolean boolean52 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Instant instant54 = instant33.withDurationAdded((org.joda.time.ReadableDuration) duration51, 10);
        org.joda.time.DateTime dateTime55 = dateTime8.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Days days56 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod57 = days56.toMutablePeriod();
        org.joda.time.Duration duration58 = days56.toStandardDuration();
        org.joda.time.PeriodType periodType59 = days56.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = dateTime63.toCalendar(locale64);
        org.joda.time.DateTime dateTime67 = dateTime63.plusMillis((int) '4');
        org.joda.time.Chronology chronology68 = dateTime63.getChronology();
        org.joda.time.Period period69 = duration51.toPeriod(periodType59, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.centuryOfEra();
        int int73 = dateTimeField70.getDifference(25977556L, 307881240007L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test10450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10450");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration29 = period28.toStandardDuration();
        org.joda.time.Instant instant30 = instant24.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        boolean boolean41 = dateTime34.equals((java.lang.Object) dateTime40);
        org.joda.time.DateTime dateTime42 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.Duration duration46 = org.joda.time.Duration.millis((-1L));
        java.lang.String str47 = duration46.toString();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        boolean boolean52 = dateTime50.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property53 = dateTime50.millisOfSecond();
        int int54 = property53.getLeapAmount();
        org.joda.time.DateTime dateTime55 = property53.roundHalfEvenCopy();
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.time();
        org.joda.time.Period period57 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) dateTime55, periodType56);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Calendar calendar63 = dateTime61.toCalendar(locale62);
        org.joda.time.DateTime dateTime65 = dateTime61.plusMillis((int) '4');
        org.joda.time.DateTime dateTime66 = dateTime61.toDateTimeISO();
        org.joda.time.DateTime dateTime68 = dateTime66.plusMillis((int) '#');
        java.util.Date date69 = dateTime66.toDate();
        org.joda.time.DateTime.Property property70 = dateTime66.weekyear();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime75 = null;
        boolean boolean76 = dateTimeZone73.isLocalDateTimeGap(localDateTime75);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone73);
        org.joda.time.DateTime dateTime79 = dateTime77.plusHours((int) 'a');
        org.joda.time.DateTime dateTime81 = dateTime77.plusHours(10);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(dateTimeZone83);
        boolean boolean86 = dateTimeZone83.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(dateTimeZone83);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property89 = dateTime87.property(dateTimeFieldType88);
        int int90 = dateTime81.get(dateTimeFieldType88);
        org.joda.time.DurationFieldType durationFieldType91 = dateTimeFieldType88.getRangeDurationType();
        int int92 = dateTime66.get(dateTimeFieldType88);
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType88.getRangeDurationType();
        boolean boolean94 = periodType56.isSupported(durationFieldType93);
        org.joda.time.Period period95 = new org.joda.time.Period((long) 302, (long) (byte) 100, periodType56);
        org.joda.time.MutablePeriod mutablePeriod96 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant30, (org.joda.time.ReadableInstant) dateTime40, periodType56);
        int int97 = mutablePeriod96.size();
        mutablePeriod96.setMillis(72000000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT-0.001S" + "'", str47, "PT-0.001S");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 5 + "'", int90 == 5);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 11 + "'", int92 == 11);
        org.junit.Assert.assertNotNull(durationFieldType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 4 + "'", int97 == 4);
    }

    @Test
    public void test10451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10451");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType9 = periodType8.withMinutesRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.Hours hours12 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(0L, chronology14);
        org.joda.time.Period period17 = period15.plusMillis(100);
        int int18 = period17.getHours();
        org.joda.time.Period period20 = period17.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTimeISO();
        org.joda.time.Instant instant30 = dateTime24.toInstant();
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        boolean boolean41 = instant31.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant45 = instant31.withDurationAdded((org.joda.time.ReadableDuration) duration43, (-1));
        boolean boolean47 = instant45.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTimeISO();
        org.joda.time.Instant instant57 = dateTime51.toInstant();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant45, (org.joda.time.ReadableInstant) dateTime51, periodType58);
        org.joda.time.PeriodType periodType60 = periodType58.withWeeksRemoved();
        org.joda.time.PeriodType periodType61 = periodType60.withYearsRemoved();
        org.joda.time.Period period62 = period17.normalizedStandard(periodType61);
        org.joda.time.Period period63 = new org.joda.time.Period((java.lang.Object) mutablePeriod11, periodType61);
        org.joda.time.format.PeriodFormatter periodFormatter64 = periodFormatter2.withParseType(periodType61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period66 = periodFormatter2.parsePeriod("1969-12-31T23:59:59.999Z/21970-05-31T00:32:01.999Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodFormatter64);
    }

    @Test
    public void test10452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10452");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime dateTime10 = dateTime2.plusHours((int) 'x');
        org.joda.time.Chronology chronology11 = dateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = dateTime2.toLocalDateTime();
        org.joda.time.DateTime dateTime14 = dateTime2.withYear((-457087));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean19 = dateTime17.isAfter((long) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime17.minusSeconds((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        boolean boolean32 = interval28.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.lang.String str38 = dateTimeZone35.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime31.withZoneRetainFields(dateTimeZone35);
        int int41 = dateTimeZone35.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime42 = dateTime21.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property43 = dateTime21.dayOfWeek();
        org.joda.time.DateTime.Property property44 = dateTime21.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.Days days51 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod52 = days51.toMutablePeriod();
        org.joda.time.Duration duration53 = days51.toStandardDuration();
        org.joda.time.PeriodType periodType54 = days51.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Calendar calendar60 = dateTime58.toCalendar(locale59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusMillis((int) '4');
        org.joda.time.Chronology chronology63 = dateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.hourOfHalfday();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType54, chronology63);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(chronology63);
        org.joda.time.DateTimeField dateTimeField67 = chronology63.millisOfDay();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((-259200000L), (long) '#', chronology63);
        mutableInterval45.setChronology(chronology63);
        org.joda.time.DateTimeField dateTimeField70 = chronology63.era();
        org.joda.time.DateTimeField dateTimeField71 = chronology63.millisOfDay();
        org.joda.time.DateTime dateTime72 = dateTime21.withChronology(chronology63);
        org.joda.time.DateTimeField dateTimeField73 = chronology63.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime2.toMutableDateTime(chronology63);
        org.joda.time.DateTimeField dateTimeField75 = chronology63.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514272833,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=52,MILLISECOND=833,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test10453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10453");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.Hours hours11 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours12 = hours11.negated();
        org.joda.time.DurationFieldType durationFieldType13 = hours12.getFieldType();
        org.joda.time.Hours hours15 = hours12.multipliedBy((int) 'a');
        int[] intArray18 = chronology9.get((org.joda.time.ReadablePeriod) hours12, (long) (short) 1, (long) 4);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        long long25 = dateTimeZone21.convertLocalToUTC(10L, true);
        java.lang.String str26 = dateTimeZone21.getID();
        long long28 = dateTimeZone21.previousTransition((long) 23);
        java.util.TimeZone timeZone29 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.Chronology chronology32 = chronology9.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(13693L, dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 23L + "'", long28 == 23L);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test10454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10454");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone11);
        boolean boolean15 = interval13.isAfter(100L);
        long long16 = interval13.getEndMillis();
        org.joda.time.Interval interval17 = interval13.toInterval();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Interval interval19 = interval17.withDurationBeforeEnd(readableDuration18);
        boolean boolean20 = interval6.contains((org.joda.time.ReadableInterval) interval17);
        boolean boolean22 = interval6.isAfter(21600000L);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone29);
        boolean boolean33 = interval31.isAfter(100L);
        long long34 = interval31.getEndMillis();
        org.joda.time.Interval interval35 = interval31.toInterval();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Interval interval37 = interval35.withDurationBeforeEnd(readableDuration36);
        org.joda.time.Period period38 = interval35.toPeriod();
        org.joda.time.Seconds seconds39 = period38.toStandardSeconds();
        org.joda.time.PeriodType periodType40 = seconds39.getPeriodType();
        org.joda.time.PeriodType periodType41 = periodType40.withSecondsRemoved();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 508, 86399L, periodType41);
        org.joda.time.PeriodType periodType43 = periodType41.withMinutesRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withMonthsRemoved();
        org.joda.time.Period period45 = interval6.toPeriod(periodType43);
        org.joda.time.Period period46 = interval6.toPeriod();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
    }

    @Test
    public void test10455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10455");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-24L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        boolean boolean22 = instant12.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant26 = instant12.withDurationAdded((org.joda.time.ReadableDuration) duration24, (-1));
        boolean boolean28 = instant26.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology29 = instant26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekOfWeekyear();
        boolean boolean31 = dateTime1.equals((java.lang.Object) chronology29);
        org.joda.time.DateTime.Property property32 = dateTime1.dayOfYear();
        org.joda.time.DateTime.Property property33 = dateTime1.centuryOfEra();
        org.joda.time.DateTime dateTime35 = property33.addToCopy(108);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test10456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10456");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod2 = days1.toMutablePeriod();
        org.joda.time.Duration duration3 = days1.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        int int5 = mutablePeriod4.getDays();
        mutablePeriod4.setPeriod(32820001L);
        mutablePeriod4.addMinutes(679);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(obj10, chronology11);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        long long18 = duration17.getStandardHours();
        mutableInterval14.setDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime20 = mutableInterval14.getStart();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) mutableInterval14);
        mutablePeriod4.setMonths(2);
        mutablePeriod4.addHours(0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 144L + "'", long18 == 144L);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test10457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10457");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Period period13 = interval10.toPeriod();
        org.joda.time.Interval interval14 = interval10.toInterval();
        org.joda.time.Days days15 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval10);
        org.joda.time.MutableInterval mutableInterval16 = interval10.toMutableInterval();
        org.joda.time.Chronology chronology17 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test10458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10458");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Days days5 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod6 = days5.toMutablePeriod();
        org.joda.time.Duration duration7 = days5.toStandardDuration();
        long long8 = duration7.getStandardHours();
        mutableInterval4.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        long long10 = duration7.getMillis();
        java.lang.String str11 = duration7.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone16);
        boolean boolean20 = interval18.isAfter(100L);
        long long21 = interval18.getEndMillis();
        org.joda.time.Interval interval22 = interval18.toInterval();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.Instant instant32 = dateTime26.toInstant();
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType44 = periodType43.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime42, periodType43);
        boolean boolean46 = interval18.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Period period47 = duration7.toPeriodTo((org.joda.time.ReadableInstant) dateTime42);
        java.lang.String str48 = dateTime42.toString();
        org.joda.time.DateTime.Property property49 = dateTime42.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = property49.getField();
        org.joda.time.DateTime dateTime52 = property49.addToCopy(324);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        int int59 = dateTime56.getSecondOfMinute();
        org.joda.time.DateTime.Property property60 = dateTime56.hourOfDay();
        org.joda.time.DurationField durationField61 = property60.getDurationField();
        java.util.Locale locale62 = null;
        java.lang.String str63 = property60.getAsText(locale62);
        org.joda.time.DateTime dateTime65 = property60.addToCopy(6);
        org.joda.time.DateTime dateTime67 = dateTime65.minusSeconds(4);
        org.joda.time.DateTime.Property property68 = dateTime65.year();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((-1L), dateTimeZone71);
        int int73 = dateTime72.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone75);
        boolean boolean77 = dateTime72.isEqual((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.LocalDate localDate78 = dateTime72.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone79 = dateTime72.getZone();
        org.joda.time.DateTime dateTime80 = dateTime65.toDateTime(dateTimeZone79);
        java.lang.Object obj81 = null;
        boolean boolean82 = dateTimeZone79.equals(obj81);
        org.joda.time.DateTime dateTime83 = dateTime52.withZone(dateTimeZone79);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 144L + "'", long8 == 144L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 518400000L + "'", long10 == 518400000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT518400S" + "'", str11, "PT518400S");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str48, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "23" + "'", str63, "23");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 23 + "'", int73 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test10459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10459");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        boolean boolean22 = instant12.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant26 = instant12.withDurationAdded((org.joda.time.ReadableDuration) duration24, (-1));
        boolean boolean28 = instant26.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology29 = instant26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((-1221955200000L), (long) 'x', chronology29);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((long) 2, (long) 23);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(1L);
        boolean boolean38 = mutableInterval34.equals((java.lang.Object) 1L);
        mutableInterval31.setInterval((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        boolean boolean50 = interval46.isAfter((org.joda.time.ReadableInstant) dateTime49);
        long long51 = interval46.toDurationMillis();
        org.joda.time.Days days52 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval46);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime56.toDateTimeISO();
        org.joda.time.Instant instant62 = dateTime56.toInstant();
        org.joda.time.Instant instant63 = instant62.toInstant();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((-1L), dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime68 = null;
        boolean boolean69 = dateTimeZone66.isLocalDateTimeGap(localDateTime68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime72 = dateTime70.withHourOfDay(0);
        boolean boolean73 = instant63.isEqual((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant77 = instant63.withDurationAdded((org.joda.time.ReadableDuration) duration75, (-1));
        java.util.Date date78 = instant63.toDate();
        boolean boolean79 = interval46.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.MutableDateTime mutableDateTime80 = instant63.toMutableDateTimeISO();
        mutableInterval31.setStart((org.joda.time.ReadableInstant) instant63);
        java.util.Date date82 = instant63.toDate();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 2L + "'", long51 == 2L);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 23:59:59 UTC 1969");
    }

    @Test
    public void test10460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10460");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(292278993, 25907773, 132, 0, 22, (-23), 948, 5);
        mutablePeriod8.addMinutes(0);
    }

    @Test
    public void test10461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10461");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.MIN_VALUE;
        boolean boolean3 = days0.isLessThan(days2);
        org.joda.time.DurationFieldType durationFieldType4 = days2.getFieldType();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1000L, 0L);
        mutablePeriod7.setMinutes((-1));
        org.joda.time.Days days10 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) mutablePeriod7);
        int int11 = days2.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days10);
        org.joda.time.Days days13 = days10.minus(1059269);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(days13);
    }

    @Test
    public void test10462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10462");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMonths(100);
        org.joda.time.Days days8 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod9 = days8.toMutablePeriod();
        org.joda.time.Duration duration10 = days8.toStandardDuration();
        org.joda.time.PeriodType periodType11 = days8.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType11, chronology20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField24 = chronology20.millisOfDay();
        boolean boolean26 = dateTimeField24.isLeap((long) 1439);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone29.isLocalDateTimeGap(localDateTime31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime35.toMutableDateTime(dateTimeZone36);
        org.joda.time.LocalDate localDate38 = dateTime35.toLocalDate();
        int int39 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTime dateTime40 = dateTime5.withFields((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Calendar calendar46 = dateTime44.toCalendar(locale45);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((int) '4');
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        org.joda.time.Period period50 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate38, (org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.Period period52 = period50.multipliedBy(967);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period54 = period50.plusMillis(459);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 86399999 + "'", int39 == 86399999);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    public void test10463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10463");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        boolean boolean10 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusMinutes((int) ' ');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period31);
        int int35 = dateTime2.getWeekyear();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        org.joda.time.PeriodType periodType45 = days42.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.hourOfHalfday();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType45, chronology54);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTimeField dateTimeField58 = chronology54.millisOfDay();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((-259200000L), (long) '#', chronology54);
        mutableInterval36.setChronology(chronology54);
        org.joda.time.DateTime dateTime61 = dateTime2.withChronology(chronology54);
        org.joda.time.DateTime dateTime62 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.Period period65 = org.joda.time.Period.hours((int) (short) 0);
        org.joda.time.PeriodType periodType66 = period65.getPeriodType();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (-1), periodType66, chronology67);
        org.joda.time.Period period70 = period68.plusSeconds((int) 'x');
        org.joda.time.DateTime dateTime71 = dateTime62.plus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTime dateTime73 = dateTime62.plusMonths(52);
        org.joda.time.DateTime dateTime75 = dateTime73.withWeekyear(722);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test10464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10464");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        long long11 = interval6.toDurationMillis();
        org.joda.time.Days days12 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval6);
        long long13 = interval6.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        boolean boolean18 = dateTimeZone15.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, readableDuration20);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone26);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval30 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(0L, chronology32);
        org.joda.time.Period period35 = period33.plusMillis(100);
        int int36 = period35.getHours();
        org.joda.time.Period period38 = period35.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMillis((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime42.toDateTimeISO();
        org.joda.time.Instant instant48 = dateTime42.toInstant();
        org.joda.time.Instant instant49 = instant48.toInstant();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime54 = null;
        boolean boolean55 = dateTimeZone52.isLocalDateTimeGap(localDateTime54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime58 = dateTime56.withHourOfDay(0);
        boolean boolean59 = instant49.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration61 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant63 = instant49.withDurationAdded((org.joda.time.ReadableDuration) duration61, (-1));
        boolean boolean65 = instant63.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-1L), dateTimeZone68);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.util.Calendar calendar71 = dateTime69.toCalendar(locale70);
        org.joda.time.DateTime dateTime73 = dateTime69.plusMillis((int) '4');
        org.joda.time.DateTime dateTime74 = dateTime69.toDateTimeISO();
        org.joda.time.Instant instant75 = dateTime69.toInstant();
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant63, (org.joda.time.ReadableInstant) dateTime69, periodType76);
        org.joda.time.PeriodType periodType78 = periodType76.withWeeksRemoved();
        org.joda.time.PeriodType periodType79 = periodType78.withYearsRemoved();
        org.joda.time.Period period80 = period35.normalizedStandard(periodType79);
        org.joda.time.Interval interval81 = interval28.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period35);
        mutableInterval21.setInterval((org.joda.time.ReadableInterval) interval28);
        boolean boolean83 = interval6.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval21.setDurationBeforeEnd(941L);
        mutableInterval21.setDurationBeforeEnd(600000L);
        org.joda.time.Days days88 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) mutableInterval21);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(days88);
    }

    @Test
    public void test10465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10465");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property12 = dateTime8.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMonths(100);
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        org.joda.time.PeriodType periodType25 = days22.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType25, chronology34);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.millisOfDay();
        boolean boolean40 = dateTimeField38.isLeap((long) 1439);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone43.isLocalDateTimeGap(localDateTime45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime49 = dateTime47.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime49.toMutableDateTime(dateTimeZone50);
        org.joda.time.LocalDate localDate52 = dateTime49.toLocalDate();
        int int53 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.DateTime dateTime54 = dateTime19.withFields((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime.Property property56 = dateTime13.year();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 86399999 + "'", int53 == 86399999);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test10466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10466");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime3.toCalendar(locale9);
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        boolean boolean18 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime19 = dateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime.Property property20 = dateTime19.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime35 = dateTime30.toLocalDateTime();
        boolean boolean36 = dateTimeZone23.isLocalDateTimeGap(localDateTime35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone39.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours((int) 'a');
        org.joda.time.DateTime dateTime47 = dateTime43.plusHours(10);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        boolean boolean52 = dateTimeZone49.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property55 = dateTime53.property(dateTimeFieldType54);
        int int56 = dateTime47.get(dateTimeFieldType54);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType54.getRangeDurationType();
        boolean boolean58 = localDateTime35.isSupported(dateTimeFieldType54);
        boolean boolean59 = dateTime19.isSupported(dateTimeFieldType54);
        java.lang.Object obj62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Interval interval64 = new org.joda.time.Interval(obj62, chronology63);
        org.joda.time.Interval interval65 = interval64.toInterval();
        org.joda.time.MutableInterval mutableInterval66 = interval65.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((-1L), dateTimeZone69);
        org.joda.time.LocalDateTime localDateTime71 = null;
        boolean boolean72 = dateTimeZone69.isLocalDateTimeGap(localDateTime71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone69);
        org.joda.time.DateTime dateTime75 = dateTime73.withHourOfDay(0);
        org.joda.time.DateTime dateTime77 = dateTime73.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime79 = dateTime73.withWeekyear((int) (byte) 0);
        boolean boolean80 = interval65.contains((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Chronology chronology81 = interval65.getChronology();
        org.joda.time.Interval interval82 = new org.joda.time.Interval((-1339199992L), (long) 28, chronology81);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(chronology81);
        org.joda.time.DateTimeField dateTimeField84 = dateTimeFieldType54.getField(chronology81);
        org.joda.time.DateTimeField dateTimeField85 = chronology81.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(mutableInterval66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test10467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10467");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.Instant instant6 = dateTime3.toInstant();
        org.joda.time.Instant instant7 = instant6.toInstant();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 3);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime.Property property20 = dateTime14.weekyear();
        org.joda.time.DateTime.Property property21 = dateTime14.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        java.util.GregorianCalendar gregorianCalendar25 = dateTime24.toGregorianCalendar();
        int int26 = dateTime24.getHourOfDay();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = locale28.toLanguageTag();
        java.util.Calendar calendar30 = dateTime24.toCalendar(locale28);
        org.joda.time.DateTime.Property property31 = dateTime24.minuteOfHour();
        org.joda.time.Days days32 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod33 = days32.toMutablePeriod();
        org.joda.time.Duration duration34 = days32.toStandardDuration();
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        org.joda.time.Duration duration37 = days35.toStandardDuration();
        boolean boolean38 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration41 = duration37.minus((long) 2022);
        java.lang.Object obj42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval(obj42, chronology43);
        long long45 = interval44.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.Instant instant55 = dateTime49.toInstant();
        org.joda.time.Instant instant56 = instant55.toInstant();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime60.toDateTimeISO();
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType67 = periodType66.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant55, (org.joda.time.ReadableInstant) dateTime65, periodType66);
        org.joda.time.Period period69 = interval44.toPeriod(periodType66);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration41, periodType66);
        org.joda.time.Instant instant71 = instant6.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Instant instant74 = instant71.withDurationAdded((long) 457, 841);
        org.joda.time.Instant instant76 = instant71.plus((long) 980);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(gregorianCalendar25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh-CN" + "'", str29, "zh-CN");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645514273426,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=53,MILLISECOND=426,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514273426L + "'", long45 == 1645514273426L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(instant76);
    }

    @Test
    public void test10468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10468");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableInstant1, (org.joda.time.ReadableDuration) duration4);
        mutablePeriod5.setYears(948);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.Days days21 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod22 = days21.toMutablePeriod();
        org.joda.time.Duration duration23 = days21.toStandardDuration();
        org.joda.time.PeriodType periodType24 = days21.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.Chronology chronology33 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType24, chronology33);
        org.joda.time.Period period36 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime16, periodType24);
        org.joda.time.PeriodType periodType37 = periodType24.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 3, (long) 12, periodType24);
        java.lang.String str39 = periodType24.getName();
        org.joda.time.Days days40 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod41 = days40.toMutablePeriod();
        mutablePeriod41.addWeeks((int) (short) -1);
        mutablePeriod41.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        org.joda.time.Days days56 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod57 = days56.toMutablePeriod();
        org.joda.time.Duration duration58 = days56.toStandardDuration();
        org.joda.time.PeriodType periodType59 = days56.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = dateTime63.toCalendar(locale64);
        org.joda.time.DateTime dateTime67 = dateTime63.plusMillis((int) '4');
        org.joda.time.Chronology chronology68 = dateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.hourOfHalfday();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType59, chronology68);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(chronology68);
        mutablePeriod41.setPeriod(1L, chronology68);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology68);
        org.joda.time.DurationField durationField74 = chronology68.minutes();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(1646032232488L, periodType24, chronology68);
        org.joda.time.Period period76 = new org.joda.time.Period((java.lang.Object) mutablePeriod5, chronology68);
        org.joda.time.DateTimeField dateTimeField77 = chronology68.monthOfYear();
        org.joda.time.Period period78 = new org.joda.time.Period((-169200000L), chronology68);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Days" + "'", str39, "Days");
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test10469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10469");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Period period28 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Period period30 = period28.withWeeks((int) (short) -1);
        org.joda.time.Period period32 = period28.withDays(0);
        org.joda.time.Period period34 = period28.withWeeks(86399);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadablePeriod) period34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.Interval interval37 = interval36.toInterval();
        long long38 = interval37.getEndMillis();
        org.joda.time.MutableInterval mutableInterval39 = interval37.toMutableInterval();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52254115200000L + "'", long38 == 52254115200000L);
        org.junit.Assert.assertNotNull(mutableInterval39);
    }

    @Test
    public void test10470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10470");
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) -1, (long) 679);
        org.joda.time.Period period4 = period2.minusMillis((int) (byte) 0);
        org.joda.time.Period period6 = period2.withWeeks((int) '4');
        org.joda.time.Period period8 = period6.minusWeeks(86399999);
        org.joda.time.Period period10 = period8.plusYears(888);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test10471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10471");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.LocalDate localDate13 = dateTime11.toLocalDate();
        boolean boolean14 = dateTime11.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514273577,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=53,MILLISECOND=577,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test10472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10472");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.Duration duration13 = interval11.toDuration();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        boolean boolean18 = dateTimeZone15.isStandardOffset((long) (byte) 100);
        boolean boolean20 = dateTimeZone15.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        boolean boolean43 = dateTime41.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes44 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = minutes44.toStandardDuration();
        org.joda.time.Duration duration46 = minutes44.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration46);
        int int48 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property49 = dateTime29.millisOfSecond();
        org.joda.time.Period period50 = duration13.toPeriodTo((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test10473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10473");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        long long2 = duration1.getMillis();
        org.joda.time.Hours hours3 = duration1.toStandardHours();
        org.joda.time.Hours hours5 = org.joda.time.Hours.hours(59);
        org.joda.time.Hours hours7 = hours5.dividedBy(747);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        int int12 = dateTime10.getHourOfDay();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale14.toLanguageTag();
        java.util.Calendar calendar16 = dateTime10.toCalendar(locale14);
        org.joda.time.DateTime.Property property17 = dateTime10.minuteOfHour();
        boolean boolean18 = property17.isLeap();
        org.joda.time.DateTime dateTime19 = property17.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.withHourOfDay(0);
        int int29 = dateTime28.getDayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime28.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.Instant instant40 = dateTime39.toInstant();
        org.joda.time.Hours hours41 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTime dateTime43 = dateTime31.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight44 = dateTime43.toDateMidnight();
        int int45 = property17.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime47 = dateTime43.withYearOfCentury(3);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMonths(0);
        org.joda.time.DateTime dateTime51 = dateTime47.minusYears(4);
        org.joda.time.DateTime dateTime53 = dateTime47.withYear(948);
        org.joda.time.DateTime dateTime55 = dateTime47.minusSeconds(636);
        org.joda.time.DateTime dateTime56 = dateTime55.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime61 = null;
        boolean boolean62 = dateTimeZone59.isLocalDateTimeGap(localDateTime61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime65 = dateTime63.withHourOfDay(0);
        int int66 = dateTime65.getDayOfWeek();
        org.joda.time.DateTime dateTime68 = dateTime65.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property69 = dateTime65.millisOfSecond();
        org.joda.time.DateTime dateTime70 = property69.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property69.getFieldType();
        int int72 = dateTime55.get(dateTimeFieldType71);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType71.getRangeDurationType();
        boolean boolean74 = hours5.isSupported(durationFieldType73);
        boolean boolean75 = hours3.isGreaterThan(hours5);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh-CN" + "'", str15, "zh-CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645514273635,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=53,MILLISECOND=635,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 636 + "'", int72 == 636);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test10474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10474");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMonths(100);
        org.joda.time.Days days8 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod9 = days8.toMutablePeriod();
        org.joda.time.Duration duration10 = days8.toStandardDuration();
        org.joda.time.PeriodType periodType11 = days8.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType11, chronology20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField24 = chronology20.millisOfDay();
        boolean boolean26 = dateTimeField24.isLeap((long) 1439);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone29.isLocalDateTimeGap(localDateTime31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime35.toMutableDateTime(dateTimeZone36);
        org.joda.time.LocalDate localDate38 = dateTime35.toLocalDate();
        int int39 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTime dateTime40 = dateTime5.withFields((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Calendar calendar46 = dateTime44.toCalendar(locale45);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((int) '4');
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        org.joda.time.Period period50 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate38, (org.joda.time.ReadablePartial) yearMonthDay49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType52 = localDate38.getFieldType(18828);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 18828");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 86399999 + "'", int39 == 86399999);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test10475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10475");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        int int6 = property5.getLeapAmount();
        java.util.Locale locale7 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str8 = property5.getAsText(locale7);
        java.lang.String str9 = locale7.getDisplayName();
        java.util.Set<java.lang.Character> charSet10 = locale7.getExtensionKeys();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.Instant instant14 = dateTime13.toInstant();
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        boolean boolean21 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        org.joda.time.Days days25 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod26 = days25.toMutablePeriod();
        org.joda.time.Duration duration27 = days25.toStandardDuration();
        boolean boolean28 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Days days29 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod30 = days29.toMutablePeriod();
        org.joda.time.Duration duration31 = days29.toStandardDuration();
        boolean boolean32 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration31);
        boolean boolean33 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period44 = period42.minusMinutes((int) ' ');
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadablePeriod) period42);
        int int46 = dateTime13.getWeekyear();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Days days53 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod54 = days53.toMutablePeriod();
        org.joda.time.Duration duration55 = days53.toStandardDuration();
        org.joda.time.PeriodType periodType56 = days53.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.Chronology chronology65 = dateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.hourOfHalfday();
        org.joda.time.Period period67 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType56, chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology65);
        org.joda.time.DateTimeField dateTimeField69 = chronology65.millisOfDay();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((-259200000L), (long) '#', chronology65);
        mutableInterval47.setChronology(chronology65);
        org.joda.time.DateTime dateTime72 = dateTime13.withChronology(chronology65);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((-1L), dateTimeZone75);
        org.joda.time.LocalDateTime localDateTime77 = null;
        boolean boolean78 = dateTimeZone75.isLocalDateTimeGap(localDateTime77);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((-1L), dateTimeZone81);
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.util.Calendar calendar84 = dateTime82.toCalendar(locale83);
        org.joda.time.DateTime dateTime86 = dateTime82.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime87 = dateTime82.toLocalDateTime();
        boolean boolean88 = dateTimeZone75.isLocalDateTimeGap(localDateTime87);
        int[] intArray90 = chronology65.get((org.joda.time.ReadablePartial) localDateTime87, (long) 100);
        org.joda.time.Chronology chronology91 = localDateTime87.getChronology();
        org.joda.time.DateTimeField dateTimeField92 = chronology91.weekyearOfCentury();
        org.joda.time.DurationField durationField93 = chronology91.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((java.lang.Object) charSet10, chronology91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.util.Collections$EmptySet");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "749" + "'", str8, "749");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str9, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
    }

    @Test
    public void test10476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10476");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Period period31 = period29.withWeeks((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant41 = dateTime35.toInstant();
        org.joda.time.Instant instant42 = instant41.toInstant();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime47 = null;
        boolean boolean48 = dateTimeZone45.isLocalDateTimeGap(localDateTime47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime51 = dateTime49.withHourOfDay(0);
        boolean boolean52 = instant42.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant56 = instant42.withDurationAdded((org.joda.time.ReadableDuration) duration54, (-1));
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime60.toDateTimeISO();
        org.joda.time.DateTime dateTime67 = dateTime65.plusMillis((int) '#');
        int int68 = instant56.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration70 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Calendar calendar76 = dateTime74.toCalendar(locale75);
        org.joda.time.DateTime dateTime78 = dateTime74.plusMillis((int) '4');
        org.joda.time.DateTime dateTime79 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime.Property property80 = dateTime74.weekyear();
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime74, periodType81);
        int int83 = dateTime74.getSecondOfDay();
        boolean boolean84 = dateTime65.isBefore((org.joda.time.ReadableInstant) dateTime74);
        int int85 = dateTime74.getSecondOfMinute();
        org.joda.time.Duration duration86 = period31.toDurationFrom((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime74);
        int int88 = dateTime74.getSecondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime93 = dateTime74.withTime(226, 25860, 829, 998);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 226 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 86399 + "'", int83 == 86399);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 59 + "'", int85 == 59);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 86399 + "'", int88 == 86399);
    }

    @Test
    public void test10477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10477");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setHours((int) '#');
        mutablePeriod1.addMillis((int) (byte) 100);
        mutablePeriod1.addYears(0);
        mutablePeriod1.addWeeks((int) (short) 100);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) 1439, 0L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.millis((long) (short) -1);
        long long17 = duration16.getMillis();
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        long long21 = duration20.getStandardHours();
        boolean boolean22 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration24 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.Days days29 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod30 = days29.toMutablePeriod();
        org.joda.time.Duration duration31 = days29.toStandardDuration();
        org.joda.time.Days days32 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod33 = days32.toMutablePeriod();
        org.joda.time.Duration duration34 = days32.toStandardDuration();
        boolean boolean35 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        org.joda.time.Days days39 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod40 = days39.toMutablePeriod();
        org.joda.time.Duration duration41 = days39.toStandardDuration();
        boolean boolean42 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Days days43 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod44 = days43.toMutablePeriod();
        org.joda.time.Duration duration45 = days43.toStandardDuration();
        boolean boolean46 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration45);
        boolean boolean47 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period58 = period56.minusMinutes((int) ' ');
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) period56);
        int int60 = dateTime27.getWeekyear();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.Days days67 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod68 = days67.toMutablePeriod();
        org.joda.time.Duration duration69 = days67.toStandardDuration();
        org.joda.time.PeriodType periodType70 = days67.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Calendar calendar76 = dateTime74.toCalendar(locale75);
        org.joda.time.DateTime dateTime78 = dateTime74.plusMillis((int) '4');
        org.joda.time.Chronology chronology79 = dateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.hourOfHalfday();
        org.joda.time.Period period81 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType70, chronology79);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTimeField dateTimeField83 = chronology79.millisOfDay();
        org.joda.time.Interval interval84 = new org.joda.time.Interval((-259200000L), (long) '#', chronology79);
        mutableInterval61.setChronology(chronology79);
        org.joda.time.DateTime dateTime86 = dateTime27.withChronology(chronology79);
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration14, chronology79);
        org.joda.time.DateTimeField dateTimeField88 = chronology79.minuteOfHour();
        java.lang.String str90 = dateTimeField88.getAsText(1550819709370L);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 144L + "'", long21 == 144L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(days67);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "15" + "'", str90, "15");
    }

    @Test
    public void test10478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10478");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType2 = minutes1.getFieldType();
        org.joda.time.Minutes minutes4 = minutes1.multipliedBy((int) 'a');
        org.joda.time.Minutes minutes5 = minutes0.plus(minutes4);
        org.joda.time.Duration duration6 = minutes0.toStandardDuration();
        org.joda.time.Minutes minutes8 = minutes0.minus(0);
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy(0);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        boolean boolean15 = dateTime13.isAfter((long) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime13.minusSeconds((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        boolean boolean28 = interval24.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.lang.String str34 = dateTimeZone31.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime27.withZoneRetainFields(dateTimeZone31);
        int int37 = dateTimeZone31.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime38 = dateTime17.withZoneRetainFields(dateTimeZone31);
        org.joda.time.DateTime.Property property39 = dateTime17.dayOfWeek();
        org.joda.time.DateTime.Property property40 = dateTime17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Calendar calendar46 = dateTime44.toCalendar(locale45);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime44.plusMonths((int) (byte) 1);
        int int51 = property40.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime50.withCenturyOfEra(23);
        org.joda.time.DateTime dateTime55 = dateTime50.withWeekOfWeekyear(22);
        org.joda.time.DateTime.Property property56 = dateTime50.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int65 = dateTimeZone63.getOffsetFromLocal((long) '4');
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime59.toMutableDateTime(dateTimeZone63);
        java.lang.String str68 = dateTimeZone63.getNameKey((long) 302);
        org.joda.time.DateTime dateTime69 = dateTime50.toDateTime(dateTimeZone63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((java.lang.Object) 0, dateTimeZone63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "UTC" + "'", str68, "UTC");
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test10479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10479");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime5.weekyear();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime5, periodType12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Duration duration19 = days17.toStandardDuration();
        boolean boolean20 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Days days21 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod22 = days21.toMutablePeriod();
        org.joda.time.Duration duration23 = days21.toStandardDuration();
        boolean boolean24 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration25 = duration19.toDuration();
        org.joda.time.Duration duration27 = duration19.withMillis((long) (byte) 0);
        boolean boolean28 = duration1.isEqual((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration29 = duration19.toDuration();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Days days31 = org.joda.time.Days.standardDaysIn(readablePeriod30);
        org.joda.time.PeriodType periodType32 = days31.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod33 = days31.toMutablePeriod();
        mutablePeriod33.addDays((int) (byte) 0);
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        org.joda.time.Duration duration40 = org.joda.time.Duration.millis((long) (short) -1);
        long long41 = duration40.getMillis();
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        long long45 = duration44.getStandardHours();
        boolean boolean46 = duration40.isLongerThan((org.joda.time.ReadableDuration) duration44);
        int int47 = duration38.compareTo((org.joda.time.ReadableDuration) duration40);
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration49 = duration40.toDuration();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMonths(100);
        org.joda.time.YearMonthDay yearMonthDay56 = dateTime55.toYearMonthDay();
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration59 = period58.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = dateTime63.toCalendar(locale64);
        org.joda.time.DateTime dateTime67 = dateTime63.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration69 = duration59.toDuration();
        org.joda.time.Duration duration70 = duration69.toDuration();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone72);
        java.util.GregorianCalendar gregorianCalendar74 = dateTime73.toGregorianCalendar();
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType77 = periodType76.withMinutesRemoved();
        org.joda.time.Period period78 = new org.joda.time.Period((long) (byte) 10, periodType77);
        org.joda.time.Period period79 = duration70.toPeriodTo((org.joda.time.ReadableInstant) dateTime73, periodType77);
        org.joda.time.Period period80 = duration49.toPeriodFrom((org.joda.time.ReadableInstant) dateTime55, periodType77);
        org.joda.time.Duration duration82 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration49, (-2147483648));
        org.joda.time.Duration duration85 = duration19.withDurationAdded((long) 18828, 6956041);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 144L + "'", long45 == 144L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(gregorianCalendar74);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration85);
    }

    @Test
    public void test10480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10480");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) -1);
        org.joda.time.Period period3 = period1.plusMinutes((-1));
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.PeriodType periodType7 = days4.getPeriodType();
        org.joda.time.Period period8 = period1.normalizedStandard(periodType7);
        org.joda.time.PeriodType periodType9 = periodType7.withMinutesRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withYearsRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test10481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10481");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = days0.negated();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = days4.negated();
        boolean boolean8 = days3.isLessThan(days4);
        org.joda.time.Days days10 = days3.multipliedBy(2);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Duration duration15 = duration13.withMillis((long) (short) -1);
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime32 = dateTime27.toLocalDateTime();
        boolean boolean33 = dateTimeZone20.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = dateTime17.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        boolean boolean41 = localDateTime32.equals((java.lang.Object) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.withMillisOfDay(348);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Days days45 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period44);
        boolean boolean46 = days3.isGreaterThan(days45);
        int int47 = days3.getDays();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-6) + "'", int47 == (-6));
    }

    @Test
    public void test10482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10482");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.Instant instant18 = dateTime12.toInstant();
        org.joda.time.Instant instant19 = instant18.toInstant();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.withHourOfDay(0);
        boolean boolean29 = instant19.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant33 = instant19.withDurationAdded((org.joda.time.ReadableDuration) duration31, (-1));
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime dateTime44 = dateTime42.plusMillis((int) '#');
        int int45 = instant33.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Days days46 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod47 = days46.toMutablePeriod();
        org.joda.time.Duration duration48 = days46.toStandardDuration();
        org.joda.time.Days days49 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod50 = days49.toMutablePeriod();
        org.joda.time.Duration duration51 = days49.toStandardDuration();
        boolean boolean52 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Instant instant54 = instant33.withDurationAdded((org.joda.time.ReadableDuration) duration51, 10);
        org.joda.time.DateTime dateTime55 = dateTime8.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Days days56 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod57 = days56.toMutablePeriod();
        org.joda.time.Duration duration58 = days56.toStandardDuration();
        org.joda.time.PeriodType periodType59 = days56.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = dateTime63.toCalendar(locale64);
        org.joda.time.DateTime dateTime67 = dateTime63.plusMillis((int) '4');
        org.joda.time.Chronology chronology68 = dateTime63.getChronology();
        org.joda.time.Period period69 = duration51.toPeriod(periodType59, chronology68);
        org.joda.time.Period period71 = new org.joda.time.Period((long) (byte) -1);
        org.joda.time.Period period73 = period71.plusMinutes((-1));
        org.joda.time.Days days74 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod75 = days74.toMutablePeriod();
        org.joda.time.Duration duration76 = days74.toStandardDuration();
        org.joda.time.PeriodType periodType77 = days74.getPeriodType();
        org.joda.time.Period period78 = period71.normalizedStandard(periodType77);
        int[] intArray80 = chronology68.get((org.joda.time.ReadablePeriod) period71, (long) (-1));
        org.joda.time.DurationField durationField81 = chronology68.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertNotNull(mutablePeriod75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(durationField81);
    }

    @Test
    public void test10483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10483");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(625, (-27425129), 34, 456, 15, 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 456 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10484");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 2, (long) 23);
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        mutablePeriod5.setSeconds((int) (byte) 0);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod5);
        mutableInterval2.setEndMillis((long) 6);
        mutableInterval2.setEndMillis(31886399L);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setStartMillis(1639465939392L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test10485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10485");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology19);
        mutablePeriod1.setPeriod((long) (-1), chronology19);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod1.copy();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.weeks();
        org.joda.time.Days days25 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod26 = days25.toMutablePeriod();
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        mutablePeriod28.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval31 = null;
        mutablePeriod28.add(readableInterval31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.eras();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = mutablePeriod26.isSupported(durationFieldType33);
        boolean boolean36 = periodType24.isSupported(durationFieldType33);
        int int37 = mutablePeriod23.get(durationFieldType33);
        mutablePeriod23.addMillis(53);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.Chronology chronology50 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.era();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(0L, chronology50);
        org.joda.time.DurationField durationField54 = chronology50.eras();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.year();
        mutablePeriod23.setPeriod((long) (short) 10, chronology50);
        int int57 = mutablePeriod23.getWeeks();
        mutablePeriod23.addMillis(69);
        mutablePeriod23.addWeeks((-19045));
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test10486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10486");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean13 = interval9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        long long14 = interval9.toDurationMillis();
        org.joda.time.Duration duration15 = interval9.toDuration();
        org.joda.time.Days days16 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod17 = days16.toMutablePeriod();
        mutablePeriod17.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval20 = null;
        mutablePeriod17.add(readableInterval20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.eras();
        int int23 = mutablePeriod17.get(durationFieldType22);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology35);
        mutablePeriod17.setPeriod((long) (-1), chronology35);
        org.joda.time.Days days39 = org.joda.time.Days.ZERO;
        org.joda.time.Days days40 = days39.negated();
        int[] intArray43 = chronology35.get((org.joda.time.ReadablePeriod) days39, 1L, 1645513717718L);
        org.joda.time.Period period44 = duration15.toPeriod(chronology35);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (short) 100, periodType2, chronology35);
        org.joda.time.DateTimeField dateTimeField46 = chronology35.dayOfWeek();
        java.lang.String str47 = chronology35.toString();
        org.joda.time.Period period48 = new org.joda.time.Period((-1639440603L), chronology35);
        org.joda.time.DateTimeField dateTimeField49 = chronology35.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology35.dayOfYear();
        org.joda.time.DurationField durationField51 = chronology35.years();
        long long52 = durationField51.getUnitMillis();
        long long55 = durationField51.add(567993599999L, 1922L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[19045]");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 31556952000L + "'", long52 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 61220447999999L + "'", long55 == 61220447999999L);
    }

    @Test
    public void test10487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10487");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(30900000, 86313601, 38090, 656, 712, 10740, 296, 2);
    }

    @Test
    public void test10488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10488");
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType5, chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology14.centuries();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.plusMillis((int) '#');
        java.util.Date date31 = dateTime28.toDate();
        org.joda.time.DateTime.Property property32 = dateTime28.weekyear();
        org.joda.time.LocalTime localTime33 = dateTime28.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.Chronology chronology42 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.weekOfWeekyear();
        java.lang.String str44 = dateTimeField43.getName();
        int int46 = dateTimeField43.get((long) (byte) 100);
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        int int48 = dateTimeField43.getMaximumShortTextLength(locale47);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        java.util.GregorianCalendar gregorianCalendar53 = dateTime52.toGregorianCalendar();
        int int54 = dateTime52.getHourOfDay();
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.util.Locale locale56 = locale55.stripExtensions();
        java.lang.String str57 = locale56.toLanguageTag();
        java.util.Calendar calendar58 = dateTime52.toCalendar(locale56);
        java.lang.String str59 = dateTimeField43.getAsShortText(23, locale56);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.LocalTime localTime63 = dateTime62.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((-1L), dateTimeZone66);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Calendar calendar69 = dateTime67.toCalendar(locale68);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((-1L), dateTimeZone72);
        boolean boolean74 = dateTime67.equals((java.lang.Object) dateTime73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean76 = dateTime73.isSupported(dateTimeFieldType75);
        boolean boolean77 = localTime63.isSupported(dateTimeFieldType75);
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10);
        int int80 = period79.getSeconds();
        org.joda.time.Period period82 = period79.minusDays((int) (short) 1);
        int[] intArray83 = period79.getValues();
        int int84 = dateTimeField43.getMaximumValue((org.joda.time.ReadablePartial) localTime63, intArray83);
        chronology14.validate((org.joda.time.ReadablePartial) localTime33, intArray83);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekOfWeekyear" + "'", str44, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(gregorianCalendar53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 7 + "'", int54 == 7);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh-CN" + "'", str57, "zh-CN");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645514274233,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=54,MILLISECOND=233,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "23" + "'", str59, "23");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 53 + "'", int84 == 53);
    }

    @Test
    public void test10489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10489");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.Hours hours33 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime35 = dateTime23.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        int int37 = property9.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime39 = dateTime35.withYearOfCentury(3);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths(0);
        org.joda.time.DateTime dateTime43 = dateTime39.minusYears(4);
        org.joda.time.DateTime.Property property44 = dateTime39.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        java.util.GregorianCalendar gregorianCalendar48 = dateTime47.toGregorianCalendar();
        int int49 = dateTime47.getHourOfDay();
        java.util.Locale locale50 = java.util.Locale.CHINA;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.lang.String str52 = locale51.toLanguageTag();
        java.util.Calendar calendar53 = dateTime47.toCalendar(locale51);
        org.joda.time.DateTime.Property property54 = dateTime47.minuteOfHour();
        boolean boolean55 = property54.isLeap();
        org.joda.time.DateTime dateTime56 = property54.roundCeilingCopy();
        org.joda.time.DurationField durationField57 = property54.getLeapDurationField();
        org.joda.time.DateTime dateTime58 = property54.roundFloorCopy();
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears((-100));
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Calendar calendar67 = dateTime65.toCalendar(locale66);
        org.joda.time.DateTime dateTime69 = dateTime65.plusMillis((int) '4');
        org.joda.time.Chronology chronology70 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.era();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(0L, chronology70);
        boolean boolean74 = dateTime58.isAfter((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime dateTime77 = dateTime58.withField(dateTimeFieldType75, (int) (byte) 100);
        org.joda.time.DateTime.Property property78 = dateTime77.minuteOfDay();
        boolean boolean79 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((-1L), dateTimeZone82);
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.util.Calendar calendar85 = dateTime83.toCalendar(locale84);
        org.joda.time.DateTime dateTime87 = dateTime83.plusMillis((int) '4');
        org.joda.time.DateTime dateTime89 = dateTime83.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay90 = dateTime83.toYearMonthDay();
        org.joda.time.DateTime dateTime92 = dateTime83.minus((long) 0);
        org.joda.time.DateTime dateTime94 = dateTime92.plusMillis(570);
        org.joda.time.DateTime dateTime96 = dateTime92.withMillisOfDay(28);
        boolean boolean97 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.DateTime.Property property98 = dateTime96.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514274307,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=54,MILLISECOND=307,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianCalendar48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 7 + "'", int49 == 7);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "zh-CN" + "'", str52, "zh-CN");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1645514274307,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=54,MILLISECOND=307,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(yearMonthDay90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(property98);
    }

    @Test
    public void test10490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10490");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        java.lang.String str6 = property5.getName();
        org.joda.time.DateTime dateTime8 = property5.addToCopy(600820L);
        int int9 = property5.get();
        org.joda.time.DateTime dateTime10 = property5.getDateTime();
        java.lang.String str11 = property5.getName();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime15.weekyear();
        org.joda.time.Duration duration23 = org.joda.time.Duration.millis((long) (short) -1);
        long long24 = duration23.getMillis();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType26 = periodType25.withMinutesRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration23, periodType25);
        org.joda.time.DateMidnight dateMidnight28 = dateTime15.toDateMidnight();
        int int29 = dateTime15.getYearOfEra();
        org.joda.time.DateTime.Property property30 = dateTime15.dayOfYear();
        org.joda.time.DurationField durationField31 = property30.getLeapDurationField();
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.getDefault(category32);
        java.lang.String str34 = property30.getAsShortText(locale33);
        int int35 = property5.getMaximumTextLength(locale33);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "millisOfSecond" + "'", str6, "millisOfSecond");
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 408 + "'", int9 == 408);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millisOfSecond" + "'", str11, "millisOfSecond");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1969 + "'", int29 == 1969);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNull(durationField31);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "365" + "'", str34, "365");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
    }

    @Test
    public void test10491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10491");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone3.isLocalDateTimeGap(localDateTime5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone3);
        long long9 = dateTimeZone3.previousTransition(518400000L);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1646032391128L, dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 518400000L + "'", long9 == 518400000L);
    }

    @Test
    public void test10492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10492");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTime dateTime6 = property5.getDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.plusSeconds(10);
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes((int) (byte) -1);
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.plusMillis(12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime17.weekyear();
        org.joda.time.Duration duration25 = org.joda.time.Duration.millis((long) (short) -1);
        long long26 = duration25.getMillis();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType28 = periodType27.withMinutesRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration25, periodType27);
        org.joda.time.DateMidnight dateMidnight30 = dateTime17.toDateMidnight();
        int int31 = dateTime17.getYearOfEra();
        int int32 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime17);
        java.util.GregorianCalendar gregorianCalendar33 = dateTime13.toGregorianCalendar();
        boolean boolean34 = dateTime13.isAfterNow();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime13.plus(readableDuration35);
        int int37 = dateTime36.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = dateTime36.withMinuteOfHour(570);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 570 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1969 + "'", int31 == 1969);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(gregorianCalendar33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 53 + "'", int37 == 53);
    }

    @Test
    public void test10493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10493");
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, periodType10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(32820001L, periodType10);
        org.joda.time.PeriodType periodType13 = periodType10.withDaysRemoved();
        org.joda.time.PeriodType periodType14 = periodType10.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((-24685713), 86313601, 503, 748, (-2736), 848, (-57), (int) (byte) 100, periodType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test10494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10494");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setHours((int) '#');
        mutablePeriod1.addMillis((int) (byte) 100);
        mutablePeriod1.addYears(0);
        mutablePeriod1.addWeeks((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableInstant12, (org.joda.time.ReadableDuration) duration15);
        int int17 = mutablePeriod16.getDays();
        mutablePeriod16.setMillis(20);
        mutablePeriod16.setWeeks((int) (short) -1);
        mutablePeriod16.addHours((-3));
        mutablePeriod1.add((org.joda.time.ReadablePeriod) mutablePeriod16);
        mutablePeriod1.setMinutes(800);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
    }

    @Test
    public void test10495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10495");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone22);
        boolean boolean26 = interval24.isAfter(100L);
        long long27 = interval24.getEndMillis();
        boolean boolean28 = interval17.overlaps((org.joda.time.ReadableInterval) interval24);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone33);
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval37 = interval35.toMutableInterval();
        boolean boolean39 = mutableInterval37.isBefore((long) (-100));
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone44);
        boolean boolean48 = interval46.isAfter(100L);
        long long49 = interval46.getEndMillis();
        org.joda.time.Interval interval50 = interval46.toInterval();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Interval interval52 = interval50.withDurationBeforeEnd(readableDuration51);
        org.joda.time.Duration duration53 = interval52.toDuration();
        mutableInterval37.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period55 = mutableInterval37.toPeriod();
        boolean boolean56 = interval24.abuts((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, periodType58);
        org.joda.time.PeriodType periodType60 = periodType58.withWeeksRemoved();
        org.joda.time.Period period61 = interval24.toPeriod(periodType58);
        boolean boolean63 = interval24.isBefore(1645513759836L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514274487,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=54,MILLISECOND=487,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test10496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10496");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.weekyear();
        org.joda.time.DateTime.Property property10 = dateTime3.yearOfCentury();
        boolean boolean11 = property10.isLeap();
        org.joda.time.DateTime dateTime12 = property10.roundCeilingCopy();
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(20);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime.Property property24 = dateTime18.weekyear();
        org.joda.time.Duration duration26 = org.joda.time.Duration.millis((long) (short) -1);
        long long27 = duration26.getMillis();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType29 = periodType28.withMinutesRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration26, periodType28);
        org.joda.time.DateTime.Property property31 = dateTime18.dayOfMonth();
        org.joda.time.Hours hours32 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime18);
        int int33 = dateTime12.getEra();
        org.joda.time.DateTime dateTime35 = dateTime12.plusYears(750);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test10497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10497");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean13 = interval9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        long long14 = interval9.toDurationMillis();
        org.joda.time.Days days15 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTimeISO();
        org.joda.time.Instant instant25 = dateTime19.toInstant();
        org.joda.time.Instant instant26 = instant25.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone29.isLocalDateTimeGap(localDateTime31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        boolean boolean36 = instant26.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant40 = instant26.withDurationAdded((org.joda.time.ReadableDuration) duration38, (-1));
        java.util.Date date41 = instant26.toDate();
        boolean boolean42 = interval9.isAfter((org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTime dateTime43 = interval9.getStart();
        org.joda.time.Interval interval44 = interval9.toInterval();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Calendar calendar50 = dateTime48.toCalendar(locale49);
        org.joda.time.DateTime dateTime52 = dateTime48.plusMillis((int) '4');
        org.joda.time.Chronology chronology53 = dateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.millisOfDay();
        org.joda.time.DurationField durationField56 = chronology53.hours();
        org.joda.time.Interval interval57 = interval44.withChronology(chronology53);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((long) 12, 1965L, chronology53);
        org.joda.time.Period period59 = new org.joda.time.Period((-27644621759968814L), chronology53);
        // The following exception was thrown during execution in test generation
        try {
            long long65 = chronology53.getDateTimeMillis((long) 20, 0, 385, 783, 638);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 385 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(interval57);
    }

    @Test
    public void test10498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10498");
        java.lang.Object obj0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod2 = days1.toMutablePeriod();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        mutablePeriod4.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval7 = null;
        mutablePeriod4.add(readableInterval7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.eras();
        int int10 = mutablePeriod4.get(durationFieldType9);
        boolean boolean11 = mutablePeriod2.isSupported(durationFieldType9);
        mutablePeriod2.addSeconds((int) '#');
        mutablePeriod2.addSeconds((int) (short) 0);
        java.lang.String str16 = mutablePeriod2.toString();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Duration duration19 = days17.toStandardDuration();
        org.joda.time.Days days20 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod21 = days20.toMutablePeriod();
        org.joda.time.Duration duration22 = days20.toStandardDuration();
        boolean boolean23 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration22);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Days days25 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod26 = days25.toMutablePeriod();
        org.joda.time.Duration duration27 = days25.toStandardDuration();
        org.joda.time.Days days28 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod29 = days28.toMutablePeriod();
        org.joda.time.Duration duration30 = days28.toStandardDuration();
        boolean boolean31 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Days days32 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod33 = days32.toMutablePeriod();
        org.joda.time.Duration duration34 = days32.toStandardDuration();
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        org.joda.time.Duration duration37 = days35.toStandardDuration();
        boolean boolean38 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Days days39 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod40 = days39.toMutablePeriod();
        org.joda.time.Duration duration41 = days39.toStandardDuration();
        boolean boolean42 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration41);
        boolean boolean43 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis((int) '4');
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period54 = period52.minusMinutes((int) ' ');
        org.joda.time.Period period55 = period54.toPeriod();
        mutablePeriod2.add((org.joda.time.ReadablePeriod) period55);
        mutablePeriod2.addMillis(7);
        mutablePeriod2.addMonths((-27425128));
        mutablePeriod2.setPeriod(89424000000L);
        mutablePeriod2.clear();
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod2.toMutablePeriod();
        org.joda.time.PeriodType periodType65 = mutablePeriod64.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(obj0, periodType65);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P6DT35S" + "'", str16, "P6DT35S");
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertNotNull(periodType65);
    }

    @Test
    public void test10499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10499");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds1 = seconds0.negated();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone6);
        boolean boolean10 = interval8.isAfter(100L);
        long long11 = interval8.getEndMillis();
        org.joda.time.Interval interval12 = interval8.toInterval();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Interval interval14 = interval12.withDurationBeforeEnd(readableDuration13);
        org.joda.time.Period period15 = interval12.toPeriod();
        org.joda.time.Seconds seconds16 = period15.toStandardSeconds();
        org.joda.time.PeriodType periodType17 = seconds16.getPeriodType();
        org.joda.time.Seconds seconds18 = seconds0.minus(seconds16);
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds21 = seconds19.minus(seconds20);
        org.joda.time.Seconds seconds22 = seconds16.minus(seconds19);
        org.joda.time.Seconds seconds24 = seconds16.minus(9);
        org.joda.time.Seconds seconds26 = seconds24.minus(8640);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(seconds26);
    }

    @Test
    public void test10500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10500");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        boolean boolean26 = dateTime24.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        boolean boolean32 = dateTimeZone29.isStandardOffset((long) (byte) 100);
        boolean boolean34 = dateTimeZone29.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = null;
        boolean boolean40 = dateTimeZone37.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime43 = dateTime41.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime47.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        boolean boolean57 = dateTime55.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration59 = minutes58.toStandardDuration();
        org.joda.time.Duration duration60 = minutes58.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration60);
        int int62 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime63 = dateTime16.withZoneRetainFields(dateTimeZone29);
        boolean boolean64 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant65 = new org.joda.time.Instant((java.lang.Object) dateTime8);
        org.joda.time.DateTime dateTime67 = dateTime8.minusSeconds(881);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTime67);
    }
}

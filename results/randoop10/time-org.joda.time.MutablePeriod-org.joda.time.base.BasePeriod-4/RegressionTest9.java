import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test04501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04501");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.addWeeks((int) (short) -1);
        mutablePeriod1.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        mutablePeriod1.setMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.era();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(0L, chronology25);
        mutablePeriod1.setPeriod((-259200000L), chronology25);
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        int int31 = period30.getDays();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType34 = periodType33.withMillisRemoved();
        org.joda.time.Period period35 = mutableInterval32.toPeriod(periodType33);
        org.joda.time.Period period37 = period35.minusMinutes(10);
        java.lang.String str38 = period35.toString();
        org.joda.time.Period period39 = period30.withFields((org.joda.time.ReadablePeriod) period35);
        int int40 = period35.getYears();
        mutablePeriod1.mergePeriod((org.joda.time.ReadablePeriod) period35);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0M" + "'", str38, "PT0M");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test04502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04502");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.Instant instant34 = dateTime28.toInstant();
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone38.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        boolean boolean45 = instant35.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant49 = instant35.withDurationAdded((org.joda.time.ReadableDuration) duration47, (-1));
        java.util.Date date50 = instant35.toDate();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant53 = instant10.plus(89424000000L);
        org.joda.time.Instant instant56 = instant10.withDurationAdded(1L, 3);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime60.toDateTimeISO();
        org.joda.time.DateTime dateTime67 = dateTime65.plusMillis((int) '#');
        java.util.Date date68 = dateTime65.toDate();
        org.joda.time.DateTime.Property property69 = dateTime65.weekyear();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((-1L), dateTimeZone72);
        org.joda.time.LocalDateTime localDateTime74 = null;
        boolean boolean75 = dateTimeZone72.isLocalDateTimeGap(localDateTime74);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone72);
        org.joda.time.DateTime dateTime78 = dateTime76.plusHours((int) 'a');
        org.joda.time.DateTime dateTime80 = dateTime76.plusHours(10);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        boolean boolean85 = dateTimeZone82.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime(dateTimeZone82);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property88 = dateTime86.property(dateTimeFieldType87);
        int int89 = dateTime80.get(dateTimeFieldType87);
        org.joda.time.DurationFieldType durationFieldType90 = dateTimeFieldType87.getRangeDurationType();
        int int91 = dateTime65.get(dateTimeFieldType87);
        org.joda.time.Days days92 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) instant56, (org.joda.time.ReadableInstant) dateTime65);
        int int93 = days92.getDays();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 5 + "'", int89 == 5);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 11 + "'", int91 == 11);
        org.junit.Assert.assertNotNull(days92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test04503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04503");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Duration duration42 = minutes40.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42);
        int int44 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology45 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.minutes();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        boolean boolean60 = dateTimeZone57.isStandardOffset((long) (byte) 100);
        boolean boolean62 = dateTimeZone57.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone65.isLocalDateTimeGap(localDateTime67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime71 = dateTime69.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-1L), dateTimeZone74);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Calendar calendar77 = dateTime75.toCalendar(locale76);
        org.joda.time.DateTime dateTime79 = dateTime75.plusMillis((int) '4');
        org.joda.time.DateTime dateTime80 = dateTime75.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        boolean boolean85 = dateTime83.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes86 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Duration duration87 = minutes86.toStandardDuration();
        org.joda.time.Duration duration88 = minutes86.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableDuration) duration88);
        int int90 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology91 = chronology54.withZone(dateTimeZone57);
        org.joda.time.Chronology chronology92 = chronology45.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField93 = chronology92.minuteOfHour();
        org.joda.time.DurationField durationField94 = chronology92.weekyears();
        java.lang.String str95 = durationField94.getName();
        long long98 = durationField94.add((-86399L), 32);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(minutes86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "weekyears" + "'", str95, "weekyears");
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1010015913601L + "'", long98 == 1010015913601L);
    }

    @Test
    public void test04504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04504");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusDays((int) (short) 1);
        org.joda.time.Duration duration5 = period4.toStandardDuration();
        org.joda.time.Duration duration7 = org.joda.time.Duration.millis((long) (byte) -1);
        boolean boolean8 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration7);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04505");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMillis((int) '#');
        int int36 = instant24.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Days days37 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod38 = days37.toMutablePeriod();
        org.joda.time.Duration duration39 = days37.toStandardDuration();
        org.joda.time.Days days40 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod41 = days40.toMutablePeriod();
        org.joda.time.Duration duration42 = days40.toStandardDuration();
        boolean boolean43 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Instant instant45 = instant24.withDurationAdded((org.joda.time.ReadableDuration) duration42, 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        boolean boolean56 = interval52.isAfter((org.joda.time.ReadableInstant) dateTime55);
        long long57 = interval52.toDurationMillis();
        org.joda.time.Duration duration58 = interval52.toDuration();
        org.joda.time.Days days61 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod62 = days61.toMutablePeriod();
        org.joda.time.Duration duration63 = days61.toStandardDuration();
        org.joda.time.PeriodType periodType64 = days61.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Calendar calendar70 = dateTime68.toCalendar(locale69);
        org.joda.time.DateTime dateTime72 = dateTime68.plusMillis((int) '4');
        org.joda.time.Chronology chronology73 = dateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.hourOfHalfday();
        org.joda.time.Period period75 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType64, chronology73);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadableDuration) duration58, periodType64);
        org.joda.time.Chronology chronology77 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.year();
        long long82 = chronology77.add(1645513941812L, (long) (-994), 409);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 2L + "'", long57 == 2L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645513535266L + "'", long82 == 1645513535266L);
    }

    @Test
    public void test04506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04506");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMonths(100);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant6, (org.joda.time.ReadableDuration) duration9);
        int int11 = mutablePeriod10.size();
        org.joda.time.DateTime dateTime12 = dateTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime21.plusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) dateTime21, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis((int) 'u');
        boolean boolean29 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = dateTime28.minusYears(324);
        java.lang.Object obj32 = null;
        boolean boolean33 = dateTime28.equals(obj32);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test04507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04507");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Duration duration42 = minutes40.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42);
        int int44 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology45 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.monthOfYear();
        int int48 = dateTimeField46.get(0L);
        long long51 = dateTimeField46.add(0L, 34);
        int int54 = dateTimeField46.getDifference(600000L, (long) 1970);
        long long57 = dateTimeField46.add((long) 348, 100);
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str60 = locale59.getISO3Language();
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = java.util.Locale.UK;
        java.lang.String str63 = locale61.getDisplayName(locale62);
        java.lang.String str64 = locale59.getDisplayName(locale61);
        java.lang.String str65 = dateTimeField46.getAsShortText(1104537599543L, locale59);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-1L), dateTimeZone68);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.util.Calendar calendar71 = dateTime69.toCalendar(locale70);
        org.joda.time.DateTime dateTime73 = dateTime69.plusMillis((int) '4');
        org.joda.time.Instant instant74 = dateTime73.toInstant();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((java.lang.Object) dateTime73);
        org.joda.time.DateTime.Property property76 = dateTime75.era();
        java.util.Locale locale78 = java.util.Locale.forLanguageTag("");
        java.lang.String str79 = property76.getAsShortText(locale78);
        java.util.Set<java.lang.String> strSet80 = locale78.getUnicodeLocaleAttributes();
        java.lang.String str81 = locale59.getDisplayScript(locale78);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 89424000000L + "'", long51 == 89424000000L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 262828800348L + "'", long57 == 262828800348L);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "fra" + "'", str60, "fra");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "German" + "'", str63, "German");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Franz\366sisch (Kanada)" + "'", str64, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "d\351c." + "'", str65, "d\351c.");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "AD" + "'", str79, "AD");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test04508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04508");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone22);
        boolean boolean26 = interval24.isAfter(100L);
        long long27 = interval24.getEndMillis();
        boolean boolean28 = interval17.overlaps((org.joda.time.ReadableInterval) interval24);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone33);
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval37 = interval35.toMutableInterval();
        boolean boolean39 = mutableInterval37.isBefore((long) (-100));
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone44);
        boolean boolean48 = interval46.isAfter(100L);
        long long49 = interval46.getEndMillis();
        org.joda.time.Interval interval50 = interval46.toInterval();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Interval interval52 = interval50.withDurationBeforeEnd(readableDuration51);
        org.joda.time.Duration duration53 = interval52.toDuration();
        mutableInterval37.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period55 = mutableInterval37.toPeriod();
        boolean boolean56 = interval24.abuts((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, periodType58);
        org.joda.time.PeriodType periodType60 = periodType58.withWeeksRemoved();
        org.joda.time.Period period61 = interval24.toPeriod(periodType58);
        java.lang.Object obj62 = null;
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType66 = periodType65.withYearsRemoved();
        org.joda.time.Days days69 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod70 = days69.toMutablePeriod();
        org.joda.time.Duration duration71 = days69.toStandardDuration();
        org.joda.time.PeriodType periodType72 = days69.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((-1L), dateTimeZone75);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Calendar calendar78 = dateTime76.toCalendar(locale77);
        org.joda.time.DateTime dateTime80 = dateTime76.plusMillis((int) '4');
        org.joda.time.Chronology chronology81 = dateTime76.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.hourOfHalfday();
        org.joda.time.Period period83 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType72, chronology81);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(chronology81);
        org.joda.time.DateTimeField dateTimeField85 = chronology81.millisOfDay();
        org.joda.time.Period period86 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType65, chronology81);
        org.joda.time.DateTimeField dateTimeField87 = chronology81.dayOfYear();
        org.joda.time.Period period88 = new org.joda.time.Period(obj62, chronology81);
        boolean boolean89 = interval24.equals((java.lang.Object) chronology81);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514032176,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=52,MILLISECOND=176,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar78);
        org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test04509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04509");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        boolean boolean6 = locale4.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04510");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        int int3 = period2.getSeconds();
        org.joda.time.Period period5 = period2.withMonths((int) (byte) 10);
        org.joda.time.Period period7 = period2.plusMinutes(108);
        int int8 = period2.getDays();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType10 = minutes9.getFieldType();
        org.joda.time.Minutes minutes12 = minutes9.multipliedBy((int) 'a');
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes12);
        org.joda.time.Period period14 = period2.minus((org.joda.time.ReadablePeriod) minutes13);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test04511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04511");
        org.joda.time.Period period1 = new org.joda.time.Period(10L);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Duration duration6 = period1.toDurationTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property16 = dateTime10.weekyear();
        org.joda.time.Duration duration18 = org.joda.time.Duration.millis((long) (short) -1);
        long long19 = duration18.getMillis();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMinutesRemoved();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration18, periodType20);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withWeeksRemoved();
        org.joda.time.PeriodType periodType27 = periodType26.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration18, periodType26);
        int int29 = mutablePeriod28.getWeeks();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test04512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04512");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        long long2 = duration1.getStandardMinutes();
        org.joda.time.Duration duration4 = duration1.withMillis((-82737998L));
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        boolean boolean9 = dateTime7.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property10 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        int int16 = dateTime15.getHourOfDay();
        boolean boolean17 = property10.equals((java.lang.Object) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        java.lang.String str28 = dateTimeField27.getName();
        java.lang.String str30 = dateTimeField27.getAsShortText((long) (short) 10);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = dateTimeField27.getAsText((int) (byte) 100, locale32);
        java.util.Calendar calendar35 = dateTime15.toCalendar(locale32);
        long long36 = dateTime15.getMillis();
        org.joda.time.Period period37 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((long) (short) -1);
        long long40 = duration39.getStandardMinutes();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType44 = periodType43.withYearsRemoved();
        org.joda.time.Days days47 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod48 = days47.toMutablePeriod();
        org.joda.time.Duration duration49 = days47.toStandardDuration();
        org.joda.time.PeriodType periodType50 = days47.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.Chronology chronology59 = dateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.hourOfHalfday();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType50, chronology59);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTimeField dateTimeField63 = chronology59.millisOfDay();
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType43, chronology59);
        org.joda.time.Period period65 = duration39.toPeriod(chronology59);
        org.joda.time.DateTime dateTime66 = dateTime15.toDateTime(chronology59);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateMidnight dateMidnight68 = dateTime66.toDateMidnight();
        org.joda.time.DateTime.Property property69 = dateTime66.millisOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekOfWeekyear" + "'", str28, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test04513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04513");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra(7);
        org.joda.time.DateTime.Property property7 = dateTime6.weekyear();
        org.joda.time.DurationField durationField8 = property7.getLeapDurationField();
        boolean boolean9 = durationField8.isSupported();
        org.joda.time.DurationFieldType durationFieldType10 = durationField8.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(durationFieldType10);
    }

    @Test
    public void test04514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04514");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime3.getZone();
        org.joda.time.TimeOfDay timeOfDay8 = dateTime3.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        int int24 = dateTime21.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime21.getZone();
        org.joda.time.TimeOfDay timeOfDay26 = dateTime21.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period36 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay8, (org.joda.time.ReadablePartial) timeOfDay26);
        int int37 = timeOfDay26.size();
        java.lang.String str38 = timeOfDay26.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        boolean boolean40 = timeOfDay26.isSupported(dateTimeFieldType39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType42 = timeOfDay26.getFieldType(25798227);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25798227");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "T23:59:59.999" + "'", str38, "T23:59:59.999");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test04515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04515");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (-1), periodType2, chronology3);
        org.joda.time.PeriodType periodType5 = mutablePeriod4.getPeriodType();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) (byte) 1);
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Days days9 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod10 = days9.toMutablePeriod();
        mutablePeriod10.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval13 = null;
        mutablePeriod10.add(readableInterval13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.eras();
        int int16 = mutablePeriod10.get(durationFieldType15);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology28);
        mutablePeriod10.setPeriod((long) (-1), chronology28);
        org.joda.time.MutablePeriod mutablePeriod32 = mutablePeriod10.copy();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.weeks();
        org.joda.time.Days days34 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod35 = days34.toMutablePeriod();
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        mutablePeriod37.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval40 = null;
        mutablePeriod37.add(readableInterval40);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.eras();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType42);
        boolean boolean45 = periodType33.isSupported(durationFieldType42);
        int int46 = mutablePeriod32.get(durationFieldType42);
        java.lang.String str47 = durationFieldType42.toString();
        int int48 = mutablePeriod4.get(durationFieldType42);
        int int49 = mutablePeriod4.getHours();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.setDays(941);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "eras" + "'", str47, "eras");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test04516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04516");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime3.hourOfDay();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property7.getAsText(locale9);
        org.joda.time.DateTime dateTime12 = property7.addToCopy(6);
        org.joda.time.DateTime dateTime13 = property7.withMaximumValue();
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime23.plusMillis((int) '#');
        int int26 = dateTime25.getMillisOfSecond();
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTimeISO();
        boolean boolean28 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime13.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23" + "'", str10, "23");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 34 + "'", int26 == 34);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 86399999 + "'", int29 == 86399999);
    }

    @Test
    public void test04517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04517");
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10);
        int int9 = period8.getSeconds();
        org.joda.time.Period period11 = period8.minusHours(100);
        int int12 = period11.getMillis();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.Duration duration19 = period11.toDurationTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean30 = interval26.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime37 = dateTime29.withZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = dateTime16.withZoneRetainFields(dateTimeZone33);
        java.lang.String str41 = dateTimeZone33.getShortName((long) 69);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(333, (-84376), 636, 699, 783, 415, 783, dateTimeZone33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 699 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test04518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04518");
        org.joda.time.Period period1 = org.joda.time.Period.days(26005);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04519");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        boolean boolean22 = instant12.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant26 = instant12.withDurationAdded((org.joda.time.ReadableDuration) duration24, (-1));
        boolean boolean28 = instant26.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime32.toDateTimeISO();
        org.joda.time.Instant instant38 = dateTime32.toInstant();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant26, (org.joda.time.ReadableInstant) dateTime32, periodType39);
        org.joda.time.PeriodType periodType41 = periodType39.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.Chronology chronology50 = dateTime45.getChronology();
        org.joda.time.Period period51 = new org.joda.time.Period((-259200000L), periodType41, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.dayOfYear();
        org.joda.time.Period period55 = new org.joda.time.Period(0L, chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test04520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04520");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime3.getZone();
        org.joda.time.TimeOfDay timeOfDay8 = dateTime3.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime12.weekyear();
        org.joda.time.Duration duration20 = org.joda.time.Duration.millis((long) (short) -1);
        long long21 = duration20.getMillis();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType23 = periodType22.withMinutesRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration20, periodType22);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) period24);
        mutableInterval25.setDurationBeforeEnd((long) 25978321);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(23, (int) '#', (int) (byte) -1, 577);
        mutablePeriod32.addYears(59);
        mutableInterval25.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
    }

    @Test
    public void test04521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04521");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Duration duration42 = minutes40.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42);
        int int44 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology45 = chronology8.withZone(dateTimeZone11);
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10);
        int int48 = period47.getSeconds();
        org.joda.time.Period period50 = period47.minusHours(100);
        int int51 = period50.getDays();
        int[] intArray54 = chronology8.get((org.joda.time.ReadablePeriod) period50, (-1L), (long) 'a');
        org.joda.time.DateTimeField dateTimeField55 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField56 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField57 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField58 = chronology8.yearOfEra();
        org.joda.time.DurationField durationField59 = chronology8.seconds();
        int int62 = durationField59.getValue(1226L, 315569520254208L);
        long long64 = durationField59.getMillis((-349199883L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 98]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-349199883000L) + "'", long64 == (-349199883000L));
    }

    @Test
    public void test04522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04522");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        boolean boolean14 = interval10.isAfter((long) 10);
        org.joda.time.Chronology chronology15 = interval10.getChronology();
        boolean boolean16 = interval10.containsNow();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        boolean boolean29 = interval25.isAfter((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.lang.String str35 = dateTimeZone32.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime28.withZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 12, 1645513731014L, dateTimeZone32);
        org.joda.time.MutableInterval mutableInterval39 = interval38.toMutableInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval39.getStart();
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) -1);
        org.joda.time.Period period44 = period42.plusMinutes((-1));
        org.joda.time.Days days45 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod46 = days45.toMutablePeriod();
        org.joda.time.Duration duration47 = days45.toStandardDuration();
        org.joda.time.PeriodType periodType48 = days45.getPeriodType();
        org.joda.time.Period period49 = period42.normalizedStandard(periodType48);
        org.joda.time.PeriodType periodType50 = periodType48.withMinutesRemoved();
        org.joda.time.PeriodType periodType51 = periodType50.withYearsRemoved();
        org.joda.time.Period period52 = mutableInterval39.toPeriod(periodType50);
        org.joda.time.Period period53 = interval10.toPeriod(periodType50);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
    }

    @Test
    public void test04523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04523");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        long long11 = interval6.toDurationMillis();
        org.joda.time.Days days12 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTimeISO();
        org.joda.time.Instant instant22 = dateTime16.toInstant();
        org.joda.time.Instant instant23 = instant22.toInstant();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone26.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        boolean boolean33 = instant23.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant37 = instant23.withDurationAdded((org.joda.time.ReadableDuration) duration35, (-1));
        java.util.Date date38 = instant23.toDate();
        boolean boolean39 = interval6.isAfter((org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTime dateTime40 = interval6.getStart();
        org.joda.time.Interval interval41 = interval6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.Chronology chronology50 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.millisOfDay();
        org.joda.time.DurationField durationField53 = chronology50.hours();
        org.joda.time.Interval interval54 = interval41.withChronology(chronology50);
        org.joda.time.Interval interval55 = interval41.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
    }

    @Test
    public void test04524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04524");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        int int3 = period2.getSeconds();
        org.joda.time.Period period5 = period2.withMonths((int) (byte) 10);
        int int6 = period5.getMillis();
        org.joda.time.Period period8 = period5.minusHours(138);
        org.joda.time.Period period10 = period5.minusDays(86399999);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays((int) (short) -1);
        int int18 = instant12.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime mutableDateTime19 = instant12.toMutableDateTime();
        org.joda.time.Duration duration20 = period10.toDurationFrom((org.joda.time.ReadableInstant) instant12);
        java.lang.Object obj21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone25.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime37 = dateTime32.toLocalDateTime();
        boolean boolean38 = dateTimeZone25.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTime dateTime39 = dateTime22.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        boolean boolean46 = localDateTime37.equals((java.lang.Object) dateTime43);
        org.joda.time.DateTime dateTime48 = dateTime43.withMillisOfDay(348);
        org.joda.time.Minutes minutes49 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) instant12, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property50 = dateTime48.era();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test04525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04525");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType6.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.Instant instant20 = dateTime14.toInstant();
        org.joda.time.Instant instant21 = instant20.toInstant();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        boolean boolean31 = instant21.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant35 = instant21.withDurationAdded((org.joda.time.ReadableDuration) duration33, (-1));
        boolean boolean37 = instant35.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime41.toDateTimeISO();
        org.joda.time.Instant instant47 = dateTime41.toInstant();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant35, (org.joda.time.ReadableInstant) dateTime41, periodType48);
        org.joda.time.PeriodType periodType50 = periodType48.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.Chronology chronology59 = dateTime54.getChronology();
        org.joda.time.Period period60 = new org.joda.time.Period((-259200000L), periodType50, chronology59);
        boolean boolean61 = dateTimeFieldType9.isSupported(chronology59);
        org.joda.time.DurationField durationField62 = durationFieldType8.getField(chronology59);
        int int64 = durationField62.getValue((-259200000L));
        boolean boolean65 = durationField62.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-72) + "'", int64 == (-72));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test04526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04526");
        java.io.IOException iOException1 = new java.io.IOException("Property[hourOfHalfday]");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException(throwable5);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException(throwable8);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException9);
        iOException7.addSuppressed((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException14 = new java.io.IOException("eras", (java.lang.Throwable) iOException11);
        java.io.IOException iOException15 = new java.io.IOException("+01:20", (java.lang.Throwable) iOException14);
        iOException1.addSuppressed((java.lang.Throwable) iOException15);
    }

    @Test
    public void test04527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04527");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        org.joda.time.PeriodType periodType25 = days22.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType25, chronology34);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.millisOfDay();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-259200000L), (long) '#', chronology34);
        boolean boolean40 = interval17.isBefore((org.joda.time.ReadableInterval) interval39);
        long long41 = interval17.toDurationMillis();
        org.joda.time.DateTime dateTime42 = interval17.getEnd();
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) 138);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Calendar calendar50 = dateTime48.toCalendar(locale49);
        org.joda.time.DateTime dateTime52 = dateTime48.plusMillis((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime48.toDateTimeISO();
        org.joda.time.DateTime.Property property54 = dateTime48.weekyear();
        org.joda.time.Duration duration56 = org.joda.time.Duration.millis((long) (short) -1);
        long long57 = duration56.getMillis();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType59 = periodType58.withMinutesRemoved();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableDuration) duration56, periodType58);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration44, periodType58);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Calendar calendar67 = dateTime65.toCalendar(locale66);
        org.joda.time.DateTime dateTime69 = dateTime65.plusMillis((int) '4');
        org.joda.time.DateTime dateTime70 = dateTime65.toDateTimeISO();
        org.joda.time.DateTime.Property property71 = dateTime65.weekyear();
        int int72 = property71.getLeapAmount();
        org.joda.time.DateTime dateTime74 = property71.setCopy(5);
        org.joda.time.DateTime.Property property75 = dateTime74.era();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime74);
        long long77 = duration44.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514033010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=53,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 518400000L + "'", long41 == 518400000L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 138L + "'", long77 == 138L);
    }

    @Test
    public void test04528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04528");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime3.hourOfDay();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        long long11 = durationField8.getDifferenceAsLong((long) 12, (long) (-27425128));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7L + "'", long11 == 7L);
    }

    @Test
    public void test04529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04529");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        int int4 = dateTime3.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        boolean boolean8 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime15.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime15.toYearMonthDay();
        org.joda.time.DateTime dateTime24 = dateTime15.plusYears(27423259);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period30 = new org.joda.time.Period(0, (int) (short) -1, 0, 2);
        org.joda.time.Period period32 = period30.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime24.plus((org.joda.time.ReadablePeriod) period30);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test04530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04530");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 292278993);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTimeISO();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType23 = periodType22.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant11, (org.joda.time.ReadableInstant) dateTime21, periodType22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant26 = instant11.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Instant instant28 = instant11.plus((long) ' ');
        org.joda.time.Interval interval29 = duration1.toIntervalTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Days days30 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval29);
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test04531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04531");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        mutablePeriod1.setMinutes(86399);
        mutablePeriod1.addMonths((int) '#');
        mutablePeriod1.addHours((int) 'u');
        mutablePeriod1.setValue((int) (short) 1, 1439);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.setValue(841, 315);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 841");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04532");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = period27.minusMinutes((int) ' ');
        org.joda.time.Period period30 = period29.toPeriod();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, chronology33);
        org.joda.time.DurationFieldType[] durationFieldTypeArray35 = mutablePeriod34.getFieldTypes();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray35);
        org.joda.time.PeriodType periodType37 = periodType36.withSecondsRemoved();
        org.joda.time.Period period38 = new org.joda.time.Period(164096150400000L, periodType36);
        org.joda.time.PeriodType periodType39 = periodType36.withDaysRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.Period period41 = period29.normalizedStandard(periodType40);
        org.joda.time.PeriodType periodType42 = periodType40.withMonthsRemoved();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
    }

    @Test
    public void test04533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04533");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime9.withZoneRetainFields(dateTimeZone13);
        int int19 = dateTimeZone13.getStandardOffset((long) ' ');
        java.lang.String str20 = dateTimeZone13.getID();
        java.lang.String str22 = dateTimeZone13.getShortName((long) 35);
        java.lang.String str23 = dateTimeZone13.toString();
        org.joda.time.Days days26 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod27 = days26.toMutablePeriod();
        org.joda.time.Duration duration28 = days26.toStandardDuration();
        org.joda.time.PeriodType periodType29 = days26.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.Chronology chronology38 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        org.joda.time.Period period40 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType29, chronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone44.isLocalDateTimeGap(localDateTime46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone44);
        long long50 = dateTimeZone44.previousTransition(518400000L);
        long long54 = dateTimeZone44.convertLocalToUTC((long) (short) 1, true, 652278993L);
        org.joda.time.Chronology chronology55 = chronology38.withZone(dateTimeZone44);
        long long57 = dateTimeZone13.getMillisKeepLocal(dateTimeZone44, (-781163945481600059L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 518400000L + "'", long50 == 518400000L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-781163945481600059L) + "'", long57 == (-781163945481600059L));
    }

    @Test
    public void test04534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04534");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime4.toDateTimeISO();
        org.joda.time.Instant instant10 = dateTime4.toInstant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        boolean boolean21 = instant11.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant25 = instant11.withDurationAdded((org.joda.time.ReadableDuration) duration23, (-1));
        boolean boolean27 = instant25.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime31.toInstant();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant25, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        org.joda.time.PeriodType periodType40 = periodType38.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.Chronology chronology50 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.era();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(0L, chronology50);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-259200000L), periodType40, chronology50);
        org.joda.time.DurationField durationField55 = chronology50.days();
        org.joda.time.DateTimeField dateTimeField56 = chronology50.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField57 = chronology50.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test04535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04535");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property29 = dateTime26.property(dateTimeFieldType28);
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        long long31 = property29.remainder();
        org.joda.time.DateTime dateTime32 = property29.withMaximumValue();
        org.joda.time.DateTime dateTime34 = dateTime32.plusSeconds(70);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone39);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.Instant instant52 = dateTime46.toInstant();
        org.joda.time.Instant instant53 = instant52.toInstant();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime58 = null;
        boolean boolean59 = dateTimeZone56.isLocalDateTimeGap(localDateTime58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime62 = dateTime60.withHourOfDay(0);
        boolean boolean63 = instant53.isEqual((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Instant instant66 = instant53.withDurationAdded((long) 7, (int) (byte) 10);
        boolean boolean67 = interval41.isBefore((org.joda.time.ReadableInstant) instant66);
        org.joda.time.Chronology chronology68 = instant66.getChronology();
        org.joda.time.DateTime dateTime69 = dateTime34.withChronology(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.DateTime dateTime71 = dateTime34.plus(readablePeriod70);
        org.joda.time.DateTime dateTime72 = dateTime34.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime74 = dateTime72.withYear((-93368854));
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 259200051L + "'", long31 == 259200051L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test04536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04536");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.ITALY;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.PeriodType periodType14 = days11.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType14, chronology23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.millisOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType7, chronology23);
        org.joda.time.DateTimeField dateTimeField29 = chronology23.dayOfYear();
        org.joda.time.format.PeriodPrinter periodPrinter31 = null;
        org.joda.time.format.PeriodParser periodParser32 = null;
        org.joda.time.format.PeriodFormatter periodFormatter33 = new org.joda.time.format.PeriodFormatter(periodPrinter31, periodParser32);
        org.joda.time.PeriodType periodType34 = periodFormatter33.getParseType();
        org.joda.time.PeriodType periodType35 = periodFormatter33.getParseType();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter37 = periodFormatter33.withLocale(locale36);
        java.lang.String str38 = dateTimeField29.getAsText(86399, locale36);
        java.lang.String str39 = locale4.getDisplayVariant(locale36);
        java.util.Locale.Builder builder40 = builder0.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder0.setVariant("747");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 747 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNull(periodType34);
        org.junit.Assert.assertNull(periodType35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "86399" + "'", str38, "86399");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test04537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04537");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        long long11 = interval6.toDurationMillis();
        org.joda.time.DateTime dateTime12 = interval6.getStart();
        org.joda.time.Interval interval13 = interval6.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test04538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04538");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(848, 412, 6, 586, (-850284));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 586 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04539");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 10, periodType3);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology15);
        org.joda.time.Seconds seconds18 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds20 = seconds18.minus(seconds19);
        org.joda.time.Duration duration21 = seconds18.toStandardDuration();
        int[] intArray24 = chronology15.get((org.joda.time.ReadablePeriod) seconds18, 652278993L, (long) (-1));
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, periodType3, chronology15);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone28.isLocalDateTimeGap(localDateTime30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        int int35 = dateTime34.getDayOfWeek();
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        long long39 = duration38.getStandardHours();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType41 = periodType40.withYearsRemoved();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration38, periodType41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period43 = new org.joda.time.Period((java.lang.Object) chronology15, periodType41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-652278]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 144L + "'", long39 == 144L);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
    }

    @Test
    public void test04540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04540");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        org.joda.time.PeriodType periodType15 = days12.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.Chronology chronology24 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType15, chronology24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.millisOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime9, chronology24);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.hourOfDay();
        org.joda.time.DurationField durationField31 = chronology24.months();
        long long35 = chronology24.add(436278993L, 1646032307333L, 417);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 686395908436854L + "'", long35 == 686395908436854L);
    }

    @Test
    public void test04541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04541");
        org.joda.time.Period period8 = new org.joda.time.Period(3600045, (-59), 52, 10, 25720700, (int) (short) 100, 247, 21);
    }

    @Test
    public void test04542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04542");
        org.joda.time.Hours hours1 = org.joda.time.Hours.EIGHT;
        org.joda.time.DurationFieldType durationFieldType2 = hours1.getFieldType();
        org.joda.time.Hours hours4 = hours1.minus((int) (byte) 1);
        org.joda.time.Hours hours5 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours6 = hours5.negated();
        org.joda.time.DurationFieldType durationFieldType7 = hours6.getFieldType();
        org.joda.time.Hours hours9 = hours6.multipliedBy((int) 'a');
        org.joda.time.Hours hours10 = hours4.plus(hours9);
        org.joda.time.PeriodType periodType11 = hours4.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', periodType11);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod12.setYears(412);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test04543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04543");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 2, (long) 23);
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        long long4 = interval3.getEndMillis();
        org.joda.time.Interval interval5 = interval3.toInterval();
        org.joda.time.Interval interval6 = interval5.toInterval();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 23L + "'", long4 == 23L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval6);
    }

    @Test
    public void test04544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04544");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (short) 10, (long) ' ');
        org.joda.time.Duration duration5 = duration2.withDurationAdded((long) 100, (int) (short) 1);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.000Z");
        org.joda.time.Interval interval8 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone13);
        org.joda.time.MutableInterval mutableInterval16 = interval15.toMutableInterval();
        boolean boolean18 = mutableInterval16.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.lang.String[] strArray29 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList30);
        boolean boolean33 = mutableInterval16.equals((java.lang.Object) strList30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone36.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        boolean boolean56 = dateTime54.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = minutes57.toStandardDuration();
        org.joda.time.Duration duration59 = minutes57.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration59);
        boolean boolean61 = mutableInterval16.equals((java.lang.Object) dateTime42);
        org.joda.time.DateTime dateTime62 = dateTime42.toDateTime();
        org.joda.time.DateTime dateTime64 = dateTime42.withMillis(4579200069L);
        org.joda.time.Period period65 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test04545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04545");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        long long7 = interval6.toDurationMillis();
        org.joda.time.ReadableInterval readableInterval8 = null;
        boolean boolean9 = interval6.overlaps(readableInterval8);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(34, 34, (int) (short) 0, 7);
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10);
        int int17 = period16.getSeconds();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period20 = period16.withFieldAdded(durationFieldType18, 86399);
        org.joda.time.DurationFieldType durationFieldType22 = period16.getFieldType(1);
        mutablePeriod14.set(durationFieldType22, (int) 'u');
        org.joda.time.Interval interval25 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod14);
        long long26 = interval25.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone31);
        boolean boolean34 = interval25.abuts((org.joda.time.ReadableInterval) interval33);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-307881240006L) + "'", long26 == (-307881240006L));
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test04546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04546");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.setLanguage("\u65e5\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test04547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04547");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getHourOfDay();
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.lang.String str8 = locale7.toLanguageTag();
        java.util.Calendar calendar9 = dateTime3.toCalendar(locale7);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days23 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod24 = days23.toMutablePeriod();
        org.joda.time.Duration duration25 = days23.toStandardDuration();
        org.joda.time.PeriodType periodType26 = days23.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfHalfday();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType26, chronology35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField39 = chronology35.millisOfDay();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((-259200000L), (long) '#', chronology35);
        boolean boolean41 = interval18.isBefore((org.joda.time.ReadableInterval) interval40);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType43 = periodType42.withYearsRemoved();
        org.joda.time.Duration duration45 = org.joda.time.Duration.millis((long) (short) -1);
        long long46 = duration45.getStandardMinutes();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType50 = periodType49.withYearsRemoved();
        org.joda.time.Days days53 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod54 = days53.toMutablePeriod();
        org.joda.time.Duration duration55 = days53.toStandardDuration();
        org.joda.time.PeriodType periodType56 = days53.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.Chronology chronology65 = dateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.hourOfHalfday();
        org.joda.time.Period period67 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType56, chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology65);
        org.joda.time.DateTimeField dateTimeField69 = chronology65.millisOfDay();
        org.joda.time.Period period70 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType49, chronology65);
        org.joda.time.Period period71 = duration45.toPeriod(chronology65);
        org.joda.time.DateTimeField dateTimeField72 = chronology65.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((java.lang.Object) interval18, periodType43, chronology65);
        org.joda.time.DurationField durationField74 = chronology65.years();
        org.joda.time.DateTimeField dateTimeField75 = chronology65.weekyear();
        org.joda.time.DateTimeField dateTimeField76 = chronology65.dayOfYear();
        org.joda.time.DateTimeField dateTimeField77 = chronology65.weekyear();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) 134, chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh-CN" + "'", str8, "zh-CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645514033879,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=53,MILLISECOND=879,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test04548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04548");
        org.joda.time.Instant instant3 = new org.joda.time.Instant(0L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.Chronology chronology5 = instant3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone8.isLocalDateTimeGap(localDateTime10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime14 = dateTime12.withHourOfDay(0);
        int int15 = dateTime14.getDayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime14.minusWeeks((int) (byte) 10);
        boolean boolean19 = dateTime17.isEqual((long) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime17.withMillis((long) 20);
        org.joda.time.LocalDate localDate22 = dateTime17.toLocalDate();
        java.lang.String str23 = localDate22.toString();
        int[] intArray25 = chronology5.get((org.joda.time.ReadablePartial) localDate22, (long) 421);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(591L, (long) (-8), chronology5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2021-12-14" + "'", str23, "2021-12-14");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
    }

    @Test
    public void test04549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04549");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getLanguage();
        boolean boolean3 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04550");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Instant instant25 = instant9.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant28 = instant9.withDurationAdded((long) 2, 23);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = instant9.toMutableDateTime(chronology29);
        long long31 = mutableDateTime30.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    }

    @Test
    public void test04551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04551");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.addWeeks((int) (short) -1);
        mutablePeriod1.addYears((-100));
        mutablePeriod1.addDays((-19045));
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test04552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04552");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property16 = dateTime10.weekyear();
        int int17 = property16.getLeapAmount();
        org.joda.time.DateTime dateTime19 = property16.setCopy(5);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = locale20.stripExtensions();
        int int22 = property16.getMaximumTextLength(locale20);
        java.lang.String str23 = locale20.getLanguage();
        java.util.Locale locale24 = locale20.stripExtensions();
        java.lang.String str25 = locale20.getLanguage();
        org.joda.time.format.PeriodFormatter periodFormatter26 = periodFormatter6.withLocale(locale20);
        java.io.Writer writer27 = null;
        org.joda.time.Hours hours28 = org.joda.time.Hours.EIGHT;
        org.joda.time.DurationFieldType durationFieldType29 = hours28.getFieldType();
        org.joda.time.Hours hours31 = hours28.minus((int) (byte) 1);
        org.joda.time.PeriodType periodType32 = hours31.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone35.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        int int42 = dateTime41.getDayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime41.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property45 = dateTime41.millisOfSecond();
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10);
        int int48 = period47.getSeconds();
        org.joda.time.Period period50 = period47.minusHours(100);
        org.joda.time.Period period52 = period47.minusSeconds((int) '4');
        org.joda.time.Hours hours53 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTime dateTime55 = dateTime41.withPeriodAdded((org.joda.time.ReadablePeriod) hours53, 577);
        org.joda.time.Hours hours56 = org.joda.time.Hours.THREE;
        int int57 = hours56.getHours();
        org.joda.time.Hours hours59 = hours56.multipliedBy(2);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime64 = null;
        boolean boolean65 = dateTimeZone62.isLocalDateTimeGap(localDateTime64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime68 = dateTime66.withHourOfDay(0);
        int int69 = dateTime68.getDayOfWeek();
        org.joda.time.DateTime dateTime71 = dateTime68.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-1L), dateTimeZone74);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Calendar calendar77 = dateTime75.toCalendar(locale76);
        org.joda.time.DateTime dateTime79 = dateTime75.plusMillis((int) '4');
        org.joda.time.Instant instant80 = dateTime79.toInstant();
        org.joda.time.Hours hours81 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) instant80);
        org.joda.time.Hours hours82 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours84 = hours82.plus((int) (byte) 100);
        org.joda.time.PeriodType periodType85 = hours82.getPeriodType();
        org.joda.time.Hours hours86 = hours81.plus(hours82);
        org.joda.time.Hours hours87 = hours59.plus(hours82);
        boolean boolean88 = hours53.isGreaterThan(hours82);
        org.joda.time.Hours hours90 = hours53.minus(50);
        boolean boolean91 = hours31.isGreaterThan(hours53);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter6.printTo(writer27, (org.joda.time.ReadablePeriod) hours53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr" + "'", str23, "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr" + "'", str25, "fr");
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(hours56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(hours59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(hours81);
        org.junit.Assert.assertNotNull(hours82);
        org.junit.Assert.assertNotNull(hours84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(hours86);
        org.junit.Assert.assertNotNull(hours87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(hours90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test04553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04553");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setHours((int) '#');
        mutablePeriod1.addMillis((int) (byte) 100);
        mutablePeriod1.setHours(2);
        mutablePeriod1.add(773, 34, 0, 2021, 35, 6, (int) 'u', 7);
        mutablePeriod1.addMonths(359);
        java.lang.String str21 = mutablePeriod1.toString();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "P773Y393M2027DT37H6M117.107S" + "'", str21, "P773Y393M2027DT37H6M117.107S");
    }

    @Test
    public void test04554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04554");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Instant instant23 = instant10.withDurationAdded((long) 7, (int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime25 = instant23.toDateTimeISO();
        org.joda.time.Instant instant27 = instant23.minus((long) 999);
        org.joda.time.Instant instant30 = instant23.withDurationAdded(86400000L, 53);
        org.joda.time.Instant instant32 = instant23.minus(348969600000L);
        org.joda.time.DateTime dateTime33 = instant23.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test04555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04555");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("820", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=820");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04556");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.setPeriod((long) 34);
        mutablePeriod1.addSeconds((int) (short) 100);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod1.copy();
        mutablePeriod6.clear();
        mutablePeriod6.addMonths(303);
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test04557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04557");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getDisplayCountry();
        java.util.Locale.Builder builder4 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test04558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04558");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusHours(100);
        org.joda.time.Period period6 = period1.minusSeconds((int) '4');
        org.joda.time.Period period8 = period1.withHours(10);
        org.joda.time.Period period10 = period1.withYears(823);
        int int11 = period1.getHours();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04559");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Duration duration13 = interval12.toDuration();
        org.joda.time.MutableInterval mutableInterval14 = interval12.toMutableInterval();
        org.joda.time.Period period16 = org.joda.time.Period.months((int) 'a');
        org.joda.time.Period period17 = period16.normalizedStandard();
        org.joda.time.PeriodType periodType18 = period17.getPeriodType();
        org.joda.time.Period period19 = mutableInterval14.toPeriod(periodType18);
        org.joda.time.PeriodType periodType20 = periodType18.withMinutesRemoved();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test04560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04560");
        java.util.Locale locale2 = new java.util.Locale("0000-02-22T07:12:23.381Z", "2022-02-22T07:11:00.000Z");
        org.junit.Assert.assertEquals(locale2.toString(), "0000-02-22t07:12:23.381z_2022-02-22T07:11:00.000Z");
    }

    @Test
    public void test04561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04561");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 'a', (long) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone5.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getDayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.Instant instant23 = dateTime22.toInstant();
        org.joda.time.Hours hours24 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTime dateTime26 = dateTime14.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight27 = dateTime26.toDateMidnight();
        org.joda.time.Period period28 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property29 = dateTime26.millisOfSecond();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("PT-2M");
        int int32 = property29.getMaximumTextLength(locale31);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "pt");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
    }

    @Test
    public void test04562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04562");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds2 = seconds0.minus(seconds1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone7);
        boolean boolean11 = interval9.isAfter(100L);
        long long12 = interval9.getEndMillis();
        org.joda.time.Interval interval13 = interval9.toInterval();
        boolean boolean15 = interval9.isBefore((long) (-1));
        boolean boolean16 = interval9.isBeforeNow();
        boolean boolean17 = interval9.isAfterNow();
        org.joda.time.Seconds seconds18 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval9);
        boolean boolean19 = seconds2.isLessThan(seconds18);
        org.joda.time.Seconds seconds21 = seconds18.multipliedBy(172);
        org.joda.time.Seconds seconds22 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds24 = seconds22.minus(seconds23);
        org.joda.time.Duration duration25 = seconds22.toStandardDuration();
        org.joda.time.Seconds seconds27 = seconds22.minus(0);
        org.joda.time.Seconds seconds29 = seconds22.multipliedBy(11);
        boolean boolean30 = seconds18.isLessThan(seconds22);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test04563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04563");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.lang.String str5 = dateTimeZone2.getShortName((long) (short) 100);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        java.lang.String str8 = dateTimeZone2.getName((long) 1969);
        int int10 = dateTimeZone2.getOffset(86400000L);
        int int12 = dateTimeZone2.getStandardOffset(117L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test04564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04564");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.addWeeks((int) (short) -1);
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Days days6 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod7 = days6.toMutablePeriod();
        mutablePeriod7.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval10 = null;
        mutablePeriod7.add(readableInterval10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.eras();
        int int13 = mutablePeriod7.get(durationFieldType12);
        boolean boolean14 = mutablePeriod5.isSupported(durationFieldType12);
        boolean boolean15 = mutablePeriod1.isSupported(durationFieldType12);
        int int16 = mutablePeriod1.getMinutes();
        mutablePeriod1.addWeeks(249);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04565");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        java.lang.String str10 = dateTimeField9.getName();
        java.util.Locale locale13 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)", "hi!");
        int int14 = dateTimeField9.getMaximumTextLength(locale13);
        long long17 = dateTimeField9.addWrapField((-58540492798842L), 618);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMonths(100);
        org.joda.time.Instant instant24 = dateTime21.toInstant();
        int int25 = dateTime21.getMillisOfDay();
        org.joda.time.LocalTime localTime26 = dateTime21.toLocalTime();
        org.joda.time.Instant instant29 = new org.joda.time.Instant(0L);
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTimeISO();
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        int int41 = dateTime40.getDayOfWeek();
        org.joda.time.DateTime dateTime43 = dateTime40.minusWeeks((int) (byte) 10);
        boolean boolean45 = dateTime43.isEqual((long) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime43.withMillis((long) 20);
        org.joda.time.LocalDate localDate48 = dateTime43.toLocalDate();
        java.lang.String str49 = localDate48.toString();
        int[] intArray51 = chronology31.get((org.joda.time.ReadablePartial) localDate48, (long) 421);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = dateTimeField9.addWrapField((org.joda.time.ReadablePartial) localTime26, 2108160, intArray51, 117);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2108160");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekOfWeekyear" + "'", str10, "weekOfWeekyear");
        org.junit.Assert.assertEquals(locale13.toString(), "\u4e2d\u6587\u4e2d\u56fd)_HI!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-58544121598842L) + "'", long17 == (-58544121598842L));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 86399999 + "'", int25 == 86399999);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2021-12-14" + "'", str49, "2021-12-14");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1]");
    }

    @Test
    public void test04566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04566");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone11);
        boolean boolean15 = interval13.isAfter(100L);
        long long16 = interval13.getEndMillis();
        org.joda.time.Interval interval17 = interval13.toInterval();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Interval interval19 = interval17.withDurationBeforeEnd(readableDuration18);
        boolean boolean20 = interval6.contains((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        boolean boolean31 = interval27.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.TimeOfDay timeOfDay32 = dateTime30.toTimeOfDay();
        org.joda.time.Interval interval33 = interval6.withEnd((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', chronology35);
        org.joda.time.Interval interval37 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod36.copy();
        mutablePeriod38.addHours(845);
        java.lang.Object obj41 = mutablePeriod38.clone();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod38.setValue(25940, 25940);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25940");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT845H0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT845H0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT845H0.052S");
    }

    @Test
    public void test04567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04567");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime10 = dateTime5.toLocalDateTime();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = dateTime5.toCalendar(locale11);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Duration duration19 = days17.toStandardDuration();
        boolean boolean20 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime21 = dateTime5.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days24 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod25 = days24.toMutablePeriod();
        org.joda.time.Duration duration26 = days24.toStandardDuration();
        org.joda.time.PeriodType periodType27 = days24.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.Chronology chronology36 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfHalfday();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType27, chronology36);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.millisOfDay();
        org.joda.time.Period period41 = duration16.toPeriod(chronology36);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '4', (long) 11, chronology36);
        org.joda.time.DateTimeField dateTimeField43 = chronology36.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField43.getType();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
    }

    @Test
    public void test04568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04568");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Duration duration42 = minutes40.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42);
        int int44 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology45 = chronology8.withZone(dateTimeZone11);
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10);
        int int48 = period47.getSeconds();
        org.joda.time.Period period50 = period47.minusHours(100);
        int int51 = period50.getDays();
        int[] intArray54 = chronology8.get((org.joda.time.ReadablePeriod) period50, (-1L), (long) 'a');
        org.joda.time.DateTimeField dateTimeField55 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField56 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField57 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField58 = chronology8.yearOfEra();
        org.joda.time.DurationField durationField59 = chronology8.seconds();
        int int62 = durationField59.getValue(1226L, 315569520254208L);
        long long65 = durationField59.subtract((long) 302, (long) 303);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 98]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-302698L) + "'", long65 == (-302698L));
    }

    @Test
    public void test04569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04569");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone7.isLocalDateTimeGap(localDateTime9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(0);
        org.joda.time.DateTime dateTime15 = dateTime11.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime11.withWeekyear((int) (byte) 0);
        boolean boolean18 = interval3.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = interval3.getEnd();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        int int26 = dateTime23.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime23.getZone();
        org.joda.time.TimeOfDay timeOfDay28 = dateTime23.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime32.toDateTimeISO();
        org.joda.time.DateTime.Property property38 = dateTime32.weekyear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.millis((long) (short) -1);
        long long41 = duration40.getMillis();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType43 = periodType42.withMinutesRemoved();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration40, periodType42);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadablePeriod) period44);
        mutableInterval45.setEndMillis(0L);
        long long48 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = mutableInterval45.toMutableInterval();
        boolean boolean50 = interval3.isBefore((org.joda.time.ReadableInterval) mutableInterval45);
        org.joda.time.Days days55 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod56 = days55.toMutablePeriod();
        org.joda.time.Duration duration57 = days55.toStandardDuration();
        org.joda.time.PeriodType periodType58 = days55.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((-1L), dateTimeZone61);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Calendar calendar64 = dateTime62.toCalendar(locale63);
        org.joda.time.DateTime dateTime66 = dateTime62.plusMillis((int) '4');
        org.joda.time.Chronology chronology67 = dateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.hourOfHalfday();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType58, chronology67);
        org.joda.time.DateTimeField dateTimeField70 = chronology67.weekyearOfCentury();
        org.joda.time.DurationField durationField71 = chronology67.millis();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 948, (long) 888, chronology67);
        mutablePeriod72.addDays(135);
        boolean boolean75 = mutableInterval45.equals((java.lang.Object) mutablePeriod72);
        mutablePeriod72.setMinutes((-5));
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(mutablePeriod56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test04570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04570");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        boolean boolean5 = periodFormatter2.isPrinter();
        java.io.Writer writer6 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10);
        int int9 = period8.getSeconds();
        org.joda.time.Period period11 = period8.minusDays((int) (short) 1);
        org.joda.time.Period period12 = period8.toPeriod();
        int[] intArray13 = period8.getValues();
        org.joda.time.Period period15 = period8.plusMinutes((-5));
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer6, (org.joda.time.ReadablePeriod) period8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test04571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04571");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone7.isLocalDateTimeGap(localDateTime9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(0);
        org.joda.time.DateTime dateTime15 = dateTime11.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime11.withWeekyear((int) (byte) 0);
        boolean boolean18 = interval3.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period21 = new org.joda.time.Period((long) 0, 144L);
        int int22 = period21.getWeeks();
        org.joda.time.Period period24 = period21.withMinutes(1);
        org.joda.time.Interval interval25 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.Instant instant35 = dateTime29.toInstant();
        org.joda.time.Instant instant36 = instant35.toInstant();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone39.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = dateTime43.withHourOfDay(0);
        boolean boolean46 = instant36.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant50 = instant36.withDurationAdded((org.joda.time.ReadableDuration) duration48, (-1));
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime54.toDateTimeISO();
        org.joda.time.Instant instant60 = dateTime54.toInstant();
        org.joda.time.Instant instant61 = instant60.toInstant();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime66 = null;
        boolean boolean67 = dateTimeZone64.isLocalDateTimeGap(localDateTime66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime70 = dateTime68.withHourOfDay(0);
        boolean boolean71 = instant61.isEqual((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration73 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant75 = instant61.withDurationAdded((org.joda.time.ReadableDuration) duration73, (-1));
        java.util.Date date76 = instant61.toDate();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant36, (org.joda.time.ReadableInstant) instant61);
        org.joda.time.Instant instant79 = instant36.plus(89424000000L);
        org.joda.time.Instant instant82 = instant36.withDurationAdded(1L, 3);
        boolean boolean83 = interval25.contains((org.joda.time.ReadableInstant) instant82);
        org.joda.time.Interval interval84 = interval25.toInterval();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(interval84);
    }

    @Test
    public void test04572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04572");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.toLanguageTag();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.lang.String str4 = locale1.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-CN" + "'", str2, "zh-CN");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh_CN" + "'", str4, "zh_CN");
    }

    @Test
    public void test04573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04573");
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType5, chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.millisOfDay();
        boolean boolean20 = dateTimeField18.isLeap((long) 1439);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime29.toMutableDateTime(dateTimeZone30);
        org.joda.time.LocalDate localDate32 = dateTime29.toLocalDate();
        int int33 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.Chronology chronology34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((java.lang.Object) int33, chronology34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 86399999 + "'", int33 == 86399999);
    }

    @Test
    public void test04574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04574");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (-1), periodType2, chronology3);
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod4.copy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime11.toDateTimeISO();
        org.joda.time.Instant instant17 = dateTime11.toInstant();
        org.joda.time.Instant instant18 = instant17.toInstant();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime22.toDateTimeISO();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType29 = periodType28.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant17, (org.joda.time.ReadableInstant) dateTime27, periodType28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant32 = instant17.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.Chronology chronology44 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfHalfday();
        org.joda.time.DateTime dateTime46 = dateTime35.withChronology(chronology44);
        int int47 = dateTime35.getYear();
        int int48 = dateTime35.getMillisOfSecond();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Days days50 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod51 = days50.toMutablePeriod();
        org.joda.time.Duration duration52 = days50.toStandardDuration();
        org.joda.time.Days days53 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod54 = days53.toMutablePeriod();
        org.joda.time.Duration duration55 = days53.toStandardDuration();
        boolean boolean56 = duration52.isLongerThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Days days57 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod58 = days57.toMutablePeriod();
        org.joda.time.Duration duration59 = days57.toStandardDuration();
        org.joda.time.Days days60 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod61 = days60.toMutablePeriod();
        org.joda.time.Duration duration62 = days60.toStandardDuration();
        boolean boolean63 = duration59.isLongerThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Days days64 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod65 = days64.toMutablePeriod();
        org.joda.time.Duration duration66 = days64.toStandardDuration();
        boolean boolean67 = duration62.isShorterThan((org.joda.time.ReadableDuration) duration66);
        boolean boolean68 = duration55.isLongerThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((-1L), dateTimeZone71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Calendar calendar74 = dateTime72.toCalendar(locale73);
        org.joda.time.DateTime dateTime76 = dateTime72.plusMillis((int) '4');
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration66, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property79 = dateTime76.property(dateTimeFieldType78);
        org.joda.time.DateTimeField dateTimeField80 = property79.getField();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((-1L), dateTimeZone83);
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.util.Calendar calendar86 = dateTime84.toCalendar(locale85);
        int int87 = dateTime84.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone88 = dateTime84.getZone();
        org.joda.time.TimeOfDay timeOfDay89 = dateTime84.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime92 = org.joda.time.DateTime.now(dateTimeZone91);
        org.joda.time.LocalTime localTime93 = dateTime92.toLocalTime();
        org.joda.time.Days days94 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) timeOfDay89, (org.joda.time.ReadablePartial) localTime93);
        int int95 = dateTimeField80.getMaximumValue((org.joda.time.ReadablePartial) localTime93);
        org.joda.time.DateTime dateTime96 = dateTime35.withFields((org.joda.time.ReadablePartial) localTime93);
        org.joda.time.DateTime.Property property97 = dateTime35.millisOfDay();
        org.joda.time.Chronology chronology98 = dateTime35.getChronology();
        mutablePeriod4.setPeriod(71L, (long) 3, chronology98);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 171 + "'", int48 == 171);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertNotNull(mutablePeriod65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 59 + "'", int87 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(timeOfDay89);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(localTime93);
        org.junit.Assert.assertNotNull(days94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 53 + "'", int95 == 53);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNotNull(chronology98);
    }

    @Test
    public void test04575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04575");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        boolean boolean10 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusMinutes((int) ' ');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period31);
        int int35 = dateTime2.getWeekyear();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        org.joda.time.PeriodType periodType45 = days42.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.hourOfHalfday();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType45, chronology54);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTimeField dateTimeField58 = chronology54.millisOfDay();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((-259200000L), (long) '#', chronology54);
        mutableInterval36.setChronology(chronology54);
        org.joda.time.DateTime dateTime61 = dateTime2.withChronology(chronology54);
        org.joda.time.DateTimeField dateTimeField62 = chronology54.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField63 = chronology54.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField64 = chronology54.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test04576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04576");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds((-850284));
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test04577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04577");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        org.joda.time.Days days5 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod6 = days5.toMutablePeriod();
        org.joda.time.Duration duration7 = days5.toStandardDuration();
        org.joda.time.PeriodType periodType8 = days5.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType8, chronology17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.millisOfDay();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((-259200000L), (long) '#', chronology17);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.weekOfWeekyear();
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = dateTimeField23.getAsText((-100), locale25);
        java.lang.String str27 = locale0.getDisplayVariant(locale25);
        java.lang.String str28 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-100" + "'", str26, "-100");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test04578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04578");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(8, 544, (int) 'u', 508);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTimeISO();
        org.joda.time.Instant instant15 = dateTime9.toInstant();
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        boolean boolean26 = instant16.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant30 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration28, (-1));
        boolean boolean32 = instant30.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime36.toDateTimeISO();
        org.joda.time.Instant instant42 = dateTime36.toInstant();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant30, (org.joda.time.ReadableInstant) dateTime36, periodType43);
        org.joda.time.PeriodType periodType45 = periodType43.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.Period period55 = new org.joda.time.Period((-259200000L), periodType45, chronology54);
        java.lang.String str56 = periodType45.getName();
        org.joda.time.PeriodType periodType57 = periodType45.withDaysRemoved();
        org.joda.time.DurationFieldType durationFieldType59 = periodType45.getFieldType((int) (byte) 0);
        java.lang.String str60 = durationFieldType59.getName();
        mutablePeriod4.set(durationFieldType59, 26005);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Minutes" + "'", str56, "Minutes");
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "minutes" + "'", str60, "minutes");
    }

    @Test
    public void test04579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04579");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(31L);
    }

    @Test
    public void test04580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04580");
        org.joda.time.Period period4 = new org.joda.time.Period(25951, 0, 671, 192);
    }

    @Test
    public void test04581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04581");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone16);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone24);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval19.gap((org.joda.time.ReadableInterval) interval26);
        long long29 = interval26.toDurationMillis();
        org.joda.time.Interval interval30 = interval11.gap((org.joda.time.ReadableInterval) interval26);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        mutableInterval31.setDurationAfterStart(23L);
        org.joda.time.Period period34 = mutableInterval31.toPeriod();
        mutableInterval31.setStartMillis((long) (-86399));
        boolean boolean37 = interval26.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2L + "'", long29 == 2L);
        org.junit.Assert.assertNull(interval30);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test04582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04582");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime3.toCalendar(locale9);
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        boolean boolean18 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime19 = dateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.withHourOfDay(0);
        int int29 = dateTime28.getDayOfWeek();
        org.joda.time.Days days30 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod31 = days30.toMutablePeriod();
        org.joda.time.Duration duration32 = days30.toStandardDuration();
        long long33 = duration32.getStandardHours();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration32, periodType35);
        org.joda.time.DateTime dateTime38 = dateTime28.withWeekyear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone41.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime47.toMutableDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = dateTime28.withZoneRetainFields(dateTimeZone48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime53 = dateTime19.minusYears(1439);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime62 = dateTime57.toLocalDateTime();
        java.util.Locale locale63 = java.util.Locale.CHINA;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.util.Calendar calendar65 = dateTime57.toCalendar(locale63);
        org.joda.time.Days days66 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod67 = days66.toMutablePeriod();
        org.joda.time.Duration duration68 = days66.toStandardDuration();
        org.joda.time.Days days69 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod70 = days69.toMutablePeriod();
        org.joda.time.Duration duration71 = days69.toStandardDuration();
        boolean boolean72 = duration68.isLongerThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTime dateTime73 = dateTime57.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.DateTime.Property property74 = dateTime57.secondOfMinute();
        int int75 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime76 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime77 = dateTime53.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 144L + "'", long33 == 144L);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test04583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04583");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime6.plusMonths((int) (byte) 1);
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        org.joda.time.PeriodType periodType18 = days15.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType18, chronology27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.millisOfDay();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime12, chronology27);
        org.joda.time.Period period33 = new org.joda.time.Period(0L, (long) (byte) 100, chronology27);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField35 = chronology27.yearOfEra();
        org.joda.time.Period period36 = new org.joda.time.Period((long) (-6), chronology27);
        org.joda.time.Period period38 = period36.withWeeks((int) (byte) -1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test04584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04584");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.Instant instant34 = dateTime28.toInstant();
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone38.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        boolean boolean45 = instant35.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant49 = instant35.withDurationAdded((org.joda.time.ReadableDuration) duration47, (-1));
        java.util.Date date50 = instant35.toDate();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadableInstant) instant35);
        int int53 = period51.getValue((int) (short) 0);
        org.joda.time.Period period54 = period51.toPeriod();
        org.joda.time.Period period56 = period51.withDays(910);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test04585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04585");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(128);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04586");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime3.getZone();
        org.joda.time.TimeOfDay timeOfDay8 = dateTime3.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.LocalTime localTime12 = dateTime11.toLocalTime();
        org.joda.time.Days days13 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) timeOfDay8, (org.joda.time.ReadablePartial) localTime12);
        org.joda.time.Days days14 = org.joda.time.Days.THREE;
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        org.joda.time.Days days18 = days15.negated();
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        org.joda.time.Duration duration21 = days19.toStandardDuration();
        org.joda.time.Days days22 = days15.plus(days19);
        boolean boolean23 = days14.isGreaterThan(days19);
        org.joda.time.Days days25 = days14.multipliedBy((-3));
        boolean boolean26 = days13.isLessThan(days14);
        org.joda.time.PeriodType periodType27 = days13.getPeriodType();
        org.joda.time.Days days29 = days13.plus((-84376));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(days29);
    }

    @Test
    public void test04587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04587");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Duration duration13 = interval12.toDuration();
        org.joda.time.MutableInterval mutableInterval14 = interval12.toMutableInterval();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, periodType16);
        org.joda.time.PeriodType periodType18 = periodType16.withMillisRemoved();
        org.joda.time.Period period19 = interval12.toPeriod(periodType18);
        org.joda.time.Period period20 = interval12.toPeriod();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test04588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04588");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, chronology3);
        org.joda.time.DurationFieldType[] durationFieldTypeArray5 = mutablePeriod4.getFieldTypes();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.forFields(durationFieldTypeArray5);
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.PeriodType periodType8 = periodType6.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(291L, (long) 20, periodType8);
        org.junit.Assert.assertNotNull(durationFieldTypeArray5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test04589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04589");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = days4.negated();
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) days7);
        java.util.Date date9 = dateTime8.toDate();
        int int10 = dateTime8.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 28 07:13:55 UTC 2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
    }

    @Test
    public void test04590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04590");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        int int11 = property9.getMaximumValue();
        int int12 = property9.getMaximumValue();
        org.joda.time.DateTime dateTime13 = property9.roundCeilingCopy();
        org.joda.time.DurationField durationField14 = property9.getDurationField();
        org.joda.time.DateTime dateTime16 = property9.addWrapFieldToCopy(845);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514035825,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=55,MILLISECOND=825,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test04591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04591");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property29 = dateTime26.property(dateTimeFieldType28);
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        int int37 = dateTime34.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime34.getZone();
        org.joda.time.TimeOfDay timeOfDay39 = dateTime34.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.LocalTime localTime43 = dateTime42.toLocalTime();
        org.joda.time.Days days44 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) timeOfDay39, (org.joda.time.ReadablePartial) localTime43);
        int int45 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localTime43);
        org.joda.time.DateTimeField dateTimeField47 = localTime43.getField(0);
        boolean boolean48 = dateTimeField47.isSupported();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 53 + "'", int45 == 53);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test04592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04592");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology27 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        boolean boolean33 = dateTime31.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property34 = dateTime31.millisOfSecond();
        org.joda.time.DateTime dateTime35 = property34.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        int int40 = dateTime39.getHourOfDay();
        boolean boolean41 = property34.equals((java.lang.Object) dateTime39);
        java.util.Locale locale44 = new java.util.Locale("1969-12-31T23:59:59.999Z/2022-02-22T07:08:57.290Z", "1970");
        int int45 = property34.getMaximumTextLength(locale44);
        int int46 = dateTimeField28.getMaximumTextLength(locale44);
        java.lang.String str47 = locale44.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = locale44.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for 1969-12-31t23:59:59.999z/2022-02-22t07:08:57.290z");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 23 + "'", int40 == 23);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals(locale44.toString(), "1969-12-31t23:59:59.999z/2022-02-22t07:08:57.290z_1970");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970" + "'", str47, "1970");
    }

    @Test
    public void test04593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04593");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        boolean boolean9 = dateTime7.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property10 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds(10);
        org.joda.time.DateTime.Property property14 = dateTime11.yearOfEra();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        int int18 = property14.getMaximumShortTextLength(locale16);
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter2.withLocale(locale16);
        org.joda.time.Days days20 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod21 = days20.toMutablePeriod();
        org.joda.time.Duration duration22 = days20.toStandardDuration();
        org.joda.time.Days days23 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod24 = days23.toMutablePeriod();
        org.joda.time.Duration duration25 = days23.toStandardDuration();
        boolean boolean26 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        org.joda.time.Duration duration29 = days27.toStandardDuration();
        org.joda.time.Days days30 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod31 = days30.toMutablePeriod();
        org.joda.time.Duration duration32 = days30.toStandardDuration();
        boolean boolean33 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Days days34 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod35 = days34.toMutablePeriod();
        org.joda.time.Duration duration36 = days34.toStandardDuration();
        boolean boolean37 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration36);
        boolean boolean38 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMillis((int) '4');
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period49 = period47.minusMinutes((int) ' ');
        org.joda.time.Period period50 = period49.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray51 = period50.getFieldTypes();
        int int53 = period50.getValue((int) (short) 1);
        org.joda.time.Period period55 = period50.plusMillis((-59));
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Days days57 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod58 = days57.toMutablePeriod();
        org.joda.time.Duration duration59 = days57.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(readableInstant56, (org.joda.time.ReadableDuration) duration59);
        int int61 = mutablePeriod60.getDays();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((-1L), dateTimeZone66);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        boolean boolean72 = interval68.isAfter((org.joda.time.ReadableInstant) dateTime71);
        long long73 = interval68.toDurationMillis();
        org.joda.time.Duration duration74 = interval68.toDuration();
        mutablePeriod60.setPeriod((org.joda.time.ReadableInterval) interval68);
        org.joda.time.PeriodType periodType76 = mutablePeriod60.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType78 = periodType76.getFieldType(0);
        org.joda.time.Period period80 = period55.withFieldAdded(durationFieldType78, 99);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = periodFormatter2.print((org.joda.time.ReadablePeriod) period80);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 2L + "'", long73 == 2L);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test04594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04594");
        org.joda.time.Period period1 = org.joda.time.Period.millis(1922);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04595");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        org.joda.time.DateTime dateTime10 = dateTime6.minusHours((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTimeISO();
        org.joda.time.Instant instant29 = dateTime23.toInstant();
        org.joda.time.Instant instant30 = instant29.toInstant();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone33.isLocalDateTimeGap(localDateTime35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = dateTime37.withHourOfDay(0);
        boolean boolean40 = instant30.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant44 = instant30.withDurationAdded((org.joda.time.ReadableDuration) duration42, (-1));
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Calendar calendar50 = dateTime48.toCalendar(locale49);
        org.joda.time.DateTime dateTime52 = dateTime48.plusMillis((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime48.toDateTimeISO();
        org.joda.time.DateTime dateTime55 = dateTime53.plusMillis((int) '#');
        int int56 = instant44.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Days days57 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod58 = days57.toMutablePeriod();
        org.joda.time.Duration duration59 = days57.toStandardDuration();
        org.joda.time.Days days60 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod61 = days60.toMutablePeriod();
        org.joda.time.Duration duration62 = days60.toStandardDuration();
        boolean boolean63 = duration59.isLongerThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Instant instant65 = instant44.withDurationAdded((org.joda.time.ReadableDuration) duration62, 10);
        org.joda.time.DateTime dateTime66 = dateTime19.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Days days67 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod68 = days67.toMutablePeriod();
        org.joda.time.Duration duration69 = days67.toStandardDuration();
        org.joda.time.PeriodType periodType70 = days67.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Calendar calendar76 = dateTime74.toCalendar(locale75);
        org.joda.time.DateTime dateTime78 = dateTime74.plusMillis((int) '4');
        org.joda.time.Chronology chronology79 = dateTime74.getChronology();
        org.joda.time.Period period80 = duration62.toPeriod(periodType70, chronology79);
        org.joda.time.DateTime dateTime81 = dateTime10.toDateTime(chronology79);
        org.joda.time.DateTime dateTime83 = dateTime81.minus((-604800L));
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int85 = dateTime81.get(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(days67);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 22435976 + "'", int85 == 22435976);
    }

    @Test
    public void test04596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04596");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime3.getZone();
        org.joda.time.TimeOfDay timeOfDay8 = dateTime3.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTime20.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isStandardOffset((long) (byte) 100);
        boolean boolean30 = dateTimeZone25.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone33.isLocalDateTimeGap(localDateTime35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = dateTime37.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime43.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        boolean boolean53 = dateTime51.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes54 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration55 = minutes54.toStandardDuration();
        org.joda.time.Duration duration56 = minutes54.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration56);
        int int58 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime59 = dateTime12.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = dateTime63.toCalendar(locale64);
        int int66 = dateTime63.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime63.getZone();
        org.joda.time.TimeOfDay timeOfDay68 = dateTime63.toTimeOfDay();
        org.joda.time.DateTime.Property property69 = dateTime63.dayOfYear();
        org.joda.time.TimeOfDay timeOfDay70 = dateTime63.toTimeOfDay();
        org.joda.time.DateTime dateTime71 = dateTime12.withFields((org.joda.time.ReadablePartial) timeOfDay70);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay8, (org.joda.time.ReadablePartial) timeOfDay70);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((-1L), dateTimeZone75);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Calendar calendar78 = dateTime76.toCalendar(locale77);
        int int79 = dateTime76.getSecondOfMinute();
        org.joda.time.DateTime.Property property80 = dateTime76.hourOfDay();
        org.joda.time.DateTime dateTime81 = property80.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property80.getFieldType();
        boolean boolean83 = timeOfDay8.isSupported(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 59 + "'", int66 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar78);
        org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 59 + "'", int79 == 59);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test04597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04597");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        long long9 = dateTimeZone1.convertLocalToUTC((long) 117, false, 1645513759836L);
        long long13 = dateTimeZone1.convertLocalToUTC((long) 292278993, true, 23L);
        boolean boolean15 = dateTimeZone1.isStandardOffset(1645513800L);
        boolean boolean16 = dateTimeZone1.isFixed();
        java.lang.String str17 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 117L + "'", long9 == 117L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 292278993L + "'", long13 == 292278993L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
    }

    @Test
    public void test04598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04598");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        int int4 = dateTime3.getHourOfDay();
        org.joda.time.DateTime dateTime6 = dateTime3.minusWeeks(59);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone9.isLocalDateTimeGap(localDateTime11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) 'a');
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours(10);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Seconds seconds19 = minutes18.toStandardSeconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType21 = minutes18.getFieldType(953);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 953");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(seconds19);
    }

    @Test
    public void test04599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04599");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Period period3 = period1.withWeeks((int) (short) -1);
        org.joda.time.Period period5 = period1.withDays(0);
        org.joda.time.Period period7 = period1.withWeeks(86399);
        org.joda.time.Period period9 = period1.withSeconds(100);
        org.joda.time.Duration duration11 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime15.weekyear();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime15, periodType22);
        org.joda.time.Period period25 = period23.plusWeeks(1439);
        org.joda.time.Period period27 = period25.plusMillis(69);
        org.joda.time.Period period28 = period1.withFields((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Duration duration29 = period28.toStandardDuration();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration29);
    }

    @Test
    public void test04600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04600");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime3.hourOfDay();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property7.getAsText(locale9);
        org.joda.time.DateTime dateTime12 = property7.addToCopy(6);
        org.joda.time.DateTime dateTime13 = property7.withMaximumValue();
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime18.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.Instant instant34 = dateTime28.toInstant();
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) instant34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone39.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.Instant instant55 = dateTime49.toInstant();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Calendar calendar61 = dateTime59.toCalendar(locale60);
        org.joda.time.DateTime dateTime63 = dateTime59.plusMillis((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime59.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        boolean boolean69 = dateTime67.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes70 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration71 = minutes70.toStandardDuration();
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTime dateTime73 = dateTime43.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime76 = dateTime18.minusWeeks((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType77.getRangeDurationType();
        int int79 = dateTime18.get(dateTimeFieldType77);
        java.lang.String str80 = dateTimeFieldType77.toString();
        boolean boolean81 = dateTime13.isSupported(dateTimeFieldType77);
        org.joda.time.DateTime dateTime83 = dateTime13.plusSeconds((int) (short) 1);
        boolean boolean85 = dateTime13.isAfter(23L);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.DateTime dateTime87 = dateTime13.minus(readablePeriod86);
        int int88 = dateTime87.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23" + "'", str10, "23");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(minutes70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1969 + "'", int79 == 1969);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "yearOfEra" + "'", str80, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 999 + "'", int88 == 999);
    }

    @Test
    public void test04601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04601");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, readableDuration6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone10.isLocalDateTimeGap(localDateTime12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime14.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        boolean boolean30 = dateTime28.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration32 = minutes31.toStandardDuration();
        org.joda.time.Duration duration33 = minutes31.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration35 = duration33.toDuration();
        mutableInterval7.setDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        boolean boolean37 = mutableInterval7.containsNow();
        org.joda.time.Duration duration39 = new org.joda.time.Duration(97200035L);
        mutableInterval7.setDurationAfterStart((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Period period41 = duration39.toPeriod();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test04602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04602");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-292275054), 870901920, 297, 59, 577, 773, (int) (byte) 1, 784);
        mutablePeriod8.setSeconds(302);
        mutablePeriod8.setSeconds(1969);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod8.setValue(86399, 773);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86399");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04603");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusHours(100);
        int int5 = period4.getMillis();
        org.joda.time.Period period7 = period4.withMillis((-292275054));
        org.joda.time.Period period9 = period7.withMillis(25785);
        int int10 = period9.getDays();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test04604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04604");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(207, 412, (-84376), 291);
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds7 = seconds5.minus(0);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        int int9 = seconds5.get(durationFieldType8);
        int int10 = mutablePeriod4.get(durationFieldType8);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test04605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04605");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setVariant("P10Y1439M100W348DT-1H1M86399.002S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: P10Y1439M100W348DT-1H1M86399.002S [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test04606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04606");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, periodType3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(32820001L, periodType3);
        org.joda.time.PeriodType periodType6 = periodType3.withDaysRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 296, periodType6);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test04607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04607");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        boolean boolean10 = dateTime3.equals((java.lang.Object) dateTime9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime3.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime3.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone17);
        boolean boolean21 = interval19.isAfter(100L);
        long long22 = interval19.getEndMillis();
        org.joda.time.Interval interval23 = interval19.toInterval();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.Chronology chronology32 = dateTime27.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        boolean boolean38 = dateTimeZone35.isStandardOffset((long) (byte) 100);
        boolean boolean40 = dateTimeZone35.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone43.isLocalDateTimeGap(localDateTime45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime49 = dateTime47.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Calendar calendar55 = dateTime53.toCalendar(locale54);
        org.joda.time.DateTime dateTime57 = dateTime53.plusMillis((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime53.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        boolean boolean63 = dateTime61.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes64 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration65 = minutes64.toStandardDuration();
        org.joda.time.Duration duration66 = minutes64.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration66);
        int int68 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology69 = chronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField70 = chronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField71 = chronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology32.weekOfWeekyear();
        org.joda.time.Interval interval73 = interval23.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField74 = chronology32.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime3.toMutableDateTime(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
    }

    @Test
    public void test04608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04608");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime5.weekyear();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime5, periodType12);
        org.joda.time.Period period15 = period13.plusWeeks(1439);
        org.joda.time.Period period17 = period13.minusHours(8);
        org.joda.time.Period period19 = period17.withYears(86399999);
        org.joda.time.Period period21 = period17.plusMonths(86399);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = period17.getValue(791);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 791");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test04609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04609");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology12);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((-1L), 59L, chronology12);
        org.joda.time.Days days16 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod17 = days16.toMutablePeriod();
        mutablePeriod17.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval20 = null;
        mutablePeriod17.add(readableInterval20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.eras();
        int int23 = mutablePeriod17.get(durationFieldType22);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology35);
        mutablePeriod17.setPeriod((long) (-1), chronology35);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod17.copy();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Days days46 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod47 = days46.toMutablePeriod();
        org.joda.time.Duration duration48 = days46.toStandardDuration();
        org.joda.time.PeriodType periodType49 = days46.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Calendar calendar55 = dateTime53.toCalendar(locale54);
        org.joda.time.DateTime dateTime57 = dateTime53.plusMillis((int) '4');
        org.joda.time.Chronology chronology58 = dateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.hourOfHalfday();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType49, chronology58);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTimeField dateTimeField62 = chronology58.millisOfDay();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((-259200000L), (long) '#', chronology58);
        mutableInterval40.setChronology(chronology58);
        mutablePeriod17.setPeriod((org.joda.time.ReadableInterval) mutableInterval40);
        mutableInterval40.setEndMillis((long) 5);
        boolean boolean68 = mutableInterval15.isAfter((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.DateTime dateTime69 = mutableInterval40.getStart();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime72 = dateTime69.withField(dateTimeFieldType70, 508);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test04610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04610");
        org.joda.time.Period period3 = org.joda.time.Period.days(59);
        org.joda.time.Hours hours4 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.DurationFieldType durationFieldType5 = hours4.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTimeISO();
        org.joda.time.Instant instant15 = dateTime9.toInstant();
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        boolean boolean26 = instant16.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant30 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration28, (-1));
        boolean boolean32 = instant30.isBefore((long) (short) 10);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration35 = period34.toStandardDuration();
        org.joda.time.Instant instant36 = instant30.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone39.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = dateTime43.withHourOfDay(0);
        int int46 = dateTime45.getDayOfWeek();
        org.joda.time.DateTime dateTime48 = dateTime45.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Calendar calendar54 = dateTime52.toCalendar(locale53);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '4');
        org.joda.time.Instant instant57 = dateTime56.toInstant();
        org.joda.time.Hours hours58 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) instant57);
        org.joda.time.DateTime dateTime60 = dateTime48.plusMillis((int) (byte) 1);
        boolean boolean61 = instant30.isEqual((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime62 = dateTime48.withTimeAtStartOfDay();
        org.joda.time.Instant instant63 = dateTime48.toInstant();
        org.joda.time.Chronology chronology64 = instant63.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.weeks();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.minuteOfDay();
        boolean boolean67 = durationFieldType5.isSupported(chronology64);
        org.joda.time.Interval interval68 = new org.joda.time.Interval(1645513815828L, 1645513921057L, chronology64);
        org.joda.time.DateTimeField dateTimeField69 = chronology64.monthOfYear();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(hours58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test04611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04611");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("994");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '994' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04612");
        org.joda.time.Period period2 = new org.joda.time.Period(172800000L, 1644908940502L);
        org.joda.time.Period period4 = period2.withDays(0);
        org.joda.time.Period period6 = period4.withMinutes(457);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test04613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04613");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setHours((int) '#');
        mutablePeriod1.addMillis((int) (byte) 100);
        mutablePeriod1.addYears(0);
        mutablePeriod1.addWeeks((int) (short) 100);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) 1439, 0L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.millis((long) (short) -1);
        long long17 = duration16.getMillis();
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        long long21 = duration20.getStandardHours();
        boolean boolean22 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration24 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.Days days29 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod30 = days29.toMutablePeriod();
        org.joda.time.Duration duration31 = days29.toStandardDuration();
        org.joda.time.Days days32 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod33 = days32.toMutablePeriod();
        org.joda.time.Duration duration34 = days32.toStandardDuration();
        boolean boolean35 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        org.joda.time.Days days39 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod40 = days39.toMutablePeriod();
        org.joda.time.Duration duration41 = days39.toStandardDuration();
        boolean boolean42 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Days days43 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod44 = days43.toMutablePeriod();
        org.joda.time.Duration duration45 = days43.toStandardDuration();
        boolean boolean46 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration45);
        boolean boolean47 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period58 = period56.minusMinutes((int) ' ');
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) period56);
        int int60 = dateTime27.getWeekyear();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.Days days67 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod68 = days67.toMutablePeriod();
        org.joda.time.Duration duration69 = days67.toStandardDuration();
        org.joda.time.PeriodType periodType70 = days67.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Calendar calendar76 = dateTime74.toCalendar(locale75);
        org.joda.time.DateTime dateTime78 = dateTime74.plusMillis((int) '4');
        org.joda.time.Chronology chronology79 = dateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.hourOfHalfday();
        org.joda.time.Period period81 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType70, chronology79);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTimeField dateTimeField83 = chronology79.millisOfDay();
        org.joda.time.Interval interval84 = new org.joda.time.Interval((-259200000L), (long) '#', chronology79);
        mutableInterval61.setChronology(chronology79);
        org.joda.time.DateTime dateTime86 = dateTime27.withChronology(chronology79);
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration14, chronology79);
        org.joda.time.DurationField durationField88 = chronology79.eras();
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime(chronology79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime91 = dateTime89.withDayOfWeek(472);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 472 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 144L + "'", long21 == 144L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(days67);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(durationField88);
    }

    @Test
    public void test04614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04614");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration2 = period1.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.Instant instant21 = dateTime15.toInstant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone25.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime31 = dateTime29.withHourOfDay(0);
        boolean boolean32 = instant22.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant36 = instant22.withDurationAdded((org.joda.time.ReadableDuration) duration34, (-1));
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime40.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.plusMillis((int) '#');
        int int48 = instant36.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime49 = dateTime45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime54 = null;
        boolean boolean55 = dateTimeZone52.isLocalDateTimeGap(localDateTime54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime58 = dateTime56.withHourOfDay(0);
        int int59 = dateTime58.getDayOfWeek();
        org.joda.time.DateTime dateTime61 = dateTime58.minusWeeks((int) (byte) 10);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime61);
        boolean boolean63 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime65 = dateTime61.withMonthOfYear(783);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 783 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test04615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04615");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        java.lang.Object obj7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval(obj7, chronology8);
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = interval10.toMutableInterval();
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        long long15 = duration14.getStandardHours();
        mutableInterval11.setDurationAfterStart((org.joda.time.ReadableDuration) duration14);
        long long17 = duration14.getMillis();
        java.lang.String str18 = duration14.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone23);
        boolean boolean27 = interval25.isAfter(100L);
        long long28 = interval25.getEndMillis();
        org.joda.time.Interval interval29 = interval25.toInterval();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTimeISO();
        org.joda.time.Instant instant39 = dateTime33.toInstant();
        org.joda.time.Instant instant40 = instant39.toInstant();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Calendar calendar46 = dateTime44.toCalendar(locale45);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime44.toDateTimeISO();
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType51 = periodType50.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant39, (org.joda.time.ReadableInstant) dateTime49, periodType50);
        boolean boolean53 = interval25.isBefore((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period54 = duration14.toPeriodTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration55 = duration5.plus((org.joda.time.ReadableDuration) duration14);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 144L + "'", long15 == 144L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 518400000L + "'", long17 == 518400000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT518400S" + "'", str18, "PT518400S");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration55);
    }

    @Test
    public void test04616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04616");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.Hours hours33 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime35 = dateTime23.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        int int37 = property9.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime39 = dateTime35.withYearOfCentury(3);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths(0);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime46.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        java.util.GregorianCalendar gregorianCalendar55 = dateTime54.toGregorianCalendar();
        int int56 = dateTime54.getHourOfDay();
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Locale locale58 = locale57.stripExtensions();
        java.lang.String str59 = locale58.toLanguageTag();
        java.util.Calendar calendar60 = dateTime54.toCalendar(locale58);
        org.joda.time.DateTime.Property property61 = dateTime54.minuteOfHour();
        org.joda.time.DateTime dateTime63 = property61.addToCopy(10);
        java.util.Locale locale64 = java.util.Locale.CHINA;
        java.util.Locale locale65 = locale64.stripExtensions();
        java.lang.String str66 = locale64.getISO3Language();
        java.lang.String str67 = locale64.getDisplayScript();
        java.lang.String str68 = property61.getAsShortText(locale64);
        java.lang.String str69 = dateTimeZone49.getName(10L, locale64);
        org.joda.time.DateTime dateTime70 = dateTime46.toDateTime(dateTimeZone49);
        int int72 = dateTimeZone49.getStandardOffset((long) 2022);
        org.joda.time.DateTime dateTime73 = dateTime41.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime74 = dateTime73.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514036761,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=56,MILLISECOND=761,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(gregorianCalendar55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh-CN" + "'", str59, "zh-CN");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1645514036761,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=56,MILLISECOND=761,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "zho" + "'", str66, "zho");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "13" + "'", str68, "13");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test04617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04617");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        java.lang.String str15 = mutablePeriod1.toString();
        org.joda.time.Days days16 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod17 = days16.toMutablePeriod();
        org.joda.time.Duration duration18 = days16.toStandardDuration();
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        org.joda.time.Duration duration21 = days19.toStandardDuration();
        boolean boolean22 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration21);
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Days days24 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod25 = days24.toMutablePeriod();
        org.joda.time.Duration duration26 = days24.toStandardDuration();
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        org.joda.time.Duration duration29 = days27.toStandardDuration();
        boolean boolean30 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Days days31 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod32 = days31.toMutablePeriod();
        org.joda.time.Duration duration33 = days31.toStandardDuration();
        org.joda.time.Days days34 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod35 = days34.toMutablePeriod();
        org.joda.time.Duration duration36 = days34.toStandardDuration();
        boolean boolean37 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Days days38 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod39 = days38.toMutablePeriod();
        org.joda.time.Duration duration40 = days38.toStandardDuration();
        boolean boolean41 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration40);
        boolean boolean42 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Period period53 = period51.minusMinutes((int) ' ');
        org.joda.time.Period period54 = period53.toPeriod();
        mutablePeriod1.add((org.joda.time.ReadablePeriod) period54);
        mutablePeriod1.addMillis(7);
        mutablePeriod1.addMonths((-27425128));
        mutablePeriod1.setPeriod(89424000000L);
        mutablePeriod1.clear();
        org.joda.time.MutablePeriod mutablePeriod63 = mutablePeriod1.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.setValue(86337998, 7199928);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86337998");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P6DT35S" + "'", str15, "P6DT35S");
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(mutablePeriod63);
    }

    @Test
    public void test04618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04618");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        boolean boolean16 = dateTimeZone13.isStandardOffset((long) (byte) 100);
        boolean boolean18 = dateTimeZone13.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone21.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        boolean boolean41 = dateTime39.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration43 = minutes42.toStandardDuration();
        org.joda.time.Duration duration44 = minutes42.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration44);
        int int46 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology47 = chronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.Chronology chronology56 = dateTime51.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.minutes();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        boolean boolean62 = dateTimeZone59.isStandardOffset((long) (byte) 100);
        boolean boolean64 = dateTimeZone59.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime69 = null;
        boolean boolean70 = dateTimeZone67.isLocalDateTimeGap(localDateTime69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime73 = dateTime71.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((-1L), dateTimeZone76);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Calendar calendar79 = dateTime77.toCalendar(locale78);
        org.joda.time.DateTime dateTime81 = dateTime77.plusMillis((int) '4');
        org.joda.time.DateTime dateTime82 = dateTime77.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone84);
        boolean boolean87 = dateTime85.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes88 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Duration duration89 = minutes88.toStandardDuration();
        org.joda.time.Duration duration90 = minutes88.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableDuration) duration90);
        int int92 = dateTimeZone59.getOffset((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Chronology chronology93 = chronology56.withZone(dateTimeZone59);
        org.joda.time.Chronology chronology94 = chronology47.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField95 = chronology47.hourOfHalfday();
        org.joda.time.DateTime dateTime96 = new org.joda.time.DateTime(chronology47);
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod(1645513731014L, (long) 35, chronology47);
        org.joda.time.DateTimeField dateTimeField98 = chronology47.secondOfDay();
        org.joda.time.DateTimeField dateTimeField99 = chronology47.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar79);
        org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeField98);
        org.junit.Assert.assertNotNull(dateTimeField99);
    }

    @Test
    public void test04619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04619");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime11.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        boolean boolean21 = dateTime19.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime11.toYearMonthDay();
        java.lang.String str24 = dateTime11.toString();
        boolean boolean25 = interval7.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime27 = dateTime11.plus((long) 292278993);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        int int34 = dateTime31.getSecondOfMinute();
        org.joda.time.DateTime.Property property35 = dateTime31.hourOfDay();
        org.joda.time.DurationField durationField36 = property35.getRangeDurationField();
        org.joda.time.DateTime dateTime37 = property35.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime39 = dateTime37.minusMonths(53);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfDay();
        org.joda.time.DateTime dateTime42 = dateTime39.withYearOfEra(823);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        long long49 = dateTimeZone45.convertLocalToUTC(10L, true);
        java.lang.String str50 = dateTimeZone45.getID();
        long long52 = dateTimeZone45.previousTransition((long) 23);
        java.util.TimeZone timeZone53 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime42.toMutableDateTime(dateTimeZone55);
        int int57 = dateTime27.compareTo((org.joda.time.ReadableInstant) mutableDateTime56);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Calendar calendar63 = dateTime61.toCalendar(locale62);
        int int64 = dateTime61.getSecondOfMinute();
        org.joda.time.DateTime.Property property65 = dateTime61.hourOfDay();
        org.joda.time.DurationField durationField66 = property65.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((-1L), dateTimeZone70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Calendar calendar73 = dateTime71.toCalendar(locale72);
        org.joda.time.DateTime dateTime75 = dateTime71.plusMillis((int) '4');
        org.joda.time.Chronology chronology76 = dateTime71.getChronology();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) '4', chronology76);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(chronology76);
        int int79 = property65.getDifference((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime81 = dateTime78.plusHours(4);
        org.joda.time.YearMonthDay yearMonthDay82 = dateTime78.toYearMonthDay();
        org.joda.time.DateTime dateTime83 = dateTime27.withFields((org.joda.time.ReadablePartial) yearMonthDay82);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str24, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 59 + "'", int34 == 59);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 23L + "'", long52 == 23L);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 59 + "'", int64 == 59);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-457087) + "'", int79 == (-457087));
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test04620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04620");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        long long7 = dateTimeZone3.convertLocalToUTC(10L, true);
        java.lang.String str8 = dateTimeZone3.getID();
        long long10 = dateTimeZone3.previousTransition((long) 23);
        java.util.TimeZone timeZone11 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-86400000L), dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone19);
        boolean boolean23 = interval21.isAfter(100L);
        long long24 = interval21.getEndMillis();
        org.joda.time.Interval interval25 = interval21.toInterval();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Interval interval27 = interval25.withDurationBeforeEnd(readableDuration26);
        org.joda.time.Period period28 = interval25.toPeriod();
        org.joda.time.Interval interval29 = interval25.toInterval();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone34);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        boolean boolean39 = mutableInterval37.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.lang.String[] strArray50 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strList51);
        boolean boolean54 = mutableInterval37.equals((java.lang.Object) strList51);
        org.joda.time.MutableInterval mutableInterval55 = mutableInterval37.toMutableInterval();
        boolean boolean56 = interval29.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj57 = mutableInterval37.clone();
        boolean boolean58 = dateTime14.equals(obj57);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 23L + "'", long10 == 23L);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test04621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04621");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("java.io.IOException: 2021-12-14");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.io.IOException: 2021-12-14\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04622");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Duration duration42 = minutes40.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42);
        int int44 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology45 = chronology8.withZone(dateTimeZone11);
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10);
        int int48 = period47.getSeconds();
        org.joda.time.Period period50 = period47.minusHours(100);
        int int51 = period50.getDays();
        int[] intArray54 = chronology8.get((org.joda.time.ReadablePeriod) period50, (-1L), (long) 'a');
        org.joda.time.DateTimeField dateTimeField55 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField56 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField57 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology8.minuteOfHour();
        int int61 = dateTimeField59.getLeapAmount((long) 502);
        long long63 = dateTimeField59.roundCeiling(247541L);
        long long66 = dateTimeField59.set(172800000L, 7);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 98]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 300000L + "'", long63 == 300000L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 173220000L + "'", long66 == 173220000L);
    }

    @Test
    public void test04623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04623");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("26");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"26\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04624");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.weekyear();
        org.joda.time.DateTime.Property property10 = dateTime3.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getHourOfDay();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.toLanguageTag();
        java.util.Calendar calendar19 = dateTime13.toCalendar(locale17);
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfHour();
        org.joda.time.Days days21 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod22 = days21.toMutablePeriod();
        org.joda.time.Duration duration23 = days21.toStandardDuration();
        org.joda.time.Days days24 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod25 = days24.toMutablePeriod();
        org.joda.time.Duration duration26 = days24.toStandardDuration();
        boolean boolean27 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration30 = duration26.minus((long) 2022);
        java.lang.Object obj31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval(obj31, chronology32);
        long long34 = interval33.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        org.joda.time.DateTime dateTime42 = dateTime38.plusMillis((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime38.toDateTimeISO();
        org.joda.time.Instant instant44 = dateTime38.toInstant();
        org.joda.time.Instant instant45 = instant44.toInstant();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType56 = periodType55.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant44, (org.joda.time.ReadableInstant) dateTime54, periodType55);
        org.joda.time.Period period58 = interval33.toPeriod(periodType55);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration30, periodType55);
        org.joda.time.LocalDateTime localDateTime60 = dateTime3.toLocalDateTime();
        int int62 = localDateTime60.getValue((int) (byte) 1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh-CN" + "'", str18, "zh-CN");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514037235,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=57,MILLISECOND=235,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514037235L + "'", long34 == 1645514037235L);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 12 + "'", int62 == 12);
    }

    @Test
    public void test04625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04625");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) dateTime7);
        org.joda.time.DateTime.Property property10 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds(1439);
        int int14 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology23.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.weekyearOfCentury();
        org.joda.time.DateTime dateTime28 = dateTime11.toDateTime(chronology23);
        org.joda.time.DateTimeZone dateTimeZone29 = chronology23.getZone();
        long long31 = dateTimeZone29.convertUTCToLocal(1010015913601L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1010015913601L + "'", long31 == 1010015913601L);
    }

    @Test
    public void test04626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04626");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(23, 86399, (int) (byte) -1, 5, 3, 829, 5, 291);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getHourOfDay();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.toLanguageTag();
        java.util.Calendar calendar17 = dateTime11.toCalendar(locale15);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        org.joda.time.Duration duration21 = days19.toStandardDuration();
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        boolean boolean25 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Days days31 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod32 = days31.toMutablePeriod();
        org.joda.time.Duration duration33 = days31.toStandardDuration();
        org.joda.time.PeriodType periodType34 = days31.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        org.joda.time.DateTime dateTime42 = dateTime38.plusMillis((int) '4');
        org.joda.time.Chronology chronology43 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfHalfday();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType34, chronology43);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTimeField dateTimeField47 = chronology43.millisOfDay();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((-259200000L), (long) '#', chronology43);
        boolean boolean49 = interval26.isBefore((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Days days50 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval26);
        boolean boolean52 = interval26.isAfter((long) 1970);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval26);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone58);
        org.joda.time.MutableInterval mutableInterval61 = interval60.toMutableInterval();
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        org.joda.time.Interval interval63 = interval26.withChronology(chronology62);
        java.lang.String str64 = chronology62.toString();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-CN" + "'", str16, "zh-CN");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645514037319,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=57,MILLISECOND=319,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(mutableInterval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[UTC]" + "'", str64, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test04627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04627");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(876);
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test04628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04628");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType1 = minutes0.getFieldType();
        org.joda.time.Minutes minutes3 = minutes0.plus(1);
        org.joda.time.Minutes minutes5 = minutes3.minus(100);
        org.joda.time.Minutes minutes6 = minutes3.negated();
        org.joda.time.Minutes minutes8 = minutes6.dividedBy(636);
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy(5);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.Instant instant20 = dateTime14.toInstant();
        org.joda.time.Instant instant21 = instant20.toInstant();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTimeISO();
        org.joda.time.Instant instant31 = dateTime25.toInstant();
        org.joda.time.Instant instant32 = instant31.toInstant();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone35.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        boolean boolean42 = instant32.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant46 = instant32.withDurationAdded((org.joda.time.ReadableDuration) duration44, (-1));
        boolean boolean48 = instant46.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Calendar calendar54 = dateTime52.toCalendar(locale53);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime52.toDateTimeISO();
        org.joda.time.Instant instant58 = dateTime52.toInstant();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant46, (org.joda.time.ReadableInstant) dateTime52, periodType59);
        org.joda.time.Minutes minutes61 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) instant21, (org.joda.time.ReadableInstant) dateTime52);
        boolean boolean62 = minutes10.isLessThan(minutes61);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test04629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04629");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = days4.negated();
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) days7);
        org.joda.time.Instant instant10 = new org.joda.time.Instant(0L);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        int int22 = dateTime21.getDayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime21.minusWeeks((int) (byte) 10);
        boolean boolean26 = dateTime24.isEqual((long) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime24.withMillis((long) 20);
        org.joda.time.LocalDate localDate29 = dateTime24.toLocalDate();
        java.lang.String str30 = localDate29.toString();
        int[] intArray32 = chronology12.get((org.joda.time.ReadablePartial) localDate29, (long) 421);
        org.joda.time.DurationField durationField33 = chronology12.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period34 = new org.joda.time.Period((java.lang.Object) dateTime8, chronology12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2021-12-14" + "'", str30, "2021-12-14");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test04630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04630");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths((int) (byte) 1);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime12 = dateTime9.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        int int17 = dateTime15.getHourOfDay();
        java.util.Locale locale18 = java.util.Locale.CHINA;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Calendar calendar21 = dateTime15.toCalendar(locale19);
        org.joda.time.DateTime.Property property22 = dateTime15.minuteOfHour();
        boolean boolean23 = property22.isLeap();
        org.joda.time.DateTime dateTime24 = property22.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = null;
        boolean boolean30 = dateTimeZone27.isLocalDateTimeGap(localDateTime29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay(0);
        int int34 = dateTime33.getDayOfWeek();
        org.joda.time.DateTime dateTime36 = dateTime33.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis((int) '4');
        org.joda.time.Instant instant45 = dateTime44.toInstant();
        org.joda.time.Hours hours46 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) instant45);
        org.joda.time.DateTime dateTime48 = dateTime36.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight49 = dateTime48.toDateMidnight();
        int int50 = property22.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = dateTime48.withYearOfCentury(3);
        org.joda.time.DateTime dateTime54 = dateTime48.withYearOfEra(138);
        org.joda.time.DateTime dateTime56 = dateTime54.withMillisOfDay((int) ' ');
        boolean boolean58 = dateTime54.isBefore((long) (-457087));
        boolean boolean59 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime61 = dateTime12.plusDays(135);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Calendar calendar67 = dateTime65.toCalendar(locale66);
        org.joda.time.DateTime dateTime69 = dateTime65.plusMillis((int) '4');
        org.joda.time.Chronology chronology70 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.weekOfWeekyear();
        long long73 = dateTimeField71.roundHalfEven(1L);
        org.joda.time.DurationField durationField74 = dateTimeField71.getLeapDurationField();
        long long77 = dateTimeField71.getDifferenceAsLong((long) (short) 100, 100L);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((-1L), dateTimeZone80);
        org.joda.time.LocalDateTime localDateTime82 = null;
        boolean boolean83 = dateTimeZone80.isLocalDateTimeGap(localDateTime82);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(dateTimeZone80);
        org.joda.time.DateTime dateTime86 = dateTime84.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime88 = dateTime86.toMutableDateTime(dateTimeZone87);
        org.joda.time.LocalDate localDate89 = dateTime86.toLocalDate();
        java.util.Locale.Category category90 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale91 = java.util.Locale.getDefault(category90);
        java.util.Locale locale92 = java.util.Locale.getDefault(category90);
        java.lang.String str93 = dateTimeField71.getAsShortText((org.joda.time.ReadablePartial) localDate89, locale92);
        org.joda.time.DateTime dateTime94 = dateTime12.withFields((org.joda.time.ReadablePartial) localDate89);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh-CN" + "'", str20, "zh-CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645514037571,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=57,MILLISECOND=571,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(hours46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-259200000L) + "'", long73 == (-259200000L));
        org.junit.Assert.assertNull(durationField74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertTrue("'" + category90 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category90.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale91);
// flaky:         org.junit.Assert.assertEquals(locale91.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale92);
// flaky:         org.junit.Assert.assertEquals(locale92.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "8" + "'", str93, "8");
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test04631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04631");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMonths(100);
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) dateTime15, dateTimeZone19);
        org.joda.time.DateTime.Property property21 = dateTime15.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTimeISO();
        org.joda.time.Instant instant31 = dateTime25.toInstant();
        org.joda.time.Instant instant32 = instant31.toInstant();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone35.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        boolean boolean42 = instant32.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant46 = instant32.withDurationAdded((org.joda.time.ReadableDuration) duration44, (-1));
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Calendar calendar52 = dateTime50.toCalendar(locale51);
        org.joda.time.DateTime dateTime54 = dateTime50.plusMillis((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime50.toDateTimeISO();
        org.joda.time.DateTime dateTime57 = dateTime55.plusMillis((int) '#');
        int int58 = instant46.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime59 = dateTime55.toDateTime();
        java.util.Locale locale60 = java.util.Locale.CHINA;
        java.util.Locale locale61 = locale60.stripExtensions();
        java.lang.String str62 = locale60.getISO3Language();
        java.lang.String str63 = locale60.getDisplayScript();
        java.util.Calendar calendar64 = dateTime55.toCalendar(locale60);
        int int65 = property21.getMaximumShortTextLength(locale60);
        org.joda.time.DateTime dateTime66 = property21.roundHalfFloorCopy();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime66.getMinuteOfHour();
        java.util.Date date69 = dateTime66.toDate();
        org.joda.time.DateTime.Property property70 = dateTime66.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zho" + "'", str62, "zho");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test04632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04632");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis((int) '#');
        java.util.Date date11 = dateTime8.toDate();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateMidnight dateMidnight13 = dateTime8.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean24 = interval20.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.lang.String str30 = dateTimeZone27.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime23.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime8.toMutableDateTime(dateTimeZone27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime8.withEra((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
    }

    @Test
    public void test04633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04633");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 10, periodType3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology18);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((-1L), 59L, chronology18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 747, periodType3, chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.hourOfHalfday();
        long long25 = dateTimeField23.roundCeiling(174700800000L);
        long long28 = dateTimeField23.add((long) 365, 1970);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 174700800000L + "'", long25 == 174700800000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7092000365L + "'", long28 == 7092000365L);
    }

    @Test
    public void test04634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04634");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime13.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        boolean boolean23 = dateTime21.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration25 = minutes24.toStandardDuration();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        int int31 = dateTime29.getHourOfDay();
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra(7);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.Instant instant43 = dateTime37.toInstant();
        org.joda.time.Instant instant44 = instant43.toInstant();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone47.isLocalDateTimeGap(localDateTime49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime53 = dateTime51.withHourOfDay(0);
        boolean boolean54 = instant44.isEqual((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant58 = instant44.withDurationAdded((org.joda.time.ReadableDuration) duration56, (-1));
        boolean boolean60 = instant58.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Calendar calendar66 = dateTime64.toCalendar(locale65);
        org.joda.time.DateTime dateTime68 = dateTime64.plusMillis((int) '4');
        org.joda.time.DateTime dateTime69 = dateTime64.toDateTimeISO();
        org.joda.time.Instant instant70 = dateTime64.toInstant();
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant58, (org.joda.time.ReadableInstant) dateTime64, periodType71);
        org.joda.time.PeriodType periodType73 = periodType71.withWeeksRemoved();
        org.joda.time.PeriodType periodType74 = periodType73.withYearsRemoved();
        org.joda.time.Period period75 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29, periodType73);
        org.joda.time.PeriodType periodType76 = periodType73.withDaysRemoved();
        org.joda.time.PeriodType periodType77 = periodType73.withMonthsRemoved();
        org.joda.time.PeriodType periodType78 = periodType73.withYearsRemoved();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar66);
        org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
    }

    @Test
    public void test04635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04635");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.millisOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy((int) (short) -1);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime11.plusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        boolean boolean20 = dateTimeZone17.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime21 = dateTime11.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test04636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04636");
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("PT1645513980S");
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test04637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04637");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime3.getZone();
        org.joda.time.TimeOfDay timeOfDay8 = dateTime3.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        int int24 = dateTime21.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime21.getZone();
        org.joda.time.TimeOfDay timeOfDay26 = dateTime21.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period36 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay8, (org.joda.time.ReadablePartial) timeOfDay26);
        int int37 = timeOfDay26.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType39 = timeOfDay26.getFieldType((-72));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -72");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
    }

    @Test
    public void test04638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04638");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        long long13 = duration12.getStandardHours();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12, periodType15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        boolean boolean26 = dateTime20.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime20.toString(dateTimeFormatter27);
        org.joda.time.Period period29 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Days days31 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod32 = days31.toMutablePeriod();
        org.joda.time.Duration duration33 = days31.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant30, (org.joda.time.ReadableDuration) duration33);
        int int35 = mutablePeriod34.getDays();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        boolean boolean46 = interval42.isAfter((org.joda.time.ReadableInstant) dateTime45);
        long long47 = interval42.toDurationMillis();
        org.joda.time.Duration duration48 = interval42.toDuration();
        mutablePeriod34.setPeriod((org.joda.time.ReadableInterval) interval42);
        org.joda.time.PeriodType periodType50 = mutablePeriod34.getPeriodType();
        boolean boolean51 = dateTime20.equals((java.lang.Object) periodType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((java.lang.Object) boolean51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 144L + "'", long13 == 144L);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str28, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2L + "'", long47 == 2L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test04639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04639");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Days days6 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod7 = days6.toMutablePeriod();
        org.joda.time.Duration duration8 = days6.toStandardDuration();
        org.joda.time.PeriodType periodType9 = days6.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.Period period20 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType9, chronology18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.millisOfDay();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-259200000L), (long) '#', chronology18);
        mutableInterval0.setChronology(chronology18);
        org.joda.time.DateTimeField dateTimeField25 = chronology18.era();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.millisOfDay();
        org.joda.time.DurationField durationField27 = dateTimeField26.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNull(durationField27);
    }

    @Test
    public void test04640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04640");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        long long13 = duration12.getStandardHours();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12, periodType15);
        boolean boolean17 = dateTime8.isEqualNow();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 144L + "'", long13 == 144L);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04641");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds2 = seconds0.minus(0);
        org.joda.time.Seconds seconds4 = seconds0.multipliedBy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
    }

    @Test
    public void test04642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04642");
        org.joda.time.Period period2 = new org.joda.time.Period((long) (-292275054), 686395908436854L);
    }

    @Test
    public void test04643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04643");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology12);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((-1L), 59L, chronology12);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone20);
        boolean boolean24 = interval22.isAfter(100L);
        long long25 = interval22.getEndMillis();
        org.joda.time.Interval interval26 = interval22.toInterval();
        boolean boolean28 = interval22.isBefore((long) (-1));
        boolean boolean29 = interval22.isBeforeNow();
        boolean boolean30 = interval22.isAfterNow();
        boolean boolean31 = mutableInterval15.isAfter((org.joda.time.ReadableInterval) interval22);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        boolean boolean34 = mutableInterval32.isBefore(0L);
        boolean boolean35 = mutableInterval15.isAfter((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.Duration duration37 = org.joda.time.Duration.millis(345600000L);
        long long38 = duration37.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone41.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime47 = dateTime45.plusHours((int) 'a');
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean49 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval32.setInterval(6497197513717718L, (long) 13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 96L + "'", long38 == 96L);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test04644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04644");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone11);
        boolean boolean15 = interval13.isAfter(100L);
        long long16 = interval13.getEndMillis();
        org.joda.time.Interval interval17 = interval13.toInterval();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Interval interval19 = interval17.withDurationBeforeEnd(readableDuration18);
        boolean boolean20 = interval6.contains((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        boolean boolean31 = interval27.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.TimeOfDay timeOfDay32 = dateTime30.toTimeOfDay();
        org.joda.time.Interval interval33 = interval6.withEnd((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', chronology35);
        org.joda.time.Interval interval37 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone44);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        mutablePeriod36.setPeriod((long) 11, 27425230L, chronology48);
        mutablePeriod36.setPeriod((int) 'a', 2, 457, 750, 773, 27423260, 25948, 829);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test04645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04645");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 2, (long) 23);
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType6 = periodType5.withMillisRemoved();
        org.joda.time.Period period7 = mutableInterval4.toPeriod(periodType5);
        boolean boolean8 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04646");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.Instant instant20 = dateTime19.toInstant();
        org.joda.time.Hours hours21 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTime dateTime23 = dateTime11.plusMillis((int) (byte) 1);
        int int24 = dateTime11.getDayOfYear();
        org.joda.time.DateTime.Property property25 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime27 = dateTime11.withMonthOfYear(4);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 348 + "'", int24 == 348);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test04647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04647");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.Hours hours33 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime35 = dateTime23.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        int int37 = property9.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime39 = dateTime35.withYearOfCentury(3);
        org.joda.time.DateTime dateTime41 = dateTime35.withYearOfEra(138);
        org.joda.time.DateTime.Property property42 = dateTime35.centuryOfEra();
        org.joda.time.DateTime dateTime44 = dateTime35.minusSeconds(146);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone47.isLocalDateTimeGap(localDateTime49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime53 = dateTime51.withHourOfDay(0);
        int int54 = dateTime53.getDayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime53.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.Instant instant65 = dateTime64.toInstant();
        org.joda.time.Hours hours66 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) instant65);
        org.joda.time.DateTime dateTime68 = dateTime56.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight69 = dateTime68.toDateMidnight();
        java.lang.String str70 = dateMidnight69.toString();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(0L, chronology72);
        org.joda.time.DurationFieldType[] durationFieldTypeArray74 = mutablePeriod73.getFieldTypes();
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.forFields(durationFieldTypeArray74);
        org.joda.time.PeriodType periodType76 = periodType75.withSecondsRemoved();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateMidnight69, periodType76);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514038412,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=58,MILLISECOND=412,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(hours66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2021-12-14T00:00:00.000Z" + "'", str70, "2021-12-14T00:00:00.000Z");
        org.junit.Assert.assertNotNull(durationFieldTypeArray74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
    }

    @Test
    public void test04648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04648");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("P773Y393M2027DT37H6M117.107S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04649");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(8640, 636);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 636");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04650");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Instant instant2 = new org.joda.time.Instant((java.lang.Object) "8");
        org.joda.time.Instant instant4 = instant2.minus((-100L));
        org.joda.time.Days days5 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod6 = days5.toMutablePeriod();
        org.joda.time.Duration duration7 = days5.toStandardDuration();
        org.joda.time.Days days8 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod9 = days8.toMutablePeriod();
        org.joda.time.Duration duration10 = days8.toStandardDuration();
        boolean boolean11 = duration7.isLongerThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        boolean boolean15 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration16 = duration10.toDuration();
        long long17 = duration16.getStandardHours();
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration20 = period19.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean30 = duration16.isEqual((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration32 = org.joda.time.Duration.millis((long) (short) -1);
        long long33 = duration32.getStandardMinutes();
        org.joda.time.Duration duration35 = duration32.withMillis((-82737998L));
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        boolean boolean40 = dateTime38.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property41 = dateTime38.millisOfSecond();
        org.joda.time.DateTime dateTime42 = property41.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        int int47 = dateTime46.getHourOfDay();
        boolean boolean48 = property41.equals((java.lang.Object) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Calendar calendar54 = dateTime52.toCalendar(locale53);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '4');
        org.joda.time.Chronology chronology57 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.weekOfWeekyear();
        java.lang.String str59 = dateTimeField58.getName();
        java.lang.String str61 = dateTimeField58.getAsShortText((long) (short) 10);
        java.util.Locale locale63 = java.util.Locale.CHINA;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.lang.String str65 = dateTimeField58.getAsText((int) (byte) 100, locale63);
        java.util.Calendar calendar66 = dateTime46.toCalendar(locale63);
        long long67 = dateTime46.getMillis();
        org.joda.time.Period period68 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration69 = duration16.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration70 = duration16.toDuration();
        org.joda.time.Instant instant71 = instant2.plus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((long) 1439, 0L);
        org.joda.time.Days days75 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod76 = days75.toMutablePeriod();
        org.joda.time.Duration duration77 = days75.toStandardDuration();
        org.joda.time.Days days78 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod79 = days78.toMutablePeriod();
        org.joda.time.Duration duration80 = days78.toStandardDuration();
        boolean boolean81 = duration77.isLongerThan((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Days days82 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod83 = days82.toMutablePeriod();
        org.joda.time.Duration duration84 = days82.toStandardDuration();
        boolean boolean85 = duration80.isShorterThan((org.joda.time.ReadableDuration) duration84);
        org.joda.time.Duration duration86 = duration80.toDuration();
        org.joda.time.Duration duration88 = duration80.withMillis((long) (byte) 0);
        boolean boolean89 = duration74.isLongerThan((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Instant instant90 = instant71.plus((org.joda.time.ReadableDuration) duration80);
        boolean boolean91 = dateTimeZone0.equals((java.lang.Object) instant71);
        java.lang.String str93 = dateTimeZone0.getName(408985889653645L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 144L + "'", long17 == 144L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 23 + "'", int47 == 23);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "weekOfWeekyear" + "'", str59, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "100" + "'", str65, "100");
        org.junit.Assert.assertNotNull(calendar66);
        org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(days75);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(days78);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(days82);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00" + "'", str93, "+00:00");
    }

    @Test
    public void test04651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04651");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        int int4 = dateTime3.getHourOfDay();
        org.joda.time.DateTime dateTime6 = dateTime3.minusWeeks(59);
        org.joda.time.DateTime dateTime8 = dateTime3.withWeekOfWeekyear((int) ' ');
        org.joda.time.DateTime dateTime10 = dateTime8.minusYears((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime8.minusSeconds(146);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test04652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04652");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.Days days6 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod7 = days6.toMutablePeriod();
        org.joda.time.Duration duration8 = days6.toStandardDuration();
        org.joda.time.Days days9 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod10 = days9.toMutablePeriod();
        org.joda.time.Duration duration11 = days9.toStandardDuration();
        boolean boolean12 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        org.joda.time.Days days16 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod17 = days16.toMutablePeriod();
        org.joda.time.Duration duration18 = days16.toStandardDuration();
        boolean boolean19 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Days days20 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod21 = days20.toMutablePeriod();
        org.joda.time.Duration duration22 = days20.toStandardDuration();
        boolean boolean23 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration22);
        boolean boolean24 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period35 = period33.minusMinutes((int) ' ');
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadablePeriod) period33);
        int int37 = dateTime4.getWeekyear();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Days days44 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod45 = days44.toMutablePeriod();
        org.joda.time.Duration duration46 = days44.toStandardDuration();
        org.joda.time.PeriodType periodType47 = days44.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.Chronology chronology56 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.hourOfHalfday();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType47, chronology56);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTimeField dateTimeField60 = chronology56.millisOfDay();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((-259200000L), (long) '#', chronology56);
        mutableInterval38.setChronology(chronology56);
        org.joda.time.DateTime dateTime63 = dateTime4.withChronology(chronology56);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((-1L), dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime68 = null;
        boolean boolean69 = dateTimeZone66.isLocalDateTimeGap(localDateTime68);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((-1L), dateTimeZone72);
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.util.Calendar calendar75 = dateTime73.toCalendar(locale74);
        org.joda.time.DateTime dateTime77 = dateTime73.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime78 = dateTime73.toLocalDateTime();
        boolean boolean79 = dateTimeZone66.isLocalDateTimeGap(localDateTime78);
        int[] intArray81 = chronology56.get((org.joda.time.ReadablePartial) localDateTime78, (long) 100);
        org.joda.time.Chronology chronology82 = localDateTime78.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.weekyearOfCentury();
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(1645513759836L, chronology82);
        org.joda.time.DateTimeField dateTimeField85 = chronology82.weekyear();
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) (-59), chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar75);
        org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test04653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04653");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Duration duration42 = minutes40.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42);
        int int44 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology45 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField46 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology8.yearOfCentury();
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration51 = period50.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Calendar calendar57 = dateTime55.toCalendar(locale56);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime62 = dateTime55.withMonthOfYear(9);
        org.joda.time.LocalDate localDate63 = dateTime55.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Calendar calendar70 = dateTime68.toCalendar(locale69);
        org.joda.time.DateTime dateTime72 = dateTime68.plusMillis((int) '4');
        org.joda.time.Chronology chronology73 = dateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.weekOfWeekyear();
        java.lang.String str75 = dateTimeField74.getName();
        org.joda.time.DurationField durationField76 = dateTimeField74.getLeapDurationField();
        java.util.Locale.Category category78 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale79 = java.util.Locale.getDefault(category78);
        java.lang.String str80 = dateTimeField74.getAsShortText((long) 100, locale79);
        java.util.Locale locale82 = java.util.Locale.CHINA;
        java.util.Locale locale83 = locale82.stripExtensions();
        java.lang.String str84 = locale83.toLanguageTag();
        java.lang.String str85 = dateTimeField74.getAsText(0, locale83);
        java.util.Set<java.lang.Character> charSet86 = locale83.getExtensionKeys();
        java.lang.String str87 = dateTimeField48.getAsShortText((org.joda.time.ReadablePartial) localDate63, 117, locale83);
        java.lang.String str88 = locale83.getISO3Language();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "weekOfWeekyear" + "'", str75, "weekOfWeekyear");
        org.junit.Assert.assertNull(durationField76);
        org.junit.Assert.assertTrue("'" + category78 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category78.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale79);
// flaky:         org.junit.Assert.assertEquals(locale79.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1" + "'", str80, "1");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "zh-CN" + "'", str84, "zh-CN");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0" + "'", str85, "0");
        org.junit.Assert.assertNotNull(charSet86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "117" + "'", str87, "117");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "zho" + "'", str88, "zho");
    }

    @Test
    public void test04654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04654");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean25 = dateTime23.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        java.util.GregorianCalendar gregorianCalendar32 = dateTime31.toGregorianCalendar();
        int int33 = dateTime31.getHourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime31.withCenturyOfEra(7);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime39.toDateTimeISO();
        org.joda.time.Instant instant45 = dateTime39.toInstant();
        org.joda.time.Instant instant46 = instant45.toInstant();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone49.isLocalDateTimeGap(localDateTime51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime55 = dateTime53.withHourOfDay(0);
        boolean boolean56 = instant46.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant60 = instant46.withDurationAdded((org.joda.time.ReadableDuration) duration58, (-1));
        boolean boolean62 = instant60.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Calendar calendar68 = dateTime66.toCalendar(locale67);
        org.joda.time.DateTime dateTime70 = dateTime66.plusMillis((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime66.toDateTimeISO();
        org.joda.time.Instant instant72 = dateTime66.toInstant();
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant60, (org.joda.time.ReadableInstant) dateTime66, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withWeeksRemoved();
        org.joda.time.PeriodType periodType76 = periodType75.withYearsRemoved();
        org.joda.time.Period period77 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31, periodType75);
        org.joda.time.PeriodType periodType78 = periodType75.withYearsRemoved();
        org.joda.time.PeriodType periodType79 = periodType78.withDaysRemoved();
        org.joda.time.Period period80 = new org.joda.time.Period(5832000000L, (long) 491, periodType78);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gregorianCalendar32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 7 + "'", int33 == 7);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
    }

    @Test
    public void test04655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04655");
        org.joda.time.Period period1 = org.joda.time.Period.months((-27425230));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04656");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime5.weekyear();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime5, periodType12);
        int int14 = dateTime5.getSecondOfDay();
        org.joda.time.DateTime.Property property15 = dateTime5.weekyear();
        org.joda.time.DateTime dateTime16 = property15.roundHalfEvenCopy();
        int int17 = dateTime16.getWeekyear();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 86399 + "'", int14 == 86399);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
    }

    @Test
    public void test04657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04657");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        int int8 = property7.get();
        java.lang.String str9 = property7.toString();
        org.joda.time.DateTime dateTime10 = property7.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[hourOfHalfday]" + "'", str9, "Property[hourOfHalfday]");
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test04658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04658");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType6.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.Instant instant20 = dateTime14.toInstant();
        org.joda.time.Instant instant21 = instant20.toInstant();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        boolean boolean31 = instant21.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant35 = instant21.withDurationAdded((org.joda.time.ReadableDuration) duration33, (-1));
        boolean boolean37 = instant35.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime41.toDateTimeISO();
        org.joda.time.Instant instant47 = dateTime41.toInstant();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant35, (org.joda.time.ReadableInstant) dateTime41, periodType48);
        org.joda.time.PeriodType periodType50 = periodType48.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.Chronology chronology59 = dateTime54.getChronology();
        org.joda.time.Period period60 = new org.joda.time.Period((-259200000L), periodType50, chronology59);
        boolean boolean61 = dateTimeFieldType9.isSupported(chronology59);
        org.joda.time.DurationField durationField62 = durationFieldType8.getField(chronology59);
        int int64 = durationField62.getValue((-259200000L));
        java.lang.String str65 = durationField62.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-72) + "'", int64 == (-72));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hours" + "'", str65, "hours");
    }

    @Test
    public void test04659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04659");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getDisplayCountry();
        java.util.Locale.Builder builder4 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder7 = builder1.setUnicodeLocaleKeyword("it", "");
        java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("443");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setExtension('4', "de");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test04660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04660");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(0L, chronology1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray3 = mutablePeriod2.getFieldTypes();
        int int4 = mutablePeriod2.getDays();
        mutablePeriod2.addDays(1965);
        org.junit.Assert.assertNotNull(durationFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test04661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04661");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone4.isLocalDateTimeGap(localDateTime6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime10 = dateTime8.withHourOfDay(0);
        int int11 = dateTime10.getDayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTimeISO();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration17 = duration1.plus(31536000000L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration17);
    }

    @Test
    public void test04662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04662");
        org.joda.time.Duration duration9 = org.joda.time.Duration.millis((long) (short) -1);
        long long10 = duration9.getStandardMinutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.Instant instant20 = dateTime14.toInstant();
        org.joda.time.Instant instant21 = instant20.toInstant();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        boolean boolean31 = instant21.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant35 = instant21.withDurationAdded((org.joda.time.ReadableDuration) duration33, (-1));
        boolean boolean37 = instant35.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime41.toDateTimeISO();
        org.joda.time.Instant instant47 = dateTime41.toInstant();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant35, (org.joda.time.ReadableInstant) dateTime41, periodType48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Hours hours51 = period50.toStandardHours();
        org.joda.time.PeriodType periodType52 = period50.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(577, 2022, (-27425230), 731, 27423259, 948, (-19045), 249, periodType52);
        mutablePeriod53.add(829, 360000000, 138, 52, (-485), (-19045), 25860, 8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(periodType52);
    }

    @Test
    public void test04663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04663");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        boolean boolean9 = dateTime7.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property10 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds(10);
        org.joda.time.DateTime.Property property14 = dateTime11.yearOfEra();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        int int18 = property14.getMaximumShortTextLength(locale16);
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter2.withLocale(locale16);
        org.joda.time.format.PeriodPrinter periodPrinter20 = periodFormatter2.getPrinter();
        org.joda.time.format.PeriodParser periodParser21 = periodFormatter2.getParser();
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNull(periodPrinter20);
        org.junit.Assert.assertNull(periodParser21);
    }

    @Test
    public void test04664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04664");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        int int1 = period0.getDays();
        org.joda.time.Minutes minutes2 = period0.toStandardMinutes();
        org.joda.time.Period period4 = period0.withHours(870901920);
        org.joda.time.Period period5 = period0.toPeriod();
        org.joda.time.Period period7 = period5.minusWeeks(823);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test04665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04665");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Period period3 = period1.withWeeks((int) (short) -1);
        org.joda.time.Period period5 = period1.withDays(0);
        org.joda.time.Period period7 = period1.withWeeks(86399);
        org.joda.time.Period period9 = period1.withSeconds(100);
        org.joda.time.Duration duration11 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime15.weekyear();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime15, periodType22);
        org.joda.time.Period period25 = period23.plusWeeks(1439);
        org.joda.time.Period period27 = period25.plusMillis(69);
        org.joda.time.Period period28 = period1.withFields((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone37);
        boolean boolean41 = interval39.isAfter(100L);
        long long42 = interval39.getEndMillis();
        org.joda.time.Interval interval43 = interval39.toInterval();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Interval interval45 = interval43.withDurationBeforeEnd(readableDuration44);
        org.joda.time.Period period46 = interval43.toPeriod();
        org.joda.time.Seconds seconds47 = period46.toStandardSeconds();
        org.joda.time.PeriodType periodType48 = seconds47.getPeriodType();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 508, 86399L, periodType49);
        org.joda.time.PeriodType periodType51 = periodType49.withMinutesRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withMonthsRemoved();
        org.joda.time.PeriodType periodType53 = periodType51.withYearsRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        boolean boolean56 = periodType51.isSupported(durationFieldType55);
        org.joda.time.Period period58 = period30.withField(durationFieldType55, 5);
        org.joda.time.Period period59 = period25.withFields((org.joda.time.ReadablePeriod) period58);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
    }

    @Test
    public void test04666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04666");
        java.io.IOException iOException1 = new java.io.IOException("PT0H");
        java.io.IOException iOException4 = new java.io.IOException("2021-12-14T00:00:00.000Z");
        java.io.IOException iOException5 = new java.io.IOException("German", (java.lang.Throwable) iOException4);
        iOException1.addSuppressed((java.lang.Throwable) iOException5);
        java.io.IOException iOException8 = new java.io.IOException();
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException8);
        java.io.IOException iOException10 = new java.io.IOException("25725224", (java.lang.Throwable) iOException9);
        java.lang.Throwable throwable11 = null;
        java.io.IOException iOException12 = new java.io.IOException(throwable11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Throwable[] throwableArray15 = iOException12.getSuppressed();
        iOException10.addSuppressed((java.lang.Throwable) iOException12);
        iOException1.addSuppressed((java.lang.Throwable) iOException10);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test04667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04667");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 10, periodType4);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType4);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Hours hours8 = hours0.minus(hours7);
        java.lang.String str9 = hours8.toString();
        int int11 = hours8.getValue(0);
        java.lang.String str12 = hours8.toString();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT8H" + "'", str9, "PT8H");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT8H" + "'", str12, "PT8H");
    }

    @Test
    public void test04668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04668");
        org.joda.time.Period period1 = org.joda.time.Period.hours((-292275054));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04669");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime4.toDateTimeISO();
        org.joda.time.Instant instant10 = dateTime4.toInstant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        boolean boolean21 = instant11.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant25 = instant11.withDurationAdded((org.joda.time.ReadableDuration) duration23, (-1));
        boolean boolean27 = instant25.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime31.toInstant();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant25, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Calendar calendar46 = dateTime44.toCalendar(locale45);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((int) '4');
        org.joda.time.Chronology chronology49 = dateTime44.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.minutes();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        boolean boolean55 = dateTimeZone52.isStandardOffset((long) (byte) 100);
        boolean boolean57 = dateTimeZone52.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime62 = null;
        boolean boolean63 = dateTimeZone60.isLocalDateTimeGap(localDateTime62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime66 = dateTime64.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((-1L), dateTimeZone69);
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.util.Calendar calendar72 = dateTime70.toCalendar(locale71);
        org.joda.time.DateTime dateTime74 = dateTime70.plusMillis((int) '4');
        org.joda.time.DateTime dateTime75 = dateTime70.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        boolean boolean80 = dateTime78.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes81 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Duration duration82 = minutes81.toStandardDuration();
        org.joda.time.Duration duration83 = minutes81.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableDuration) duration83);
        int int85 = dateTimeZone52.getOffset((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology86 = chronology49.withZone(dateTimeZone52);
        boolean boolean87 = durationFieldType40.isSupported(chronology49);
        boolean boolean88 = periodType38.isSupported(durationFieldType40);
        org.joda.time.Period period89 = new org.joda.time.Period((long) 96, periodType38);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(minutes81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test04670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04670");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        java.lang.String str15 = mutablePeriod1.toString();
        org.joda.time.PeriodType periodType16 = mutablePeriod1.getPeriodType();
        int int17 = mutablePeriod1.size();
        org.joda.time.Days days18 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) mutablePeriod1);
        org.joda.time.Duration duration19 = days18.toStandardDuration();
        org.joda.time.Days days20 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod21 = days20.toMutablePeriod();
        org.joda.time.Duration duration22 = days20.toStandardDuration();
        org.joda.time.Days days23 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod24 = days23.toMutablePeriod();
        org.joda.time.Duration duration25 = days23.toStandardDuration();
        boolean boolean26 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        org.joda.time.Duration duration29 = days27.toStandardDuration();
        org.joda.time.Days days30 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod31 = days30.toMutablePeriod();
        org.joda.time.Duration duration32 = days30.toStandardDuration();
        boolean boolean33 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Days days34 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod35 = days34.toMutablePeriod();
        org.joda.time.Duration duration36 = days34.toStandardDuration();
        boolean boolean37 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration36);
        boolean boolean38 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMillis((int) '4');
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration50 = duration36.plus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration51 = duration19.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) 1439, 0L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.millis((long) (short) -1);
        long long57 = duration56.getMillis();
        org.joda.time.Days days58 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod59 = days58.toMutablePeriod();
        org.joda.time.Duration duration60 = days58.toStandardDuration();
        long long61 = duration60.getStandardHours();
        boolean boolean62 = duration56.isLongerThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration64 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) 'x');
        org.joda.time.Duration duration66 = duration54.plus((long) (-1));
        org.joda.time.Duration duration69 = new org.joda.time.Duration((long) 1439, 0L);
        org.joda.time.Duration duration71 = org.joda.time.Duration.millis((long) (short) -1);
        long long72 = duration71.getMillis();
        org.joda.time.Days days73 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod74 = days73.toMutablePeriod();
        org.joda.time.Duration duration75 = days73.toStandardDuration();
        long long76 = duration75.getStandardHours();
        boolean boolean77 = duration71.isLongerThan((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Duration duration79 = duration69.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) 'x');
        int int80 = duration54.compareTo((org.joda.time.ReadableDuration) duration69);
        long long81 = duration69.getMillis();
        boolean boolean82 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Period period84 = new org.joda.time.Period((long) (byte) 10);
        int int85 = period84.getSeconds();
        org.joda.time.Period period87 = period84.minusDays((int) (short) 1);
        org.joda.time.Duration duration88 = period87.toStandardDuration();
        org.joda.time.Period period89 = duration88.toPeriod();
        org.joda.time.Duration duration92 = new org.joda.time.Duration((long) 1439, 0L);
        org.joda.time.Duration duration94 = duration88.withDurationAdded((org.joda.time.ReadableDuration) duration92, 182);
        org.joda.time.Duration duration95 = duration69.minus((org.joda.time.ReadableDuration) duration94);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P6DT35S" + "'", str15, "P6DT35S");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 144L + "'", long61 == 144L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNotNull(days73);
        org.junit.Assert.assertNotNull(mutablePeriod74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 144L + "'", long76 == 144L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1439L) + "'", long81 == (-1439L));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(duration95);
    }

    @Test
    public void test04671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04671");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((-1L));
        java.lang.String str2 = duration1.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        boolean boolean7 = dateTime5.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property8 = dateTime5.millisOfSecond();
        int int9 = property8.getLeapAmount();
        org.joda.time.DateTime dateTime10 = property8.roundHalfEvenCopy();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.time();
        org.joda.time.Period period12 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime10, periodType11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime21.plusMillis((int) '#');
        java.util.Date date24 = dateTime21.toDate();
        org.joda.time.DateTime.Property property25 = dateTime21.weekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone28.isLocalDateTimeGap(localDateTime30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = dateTime32.plusHours((int) 'a');
        org.joda.time.DateTime dateTime36 = dateTime32.plusHours(10);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property44 = dateTime42.property(dateTimeFieldType43);
        int int45 = dateTime36.get(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType43.getRangeDurationType();
        int int47 = dateTime21.get(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType43.getRangeDurationType();
        boolean boolean49 = periodType11.isSupported(durationFieldType48);
        org.joda.time.PeriodType periodType50 = periodType11.withMinutesRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT-0.001S" + "'", str2, "PT-0.001S");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 11 + "'", int47 == 11);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(periodType50);
    }

    @Test
    public void test04672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04672");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime2.minusSeconds((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        boolean boolean17 = interval13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime16.withZoneRetainFields(dateTimeZone20);
        int int26 = dateTimeZone20.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime27 = dateTime6.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime.Property property28 = dateTime6.dayOfWeek();
        org.joda.time.DateTime.Property property29 = dateTime6.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime33.plusMonths((int) (byte) 1);
        int int40 = property29.compareTo((org.joda.time.ReadableInstant) dateTime39);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = locale41.getCountry();
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayVariant(locale44);
        java.lang.String str48 = property29.getAsShortText(locale41);
        org.joda.time.DateTime dateTime49 = property29.withMinimumValue();
        org.joda.time.DateTime dateTime50 = property29.roundFloorCopy();
        org.joda.time.DateTime dateTime51 = property29.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "CN" + "'", str43, "CN");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "8" + "'", str48, "8");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test04673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04673");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime14 = dateTime9.toLocalDateTime();
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Calendar calendar17 = dateTime9.toCalendar(locale15);
        org.joda.time.DateTime dateTime19 = dateTime9.plusYears((int) (short) 0);
        boolean boolean20 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime9.toDateTime();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone25.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime31 = dateTime29.withHourOfDay(0);
        org.joda.time.DateTime dateTime33 = dateTime29.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime35 = dateTime29.withWeekyear((int) (byte) 0);
        int int36 = dateTime35.getEra();
        boolean boolean37 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime39 = dateTime9.withWeekyear(360);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.DateTime dateTime41 = property40.withMaximumValue();
        boolean boolean42 = dateTime41.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test04674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04674");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Period period13 = interval10.toPeriod();
        org.joda.time.Period period15 = period13.minusMonths((-1));
        org.joda.time.Period period17 = period15.plusSeconds((int) (byte) 10);
        org.joda.time.Period period19 = period17.minusSeconds(1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime34 = dateTime29.toLocalDateTime();
        boolean boolean35 = dateTimeZone22.isLocalDateTimeGap(localDateTime34);
        long long38 = dateTimeZone22.adjustOffset(2L, true);
        long long40 = dateTimeZone22.nextTransition((long) 23);
        boolean boolean41 = dateTimeZone22.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) period17, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 23L + "'", long40 == 23L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test04675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04675");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime9.withZoneRetainFields(dateTimeZone13);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
    }

    @Test
    public void test04676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04676");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Period period13 = interval10.toPeriod();
        org.joda.time.Interval interval14 = interval10.toInterval();
        org.joda.time.Days days15 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval10);
        org.joda.time.DateTime dateTime16 = interval10.getEnd();
        org.joda.time.Days days17 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval10);
        boolean boolean18 = interval10.containsNow();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        int int25 = dateTime22.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime22.getZone();
        org.joda.time.TimeOfDay timeOfDay27 = dateTime22.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime.Property property37 = dateTime31.weekyear();
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((long) (short) -1);
        long long40 = duration39.getMillis();
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType42 = periodType41.withMinutesRemoved();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration39, periodType41);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadablePeriod) period43);
        mutableInterval44.setEndMillis(0L);
        long long47 = mutableInterval44.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        int int54 = dateTime51.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime51.getZone();
        org.joda.time.TimeOfDay timeOfDay56 = dateTime51.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime60.toDateTimeISO();
        org.joda.time.DateTime.Property property66 = dateTime60.weekyear();
        org.joda.time.Duration duration68 = org.joda.time.Duration.millis((long) (short) -1);
        long long69 = duration68.getMillis();
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType71 = periodType70.withMinutesRemoved();
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableDuration) duration68, periodType70);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadablePeriod) period72);
        boolean boolean74 = mutableInterval44.contains((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Interval interval75 = interval10.gap((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.Instant instant77 = new org.joda.time.Instant((java.lang.Object) "8");
        org.joda.time.Instant instant79 = instant77.minus((-100L));
        boolean boolean81 = instant79.isAfter(1047600035L);
        org.joda.time.Instant instant84 = instant79.withDurationAdded((long) 359, 491);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval44.setEnd((org.joda.time.ReadableInstant) instant84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 59 + "'", int54 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(interval75);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(instant84);
    }

    @Test
    public void test04677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04677");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Interval interval16 = interval7.gap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTimeZone28.isStandardOffset((long) (byte) 100);
        boolean boolean33 = dateTimeZone28.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone36.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        boolean boolean56 = dateTime54.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = minutes57.toStandardDuration();
        org.joda.time.Duration duration59 = minutes57.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration59);
        int int61 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology62 = chronology25.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField63 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField64 = chronology25.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology25.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) interval14, chronology25);
        org.joda.time.DateTimeField dateTimeField67 = chronology25.secondOfDay();
        java.util.Locale locale70 = new java.util.Locale("PT518400S");
        java.lang.String str71 = dateTimeField67.getAsText((long) 1439, locale70);
        long long73 = dateTimeField67.remainder((long) 601);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertEquals(locale70.toString(), "pt518400s");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1" + "'", str71, "1");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 601L + "'", long73 == 601L);
    }

    @Test
    public void test04678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04678");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property29 = dateTime26.property(dateTimeFieldType28);
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        boolean boolean32 = dateTimeField30.isLeap((long) 829);
        int int34 = dateTimeField30.getLeapAmount(2L);
        long long36 = dateTimeField30.remainder(31536000000L);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 345600000L + "'", long36 == 345600000L);
    }

    @Test
    public void test04679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04679");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology19);
        mutablePeriod1.setPeriod((long) (-1), chronology19);
        org.joda.time.PeriodType periodType23 = mutablePeriod1.getPeriodType();
        mutablePeriod1.setMinutes(108);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.setValue(107, 86399);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 107");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(periodType23);
    }

    @Test
    public void test04680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04680");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTimeISO();
        org.joda.time.Instant instant36 = dateTime30.toInstant();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadableInstant) dateTime30, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withWeeksRemoved();
        java.lang.String str40 = periodType39.toString();
        org.joda.time.PeriodType periodType41 = periodType39.withMillisRemoved();
        org.joda.time.PeriodType periodType42 = periodType39.withMillisRemoved();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PeriodType[Minutes]" + "'", str40, "PeriodType[Minutes]");
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
    }

    @Test
    public void test04681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04681");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        boolean boolean23 = dateTime21.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property24 = dateTime21.millisOfSecond();
        org.joda.time.DateTime dateTime25 = property24.getDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds(10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(0L, chronology29);
        org.joda.time.Period period32 = period30.plusMillis(100);
        int int33 = period32.getHours();
        org.joda.time.Period period35 = period32.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime39.toDateTimeISO();
        org.joda.time.Instant instant45 = dateTime39.toInstant();
        org.joda.time.Instant instant46 = instant45.toInstant();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone49.isLocalDateTimeGap(localDateTime51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime55 = dateTime53.withHourOfDay(0);
        boolean boolean56 = instant46.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant60 = instant46.withDurationAdded((org.joda.time.ReadableDuration) duration58, (-1));
        boolean boolean62 = instant60.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Calendar calendar68 = dateTime66.toCalendar(locale67);
        org.joda.time.DateTime dateTime70 = dateTime66.plusMillis((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime66.toDateTimeISO();
        org.joda.time.Instant instant72 = dateTime66.toInstant();
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant60, (org.joda.time.ReadableInstant) dateTime66, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withWeeksRemoved();
        org.joda.time.PeriodType periodType76 = periodType75.withYearsRemoved();
        org.joda.time.Period period77 = period32.normalizedStandard(periodType76);
        org.joda.time.Days days78 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod79 = days78.toMutablePeriod();
        mutablePeriod79.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval82 = null;
        mutablePeriod79.add(readableInterval82);
        org.joda.time.DurationFieldType durationFieldType84 = org.joda.time.DurationFieldType.eras();
        int int85 = mutablePeriod79.get(durationFieldType84);
        int int86 = periodType76.indexOf(durationFieldType84);
        org.joda.time.Period period87 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27, periodType76);
        long long88 = duration5.getMillis();
        org.joda.time.Duration duration89 = duration5.toDuration();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(days78);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 518400000L + "'", long88 == 518400000L);
        org.junit.Assert.assertNotNull(duration89);
    }

    @Test
    public void test04682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04682");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.Hours hours33 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime35 = dateTime23.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        int int37 = property9.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        boolean boolean48 = interval44.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.TimeOfDay timeOfDay49 = dateTime47.toTimeOfDay();
        int int50 = property9.compareTo((org.joda.time.ReadablePartial) timeOfDay49);
        org.joda.time.DateTime dateTime52 = property9.addToCopy(518400000L);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime56.toDateTimeISO();
        org.joda.time.Instant instant62 = dateTime56.toInstant();
        org.joda.time.Instant instant63 = instant62.toInstant();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((-1L), dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime68 = null;
        boolean boolean69 = dateTimeZone66.isLocalDateTimeGap(localDateTime68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime72 = dateTime70.withHourOfDay(0);
        boolean boolean73 = instant63.isEqual((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant77 = instant63.withDurationAdded((org.joda.time.ReadableDuration) duration75, (-1));
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((-1L), dateTimeZone80);
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.util.Calendar calendar83 = dateTime81.toCalendar(locale82);
        org.joda.time.DateTime dateTime85 = dateTime81.plusMillis((int) '4');
        org.joda.time.DateTime dateTime86 = dateTime81.toDateTimeISO();
        org.joda.time.DateTime dateTime88 = dateTime86.plusMillis((int) '#');
        int int89 = instant77.compareTo((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime90 = dateTime86.toDateTime();
        java.util.Locale locale91 = java.util.Locale.CHINA;
        java.util.Locale locale92 = locale91.stripExtensions();
        java.lang.String str93 = locale91.getISO3Language();
        java.lang.String str94 = locale91.getDisplayScript();
        java.util.Calendar calendar95 = dateTime86.toCalendar(locale91);
        java.lang.String str96 = locale91.getLanguage();
        java.lang.String str97 = property9.getAsText(locale91);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = locale91.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514040203,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=0,MILLISECOND=203,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar83);
        org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "zho" + "'", str93, "zho");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(calendar95);
        org.junit.Assert.assertEquals(calendar95.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "zh" + "'", str96, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str97 + "' != '" + "14" + "'", str97, "14");
    }

    @Test
    public void test04683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04683");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 10, periodType4);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType4);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Hours hours9 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) interval8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime13.toDateTimeISO();
        org.joda.time.Instant instant19 = dateTime13.toInstant();
        org.joda.time.Instant instant20 = instant19.toInstant();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(0);
        boolean boolean30 = instant20.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant34 = instant20.withDurationAdded((org.joda.time.ReadableDuration) duration32, (-1));
        org.joda.time.Hours hours35 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours37 = hours35.plus((int) (byte) 100);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant20, (org.joda.time.ReadablePeriod) hours37);
        org.joda.time.Hours hours39 = org.joda.time.Hours.EIGHT;
        org.joda.time.DurationFieldType durationFieldType40 = hours39.getFieldType();
        org.joda.time.Hours hours42 = hours39.minus((int) (byte) 1);
        org.joda.time.Hours hours43 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours44 = hours43.negated();
        org.joda.time.DurationFieldType durationFieldType45 = hours44.getFieldType();
        org.joda.time.Hours hours47 = hours44.multipliedBy((int) 'a');
        org.joda.time.Hours hours48 = hours42.plus(hours47);
        boolean boolean49 = hours37.isGreaterThan(hours47);
        org.joda.time.Hours hours51 = hours47.dividedBy(502);
        org.joda.time.Hours hours52 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.Period period53 = new org.joda.time.Period((java.lang.Object) hours52);
        org.joda.time.Hours hours54 = hours47.plus(hours52);
        boolean boolean55 = hours9.isGreaterThan(hours52);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(hours42);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(hours44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(hours54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test04684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04684");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.Instant instant20 = dateTime19.toInstant();
        org.joda.time.Hours hours21 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTime dateTime23 = dateTime11.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight24 = dateTime23.toDateMidnight();
        int int25 = dateMidnight24.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test04685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04685");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 59);
        int int3 = dateTime2.getEra();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds5 = org.joda.time.Seconds.secondsBetween(readableInstant0, (org.joda.time.ReadableInstant) instant4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadableInstant objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(instant4);
    }

    @Test
    public void test04686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04686");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        boolean boolean12 = interval6.isBefore((long) (-1));
        boolean boolean13 = interval6.isAfterNow();
        long long14 = interval6.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.Instant instant24 = dateTime18.toInstant();
        org.joda.time.Instant instant25 = instant24.toInstant();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType36 = periodType35.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadableInstant) dateTime34, periodType35);
        org.joda.time.Instant instant40 = instant24.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant24.toDateTimeISO();
        org.joda.time.Chronology chronology42 = instant24.getChronology();
        org.joda.time.Interval interval43 = interval6.withChronology(chronology42);
        java.lang.String str44 = interval6.toString();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z" + "'", str44, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test04687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04687");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime3.getZone();
        org.joda.time.DateTime dateTime9 = dateTime3.withWeekyear(69);
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test04688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04688");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("1970-01-01T00:00:00.069Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1970-01-01T00:00:00.069Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04689");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Duration duration42 = minutes40.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42);
        int int44 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology45 = chronology8.withZone(dateTimeZone11);
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10);
        int int48 = period47.getSeconds();
        org.joda.time.Period period50 = period47.minusHours(100);
        int int51 = period50.getDays();
        int[] intArray54 = chronology8.get((org.joda.time.ReadablePeriod) period50, (-1L), (long) 'a');
        org.joda.time.DateTimeField dateTimeField55 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField56 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField57 = chronology8.millis();
        // The following exception was thrown during execution in test generation
        try {
            int int59 = durationField57.getValue((-32373172799900L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -32373172799900");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 98]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test04690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04690");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime3.toCalendar(locale9);
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        boolean boolean18 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime19 = dateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime.Property property20 = dateTime19.monthOfYear();
        org.joda.time.DateTime dateTime21 = property20.withMinimumValue();
        org.joda.time.DateTime dateTime22 = property20.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test04691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04691");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.TimeOfDay timeOfDay11 = dateTime9.toTimeOfDay();
        org.joda.time.Chronology chronology12 = timeOfDay11.getChronology();
        java.lang.String str13 = timeOfDay11.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone18);
        boolean boolean22 = interval20.isAfter(100L);
        long long23 = interval20.getEndMillis();
        org.joda.time.Interval interval24 = interval20.toInterval();
        boolean boolean26 = interval20.isBefore((long) (-1));
        boolean boolean27 = interval20.isBeforeNow();
        boolean boolean28 = interval20.isAfterNow();
        org.joda.time.DateTime dateTime29 = interval20.getStart();
        org.joda.time.LocalTime localTime30 = dateTime29.toLocalTime();
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) timeOfDay11, (org.joda.time.ReadablePartial) localTime30);
        org.joda.time.Minutes minutes32 = minutes31.negated();
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes35 = minutes33.minus(2);
        org.joda.time.Minutes minutes37 = minutes35.minus(1);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes40 = minutes38.minus(2);
        boolean boolean41 = minutes37.isGreaterThan(minutes38);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime45.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        boolean boolean55 = dateTime53.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration57 = minutes56.toStandardDuration();
        org.joda.time.Minutes minutes59 = minutes56.minus((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = dateTime63.toCalendar(locale64);
        org.joda.time.DateTime dateTime67 = dateTime63.plusMillis((int) '4');
        org.joda.time.DateTime dateTime68 = dateTime63.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        boolean boolean73 = dateTime71.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes74 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration75 = minutes74.toStandardDuration();
        org.joda.time.Minutes minutes77 = minutes74.minus((int) (byte) 100);
        boolean boolean78 = minutes59.isLessThan(minutes77);
        org.joda.time.Minutes minutes79 = minutes59.negated();
        org.joda.time.Minutes minutes81 = minutes79.multipliedBy((int) '#');
        org.joda.time.Minutes minutes82 = minutes37.minus(minutes79);
        org.joda.time.Minutes minutes84 = minutes37.plus(679);
        org.joda.time.Minutes minutes85 = minutes84.negated();
        org.joda.time.Minutes minutes86 = minutes31.plus(minutes84);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "T07:14:00.529" + "'", str13, "T07:14:00.529");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(minutes74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(minutes77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(minutes79);
        org.junit.Assert.assertNotNull(minutes81);
        org.junit.Assert.assertNotNull(minutes82);
        org.junit.Assert.assertNotNull(minutes84);
        org.junit.Assert.assertNotNull(minutes85);
        org.junit.Assert.assertNotNull(minutes86);
    }

    @Test
    public void test04692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04692");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setHours((int) '#');
        mutablePeriod1.addMillis((int) (byte) 100);
        mutablePeriod1.addYears(0);
        mutablePeriod1.addWeeks((int) (short) 100);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) 1439, 0L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.millis((long) (short) -1);
        long long17 = duration16.getMillis();
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        long long21 = duration20.getStandardHours();
        boolean boolean22 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration24 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.Days days29 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod30 = days29.toMutablePeriod();
        org.joda.time.Duration duration31 = days29.toStandardDuration();
        org.joda.time.Days days32 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod33 = days32.toMutablePeriod();
        org.joda.time.Duration duration34 = days32.toStandardDuration();
        boolean boolean35 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        org.joda.time.Days days39 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod40 = days39.toMutablePeriod();
        org.joda.time.Duration duration41 = days39.toStandardDuration();
        boolean boolean42 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Days days43 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod44 = days43.toMutablePeriod();
        org.joda.time.Duration duration45 = days43.toStandardDuration();
        boolean boolean46 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration45);
        boolean boolean47 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period58 = period56.minusMinutes((int) ' ');
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) period56);
        int int60 = dateTime27.getWeekyear();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.Days days67 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod68 = days67.toMutablePeriod();
        org.joda.time.Duration duration69 = days67.toStandardDuration();
        org.joda.time.PeriodType periodType70 = days67.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Calendar calendar76 = dateTime74.toCalendar(locale75);
        org.joda.time.DateTime dateTime78 = dateTime74.plusMillis((int) '4');
        org.joda.time.Chronology chronology79 = dateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.hourOfHalfday();
        org.joda.time.Period period81 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType70, chronology79);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTimeField dateTimeField83 = chronology79.millisOfDay();
        org.joda.time.Interval interval84 = new org.joda.time.Interval((-259200000L), (long) '#', chronology79);
        mutableInterval61.setChronology(chronology79);
        org.joda.time.DateTime dateTime86 = dateTime27.withChronology(chronology79);
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration14, chronology79);
        mutablePeriod1.setMonths(27423259);
        org.joda.time.PeriodType periodType90 = mutablePeriod1.getPeriodType();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 144L + "'", long21 == 144L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(days67);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(periodType90);
    }

    @Test
    public void test04693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04693");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("613");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"613\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04694");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusDays((int) (short) 1);
        org.joda.time.Duration duration5 = period4.toStandardDuration();
        org.joda.time.Period period6 = duration5.toPeriod();
        int int7 = period6.getYears();
        int int8 = period6.getWeeks();
        org.joda.time.Period period10 = period6.minusMinutes(146);
        org.joda.time.Period period12 = period6.minusYears(433);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test04695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04695");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) dateTime8, dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.Instant instant24 = dateTime18.toInstant();
        org.joda.time.Instant instant25 = instant24.toInstant();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone28.isLocalDateTimeGap(localDateTime30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        boolean boolean35 = instant25.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant39 = instant25.withDurationAdded((org.joda.time.ReadableDuration) duration37, (-1));
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime50 = dateTime48.plusMillis((int) '#');
        int int51 = instant39.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = dateTime48.toDateTime();
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Locale locale54 = locale53.stripExtensions();
        java.lang.String str55 = locale53.getISO3Language();
        java.lang.String str56 = locale53.getDisplayScript();
        java.util.Calendar calendar57 = dateTime48.toCalendar(locale53);
        int int58 = property14.getMaximumShortTextLength(locale53);
        org.joda.time.DateTime dateTime59 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime61 = property14.setCopy("698");
        org.joda.time.DateTime dateTime62 = property14.getDateTime();
        org.joda.time.DateTime dateTime63 = dateTime62.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "zho" + "'", str55, "zho");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test04696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04696");
        org.joda.time.Period period8 = new org.joda.time.Period(25948, 203, 948, 381, 333, (-994), 750, (-994));
    }

    @Test
    public void test04697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04697");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        boolean boolean23 = dateTime21.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property24 = dateTime21.millisOfSecond();
        org.joda.time.DateTime dateTime25 = property24.getDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds(10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(0L, chronology29);
        org.joda.time.Period period32 = period30.plusMillis(100);
        int int33 = period32.getHours();
        org.joda.time.Period period35 = period32.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime39.toDateTimeISO();
        org.joda.time.Instant instant45 = dateTime39.toInstant();
        org.joda.time.Instant instant46 = instant45.toInstant();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone49.isLocalDateTimeGap(localDateTime51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime55 = dateTime53.withHourOfDay(0);
        boolean boolean56 = instant46.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant60 = instant46.withDurationAdded((org.joda.time.ReadableDuration) duration58, (-1));
        boolean boolean62 = instant60.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Calendar calendar68 = dateTime66.toCalendar(locale67);
        org.joda.time.DateTime dateTime70 = dateTime66.plusMillis((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime66.toDateTimeISO();
        org.joda.time.Instant instant72 = dateTime66.toInstant();
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant60, (org.joda.time.ReadableInstant) dateTime66, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withWeeksRemoved();
        org.joda.time.PeriodType periodType76 = periodType75.withYearsRemoved();
        org.joda.time.Period period77 = period32.normalizedStandard(periodType76);
        org.joda.time.Days days78 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod79 = days78.toMutablePeriod();
        mutablePeriod79.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval82 = null;
        mutablePeriod79.add(readableInterval82);
        org.joda.time.DurationFieldType durationFieldType84 = org.joda.time.DurationFieldType.eras();
        int int85 = mutablePeriod79.get(durationFieldType84);
        int int86 = periodType76.indexOf(durationFieldType84);
        org.joda.time.Period period87 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27, periodType76);
        org.joda.time.Duration duration88 = duration5.toDuration();
        java.lang.String str89 = duration5.toString();
        java.lang.String str90 = duration5.toString();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(days78);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "PT518400S" + "'", str89, "PT518400S");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "PT518400S" + "'", str90, "PT518400S");
    }

    @Test
    public void test04698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04698");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        java.lang.String str10 = dateTimeField9.getName();
        org.joda.time.DurationField durationField11 = dateTimeField9.getLeapDurationField();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.lang.String str15 = dateTimeField9.getAsShortText((long) 100, locale14);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.toLanguageTag();
        java.lang.String str20 = dateTimeField9.getAsText(0, locale18);
        int int22 = dateTimeField9.getMinimumValue((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField9.getType();
        boolean boolean25 = dateTimeField9.isLeap(1047600035L);
        boolean boolean26 = dateTimeField9.isLenient();
        int int28 = dateTimeField9.getLeapAmount((long) (byte) 10);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekOfWeekyear" + "'", str10, "weekOfWeekyear");
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-CN" + "'", str19, "zh-CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test04699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04699");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        mutablePeriod1.setMinutes(86399);
        mutablePeriod1.clear();
        mutablePeriod1.addHours(999);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(34, 34, (int) (short) 0, 7);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10);
        int int27 = period26.getSeconds();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period30 = period26.withFieldAdded(durationFieldType28, 86399);
        org.joda.time.DurationFieldType durationFieldType32 = period26.getFieldType(1);
        mutablePeriod24.set(durationFieldType32, (int) 'u');
        mutablePeriod24.addHours((int) (short) 100);
        mutablePeriod24.setSeconds((int) (byte) 100);
        mutablePeriod1.add((org.joda.time.ReadablePeriod) mutablePeriod24);
        mutablePeriod1.setDays(292278993);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType32);
    }

    @Test
    public void test04700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04700");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = dateTime8.withWeekyear((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime8.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.monthOfYear();
        int int16 = dateTime14.getYear();
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra(86337998);
        int int19 = dateTime18.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 14 + "'", int19 == 14);
    }

    @Test
    public void test04701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04701");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 59);
        boolean boolean13 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime12.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime12.getZone();
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        mutablePeriod18.setSeconds((int) (byte) 0);
        mutablePeriod18.setDays((int) 'a');
        mutablePeriod18.addSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology27 = null;
        mutablePeriod18.setPeriod(10L, (long) (byte) 1, chronology27);
        int int29 = mutablePeriod18.getYears();
        org.joda.time.Period period34 = new org.joda.time.Period((int) (byte) 1, 0, (-1), 10);
        mutablePeriod18.mergePeriod((org.joda.time.ReadablePeriod) period34);
        int int36 = mutablePeriod18.getDays();
        org.joda.time.DateTime dateTime37 = dateTime16.minus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Calendar calendar46 = dateTime44.toCalendar(locale45);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((int) '4');
        org.joda.time.Chronology chronology49 = dateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfHalfday();
        org.joda.time.DateTime dateTime51 = dateTime40.withChronology(chronology49);
        int int52 = dateTime40.getYear();
        int int53 = dateTime40.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Calendar calendar61 = dateTime59.toCalendar(locale60);
        org.joda.time.DateTime dateTime63 = dateTime59.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime64 = dateTime59.toLocalDateTime();
        boolean boolean65 = dateTimeZone55.isLocalDateTimeGap(localDateTime64);
        org.joda.time.DateTime dateTime66 = dateTime40.toDateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime67 = dateTime16.toDateTime(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((-1L), dateTimeZone70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Calendar calendar73 = dateTime71.toCalendar(locale72);
        org.joda.time.DateTime dateTime75 = dateTime71.plusMillis((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime71.toDateTimeISO();
        org.joda.time.Instant instant77 = dateTime71.toInstant();
        org.joda.time.Instant instant78 = instant77.toInstant();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((-1L), dateTimeZone81);
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.util.Calendar calendar84 = dateTime82.toCalendar(locale83);
        org.joda.time.DateTime dateTime86 = dateTime82.plusMillis((int) '4');
        org.joda.time.DateTime dateTime87 = dateTime82.toDateTimeISO();
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType89 = periodType88.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant77, (org.joda.time.ReadableInstant) dateTime87, periodType88);
        org.joda.time.Instant instant93 = instant77.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime94 = instant77.toMutableDateTimeISO();
        int int95 = dateTimeZone55.getOffset((org.joda.time.ReadableInstant) instant77);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 45 + "'", int53 == 45);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertNotNull(mutableDateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test04702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04702");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 2, (long) 23);
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        mutablePeriod5.setSeconds((int) (byte) 0);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod5);
        mutablePeriod5.setPeriod((long) 100);
        org.joda.time.ReadableInterval readableInterval11 = null;
        mutablePeriod5.setPeriod(readableInterval11);
        mutablePeriod5.setMillis(577);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = mutablePeriod5.getValue(754844);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 754844");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test04703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04703");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = periodFormatter3.getParseType();
        org.joda.time.PeriodType periodType5 = periodFormatter3.getParseType();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter3.withLocale(locale6);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, periodType10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(periodType10);
        org.joda.time.Hours hours13 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(0L, chronology15);
        org.joda.time.Period period18 = period16.plusMillis(100);
        int int19 = period18.getHours();
        org.joda.time.Period period21 = period18.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTimeISO();
        org.joda.time.Instant instant31 = dateTime25.toInstant();
        org.joda.time.Instant instant32 = instant31.toInstant();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone35.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        boolean boolean42 = instant32.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant46 = instant32.withDurationAdded((org.joda.time.ReadableDuration) duration44, (-1));
        boolean boolean48 = instant46.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Calendar calendar54 = dateTime52.toCalendar(locale53);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime52.toDateTimeISO();
        org.joda.time.Instant instant58 = dateTime52.toInstant();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant46, (org.joda.time.ReadableInstant) dateTime52, periodType59);
        org.joda.time.PeriodType periodType61 = periodType59.withWeeksRemoved();
        org.joda.time.PeriodType periodType62 = periodType61.withYearsRemoved();
        org.joda.time.Period period63 = period18.normalizedStandard(periodType62);
        org.joda.time.Period period64 = new org.joda.time.Period((java.lang.Object) mutablePeriod12, periodType62);
        org.joda.time.format.PeriodFormatter periodFormatter65 = periodFormatter3.withParseType(periodType62);
        boolean boolean66 = periodFormatter65.isParser();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType69 = periodType68.withMillisRemoved();
        org.joda.time.Period period70 = mutableInterval67.toPeriod(periodType68);
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter65.withParseType(periodType68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period72 = org.joda.time.Period.parse("871", periodFormatter71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodType5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(periodFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(periodFormatter71);
    }

    @Test
    public void test04704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04704");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) 'a');
        org.joda.time.DateTime dateTime10 = dateTime6.plusHours(10);
        org.joda.time.DateTime.Property property11 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        int int13 = property11.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04705");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("yearOfEra");
        java.lang.String str15 = locale14.getVariant();
        java.lang.String str16 = locale14.getDisplayLanguage();
        java.util.Locale.Builder builder17 = builder12.setLocale(locale14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = property7.setCopy("thu", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"thu\" for hourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test04706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04706");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(870901920);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04707");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime3.plus(59L);
        org.joda.time.LocalDateTime localDateTime12 = dateTime3.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        long long25 = dateTimeField23.roundCeiling((long) 6);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField23.getType();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        boolean boolean28 = localDateTime12.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        boolean boolean39 = dateTime32.equals((java.lang.Object) dateTime38);
        int int40 = dateTime32.getMinuteOfHour();
        org.joda.time.DateTime dateTime41 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Days days44 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod45 = days44.toMutablePeriod();
        org.joda.time.Duration duration46 = days44.toStandardDuration();
        org.joda.time.PeriodType periodType47 = days44.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.Chronology chronology56 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.hourOfHalfday();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType47, chronology56);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTimeField dateTimeField60 = chronology56.millisOfDay();
        boolean boolean62 = dateTimeField60.isLeap((long) 1439);
        long long64 = dateTimeField60.roundHalfCeiling((-82737998L));
        java.lang.String str66 = dateTimeField60.getAsText(10L);
        int int68 = dateTimeField60.getLeapAmount((-100L));
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((-1L), dateTimeZone71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Calendar calendar74 = dateTime72.toCalendar(locale73);
        int int75 = dateTime72.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime72.getZone();
        org.joda.time.TimeOfDay timeOfDay77 = dateTime72.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone79);
        org.joda.time.LocalTime localTime81 = dateTime80.toLocalTime();
        org.joda.time.Days days82 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) timeOfDay77, (org.joda.time.ReadablePartial) localTime81);
        int int83 = localTime81.size();
        int int84 = dateTimeField60.getMinimumValue((org.joda.time.ReadablePartial) localTime81);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((-1L), dateTimeZone87);
        java.util.Locale locale89 = java.util.Locale.KOREAN;
        java.util.Calendar calendar90 = dateTime88.toCalendar(locale89);
        int int91 = dateTime88.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone92 = dateTime88.getZone();
        org.joda.time.TimeOfDay timeOfDay93 = dateTime88.toTimeOfDay();
        int int94 = timeOfDay93.size();
        org.joda.time.Period period95 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime81, (org.joda.time.ReadablePartial) timeOfDay93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period96 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime12, (org.joda.time.ReadablePartial) timeOfDay93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-82737998L) + "'", long64 == (-82737998L));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "10" + "'", str66, "10");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 59 + "'", int75 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(days82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 59 + "'", int91 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertNotNull(timeOfDay93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4);
        org.junit.Assert.assertNotNull(period95);
    }

    @Test
    public void test04708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04708");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTimeISO();
        org.joda.time.Instant instant30 = dateTime24.toInstant();
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        boolean boolean41 = instant31.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant45 = instant31.withDurationAdded((org.joda.time.ReadableDuration) duration43, (-1));
        boolean boolean47 = instant45.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTimeISO();
        org.joda.time.Instant instant57 = dateTime51.toInstant();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant45, (org.joda.time.ReadableInstant) dateTime51, periodType58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadablePeriod) period59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        boolean boolean63 = interval61.isAfter(2360460009600096L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test04709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04709");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType6 = periodType5.withMinutesRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, periodType6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology18);
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds22 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds23 = seconds21.minus(seconds22);
        org.joda.time.Duration duration24 = seconds21.toStandardDuration();
        int[] intArray27 = chronology18.get((org.joda.time.ReadablePeriod) seconds21, 652278993L, (long) (-1));
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, periodType6, chronology18);
        org.joda.time.DurationField durationField29 = chronology18.centuries();
        org.joda.time.DurationField durationField30 = chronology18.years();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 360, (long) 207, chronology18);
        org.joda.time.Period period32 = new org.joda.time.Period((long) 2022, chronology18);
        org.joda.time.DateTimeField dateTimeField33 = chronology18.halfdayOfDay();
        org.joda.time.DurationField durationField34 = chronology18.seconds();
        long long37 = durationField34.getMillis(1645514015159L, (long) (-1617));
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-652278]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645514015159000L + "'", long37 == 1645514015159000L);
    }

    @Test
    public void test04710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04710");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration15 = minutes14.toStandardDuration();
        org.joda.time.Minutes minutes17 = minutes14.minus((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime21.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTime29.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration33 = minutes32.toStandardDuration();
        org.joda.time.Minutes minutes35 = minutes32.minus((int) (byte) 100);
        boolean boolean36 = minutes17.isLessThan(minutes35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime40.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        boolean boolean50 = dateTime48.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration52 = minutes51.toStandardDuration();
        org.joda.time.Minutes minutes54 = minutes51.minus((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Calendar calendar60 = dateTime58.toCalendar(locale59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusMillis((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime58.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        boolean boolean68 = dateTime66.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes69 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Duration duration70 = minutes69.toStandardDuration();
        org.joda.time.Minutes minutes72 = minutes69.minus((int) (byte) 100);
        boolean boolean73 = minutes54.isLessThan(minutes72);
        org.joda.time.Minutes minutes74 = minutes35.plus(minutes54);
        org.joda.time.MutablePeriod mutablePeriod75 = minutes74.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod79.setPeriod((long) 34);
        org.joda.time.Period period82 = mutablePeriod79.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((-1L), dateTimeZone86);
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.util.Calendar calendar89 = dateTime87.toCalendar(locale88);
        org.joda.time.DateTime dateTime91 = dateTime87.plusMillis((int) '4');
        org.joda.time.Chronology chronology92 = dateTime87.getChronology();
        org.joda.time.DateTimeField dateTimeField93 = chronology92.weekOfWeekyear();
        mutablePeriod79.add(0L, chronology92);
        mutablePeriod75.setPeriod((long) 2, 0L, chronology92);
        org.joda.time.DateTimeField dateTimeField96 = chronology92.minuteOfHour();
        org.joda.time.DateTime dateTime97 = org.joda.time.DateTime.now(chronology92);
        org.joda.time.DateTimeField dateTimeField98 = chronology92.secondOfDay();
        org.joda.time.DateTimeField dateTimeField99 = chronology92.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(minutes74);
        org.junit.Assert.assertNotNull(mutablePeriod75);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar89);
        org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(dateTimeField98);
        org.junit.Assert.assertNotNull(dateTimeField99);
    }

    @Test
    public void test04711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04711");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        int int3 = period2.getSeconds();
        org.joda.time.Period period5 = period2.withMonths((int) (byte) 10);
        org.joda.time.Period period7 = period2.plusMinutes(108);
        int int8 = period7.getDays();
        org.joda.time.Hours hours9 = org.joda.time.Hours.THREE;
        int int10 = hours9.getHours();
        org.joda.time.Hours hours12 = hours9.multipliedBy(2);
        org.joda.time.Hours hours13 = null;
        boolean boolean14 = hours9.isLessThan(hours13);
        org.joda.time.Duration duration16 = org.joda.time.Duration.millis((long) (short) -1);
        long long17 = duration16.getStandardMinutes();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime21.toDateTimeISO();
        org.joda.time.Instant instant27 = dateTime21.toInstant();
        org.joda.time.Instant instant28 = instant27.toInstant();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone31.isLocalDateTimeGap(localDateTime33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = dateTime35.withHourOfDay(0);
        boolean boolean38 = instant28.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant42 = instant28.withDurationAdded((org.joda.time.ReadableDuration) duration40, (-1));
        boolean boolean44 = instant42.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Calendar calendar50 = dateTime48.toCalendar(locale49);
        org.joda.time.DateTime dateTime52 = dateTime48.plusMillis((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime48.toDateTimeISO();
        org.joda.time.Instant instant54 = dateTime48.toInstant();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant42, (org.joda.time.ReadableInstant) dateTime48, periodType55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Hours hours58 = period57.toStandardHours();
        org.joda.time.Hours hours59 = hours9.plus(hours58);
        org.joda.time.Period period60 = period7.plus((org.joda.time.ReadablePeriod) hours58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((java.lang.Object) hours58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Hours");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(hours58);
        org.junit.Assert.assertNotNull(hours59);
        org.junit.Assert.assertNotNull(period60);
    }

    @Test
    public void test04712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04712");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes2 = minutes0.minus(2);
        org.joda.time.Minutes minutes4 = minutes2.minus(1);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes7 = minutes5.minus(2);
        boolean boolean8 = minutes4.isGreaterThan(minutes5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTime20.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration24 = minutes23.toStandardDuration();
        org.joda.time.Minutes minutes26 = minutes23.minus((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        boolean boolean40 = dateTime38.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration42 = minutes41.toStandardDuration();
        org.joda.time.Minutes minutes44 = minutes41.minus((int) (byte) 100);
        boolean boolean45 = minutes26.isLessThan(minutes44);
        org.joda.time.Minutes minutes46 = minutes26.negated();
        org.joda.time.Minutes minutes48 = minutes46.multipliedBy((int) '#');
        org.joda.time.Minutes minutes49 = minutes4.minus(minutes46);
        org.joda.time.Minutes minutes51 = minutes4.plus(679);
        org.joda.time.DurationFieldType durationFieldType52 = minutes4.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        int int59 = dateTime56.getSecondOfMinute();
        org.joda.time.DateTime.Property property60 = dateTime56.hourOfDay();
        org.joda.time.DurationField durationField61 = property60.getDurationField();
        java.util.Locale locale62 = null;
        java.lang.String str63 = property60.getAsText(locale62);
        org.joda.time.DateTime dateTime65 = property60.addToCopy(6);
        org.joda.time.DateTime dateTime66 = property60.withMaximumValue();
        java.util.GregorianCalendar gregorianCalendar67 = dateTime66.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((-1L), dateTimeZone70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Calendar calendar73 = dateTime71.toCalendar(locale72);
        org.joda.time.DateTime dateTime75 = dateTime71.plusMillis((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime71.toDateTimeISO();
        org.joda.time.DateTime dateTime78 = dateTime76.plusMillis((int) '#');
        int int79 = dateTime78.getMillisOfSecond();
        org.joda.time.DateTime dateTime80 = dateTime78.toDateTimeISO();
        boolean boolean81 = dateTime66.isEqual((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Period period82 = org.joda.time.Period.ZERO;
        int int83 = period82.getDays();
        org.joda.time.Minutes minutes84 = period82.toStandardMinutes();
        org.joda.time.Minutes minutes86 = minutes84.dividedBy((int) (byte) -1);
        org.joda.time.DateTime dateTime87 = dateTime80.plus((org.joda.time.ReadablePeriod) minutes84);
        boolean boolean88 = minutes4.isGreaterThan(minutes84);
        org.joda.time.MutablePeriod mutablePeriod89 = minutes4.toMutablePeriod();
        java.lang.String str90 = minutes4.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "23" + "'", str63, "23");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(gregorianCalendar67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 34 + "'", int79 == 34);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(minutes84);
        org.junit.Assert.assertNotNull(minutes86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mutablePeriod89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "PT-3M" + "'", str90, "PT-3M");
    }

    @Test
    public void test04713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04713");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        org.joda.time.Period period12 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Period period14 = period12.minusDays(19);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test04714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04714");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.setDays((int) 'a');
        mutablePeriod1.setDays((int) '4');
        mutablePeriod1.setSeconds((int) (short) 0);
        mutablePeriod1.addDays(0);
        mutablePeriod1.addMillis(12);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test04715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04715");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(586, 248, 86399, 699, 86399, 2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 699 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04716");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone11);
        boolean boolean15 = interval13.isAfter(100L);
        long long16 = interval13.getEndMillis();
        org.joda.time.Interval interval17 = interval13.toInterval();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Interval interval19 = interval17.withDurationBeforeEnd(readableDuration18);
        boolean boolean20 = interval6.contains((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        boolean boolean31 = interval27.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.TimeOfDay timeOfDay32 = dateTime30.toTimeOfDay();
        org.joda.time.Interval interval33 = interval6.withEnd((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', chronology35);
        org.joda.time.Interval interval37 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.Instant instant41 = dateTime40.toInstant();
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        org.joda.time.Days days45 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod46 = days45.toMutablePeriod();
        org.joda.time.Duration duration47 = days45.toStandardDuration();
        boolean boolean48 = duration44.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Days days49 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod50 = days49.toMutablePeriod();
        org.joda.time.Duration duration51 = days49.toStandardDuration();
        org.joda.time.Days days52 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod53 = days52.toMutablePeriod();
        org.joda.time.Duration duration54 = days52.toStandardDuration();
        boolean boolean55 = duration51.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Days days56 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod57 = days56.toMutablePeriod();
        org.joda.time.Duration duration58 = days56.toStandardDuration();
        boolean boolean59 = duration54.isShorterThan((org.joda.time.ReadableDuration) duration58);
        boolean boolean60 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Calendar calendar66 = dateTime64.toCalendar(locale65);
        org.joda.time.DateTime dateTime68 = dateTime64.plusMillis((int) '4');
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration58, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Period period71 = period69.minusMinutes((int) ' ');
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadablePeriod) period69);
        long long73 = interval72.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((-1L), dateTimeZone78);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone78);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((-1L), dateTimeZone85);
        org.joda.time.Interval interval87 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone85);
        boolean boolean89 = interval87.isAfter(100L);
        long long90 = interval87.getEndMillis();
        org.joda.time.Interval interval91 = interval87.toInterval();
        org.joda.time.ReadableDuration readableDuration92 = null;
        org.joda.time.Interval interval93 = interval91.withDurationBeforeEnd(readableDuration92);
        boolean boolean94 = interval80.contains((org.joda.time.ReadableInterval) interval91);
        boolean boolean96 = interval80.isAfter(21600000L);
        org.joda.time.Chronology chronology97 = interval80.getChronology();
        org.joda.time.Interval interval98 = interval72.withChronology(chronology97);
        boolean boolean99 = interval37.isAfter((org.joda.time.ReadableInterval) interval72);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar66);
        org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(period71);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1645514041662L + "'", long73 == 1645514041662L);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L + "'", long90 == 1L);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(chronology97);
        org.junit.Assert.assertNotNull(interval98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test04717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04717");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property10 = dateTime4.weekyear();
        org.joda.time.DateTime.Property property11 = dateTime4.yearOfCentury();
        boolean boolean12 = property11.isLeap();
        org.joda.time.DateTime dateTime13 = property11.roundCeilingCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(20);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property25 = dateTime19.weekyear();
        org.joda.time.Duration duration27 = org.joda.time.Duration.millis((long) (short) -1);
        long long28 = duration27.getMillis();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType30 = periodType29.withMinutesRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration27, periodType29);
        org.joda.time.DateTime.Property property32 = dateTime19.dayOfMonth();
        org.joda.time.Hours hours33 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration34 = new org.joda.time.Duration(readableInstant0, (org.joda.time.ReadableInstant) dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(hours33);
    }

    @Test
    public void test04718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04718");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.Period period3 = mutableInterval0.toPeriod(periodType1);
        org.joda.time.DateTime dateTime4 = mutableInterval0.getEnd();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone9);
        org.joda.time.MutableInterval mutableInterval12 = interval11.toMutableInterval();
        java.lang.String str13 = interval11.toString();
        boolean boolean14 = mutableInterval0.isBefore((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone26);
        boolean boolean30 = interval28.isAfter(100L);
        long long31 = interval28.getEndMillis();
        org.joda.time.Interval interval32 = interval28.toInterval();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Interval interval34 = interval32.withDurationBeforeEnd(readableDuration33);
        boolean boolean35 = interval21.contains((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        boolean boolean46 = interval42.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.TimeOfDay timeOfDay47 = dateTime45.toTimeOfDay();
        org.joda.time.Interval interval48 = interval21.withEnd((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', chronology50);
        org.joda.time.Interval interval52 = interval21.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        boolean boolean57 = dateTime55.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property58 = dateTime55.millisOfSecond();
        org.joda.time.DateTime dateTime59 = property58.getDateTime();
        org.joda.time.DateTime dateTime61 = dateTime59.plusSeconds(10);
        org.joda.time.DateTime dateTime63 = dateTime59.minusMinutes((int) (byte) -1);
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        long long71 = dateTimeZone67.convertLocalToUTC(10L, true);
        java.lang.String str72 = dateTimeZone67.getID();
        long long74 = dateTimeZone67.previousTransition((long) 23);
        java.util.TimeZone timeZone75 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime63.toMutableDateTime(dateTimeZone76);
        boolean boolean78 = interval21.isAfter((org.joda.time.ReadableInstant) mutableDateTime77);
        boolean boolean79 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) interval21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval81 = interval21.withStartMillis(31556952000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z" + "'", str13, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10L + "'", long71 == 10L);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "UTC" + "'", str72, "UTC");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 23L + "'", long74 == 23L);
        org.junit.Assert.assertNotNull(timeZone75);
        org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test04719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04719");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant24 = instant9.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Instant instant26 = instant9.plus((long) ' ');
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType28 = minutes27.getFieldType();
        org.joda.time.Duration duration29 = minutes27.toStandardDuration();
        org.joda.time.Instant instant31 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '4');
        org.joda.time.MutableDateTime mutableDateTime32 = instant9.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
    }

    @Test
    public void test04720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04720");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        int int9 = dateTime8.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime13.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime13.toYearMonthDay();
        org.joda.time.DateTime dateTime22 = dateTime13.minus((long) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMillis(570);
        org.joda.time.Seconds seconds25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(0L, chronology27);
        org.joda.time.Period period30 = period28.plusMillis(100);
        int int31 = period30.getHours();
        org.joda.time.Period period33 = period30.minusMinutes(508);
        org.joda.time.Seconds seconds34 = period33.toStandardSeconds();
        org.joda.time.Seconds seconds36 = seconds34.plus((-457087));
        org.joda.time.Seconds seconds37 = org.joda.time.Seconds.ZERO;
        org.joda.time.MutablePeriod mutablePeriod38 = seconds37.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.seconds();
        int int40 = seconds37.get(durationFieldType39);
        org.joda.time.Seconds seconds41 = seconds36.plus(seconds37);
        boolean boolean42 = seconds25.isGreaterThan(seconds37);
        org.joda.time.DurationFieldType durationFieldType43 = seconds37.getFieldType();
        org.joda.time.Seconds seconds45 = seconds37.minus((int) 'u');
        org.joda.time.Seconds seconds47 = seconds45.minus((-72));
        org.joda.time.Seconds seconds48 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds50 = seconds48.dividedBy(4);
        org.joda.time.Seconds seconds51 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds52 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds53 = seconds51.minus(seconds52);
        org.joda.time.Period period54 = seconds53.toPeriod();
        org.joda.time.Seconds seconds55 = seconds50.plus(seconds53);
        org.joda.time.Seconds seconds56 = seconds45.minus(seconds50);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertNotNull(seconds52);
        org.junit.Assert.assertNotNull(seconds53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(seconds55);
        org.junit.Assert.assertNotNull(seconds56);
    }

    @Test
    public void test04721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04721");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        long long19 = duration5.getStandardDays();
        org.joda.time.Period period20 = duration5.toPeriod();
        long long21 = duration5.getStandardSeconds();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 6L + "'", long19 == 6L);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 518400L + "'", long21 == 518400L);
    }

    @Test
    public void test04722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04722");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.MIN_VALUE;
        boolean boolean3 = days0.isLessThan(days2);
        org.joda.time.Days days4 = days0.negated();
        org.joda.time.Period period5 = days4.toPeriod();
        org.joda.time.Period period7 = period5.plusDays(829);
        org.joda.time.Period period8 = period7.toPeriod();
        int int9 = period7.getDays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((java.lang.Object) int9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 823 + "'", int9 == 823);
    }

    @Test
    public void test04723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04723");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        boolean boolean14 = interval10.isAfter((long) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        boolean boolean28 = dateTime26.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isStandardOffset((long) (byte) 100);
        boolean boolean36 = dateTimeZone31.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone39.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = dateTime43.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        boolean boolean59 = dateTime57.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes60 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration61 = minutes60.toStandardDuration();
        org.joda.time.Duration duration62 = minutes60.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration62);
        int int64 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime65 = dateTime18.withZoneRetainFields(dateTimeZone31);
        boolean boolean66 = interval10.isBefore((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime68 = dateTime65.plusHours(86399);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((-1L), dateTimeZone71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Calendar calendar74 = dateTime72.toCalendar(locale73);
        org.joda.time.DateTime dateTime76 = dateTime72.plusMillis((int) '4');
        org.joda.time.DateTime dateTime77 = dateTime72.toDateTimeISO();
        org.joda.time.Instant instant78 = dateTime72.toInstant();
        org.joda.time.Instant instant79 = instant78.toInstant();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((-1L), dateTimeZone82);
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.util.Calendar calendar85 = dateTime83.toCalendar(locale84);
        org.joda.time.DateTime dateTime87 = dateTime83.plusMillis((int) '4');
        org.joda.time.DateTime dateTime88 = dateTime83.toDateTimeISO();
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType90 = periodType89.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant78, (org.joda.time.ReadableInstant) dateTime88, periodType89);
        org.joda.time.Instant instant94 = instant78.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant96 = instant94.plus((long) (byte) -1);
        org.joda.time.Duration duration97 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) instant94);
        org.joda.time.Minutes minutes98 = duration97.toStandardMinutes();
        org.joda.time.Minutes minutes99 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes98);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(instant94);
        org.junit.Assert.assertNotNull(instant96);
        org.junit.Assert.assertNotNull(minutes98);
        org.junit.Assert.assertNotNull(minutes99);
    }

    @Test
    public void test04724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04724");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.YearMonthDay yearMonthDay2 = dateTime1.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone5.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone5);
        long long11 = dateTimeZone5.previousTransition(518400000L);
        long long15 = dateTimeZone5.convertLocalToUTC((long) (short) 1, true, 652278993L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime24 = dateTime19.toLocalDateTime();
        int int25 = localDateTime24.size();
        boolean boolean26 = dateTimeZone5.isLocalDateTimeGap(localDateTime24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay2, (org.joda.time.ReadablePartial) localDateTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 518400000L + "'", long11 == 518400000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04725");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.era();
        int int12 = dateTimeField10.getLeapAmount((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField10.getType();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.Chronology chronology24 = dateTime19.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.minutes();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        boolean boolean30 = dateTimeZone27.isStandardOffset((long) (byte) 100);
        boolean boolean32 = dateTimeZone27.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone35.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime45.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        boolean boolean55 = dateTime53.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration57 = minutes56.toStandardDuration();
        org.joda.time.Duration duration58 = minutes56.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration58);
        int int60 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology61 = chronology24.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField62 = chronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField63 = chronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology24.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField65 = chronology24.yearOfCentury();
        org.joda.time.Period period66 = new org.joda.time.Period(150145655343628L, 291L, chronology24);
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType13.getField(chronology24);
        java.util.Locale locale70 = new java.util.Locale("TWN", "PT0.059S");
        int int71 = dateTimeField67.getMaximumTextLength(locale70);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertEquals(locale70.toString(), "twn_PT0.059S");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
    }

    @Test
    public void test04726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04726");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = period27.getYears();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test04727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04727");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime3.getZone();
        org.joda.time.TimeOfDay timeOfDay8 = dateTime3.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        int int24 = dateTime21.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime21.getZone();
        org.joda.time.TimeOfDay timeOfDay26 = dateTime21.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period36 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay8, (org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((java.lang.Object) "8");
        org.joda.time.Instant instant40 = instant38.plus(86399L);
        org.joda.time.Instant instant41 = instant40.toInstant();
        org.joda.time.DateTime dateTime42 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant40);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test04728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04728");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        boolean boolean10 = mutableInterval8.isBefore((long) (-100));
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds13 = seconds11.minus(seconds12);
        mutableInterval8.setPeriodAfterStart((org.joda.time.ReadablePeriod) seconds12);
        org.joda.time.MutablePeriod mutablePeriod15 = seconds12.toMutablePeriod();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(mutablePeriod15);
    }

    @Test
    public void test04729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04729");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        org.joda.time.Days days9 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod10 = days9.toMutablePeriod();
        org.joda.time.Duration duration11 = days9.toStandardDuration();
        org.joda.time.PeriodType periodType12 = days9.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfHalfday();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType12, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekyearOfCentury();
        long long27 = dateTimeField24.add((long) 618, 259199999L);
        java.lang.String str28 = dateTimeField24.getName();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone34);
        int int38 = dateTimeZone34.getStandardOffset((long) 100);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = dateTimeZone34.getName((long) 100, locale40);
        java.lang.String str42 = dateTimeField24.getAsShortText((long) (-6), locale40);
        org.joda.time.format.PeriodFormatter periodFormatter43 = periodFormatter2.withLocale(locale40);
        org.joda.time.PeriodType periodType44 = periodFormatter2.getParseType();
        boolean boolean45 = periodFormatter2.isParser();
        org.joda.time.PeriodType periodType46 = periodFormatter2.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period48 = periodFormatter2.parsePeriod("\u4e2d\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 8179561926864000618L + "'", long27 == 8179561926864000618L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekyearOfCentury" + "'", str28, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "69" + "'", str42, "69");
        org.junit.Assert.assertNotNull(periodFormatter43);
        org.junit.Assert.assertNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(periodType46);
    }

    @Test
    public void test04730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04730");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod2 = days1.toMutablePeriod();
        org.joda.time.Duration duration3 = days1.toStandardDuration();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        boolean boolean7 = duration3.isLongerThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration10 = new org.joda.time.Duration(0L, (long) 848);
        boolean boolean11 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTimeISO();
        org.joda.time.Instant instant22 = dateTime16.toInstant();
        org.joda.time.Instant instant23 = instant22.toInstant();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone26.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        boolean boolean33 = instant23.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant37 = instant23.withDurationAdded((org.joda.time.ReadableDuration) duration35, (-1));
        boolean boolean39 = instant37.isBefore((long) (short) 10);
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration42 = period41.toStandardDuration();
        org.joda.time.Instant instant43 = instant37.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = duration42.plus((-86400000L));
        org.joda.time.Duration duration46 = duration6.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration42, readableInstant47);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
    }

    @Test
    public void test04731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04731");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        org.joda.time.DateTime dateTime10 = dateTime6.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime12 = dateTime6.withWeekyear((int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime6.plusDays((int) (short) 0);
        java.lang.String str16 = dateTime6.toString("70");
        org.joda.time.DateTime.Property property17 = dateTime6.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        java.lang.String str28 = dateTimeField27.getName();
        java.lang.String str30 = dateTimeField27.getAsShortText((long) (short) 10);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = dateTimeField27.getAsText((int) (byte) 100, locale32);
        boolean boolean35 = dateTimeField27.isLenient();
        java.util.Locale locale37 = new java.util.Locale("PT518400S");
        int int38 = dateTimeField27.getMaximumTextLength(locale37);
        int int39 = property17.getMaximumShortTextLength(locale37);
        java.lang.String str40 = locale37.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "70" + "'", str16, "70");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekOfWeekyear" + "'", str28, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals(locale37.toString(), "pt518400s");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 7 + "'", int39 == 7);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "pt518400s" + "'", str40, "pt518400s");
    }

    @Test
    public void test04732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04732");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime3.getZone();
        org.joda.time.TimeOfDay timeOfDay8 = dateTime3.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime12.weekyear();
        org.joda.time.Duration duration20 = org.joda.time.Duration.millis((long) (short) -1);
        long long21 = duration20.getMillis();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType23 = periodType22.withMinutesRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration20, periodType22);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) period24);
        mutableInterval25.setDurationBeforeEnd((long) 25978321);
        mutableInterval25.setEndMillis((long) 25785);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
    }

    @Test
    public void test04733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04733");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(31536000000L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04734");
        org.joda.time.Days days6 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod7 = days6.toMutablePeriod();
        org.joda.time.Duration duration8 = days6.toStandardDuration();
        org.joda.time.PeriodType periodType9 = days6.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.Period period20 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType9, chronology18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.millisOfDay();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-259200000L), (long) '#', chronology18);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(periodType24);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime31.toInstant();
        org.joda.time.Instant instant38 = instant37.toInstant();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone41.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        boolean boolean48 = instant38.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant52 = instant38.withDurationAdded((org.joda.time.ReadableDuration) duration50, (-1));
        boolean boolean54 = instant52.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Calendar calendar60 = dateTime58.toCalendar(locale59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusMillis((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime58.toDateTimeISO();
        org.joda.time.Instant instant64 = dateTime58.toInstant();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant52, (org.joda.time.ReadableInstant) dateTime58, periodType65);
        org.joda.time.PeriodType periodType67 = periodType65.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((-1L), dateTimeZone70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Calendar calendar73 = dateTime71.toCalendar(locale72);
        org.joda.time.DateTime dateTime75 = dateTime71.plusMillis((int) '4');
        org.joda.time.Chronology chronology76 = dateTime71.getChronology();
        org.joda.time.Period period77 = new org.joda.time.Period((-259200000L), periodType67, chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.millisOfDay();
        org.joda.time.DateTimeField dateTimeField79 = chronology76.monthOfYear();
        org.joda.time.Period period80 = new org.joda.time.Period(0L, (long) 'a', periodType24, chronology76);
        org.joda.time.DateTimeField dateTimeField81 = chronology76.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test04735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04735");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime3.toCalendar(locale9);
        org.joda.time.DateTime dateTime13 = dateTime3.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime14 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property15 = dateTime3.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test04736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04736");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusHours(100);
        org.joda.time.Period period6 = period1.minusSeconds((int) '4');
        org.joda.time.Period period8 = period1.withHours(10);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        int int19 = dateTime17.getHourOfDay();
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Calendar calendar23 = dateTime17.toCalendar(locale21);
        org.joda.time.DateTime dateTime25 = dateTime17.plusHours((int) 'x');
        boolean boolean26 = interval14.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Interval interval28 = interval14.withStartMillis((long) '#');
        org.joda.time.Seconds seconds29 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval14);
        java.lang.String str30 = interval14.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-CN" + "'", str22, "zh-CN");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645514042384,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=2,MILLISECOND=384,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(seconds29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-21T21:14:02.374Z/2022-02-22T07:14:02.384Z" + "'", str30, "2022-02-21T21:14:02.374Z/2022-02-22T07:14:02.384Z");
    }

    @Test
    public void test04737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04737");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((java.lang.Object) "8");
        org.joda.time.Instant instant3 = instant1.minus((-100L));
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime6.toGregorianCalendar();
        int int8 = dateTime6.getHourOfDay();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.lang.String str11 = locale10.toLanguageTag();
        java.util.Calendar calendar12 = dateTime6.toCalendar(locale10);
        org.joda.time.DateTime.Property property13 = dateTime6.minuteOfHour();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Duration duration19 = days17.toStandardDuration();
        boolean boolean20 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration23 = duration19.minus((long) 2022);
        org.joda.time.Instant instant25 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration19, 19);
        org.joda.time.Days days26 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod27 = days26.toMutablePeriod();
        org.joda.time.Duration duration28 = days26.toStandardDuration();
        org.joda.time.Days days29 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod30 = days29.toMutablePeriod();
        org.joda.time.Duration duration31 = days29.toStandardDuration();
        boolean boolean32 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration35 = new org.joda.time.Duration(0L, (long) 848);
        boolean boolean36 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration37 = duration35.toDuration();
        org.joda.time.Instant instant39 = instant25.withDurationAdded((org.joda.time.ReadableDuration) duration37, 415);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh-CN" + "'", str11, "zh-CN");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645514042420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=2,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant39);
    }

    @Test
    public void test04738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04738");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(144L);
        int int2 = mutablePeriod1.size();
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        org.joda.time.Interval interval6 = interval5.toInterval();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((java.lang.Object) interval6);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval6);
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval6);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology23);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((-1L), 59L, chronology23);
        org.joda.time.DateTime dateTime27 = mutableInterval26.getEnd();
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime27.getZone();
        int int30 = dateTime27.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval31 = interval6.withEnd((org.joda.time.ReadableInstant) dateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 70 + "'", int30 == 70);
    }

    @Test
    public void test04739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04739");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration29 = period28.toStandardDuration();
        org.joda.time.Instant instant30 = instant24.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone33.isLocalDateTimeGap(localDateTime35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = dateTime37.withHourOfDay(0);
        int int40 = dateTime39.getDayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime39.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.Instant instant51 = dateTime50.toInstant();
        org.joda.time.Hours hours52 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTime dateTime54 = dateTime42.plusMillis((int) (byte) 1);
        boolean boolean55 = instant24.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime58 = dateTime42.withFieldAdded(durationFieldType56, (int) (byte) 100);
        org.joda.time.DateTime dateTime60 = dateTime58.plusSeconds(679);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test04740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04740");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getDisplayCountry();
        java.util.Locale.Builder builder4 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder7 = builder1.setUnicodeLocaleKeyword("it", "");
        java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("443");
        java.util.Locale locale10 = builder9.build();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) 0);
        mutablePeriod12.addMillis(34);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone17.isLocalDateTimeGap(localDateTime19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime27.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        boolean boolean37 = dateTime35.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration39 = minutes38.toStandardDuration();
        org.joda.time.Duration duration40 = minutes38.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration42 = duration40.toDuration();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.Instant instant52 = dateTime46.toInstant();
        org.joda.time.Instant instant53 = instant52.toInstant();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime58 = null;
        boolean boolean59 = dateTimeZone56.isLocalDateTimeGap(localDateTime58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime62 = dateTime60.withHourOfDay(0);
        boolean boolean63 = instant53.isEqual((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration65 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant67 = instant53.withDurationAdded((org.joda.time.ReadableDuration) duration65, (-1));
        boolean boolean69 = instant67.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology70 = instant67.getChronology();
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration42, chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((java.lang.Object) locale10, chronology70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko__#u-it");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test04741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04741");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusHours(100);
        int int5 = period4.getMillis();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.Duration duration12 = period4.toDurationTo((org.joda.time.ReadableInstant) dateTime9);
        int int13 = dateTime9.getSecondOfMinute();
        org.joda.time.Period period15 = new org.joda.time.Period(58110L);
        org.joda.time.DateTime dateTime17 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 967);
        org.joda.time.DateTime dateTime19 = dateTime9.plusMinutes((-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test04742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04742");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((java.lang.Object) "8");
        org.joda.time.Instant instant3 = instant1.minus((-100L));
        org.joda.time.Instant instant5 = instant1.minus((long) 69);
        org.joda.time.Instant instant6 = instant5.toInstant();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes(259200051L);
        org.joda.time.Days days9 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod10 = days9.toMutablePeriod();
        org.joda.time.Duration duration11 = days9.toStandardDuration();
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        boolean boolean15 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Days days16 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod17 = days16.toMutablePeriod();
        org.joda.time.Duration duration18 = days16.toStandardDuration();
        boolean boolean19 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration20 = duration14.toDuration();
        org.joda.time.Duration duration22 = duration14.withMillis((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        java.util.GregorianCalendar gregorianCalendar26 = dateTime25.toGregorianCalendar();
        int int27 = dateTime25.getHourOfDay();
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale29.toLanguageTag();
        java.util.Calendar calendar31 = dateTime25.toCalendar(locale29);
        org.joda.time.DateTime.Property property32 = dateTime25.minuteOfHour();
        org.joda.time.Days days33 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod34 = days33.toMutablePeriod();
        org.joda.time.Duration duration35 = days33.toStandardDuration();
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        org.joda.time.Duration duration38 = days36.toStandardDuration();
        boolean boolean39 = duration35.isLongerThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Duration duration43 = duration38.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        boolean boolean54 = dateTime47.equals((java.lang.Object) dateTime53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean56 = dateTime53.isSupported(dateTimeFieldType55);
        org.joda.time.Instant instant57 = dateTime53.toInstant();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean59 = duration14.isEqual((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration60 = duration8.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant62 = instant6.withDurationAdded((org.joda.time.ReadableDuration) duration8, 409);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 7 + "'", int27 == 7);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zh-CN" + "'", str30, "zh-CN");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645514042659,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=2,MILLISECOND=659,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(instant62);
    }

    @Test
    public void test04743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04743");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTimeISO();
        org.joda.time.Instant instant16 = dateTime10.toInstant();
        org.joda.time.Instant instant17 = instant16.toInstant();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        boolean boolean27 = instant17.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant31 = instant17.withDurationAdded((org.joda.time.ReadableDuration) duration29, (-1));
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime35.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.plusMillis((int) '#');
        int int43 = instant31.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime44 = dateTime40.toDateTime();
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Locale locale46 = locale45.stripExtensions();
        java.lang.String str47 = locale45.getISO3Language();
        java.lang.String str48 = locale45.getDisplayScript();
        java.util.Calendar calendar49 = dateTime40.toCalendar(locale45);
        org.joda.time.format.PeriodFormatter periodFormatter50 = periodFormatter6.withLocale(locale45);
        boolean boolean51 = periodFormatter6.isParser();
        org.joda.time.format.PeriodParser periodParser52 = periodFormatter6.getParser();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) 2, (long) 23);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.Days days57 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod58 = days57.toMutablePeriod();
        mutablePeriod58.setSeconds((int) (byte) 0);
        mutableInterval55.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod58);
        mutablePeriod58.setPeriod((long) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray64 = mutablePeriod58.getFieldTypes();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.forFields(durationFieldTypeArray64);
        org.joda.time.format.PeriodFormatter periodFormatter66 = periodFormatter6.withParseType(periodType65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Days days68 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod69 = days68.toMutablePeriod();
        org.joda.time.Duration duration70 = days68.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(readableInstant67, (org.joda.time.ReadableDuration) duration70);
        int int72 = mutablePeriod71.size();
        mutablePeriod71.setMonths((-27425128));
        mutablePeriod71.add(0, 25913348, (int) 'x', (int) (byte) 0, 403, 27423260, (int) (short) 10, 333);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = periodFormatter6.print((org.joda.time.ReadablePeriod) mutablePeriod71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zho" + "'", str47, "zho");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(periodFormatter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(periodParser52);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodFormatter66);
        org.junit.Assert.assertNotNull(days68);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 8 + "'", int72 == 8);
    }

    @Test
    public void test04744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04744");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((java.lang.Object) interval3);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval3);
        long long6 = interval3.getEndMillis();
        org.joda.time.Interval interval7 = interval3.toInterval();
        org.joda.time.Interval interval8 = interval3.toInterval();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(minutes5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514042778L + "'", long6 == 1645514042778L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
    }

    @Test
    public void test04745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04745");
        java.io.IOException iOException2 = new java.io.IOException("549");
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException("+01:00", (java.lang.Throwable) iOException2);
        java.lang.String str5 = iOException2.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.io.IOException: 549" + "'", str5, "java.io.IOException: 549");
    }

    @Test
    public void test04746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04746");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.MIN_VALUE;
        boolean boolean3 = days0.isLessThan(days2);
        org.joda.time.Days days4 = days0.negated();
        org.joda.time.Period period5 = days4.toPeriod();
        org.joda.time.Period period7 = period5.plusDays(829);
        org.joda.time.Period period8 = period7.toPeriod();
        java.lang.String str9 = period7.toString();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P823D" + "'", str9, "P823D");
    }

    @Test
    public void test04747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04747");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.Interval interval4 = interval3.toInterval();
        org.joda.time.Days days5 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.era();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(0L, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.halfdayOfDay();
        org.joda.time.Interval interval20 = interval3.withChronology(chronology15);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 25785, chronology15);
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Days days24 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod25 = days24.toMutablePeriod();
        mutablePeriod25.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval28 = null;
        mutablePeriod25.add(readableInterval28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.eras();
        int int31 = mutablePeriod25.get(durationFieldType30);
        boolean boolean32 = mutablePeriod23.isSupported(durationFieldType30);
        mutablePeriod23.addSeconds((int) '#');
        mutablePeriod23.addSeconds((int) (short) 0);
        java.lang.String str37 = mutablePeriod23.toString();
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod23.toMutablePeriod();
        int int39 = mutablePeriod38.getMonths();
        org.joda.time.MutablePeriod mutablePeriod40 = mutablePeriod38.toMutablePeriod();
        mutablePeriod21.add((org.joda.time.ReadablePeriod) mutablePeriod40);
        mutablePeriod40.add((long) 13);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "P6DT35S" + "'", str37, "P6DT35S");
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod40);
    }

    @Test
    public void test04748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04748");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology12);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((-1L), 59L, chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.clockhourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField16.getType();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
    }

    @Test
    public void test04749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04749");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds1 = seconds0.negated();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone6);
        boolean boolean10 = interval8.isAfter(100L);
        long long11 = interval8.getEndMillis();
        org.joda.time.Interval interval12 = interval8.toInterval();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Interval interval14 = interval12.withDurationBeforeEnd(readableDuration13);
        org.joda.time.Period period15 = interval12.toPeriod();
        org.joda.time.Seconds seconds16 = period15.toStandardSeconds();
        org.joda.time.PeriodType periodType17 = seconds16.getPeriodType();
        org.joda.time.Seconds seconds18 = seconds0.minus(seconds16);
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds21 = seconds19.minus(seconds20);
        org.joda.time.Seconds seconds22 = seconds16.minus(seconds19);
        org.joda.time.Seconds seconds24 = seconds16.minus(9);
        org.joda.time.Seconds seconds26 = seconds16.minus(0);
        java.lang.String str27 = seconds26.toString();
        org.joda.time.Seconds seconds29 = seconds26.minus(2720);
        org.joda.time.Seconds seconds31 = seconds26.multipliedBy(25973005);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0S" + "'", str27, "PT0S");
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds31);
    }

    @Test
    public void test04750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04750");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.MIN_VALUE;
        boolean boolean3 = days0.isLessThan(days2);
        org.joda.time.Days days5 = days0.multipliedBy(23);
        org.joda.time.Days days7 = days5.minus(2021);
        org.joda.time.Days days9 = days7.multipliedBy(108);
        org.joda.time.MutablePeriod mutablePeriod10 = days7.toMutablePeriod();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
    }

    @Test
    public void test04751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04751");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        boolean boolean17 = dateTimeZone14.isStandardOffset((long) (byte) 100);
        boolean boolean19 = dateTimeZone14.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime32.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        boolean boolean42 = dateTime40.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration44 = minutes43.toStandardDuration();
        org.joda.time.Duration duration45 = minutes43.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration45);
        int int47 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology48 = chronology11.withZone(dateTimeZone14);
        boolean boolean49 = durationFieldType2.isSupported(chronology11);
        org.joda.time.DateTimeField dateTimeField50 = chronology11.weekyear();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 'u', periodType1, chronology11);
        org.joda.time.DateTimeField dateTimeField52 = chronology11.centuryOfEra();
        java.lang.String str53 = dateTimeField52.toString();
        boolean boolean55 = dateTimeField52.isLeap((-188625092375632L));
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DateTimeField[centuryOfEra]" + "'", str53, "DateTimeField[centuryOfEra]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test04752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04752");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime10 = dateTime5.toLocalDateTime();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = dateTime5.toCalendar(locale11);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Duration duration19 = days17.toStandardDuration();
        boolean boolean20 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime21 = dateTime5.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days24 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod25 = days24.toMutablePeriod();
        org.joda.time.Duration duration26 = days24.toStandardDuration();
        org.joda.time.PeriodType periodType27 = days24.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.Chronology chronology36 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfHalfday();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType27, chronology36);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.millisOfDay();
        org.joda.time.Period period41 = duration16.toPeriod(chronology36);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '4', (long) 11, chronology36);
        org.joda.time.DateTimeField dateTimeField43 = chronology36.weekOfWeekyear();
        long long46 = dateTimeField43.getDifferenceAsLong((long) (-86399), 457087L);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test04753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04753");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod2 = days1.toMutablePeriod();
        org.joda.time.Duration duration3 = days1.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration3);
        mutablePeriod4.setMonths((int) ' ');
        mutablePeriod4.setMonths(134);
        mutablePeriod4.setPeriod((long) 117);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test04754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04754");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean12 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        long long13 = interval8.toDurationMillis();
        org.joda.time.Duration duration14 = interval8.toDuration();
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        mutablePeriod16.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval19 = null;
        mutablePeriod16.add(readableInterval19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.eras();
        int int22 = mutablePeriod16.get(durationFieldType21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology34);
        mutablePeriod16.setPeriod((long) (-1), chronology34);
        org.joda.time.Days days38 = org.joda.time.Days.ZERO;
        org.joda.time.Days days39 = days38.negated();
        int[] intArray42 = chronology34.get((org.joda.time.ReadablePeriod) days38, 1L, 1645513717718L);
        org.joda.time.Period period43 = duration14.toPeriod(chronology34);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) (short) 100, periodType1, chronology34);
        org.joda.time.DateTimeField dateTimeField45 = chronology34.centuryOfEra();
        java.lang.String str46 = dateTimeField45.getName();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[19045]");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "centuryOfEra" + "'", str46, "centuryOfEra");
    }

    @Test
    public void test04755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04755");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTimeISO();
        org.joda.time.Instant instant12 = dateTime6.toInstant();
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone16.isLocalDateTimeGap(localDateTime18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(0);
        boolean boolean23 = instant13.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant27 = instant13.withDurationAdded((org.joda.time.ReadableDuration) duration25, (-1));
        boolean boolean29 = instant27.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology30 = instant27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((-1221955200000L), (long) 'x', chronology30);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1047600000L, chronology30);
        org.joda.time.DateTimeField dateTimeField34 = chronology30.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test04756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04756");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getHourOfDay();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.toLanguageTag();
        java.util.Calendar calendar17 = dateTime11.toCalendar(locale15);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime20 = property18.addToCopy(10);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = locale21.getISO3Language();
        java.lang.String str24 = locale21.getDisplayScript();
        java.lang.String str25 = property18.getAsShortText(locale21);
        java.lang.String str26 = dateTimeZone6.getName(10L, locale21);
        org.joda.time.DateTime dateTime27 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime40.toDateTimeISO();
        org.joda.time.Instant instant46 = dateTime40.toInstant();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Calendar calendar52 = dateTime50.toCalendar(locale51);
        org.joda.time.DateTime dateTime54 = dateTime50.plusMillis((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime50.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        boolean boolean60 = dateTime58.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes61 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration62 = minutes61.toStandardDuration();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateTime dateTime64 = dateTime34.minus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime69 = null;
        boolean boolean70 = dateTimeZone67.isLocalDateTimeGap(localDateTime69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime73 = dateTime71.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((-1L), dateTimeZone76);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Calendar calendar79 = dateTime77.toCalendar(locale78);
        org.joda.time.DateTime dateTime81 = dateTime77.plusMillis((int) '4');
        org.joda.time.DateTime dateTime82 = dateTime77.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone84);
        boolean boolean87 = dateTime85.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes88 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Duration duration89 = minutes88.toStandardDuration();
        org.joda.time.Duration duration90 = minutes88.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableDuration) duration90);
        int int92 = duration62.compareTo((org.joda.time.ReadableDuration) duration90);
        org.joda.time.Minutes minutes93 = duration90.toStandardMinutes();
        org.joda.time.DurationFieldType durationFieldType94 = minutes93.getFieldType();
        org.joda.time.DateTime dateTime96 = dateTime3.withFieldAdded(durationFieldType94, 747);
        org.joda.time.DateTime dateTime97 = dateTime3.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-CN" + "'", str16, "zh-CN");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645514043415,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=3,MILLISECOND=415,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "14" + "'", str25, "14");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar79);
        org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(minutes93);
        org.junit.Assert.assertNotNull(durationFieldType94);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test04757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04757");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        long long13 = duration12.getStandardHours();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12, periodType15);
        org.joda.time.Period period18 = period16.plusHours(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period20 = period18.minusYears(870901920);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 144L + "'", long13 == 144L);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test04758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04758");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime3.toCalendar(locale9);
        org.joda.time.DateTime dateTime13 = dateTime3.plusYears((int) (short) 0);
        boolean boolean14 = dateTime3.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime3.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime3.minusMinutes(291);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime3.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = mutableDateTime18.toDateTime(dateTimeZone19);
        java.lang.Object obj21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime26.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime36.toDateTimeISO();
        org.joda.time.Instant instant42 = dateTime36.toInstant();
        org.joda.time.Instant instant43 = instant42.toInstant();
        org.joda.time.Minutes minutes44 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) instant42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Calendar calendar50 = dateTime48.toCalendar(locale49);
        org.joda.time.DateTime dateTime52 = dateTime48.plusMillis((int) '4');
        org.joda.time.Chronology chronology53 = dateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.weekOfWeekyear();
        org.joda.time.DateTime dateTime55 = instant42.toDateTime(chronology53);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("yearOfEra");
        java.util.Calendar calendar58 = dateTime55.toCalendar(locale57);
        boolean boolean59 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime61 = dateTime22.plusWeeks((int) (short) -1);
        java.util.Date date62 = dateTime22.toDate();
        boolean boolean63 = mutableDateTime18.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology64 = dateTime22.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(date62);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Tue Feb 22 07:14:03 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
    }

    @Test
    public void test04759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04759");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusHours(100);
        int int5 = period4.getMillis();
        org.joda.time.Period period7 = period4.withSeconds((-100));
        int int8 = period4.getMinutes();
        org.joda.time.Minutes minutes9 = period4.toStandardMinutes();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(minutes9);
    }

    @Test
    public void test04760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04760");
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType5, chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        java.lang.String str18 = dateTimeField17.getName();
        long long21 = dateTimeField17.add(144L, 2L);
        org.joda.time.DurationField durationField22 = dateTimeField17.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Chronology chronology31 = dateTime26.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.minutes();
        org.joda.time.DurationField durationField33 = chronology31.eras();
        org.joda.time.DurationFieldType durationFieldType34 = durationField33.getType();
        int int35 = durationField22.compareTo(durationField33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withSecondsRemoved();
        org.joda.time.PeriodType periodType39 = periodType38.withMinutesRemoved();
        org.joda.time.Chronology chronology40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period41 = new org.joda.time.Period((java.lang.Object) int35, periodType38, chronology40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "weekyearOfCentury" + "'", str18, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 63072000144L + "'", long21 == 63072000144L);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
    }

    @Test
    public void test04761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04761");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.Period period3 = mutableInterval0.toPeriod(periodType1);
        org.joda.time.DateTime dateTime4 = mutableInterval0.getEnd();
        long long5 = mutableInterval0.toDurationMillis();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test04762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04762");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean12 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        long long13 = interval8.toDurationMillis();
        org.joda.time.Duration duration14 = interval8.toDuration();
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        mutablePeriod16.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval19 = null;
        mutablePeriod16.add(readableInterval19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.eras();
        int int22 = mutablePeriod16.get(durationFieldType21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology34);
        mutablePeriod16.setPeriod((long) (-1), chronology34);
        org.joda.time.Days days38 = org.joda.time.Days.ZERO;
        org.joda.time.Days days39 = days38.negated();
        int[] intArray42 = chronology34.get((org.joda.time.ReadablePeriod) days38, 1L, 1645513717718L);
        org.joda.time.Period period43 = duration14.toPeriod(chronology34);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) (short) 100, periodType1, chronology34);
        org.joda.time.DateTimeField dateTimeField45 = chronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField46 = chronology34.centuryOfEra();
        int int48 = dateTimeField46.getMinimumValue(8640L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[19045]");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test04763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04763");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        mutablePeriod1.setMinutes(86399);
        mutablePeriod1.clear();
        mutablePeriod1.addHours(999);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone24);
        boolean boolean28 = interval26.isAfter(100L);
        long long29 = interval26.getEndMillis();
        org.joda.time.Interval interval30 = interval26.toInterval();
        org.joda.time.Days days31 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Interval interval33 = interval26.withStartMillis(0L);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) interval33);
        mutablePeriod1.addMillis((-24685713));
        org.joda.time.Period period38 = org.joda.time.Period.years((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        boolean boolean49 = interval45.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        java.lang.String str55 = dateTimeZone52.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime48.withZoneRetainFields(dateTimeZone52);
        org.joda.time.Duration duration57 = period38.toDurationFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period59 = period38.plusMonths(2911679);
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) period59);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
    }

    @Test
    public void test04764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04764");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime15 = dateTime10.toLocalDateTime();
        boolean boolean16 = dateTimeZone6.isLocalDateTimeGap(localDateTime15);
        java.util.TimeZone timeZone17 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(52, 68, 2922789, 2911679, 146, dateTimeZone21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2911679 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
    }

    @Test
    public void test04765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04765");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Duration duration42 = minutes40.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42);
        int int44 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology45 = chronology8.withZone(dateTimeZone11);
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10);
        int int48 = period47.getSeconds();
        org.joda.time.Period period50 = period47.minusHours(100);
        int int51 = period50.getDays();
        int[] intArray54 = chronology8.get((org.joda.time.ReadablePeriod) period50, (-1L), (long) 'a');
        org.joda.time.DateTimeField dateTimeField55 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField56 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField57 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology8.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((-1L), dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime63 = null;
        boolean boolean64 = dateTimeZone61.isLocalDateTimeGap(localDateTime63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime67 = dateTime65.withHourOfDay(0);
        int int68 = dateTime67.getDayOfWeek();
        org.joda.time.DateTime dateTime70 = dateTime67.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime72 = dateTime67.withWeekyear((int) '4');
        org.joda.time.DateTime dateTime73 = dateTime67.toDateTime();
        org.joda.time.LocalDate localDate74 = dateTime67.toLocalDate();
        int[] intArray76 = chronology8.get((org.joda.time.ReadablePartial) localDate74, 1639440535538L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 98]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[2021, 12, 14]");
    }

    @Test
    public void test04766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04766");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        int int3 = period2.getWeeks();
        org.joda.time.PeriodType periodType4 = period2.getPeriodType();
        org.joda.time.Duration duration5 = period2.toStandardDuration();
        long long6 = duration5.getStandardDays();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) instant8);
        long long10 = interval9.getStartMillis();
        long long11 = interval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = interval9.toMutableInterval();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) mutableInterval12);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(minutes13);
    }

    @Test
    public void test04767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04767");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        boolean boolean11 = property9.isLeap();
        org.joda.time.DateTime dateTime12 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514044055,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=4,MILLISECOND=55,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test04768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04768");
        org.joda.time.Period period1 = org.joda.time.Period.years((int) '#');
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean25 = dateTime23.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        java.util.GregorianCalendar gregorianCalendar32 = dateTime31.toGregorianCalendar();
        int int33 = dateTime31.getHourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime31.withCenturyOfEra(7);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime39.toDateTimeISO();
        org.joda.time.Instant instant45 = dateTime39.toInstant();
        org.joda.time.Instant instant46 = instant45.toInstant();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone49.isLocalDateTimeGap(localDateTime51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime55 = dateTime53.withHourOfDay(0);
        boolean boolean56 = instant46.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant60 = instant46.withDurationAdded((org.joda.time.ReadableDuration) duration58, (-1));
        boolean boolean62 = instant60.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Calendar calendar68 = dateTime66.toCalendar(locale67);
        org.joda.time.DateTime dateTime70 = dateTime66.plusMillis((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime66.toDateTimeISO();
        org.joda.time.Instant instant72 = dateTime66.toInstant();
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant60, (org.joda.time.ReadableInstant) dateTime66, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withWeeksRemoved();
        org.joda.time.PeriodType periodType76 = periodType75.withYearsRemoved();
        org.joda.time.Period period77 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31, periodType75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int79 = dateTime31.get(dateTimeFieldType78);
        org.joda.time.DurationFieldType durationFieldType80 = dateTimeFieldType78.getRangeDurationType();
        int int81 = period1.get(durationFieldType80);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gregorianCalendar32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 7 + "'", int33 == 7);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 8 + "'", int79 == 8);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test04769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04769");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        boolean boolean6 = dateTimeZone1.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone9.isLocalDateTimeGap(localDateTime11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime15 = dateTime13.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        boolean boolean29 = dateTime27.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration31 = minutes30.toStandardDuration();
        org.joda.time.Duration duration32 = minutes30.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration32);
        int int34 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = null;
        boolean boolean40 = dateTimeZone37.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime43 = dateTime41.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime47.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        boolean boolean57 = dateTime55.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration59 = minutes58.toStandardDuration();
        org.joda.time.Duration duration60 = minutes58.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime62 = dateTime15.minus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(848);
        org.joda.time.DateTime dateTime66 = dateTime62.minus(2813123359836L);
        org.joda.time.Instant instant67 = dateTime66.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(instant67);
    }

    @Test
    public void test04770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04770");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.Days days2 = days0.multipliedBy(100);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        mutablePeriod3.addMillis((int) 'a');
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10);
        int int8 = period7.getSeconds();
        org.joda.time.Period period10 = period7.minusDays((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        mutablePeriod11.addMonths((int) (short) 0);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod3.setHours((int) (short) -1);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
    }

    @Test
    public void test04771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04771");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = dateTime8.withWeekyear((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) (byte) 100);
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        java.lang.String str19 = property18.getAsString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "81244224" + "'", str19, "81244224");
    }

    @Test
    public void test04772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04772");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval(1645513884989L, 1645513920L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04773");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime13.toDateTimeISO();
        org.joda.time.Instant instant19 = dateTime13.toInstant();
        org.joda.time.Instant instant20 = instant19.toInstant();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTimeISO();
        org.joda.time.Instant instant40 = dateTime34.toInstant();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Calendar calendar46 = dateTime44.toCalendar(locale45);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime44.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        boolean boolean54 = dateTime52.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes55 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration56 = minutes55.toStandardDuration();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateTime dateTime58 = dateTime28.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime58.getMinuteOfHour();
        java.lang.Class<?> wildcardClass61 = dateTime58.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test04774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04774");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        boolean boolean17 = dateTimeZone14.isStandardOffset((long) (byte) 100);
        boolean boolean19 = dateTimeZone14.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime32.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        boolean boolean42 = dateTime40.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration44 = minutes43.toStandardDuration();
        org.joda.time.Duration duration45 = minutes43.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration45);
        int int47 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology48 = chronology11.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.monthOfYear();
        boolean boolean50 = durationFieldType2.isSupported(chronology48);
        org.joda.time.Period period51 = new org.joda.time.Period(457087L, 1645513759836L, chronology48);
        org.joda.time.DurationField durationField52 = chronology48.halfdays();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test04775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04775");
        org.joda.time.Hours hours0 = org.joda.time.Hours.THREE;
        int int1 = hours0.getHours();
        org.joda.time.Hours hours3 = hours0.plus(0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.THREE;
        int int5 = hours4.getHours();
        org.joda.time.Hours hours7 = hours4.multipliedBy(2);
        org.joda.time.Hours hours9 = hours7.minus((int) '#');
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10);
        int int12 = period11.getSeconds();
        org.joda.time.Period period14 = period11.minusHours(100);
        org.joda.time.Period period16 = period11.minusSeconds((int) '4');
        org.joda.time.Hours hours17 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Hours hours18 = hours7.minus(hours17);
        org.joda.time.Hours hours19 = org.joda.time.Hours.THREE;
        int int20 = hours19.getHours();
        org.joda.time.Hours hours22 = hours19.multipliedBy(2);
        org.joda.time.Hours hours24 = hours22.minus((int) '#');
        org.joda.time.Hours hours25 = hours17.minus(hours22);
        org.joda.time.Hours hours26 = hours0.minus(hours25);
        org.joda.time.Period period27 = hours26.toPeriod();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test04776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04776");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        boolean boolean10 = dateTime3.equals((java.lang.Object) dateTime9);
        int int11 = dateTime3.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.Instant instant21 = dateTime15.toInstant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone25.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime31 = dateTime29.withHourOfDay(0);
        boolean boolean32 = instant22.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant36 = instant22.withDurationAdded((org.joda.time.ReadableDuration) duration34, (-1));
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime40.toDateTimeISO();
        org.joda.time.Instant instant46 = dateTime40.toInstant();
        org.joda.time.Instant instant47 = instant46.toInstant();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = null;
        boolean boolean53 = dateTimeZone50.isLocalDateTimeGap(localDateTime52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime56 = dateTime54.withHourOfDay(0);
        boolean boolean57 = instant47.isEqual((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant61 = instant47.withDurationAdded((org.joda.time.ReadableDuration) duration59, (-1));
        java.util.Date date62 = instant47.toDate();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant22, (org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant65 = instant22.plus(89424000000L);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) instant65);
        org.joda.time.DateTime.Property property67 = dateTime3.monthOfYear();
        int int68 = property67.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 12 + "'", int68 == 12);
    }

    @Test
    public void test04777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04777");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        long long4 = duration3.getStandardMinutes();
        org.joda.time.Duration duration6 = duration3.withMillis((-82737998L));
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean11 = dateTime9.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property12 = dateTime9.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        int int18 = dateTime17.getHourOfDay();
        boolean boolean19 = property12.equals((java.lang.Object) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        java.lang.String str30 = dateTimeField29.getName();
        java.lang.String str32 = dateTimeField29.getAsShortText((long) (short) 10);
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = dateTimeField29.getAsText((int) (byte) 100, locale34);
        java.util.Calendar calendar37 = dateTime17.toCalendar(locale34);
        long long38 = dateTime17.getMillis();
        org.joda.time.Period period39 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration41 = org.joda.time.Duration.millis((long) (short) -1);
        long long42 = duration41.getStandardMinutes();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType46 = periodType45.withYearsRemoved();
        org.joda.time.Days days49 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod50 = days49.toMutablePeriod();
        org.joda.time.Duration duration51 = days49.toStandardDuration();
        org.joda.time.PeriodType periodType52 = days49.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.Chronology chronology61 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.hourOfHalfday();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType52, chronology61);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTimeField dateTimeField65 = chronology61.millisOfDay();
        org.joda.time.Period period66 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType45, chronology61);
        org.joda.time.Period period67 = duration41.toPeriod(chronology61);
        org.joda.time.DateTime dateTime68 = dateTime17.toDateTime(chronology61);
        int int69 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime68);
        java.lang.String str70 = dateTime68.toString();
        org.joda.time.DateTime dateTime72 = dateTime68.minusMinutes(100);
        org.joda.time.TimeOfDay timeOfDay73 = dateTime68.toTimeOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 23 + "'", int18 == 23);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "weekOfWeekyear" + "'", str30, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "100" + "'", str36, "100");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 360000000 + "'", int69 == 360000000);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str70, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeOfDay73);
    }

    @Test
    public void test04778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04778");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime3.toCalendar(locale9);
        org.joda.time.DateTime dateTime13 = dateTime3.withMillisOfSecond(7);
        org.joda.time.Duration duration15 = org.joda.time.Duration.millis((long) (short) -1);
        long long16 = duration15.getStandardMinutes();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType20 = periodType19.withYearsRemoved();
        org.joda.time.Days days23 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod24 = days23.toMutablePeriod();
        org.joda.time.Duration duration25 = days23.toStandardDuration();
        org.joda.time.PeriodType periodType26 = days23.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfHalfday();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType26, chronology35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField39 = chronology35.millisOfDay();
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType19, chronology35);
        org.joda.time.Period period41 = duration15.toPeriod(chronology35);
        org.joda.time.DateTimeField dateTimeField42 = chronology35.year();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        java.util.GregorianCalendar gregorianCalendar46 = dateTime45.toGregorianCalendar();
        int int47 = dateTime45.getHourOfDay();
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Locale locale49 = locale48.stripExtensions();
        java.lang.String str50 = locale49.toLanguageTag();
        java.util.Calendar calendar51 = dateTime45.toCalendar(locale49);
        org.joda.time.DateTime dateTime53 = dateTime45.plusHours((int) 'x');
        org.joda.time.Chronology chronology54 = dateTime45.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = dateTime45.toLocalDateTime();
        long long57 = chronology35.set((org.joda.time.ReadablePartial) localDateTime55, 5037034144L);
        org.joda.time.DateTime dateTime58 = dateTime13.toDateTime(chronology35);
        org.joda.time.DurationField durationField59 = chronology35.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(gregorianCalendar46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 7 + "'", int47 == 7);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh-CN" + "'", str50, "zh-CN");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645514044562,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=4,MILLISECOND=562,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645514044562L + "'", long57 == 1645514044562L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test04779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04779");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 2, (long) 23);
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        mutablePeriod5.setSeconds((int) (byte) 0);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod5);
        mutablePeriod5.setPeriod((long) 100);
        mutablePeriod5.setMonths(544);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test04780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04780");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period5 = period1.withFieldAdded(durationFieldType3, 86399);
        org.joda.time.Days days6 = period5.toStandardDays();
        org.joda.time.Weeks weeks7 = days6.toStandardWeeks();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(weeks7);
    }

    @Test
    public void test04781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04781");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((java.lang.Object) "8");
        org.joda.time.Instant instant3 = instant1.minus((-100L));
        org.joda.time.Instant instant5 = instant1.minus((long) 69);
        long long6 = instant1.getMillis();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-61914758400000L) + "'", long6 == (-61914758400000L));
    }

    @Test
    public void test04782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04782");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime5.plusMonths((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.PeriodType periodType17 = days14.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfHalfday();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType17, chronology26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.millisOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) dateTime11, chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 829, 1639440535538L, chronology26);
        org.joda.time.DurationField durationField34 = chronology26.millis();
        org.joda.time.DateTimeField dateTimeField35 = chronology26.weekyear();
        org.joda.time.DurationField durationField36 = chronology26.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test04783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04783");
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType5, chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.millisOfDay();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = dateTimeField18.getAsText(20, locale20);
        java.lang.String str23 = locale20.getISO3Country();
        java.util.Locale.setDefault(locale20);
        java.lang.String str25 = locale20.getLanguage();
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "20" + "'", str22, "20");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CHN" + "'", str23, "CHN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh" + "'", str25, "zh");
    }

    @Test
    public void test04784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04784");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        int int3 = period2.getWeeks();
        org.joda.time.PeriodType periodType4 = period2.getPeriodType();
        org.joda.time.Duration duration5 = period2.toStandardDuration();
        long long6 = duration5.getStandardDays();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime13.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime13.toYearMonthDay();
        org.joda.time.DateTime dateTime22 = dateTime13.minus((long) 0);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test04785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04785");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        org.joda.time.DateTime.Property property9 = dateTime8.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Duration duration42 = minutes40.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42);
        int int44 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone47.isLocalDateTimeGap(localDateTime49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime53 = dateTime51.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMillis((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime57.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        boolean boolean67 = dateTime65.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes68 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration69 = minutes68.toStandardDuration();
        org.joda.time.Duration duration70 = minutes68.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTime dateTime72 = dateTime25.minus((org.joda.time.ReadableDuration) duration70);
        boolean boolean73 = property9.equals((java.lang.Object) dateTime72);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((-1L), dateTimeZone76);
        org.joda.time.LocalDateTime localDateTime78 = null;
        boolean boolean79 = dateTimeZone76.isLocalDateTimeGap(localDateTime78);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone76);
        org.joda.time.DateTime dateTime82 = dateTime80.withHourOfDay(0);
        org.joda.time.DateTime dateTime84 = dateTime80.minusHours((int) (byte) 1);
        boolean boolean85 = dateTime72.isAfter((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime.Property property86 = dateTime84.dayOfWeek();
        boolean boolean88 = dateTime84.isEqual(1645513960657L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(minutes68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test04786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04786");
        org.joda.time.Period period4 = new org.joda.time.Period((-27425129), (-850284), 876, 27423259);
    }

    @Test
    public void test04787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04787");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime3.getZone();
        org.joda.time.TimeOfDay timeOfDay8 = dateTime3.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.LocalTime localTime12 = dateTime11.toLocalTime();
        org.joda.time.Days days13 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) timeOfDay8, (org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean24 = interval20.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.TimeOfDay timeOfDay25 = dateTime23.toTimeOfDay();
        org.joda.time.Days days26 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localTime12, (org.joda.time.ReadablePartial) timeOfDay25);
        org.joda.time.Days days28 = days26.multipliedBy(292278993);
        org.joda.time.PeriodType periodType29 = days28.getPeriodType();
        int int30 = days28.size();
        org.joda.time.Days days31 = days28.negated();
        org.joda.time.Days days32 = days28.negated();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(days32);
    }

    @Test
    public void test04788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04788");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        int int6 = property5.getLeapAmount();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = property5.getAsText(locale8);
        int int11 = property5.getLeapAmount();
        org.joda.time.DateTime dateTime12 = property5.roundHalfEvenCopy();
        java.lang.String str13 = property5.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "244" + "'", str10, "244");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[millisOfSecond]" + "'", str13, "Property[millisOfSecond]");
    }

    @Test
    public void test04789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04789");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Days days11 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.Interval interval13 = interval6.withStartMillis(0L);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.Interval interval15 = interval13.toInterval();
        long long16 = interval15.getStartMillis();
        org.joda.time.Duration duration17 = interval15.toDuration();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime27 = dateTime22.toLocalDateTime();
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Calendar calendar30 = dateTime22.toCalendar(locale28);
        org.joda.time.Days days31 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod32 = days31.toMutablePeriod();
        org.joda.time.Duration duration33 = days31.toStandardDuration();
        org.joda.time.Days days34 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod35 = days34.toMutablePeriod();
        org.joda.time.Duration duration36 = days34.toStandardDuration();
        boolean boolean37 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTime dateTime38 = dateTime22.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone41.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        int int48 = dateTime47.getDayOfWeek();
        org.joda.time.Days days49 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod50 = days49.toMutablePeriod();
        org.joda.time.Duration duration51 = days49.toStandardDuration();
        long long52 = duration51.getStandardHours();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType54 = periodType53.withYearsRemoved();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration51, periodType54);
        org.joda.time.DateTime dateTime57 = dateTime47.withWeekyear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime62 = null;
        boolean boolean63 = dateTimeZone60.isLocalDateTimeGap(localDateTime62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime66 = dateTime64.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime66.toMutableDateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = dateTime47.withZoneRetainFields(dateTimeZone67);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime47);
        mutablePeriod18.setPeriod((org.joda.time.ReadableInterval) mutableInterval70);
        mutableInterval70.setEndMillis((-292275054L));
        boolean boolean74 = interval15.overlaps((org.joda.time.ReadableInterval) mutableInterval70);
        org.joda.time.Period period76 = new org.joda.time.Period((long) (byte) 10);
        int int77 = period76.getSeconds();
        org.joda.time.Period period79 = period76.minusDays((int) (short) 1);
        org.joda.time.Duration duration80 = period79.toStandardDuration();
        org.joda.time.Period period81 = duration80.toPeriod();
        org.joda.time.Duration duration84 = new org.joda.time.Duration((long) 1439, 0L);
        org.joda.time.Duration duration86 = duration80.withDurationAdded((org.joda.time.ReadableDuration) duration84, 182);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval70.setDurationAfterStart((org.joda.time.ReadableDuration) duration84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 144L + "'", long52 == 144L);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(duration86);
    }

    @Test
    public void test04790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04790");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property29 = dateTime26.property(dateTimeFieldType28);
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.DurationField durationField31 = property29.getDurationField();
        int int32 = property29.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test04791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04791");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.Instant instant18 = dateTime12.toInstant();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        boolean boolean32 = dateTime30.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration34 = minutes33.toStandardDuration();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime6.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime40.toDateTimeISO();
        org.joda.time.Instant instant46 = dateTime40.toInstant();
        org.joda.time.Instant instant47 = instant46.toInstant();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTimeISO();
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType58 = periodType57.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant46, (org.joda.time.ReadableInstant) dateTime56, periodType57);
        org.joda.time.Instant instant62 = instant46.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Interval interval63 = duration34.toIntervalTo((org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-1L), dateTimeZone68);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone68);
        org.joda.time.MutableInterval mutableInterval71 = interval70.toMutableInterval();
        boolean boolean73 = mutableInterval71.isBefore((long) 59);
        boolean boolean74 = interval63.abuts((org.joda.time.ReadableInterval) mutableInterval71);
        org.joda.time.DateTime dateTime75 = mutableInterval71.getEnd();
        org.joda.time.DateTime.Property property76 = dateTime75.year();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(mutableInterval71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
    }

    @Test
    public void test04792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04792");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone9.isLocalDateTimeGap(localDateTime11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime15 = dateTime13.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime15.toMutableDateTime(dateTimeZone16);
        long long19 = dateTimeZone16.nextTransition((long) (short) 100);
        boolean boolean21 = dateTimeZone16.isStandardOffset((long) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(948, 10, 2074, 21600000, 12, (-84376), 2870, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21600000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test04793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04793");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        boolean boolean17 = dateTimeZone14.isStandardOffset((long) (byte) 100);
        boolean boolean19 = dateTimeZone14.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime32.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        boolean boolean42 = dateTime40.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration44 = minutes43.toStandardDuration();
        org.joda.time.Duration duration45 = minutes43.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration45);
        int int47 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology48 = chronology11.withZone(dateTimeZone14);
        boolean boolean49 = durationFieldType2.isSupported(chronology11);
        org.joda.time.DateTimeField dateTimeField50 = chronology11.weekyear();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 'u', periodType1, chronology11);
        org.joda.time.DateTimeField dateTimeField52 = chronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology11.secondOfMinute();
        long long56 = dateTimeField53.add(59336L, (long) 263);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 322336L + "'", long56 == 322336L);
    }

    @Test
    public void test04794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04794");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime9.withZoneRetainFields(dateTimeZone13);
        int int19 = dateTimeZone13.getStandardOffset((long) ' ');
        java.lang.String str20 = dateTimeZone13.getID();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = dateTimeZone13.getName(600000L, locale22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone26.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime38 = dateTime33.toLocalDateTime();
        boolean boolean39 = dateTimeZone26.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime44 = null;
        boolean boolean45 = dateTimeZone42.isLocalDateTimeGap(localDateTime44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) 'a');
        org.joda.time.DateTime dateTime50 = dateTime46.plusHours(10);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        boolean boolean55 = dateTimeZone52.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone52);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property58 = dateTime56.property(dateTimeFieldType57);
        int int59 = dateTime50.get(dateTimeFieldType57);
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType57.getRangeDurationType();
        boolean boolean61 = localDateTime38.isSupported(dateTimeFieldType57);
        boolean boolean62 = dateTimeZone13.isLocalDateTimeGap(localDateTime38);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = localDateTime38.getValue(910);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 910");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test04795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04795");
        org.joda.time.Interval interval1 = org.joda.time.Interval.parse("1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.023Z");
        org.joda.time.Duration duration2 = interval1.toDuration();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(duration2);
    }

    @Test
    public void test04796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04796");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime13.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        boolean boolean23 = dateTime21.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration25 = minutes24.toStandardDuration();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime3.toMutableDateTime(dateTimeZone27);
        org.joda.time.LocalDate localDate29 = dateTime3.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getRangeDurationType();
        java.lang.String str32 = dateTimeFieldType30.toString();
        java.lang.String str33 = dateTimeFieldType30.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.Instant instant42 = dateTime41.toInstant();
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType30.getField(chronology43);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = localDate29.get(dateTimeFieldType30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfMinute' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "secondOfMinute" + "'", str32, "secondOfMinute");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "secondOfMinute" + "'", str33, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test04797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04797");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(144L);
        mutablePeriod1.setHours((-59));
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        int int6 = mutablePeriod1.getMillis();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 144 + "'", int6 == 144);
    }

    @Test
    public void test04798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04798");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1645513805919L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04799");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.addMonths((int) (byte) -1);
        mutablePeriod1.addWeeks((int) (byte) 1);
        mutablePeriod1.add(27423259, 86399, 773, 35, 502, 636, (int) 'u', (int) ' ');
        mutablePeriod1.setSeconds(0);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test04800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04800");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-16), 508, 508, (int) '#');
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.junit.Assert.assertNotNull(seconds5);
    }

    @Test
    public void test04801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04801");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        boolean boolean9 = mutableInterval7.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray20 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList21);
        boolean boolean24 = mutableInterval7.equals((java.lang.Object) strList21);
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval7.toMutableInterval();
        boolean boolean27 = mutableInterval7.isBefore((long) 747);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        int int37 = dateTime36.getDayOfWeek();
        org.joda.time.DateTime dateTime39 = dateTime36.minusWeeks((int) (byte) 10);
        boolean boolean41 = dateTime39.isEqual((long) (byte) 10);
        org.joda.time.DateTime dateTime43 = dateTime39.withMillis((long) 20);
        org.joda.time.LocalDate localDate44 = dateTime39.toLocalDate();
        org.joda.time.DateTime dateTime46 = dateTime39.plusSeconds(1969);
        org.joda.time.Hours hours48 = org.joda.time.Hours.EIGHT;
        org.joda.time.DurationFieldType durationFieldType49 = hours48.getFieldType();
        org.joda.time.Hours hours51 = hours48.minus((int) (byte) 1);
        org.joda.time.Hours hours52 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours53 = hours52.negated();
        org.joda.time.DurationFieldType durationFieldType54 = hours53.getFieldType();
        org.joda.time.Hours hours56 = hours53.multipliedBy((int) 'a');
        org.joda.time.Hours hours57 = hours51.plus(hours56);
        org.joda.time.PeriodType periodType58 = hours51.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', periodType58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadablePeriod) mutablePeriod59);
        boolean boolean61 = mutableInterval7.equals((java.lang.Object) mutablePeriod59);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod59.addMinutes(27338829);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(hours56);
        org.junit.Assert.assertNotNull(hours57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test04802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04802");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMillis((int) '#');
        int int36 = instant24.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Days days37 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod38 = days37.toMutablePeriod();
        org.joda.time.Duration duration39 = days37.toStandardDuration();
        org.joda.time.Days days40 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod41 = days40.toMutablePeriod();
        org.joda.time.Duration duration42 = days40.toStandardDuration();
        boolean boolean43 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Instant instant45 = instant24.withDurationAdded((org.joda.time.ReadableDuration) duration42, 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        boolean boolean56 = interval52.isAfter((org.joda.time.ReadableInstant) dateTime55);
        long long57 = interval52.toDurationMillis();
        org.joda.time.Duration duration58 = interval52.toDuration();
        org.joda.time.Days days61 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod62 = days61.toMutablePeriod();
        org.joda.time.Duration duration63 = days61.toStandardDuration();
        org.joda.time.PeriodType periodType64 = days61.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Calendar calendar70 = dateTime68.toCalendar(locale69);
        org.joda.time.DateTime dateTime72 = dateTime68.plusMillis((int) '4');
        org.joda.time.Chronology chronology73 = dateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.hourOfHalfday();
        org.joda.time.Period period75 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType64, chronology73);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadableDuration) duration58, periodType64);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((-1L), dateTimeZone79);
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.util.Calendar calendar82 = dateTime80.toCalendar(locale81);
        org.joda.time.DateTime dateTime84 = dateTime80.plusMillis((int) '4');
        org.joda.time.DateTime dateTime85 = dateTime80.toDateTimeISO();
        org.joda.time.DateTime dateTime87 = dateTime85.plusMillis((int) '#');
        int int88 = dateTime87.getMillisOfSecond();
        org.joda.time.DateTime dateTime89 = dateTime87.toDateTimeISO();
        org.joda.time.Interval interval90 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration58, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTimeZone dateTimeZone93 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime94 = new org.joda.time.DateTime((-1L), dateTimeZone93);
        java.util.Locale locale95 = java.util.Locale.KOREAN;
        java.util.Calendar calendar96 = dateTime94.toCalendar(locale95);
        org.joda.time.Instant instant97 = dateTime94.toInstant();
        org.joda.time.Interval interval98 = duration58.toIntervalTo((org.joda.time.ReadableInstant) instant97);
        org.joda.time.Instant instant99 = instant97.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 2L + "'", long57 == 2L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar82);
        org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 34 + "'", int88 == 34);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar96);
        org.junit.Assert.assertEquals(calendar96.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant97);
        org.junit.Assert.assertNotNull(interval98);
        org.junit.Assert.assertNotNull(instant99);
    }

    @Test
    public void test04803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04803");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.Duration duration1 = seconds0.toStandardDuration();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04804");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.PeriodType periodType13 = days10.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType13, chronology22);
        org.joda.time.Period period25 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime5, periodType13);
        org.joda.time.PeriodType periodType26 = periodType13.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(periodType13);
        org.joda.time.PeriodType periodType28 = periodType13.withDaysRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(periodType29);
        org.joda.time.format.PeriodPrinter periodPrinter31 = null;
        org.joda.time.format.PeriodParser periodParser32 = null;
        org.joda.time.format.PeriodFormatter periodFormatter33 = new org.joda.time.format.PeriodFormatter(periodPrinter31, periodParser32);
        org.joda.time.PeriodType periodType34 = periodFormatter33.getParseType();
        org.joda.time.PeriodType periodType35 = periodFormatter33.getParseType();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter37 = periodFormatter33.withLocale(locale36);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType40 = periodType39.withMinutesRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10, periodType40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(periodType40);
        org.joda.time.Hours hours43 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period(0L, chronology45);
        org.joda.time.Period period48 = period46.plusMillis(100);
        int int49 = period48.getHours();
        org.joda.time.Period period51 = period48.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Calendar calendar57 = dateTime55.toCalendar(locale56);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMillis((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime55.toDateTimeISO();
        org.joda.time.Instant instant61 = dateTime55.toInstant();
        org.joda.time.Instant instant62 = instant61.toInstant();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone65.isLocalDateTimeGap(localDateTime67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime71 = dateTime69.withHourOfDay(0);
        boolean boolean72 = instant62.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration74 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant76 = instant62.withDurationAdded((org.joda.time.ReadableDuration) duration74, (-1));
        boolean boolean78 = instant76.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((-1L), dateTimeZone81);
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.util.Calendar calendar84 = dateTime82.toCalendar(locale83);
        org.joda.time.DateTime dateTime86 = dateTime82.plusMillis((int) '4');
        org.joda.time.DateTime dateTime87 = dateTime82.toDateTimeISO();
        org.joda.time.Instant instant88 = dateTime82.toInstant();
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant76, (org.joda.time.ReadableInstant) dateTime82, periodType89);
        org.joda.time.PeriodType periodType91 = periodType89.withWeeksRemoved();
        org.joda.time.PeriodType periodType92 = periodType91.withYearsRemoved();
        org.joda.time.Period period93 = period48.normalizedStandard(periodType92);
        org.joda.time.Period period94 = new org.joda.time.Period((java.lang.Object) mutablePeriod42, periodType92);
        org.joda.time.format.PeriodFormatter periodFormatter95 = periodFormatter33.withParseType(periodType92);
        boolean boolean96 = periodFormatter95.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = mutablePeriod30.toString(periodFormatter95);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNull(periodType34);
        org.junit.Assert.assertNull(periodType35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(periodFormatter95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test04805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04805");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (short) 0);
        mutablePeriod1.addMillis(34);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime10.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        boolean boolean26 = dateTime24.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration28 = minutes27.toStandardDuration();
        org.joda.time.Duration duration29 = minutes27.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration31 = duration29.toDuration();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant41 = dateTime35.toInstant();
        org.joda.time.Instant instant42 = instant41.toInstant();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime47 = null;
        boolean boolean48 = dateTimeZone45.isLocalDateTimeGap(localDateTime47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime51 = dateTime49.withHourOfDay(0);
        boolean boolean52 = instant42.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant56 = instant42.withDurationAdded((org.joda.time.ReadableDuration) duration54, (-1));
        boolean boolean58 = instant56.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology59 = instant56.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration31, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.dayOfMonth();
        org.joda.time.DurationField durationField62 = chronology59.weeks();
        org.joda.time.DurationField durationField63 = chronology59.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long71 = chronology59.getDateTimeMillis(35, 108, 42, 225, 21600000, 747, 2720);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 225 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test04806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04806");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTime dateTime6 = property5.getDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.plusSeconds(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime17.getZone();
        boolean boolean21 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime23 = dateTime8.withWeekyear(491);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test04807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04807");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime11.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        boolean boolean21 = dateTime19.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime11.toYearMonthDay();
        java.lang.String str24 = dateTime11.toString();
        boolean boolean25 = interval7.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime27 = dateTime11.plus((long) 292278993);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        int int37 = dateTime36.getDayOfWeek();
        org.joda.time.DateTime dateTime39 = dateTime36.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property40 = dateTime36.millisOfSecond();
        org.joda.time.DateTime dateTime41 = property40.withMinimumValue();
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10);
        int int44 = period43.getSeconds();
        org.joda.time.Period period46 = period43.minusHours(100);
        int int47 = period46.getMillis();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.Duration duration54 = period46.toDurationTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration54);
        long long56 = duration54.getStandardDays();
        org.joda.time.Duration duration57 = duration54.toDuration();
        org.joda.time.DateTime dateTime58 = dateTime11.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration61 = duration54.withDurationAdded((long) 811, 19045);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str24, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-4L) + "'", long56 == (-4L));
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(duration61);
    }

    @Test
    public void test04808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04808");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(86399);
        org.joda.time.Seconds seconds2 = seconds1.negated();
        org.joda.time.PeriodType periodType3 = seconds2.getPeriodType();
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds6 = seconds4.minus(seconds5);
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds9 = seconds7.minus(seconds8);
        org.joda.time.Seconds seconds10 = seconds6.minus(seconds7);
        org.joda.time.Seconds seconds11 = null;
        org.joda.time.Seconds seconds12 = seconds7.minus(seconds11);
        boolean boolean13 = seconds2.isLessThan(seconds11);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test04809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04809");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        boolean boolean5 = interval2.contains((-1L));
        org.joda.time.Duration duration6 = interval2.toDuration();
        boolean boolean7 = interval2.containsNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime11.toDateTimeISO();
        org.joda.time.Instant instant17 = dateTime11.toInstant();
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10);
        int int20 = period19.getSeconds();
        org.joda.time.Period period22 = period19.minusHours(100);
        int int23 = period22.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime11.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(86399);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        org.joda.time.Duration duration29 = org.joda.time.Duration.millis((long) (short) -1);
        long long30 = duration29.getMillis();
        long long31 = duration29.getStandardHours();
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadableDuration) duration29);
        boolean boolean33 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test04810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04810");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Period period31 = period29.withWeeks((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant41 = dateTime35.toInstant();
        org.joda.time.Instant instant42 = instant41.toInstant();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime47 = null;
        boolean boolean48 = dateTimeZone45.isLocalDateTimeGap(localDateTime47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime51 = dateTime49.withHourOfDay(0);
        boolean boolean52 = instant42.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant56 = instant42.withDurationAdded((org.joda.time.ReadableDuration) duration54, (-1));
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime60.toDateTimeISO();
        org.joda.time.DateTime dateTime67 = dateTime65.plusMillis((int) '#');
        int int68 = instant56.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration70 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Calendar calendar76 = dateTime74.toCalendar(locale75);
        org.joda.time.DateTime dateTime78 = dateTime74.plusMillis((int) '4');
        org.joda.time.DateTime dateTime79 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime.Property property80 = dateTime74.weekyear();
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime74, periodType81);
        int int83 = dateTime74.getSecondOfDay();
        boolean boolean84 = dateTime65.isBefore((org.joda.time.ReadableInstant) dateTime74);
        int int85 = dateTime74.getSecondOfMinute();
        org.joda.time.Duration duration86 = period31.toDurationFrom((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTimeZone dateTimeZone88 = dateTime74.getZone();
        int int90 = dateTimeZone88.getStandardOffset(262828799500L);
        long long92 = dateTimeZone88.nextTransition(71L);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 86399 + "'", int83 == 86399);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 59 + "'", int85 == 59);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 71L + "'", long92 == 71L);
    }

    @Test
    public void test04811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04811");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTimeISO();
        org.joda.time.Instant instant30 = dateTime24.toInstant();
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        boolean boolean41 = instant31.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant45 = instant31.withDurationAdded((org.joda.time.ReadableDuration) duration43, (-1));
        boolean boolean47 = instant45.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTimeISO();
        org.joda.time.Instant instant57 = dateTime51.toInstant();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant45, (org.joda.time.ReadableInstant) dateTime51, periodType58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadablePeriod) period59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.Seconds seconds62 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Hours hours63 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) seconds62);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(seconds62);
        org.junit.Assert.assertNotNull(hours63);
    }

    @Test
    public void test04812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04812");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Instant instant4 = instant2.plus(6350400000L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
    }

    @Test
    public void test04813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04813");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        int int2 = days0.getDays();
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        boolean boolean5 = days0.equals((java.lang.Object) locale4);
        java.util.Locale locale6 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet8 = locale6.getExtensionKeys();
        java.lang.String str9 = locale6.getLanguage();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale14.getDisplayCountry(locale16);
        java.lang.String str18 = locale6.getDisplayName(locale16);
        java.lang.String str19 = locale4.getDisplayLanguage(locale16);
        java.util.Locale locale21 = new java.util.Locale("\u4e2d\u6587");
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale22.getScript();
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale22.getDisplayCountry(locale25);
        java.lang.String str27 = locale21.getDisplayVariant(locale25);
        java.lang.String str28 = locale4.getDisplayLanguage(locale21);
        boolean boolean29 = locale21.hasExtensions();
        java.lang.String str30 = locale21.getDisplayCountry();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e2d\u6587" + "'", str7, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str18, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str19, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals(locale21.toString(), "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Cina" + "'", str26, "Cina");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese" + "'", str28, "Chinese");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test04814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04814");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(864, 108, 0, 292278993);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) 138);
        mutablePeriod4.add((org.joda.time.ReadableDuration) duration6);
        mutablePeriod4.setMillis(0);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType12 = periodType11.withMillisRemoved();
        org.joda.time.Period period13 = mutableInterval10.toPeriod(periodType11);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Days days16 = org.joda.time.Days.MIN_VALUE;
        boolean boolean17 = days14.isLessThan(days16);
        org.joda.time.Days days18 = days14.negated();
        mutableInterval10.setPeriodAfterStart((org.joda.time.ReadablePeriod) days14);
        org.joda.time.Chronology chronology20 = mutableInterval10.getChronology();
        mutablePeriod4.add((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime33 = dateTime28.toLocalDateTime();
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.util.Calendar calendar36 = dateTime28.toCalendar(locale34);
        org.joda.time.Days days37 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod38 = days37.toMutablePeriod();
        org.joda.time.Duration duration39 = days37.toStandardDuration();
        org.joda.time.Days days40 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod41 = days40.toMutablePeriod();
        org.joda.time.Duration duration42 = days40.toStandardDuration();
        boolean boolean43 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTime dateTime44 = dateTime28.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Days days47 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod48 = days47.toMutablePeriod();
        org.joda.time.Duration duration49 = days47.toStandardDuration();
        org.joda.time.PeriodType periodType50 = days47.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.Chronology chronology59 = dateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.hourOfHalfday();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType50, chronology59);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTimeField dateTimeField63 = chronology59.millisOfDay();
        org.joda.time.Period period64 = duration39.toPeriod(chronology59);
        org.joda.time.Period period65 = new org.joda.time.Period((long) '4', (long) 11, chronology59);
        org.joda.time.DateTimeField dateTimeField66 = chronology59.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField67 = chronology59.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField68 = chronology59.minuteOfDay();
        mutablePeriod4.add((long) 500, chronology59);
        mutablePeriod4.addMinutes((-84376));
        mutablePeriod4.setMinutes((-2));
        mutablePeriod4.setMillis((-93368857));
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test04815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04815");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology27 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.years();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test04816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04816");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(86399);
        org.joda.time.Seconds seconds2 = seconds1.negated();
        org.joda.time.Period period4 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Period period6 = period4.withWeeks((int) (short) -1);
        org.joda.time.Period period8 = period4.withDays(0);
        org.joda.time.Period period10 = period4.withWeeks(86399);
        org.joda.time.Seconds seconds11 = period4.toStandardSeconds();
        org.joda.time.Seconds seconds12 = seconds1.plus(seconds11);
        org.joda.time.Duration duration13 = seconds12.toStandardDuration();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(duration13);
    }

    @Test
    public void test04817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04817");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        boolean boolean10 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusMinutes((int) ' ');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period31);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        boolean boolean40 = interval37.contains((-1L));
        boolean boolean41 = interval34.contains((org.joda.time.ReadableInterval) interval37);
        boolean boolean42 = interval34.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone47);
        org.joda.time.MutableInterval mutableInterval50 = interval49.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval51 = interval49.toMutableInterval();
        boolean boolean53 = mutableInterval51.isBefore((long) (-100));
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone58);
        boolean boolean62 = interval60.isAfter(100L);
        long long63 = interval60.getEndMillis();
        org.joda.time.Interval interval64 = interval60.toInterval();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Interval interval66 = interval64.withDurationBeforeEnd(readableDuration65);
        org.joda.time.Duration duration67 = interval66.toDuration();
        mutableInterval51.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Period period69 = mutableInterval51.toPeriod();
        boolean boolean70 = interval34.isBefore((org.joda.time.ReadableInterval) mutableInterval51);
        mutableInterval51.setStartMillis((-1184765529598035L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test04818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04818");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.lang.String str5 = dateTimeZone2.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.Instant instant8 = org.joda.time.Instant.parse("804");
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        int int18 = dateTime12.getDayOfWeek();
        boolean boolean19 = instant8.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) 53, (long) 747);
        org.joda.time.Instant instant24 = instant8.withDurationAdded((org.joda.time.ReadableDuration) duration22, 22);
        org.joda.time.Hours hours25 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) instant8);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = hours25.getValue(953);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 953");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(hours25);
    }

    @Test
    public void test04819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04819");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(0L);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime10.withHourOfDay(0);
        int int13 = dateTime12.getDayOfWeek();
        org.joda.time.DateTime dateTime15 = dateTime12.minusWeeks((int) (byte) 10);
        boolean boolean17 = dateTime15.isEqual((long) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime15.withMillis((long) 20);
        org.joda.time.LocalDate localDate20 = dateTime15.toLocalDate();
        java.lang.String str21 = localDate20.toString();
        int[] intArray23 = chronology3.get((org.joda.time.ReadablePartial) localDate20, (long) 421);
        org.joda.time.DurationField durationField24 = chronology3.millis();
        long long25 = durationField24.getUnitMillis();
        long long28 = durationField24.add(0L, 0);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2021-12-14" + "'", str21, "2021-12-14");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test04820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04820");
        org.joda.time.Period period1 = org.joda.time.Period.hours(34);
        org.joda.time.Hours hours2 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period1);
        java.lang.String str3 = hours2.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT34H" + "'", str3, "PT34H");
    }

    @Test
    public void test04821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04821");
        org.joda.time.Hours hours1 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours3 = hours1.plus((int) (byte) 100);
        org.joda.time.PeriodType periodType4 = hours1.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 86399999, periodType4);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.setMinutes(876);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test04822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04822");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        int int9 = dateTime8.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime13.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime13.toYearMonthDay();
        org.joda.time.DateTime dateTime22 = dateTime13.minus((long) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMillis(570);
        org.joda.time.Seconds seconds25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(0L, chronology27);
        org.joda.time.Period period30 = period28.plusMillis(100);
        int int31 = period30.getHours();
        org.joda.time.Period period33 = period30.minusMinutes(508);
        org.joda.time.Seconds seconds34 = period33.toStandardSeconds();
        org.joda.time.Seconds seconds36 = seconds34.plus((-457087));
        org.joda.time.Seconds seconds37 = org.joda.time.Seconds.ZERO;
        org.joda.time.MutablePeriod mutablePeriod38 = seconds37.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.seconds();
        int int40 = seconds37.get(durationFieldType39);
        org.joda.time.Seconds seconds41 = seconds36.plus(seconds37);
        boolean boolean42 = seconds25.isGreaterThan(seconds37);
        org.joda.time.Seconds seconds44 = seconds37.minus(409);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = seconds37.getValue(783);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 783");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(seconds44);
    }

    @Test
    public void test04823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04823");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) 0, (int) 'x', (int) (byte) 10, 59);
        java.lang.Object obj5 = mutablePeriod4.clone();
        mutablePeriod4.setMinutes(8);
        mutablePeriod4.setDays(2870);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType12 = periodType11.withMillisRemoved();
        org.joda.time.Period period13 = mutableInterval10.toPeriod(periodType11);
        org.joda.time.DateTime dateTime14 = mutableInterval10.getEnd();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone19);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        java.lang.String str23 = interval21.toString();
        boolean boolean24 = mutableInterval10.isBefore((org.joda.time.ReadableInterval) interval21);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval21);
        long long26 = interval21.getEndMillis();
        boolean boolean27 = interval21.containsNow();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P2870DT8M10.061S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P2870DT8M10.061S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P2870DT8M10.061S");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z" + "'", str23, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test04824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04824");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        int int3 = dateTimeZone1.getStandardOffset(11518415999999L);
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.getDefault(category5);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("yearOfEra");
        java.lang.String str10 = locale9.getVariant();
        java.lang.String str11 = locale9.getDisplayLanguage();
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale.setDefault(category5, locale9);
        java.lang.String str14 = dateTimeZone1.getShortName(472L, locale9);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.006" + "'", str14, "+00:00:00.006");
    }

    @Test
    public void test04825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04825");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        int int8 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime.Property property9 = dateTime5.hourOfDay();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property9.getAsText(locale11);
        org.joda.time.DateTime dateTime14 = property9.addToCopy(6);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds(4);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone21);
        java.util.TimeZone timeZone24 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime25 = dateTime14.toDateTime(dateTimeZone21);
        java.lang.String str26 = dateTimeZone21.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(0L, 31536000000L, dateTimeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        long long31 = dateTimeZone21.convertLocalToUTC((long) 2720, true);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "23" + "'", str12, "23");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2720L + "'", long31 == 2720L);
    }

    @Test
    public void test04826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04826");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property12 = dateTime8.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime14 = property12.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        int int23 = dateTime20.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime20.getZone();
        org.joda.time.TimeOfDay timeOfDay25 = dateTime20.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        int int41 = dateTime38.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime38.getZone();
        org.joda.time.TimeOfDay timeOfDay43 = dateTime38.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis((int) '4');
        org.joda.time.DateTime dateTime52 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period53 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay25, (org.joda.time.ReadablePartial) timeOfDay43);
        int int54 = timeOfDay43.size();
        java.lang.String str55 = timeOfDay43.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        boolean boolean57 = timeOfDay43.isSupported(dateTimeFieldType56);
        org.joda.time.DateTime dateTime59 = dateTime16.withField(dateTimeFieldType56, 171);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 59 + "'", int41 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "T23:59:59.999" + "'", str55, "T23:59:59.999");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test04827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04827");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 10, periodType3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology18);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((-1L), 59L, chronology18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 747, periodType3, chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology18.getZone();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
    }

    @Test
    public void test04828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04828");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        boolean boolean12 = interval6.isBefore((long) (-1));
        boolean boolean13 = interval6.isAfterNow();
        long long14 = interval6.getStartMillis();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Days days20 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod21 = days20.toMutablePeriod();
        org.joda.time.Duration duration22 = days20.toStandardDuration();
        long long23 = duration22.getStandardHours();
        mutableInterval19.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        long long25 = duration22.getMillis();
        java.lang.String str26 = duration22.toString();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone31);
        boolean boolean35 = interval33.isAfter(100L);
        long long36 = interval33.getEndMillis();
        org.joda.time.Interval interval37 = interval33.toInterval();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime41.toDateTimeISO();
        org.joda.time.Instant instant47 = dateTime41.toInstant();
        org.joda.time.Instant instant48 = instant47.toInstant();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Calendar calendar54 = dateTime52.toCalendar(locale53);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime52.toDateTimeISO();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType59 = periodType58.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant47, (org.joda.time.ReadableInstant) dateTime57, periodType58);
        boolean boolean61 = interval33.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period62 = duration22.toPeriodTo((org.joda.time.ReadableInstant) dateTime57);
        int int63 = dateTime57.getMillisOfDay();
        org.joda.time.DateTime dateTime65 = dateTime57.withCenturyOfEra((int) (byte) 10);
        org.joda.time.Interval interval66 = interval6.withStart((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime68 = dateTime65.plusMillis(25951);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 144L + "'", long23 == 144L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 518400000L + "'", long25 == 518400000L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT518400S" + "'", str26, "PT518400S");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 86399999 + "'", int63 == 86399999);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test04829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04829");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
    }

    @Test
    public void test04830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04830");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean13 = interval9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        long long14 = interval9.toDurationMillis();
        org.joda.time.Duration duration15 = interval9.toDuration();
        org.joda.time.Days days16 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod17 = days16.toMutablePeriod();
        mutablePeriod17.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval20 = null;
        mutablePeriod17.add(readableInterval20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.eras();
        int int23 = mutablePeriod17.get(durationFieldType22);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology35);
        mutablePeriod17.setPeriod((long) (-1), chronology35);
        org.joda.time.Days days39 = org.joda.time.Days.ZERO;
        org.joda.time.Days days40 = days39.negated();
        int[] intArray43 = chronology35.get((org.joda.time.ReadablePeriod) days39, 1L, 1645513717718L);
        org.joda.time.Period period44 = duration15.toPeriod(chronology35);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (short) 100, periodType2, chronology35);
        org.joda.time.DateTimeField dateTimeField46 = chronology35.dayOfWeek();
        java.lang.String str47 = chronology35.toString();
        org.joda.time.Period period48 = new org.joda.time.Period((-1639440603L), chronology35);
        org.joda.time.Period period50 = period48.plusHours(25913348);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[19045]");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test04831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04831");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        org.joda.time.Period period11 = interval7.toPeriod(periodType10);
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        mutablePeriod13.addWeeks((int) (short) -1);
        mutablePeriod13.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        org.joda.time.Days days28 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod29 = days28.toMutablePeriod();
        org.joda.time.Duration duration30 = days28.toStandardDuration();
        org.joda.time.PeriodType periodType31 = days28.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.Chronology chronology40 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.hourOfHalfday();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType31, chronology40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology40);
        mutablePeriod13.setPeriod(1L, chronology40);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.Period period46 = new org.joda.time.Period((long) 'x', periodType10, chronology40);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int50 = dateTimeZone48.getOffsetFromLocal((long) '4');
        org.joda.time.Chronology chronology51 = chronology40.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DurationField durationField53 = chronology40.months();
        long long56 = durationField53.subtract(1645513841226L, 2678340000L);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-7043352256169358774L) + "'", long56 == (-7043352256169358774L));
    }

    @Test
    public void test04832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04832");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfDay();
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 1, chronology9);
        org.joda.time.format.PeriodPrinter periodPrinter13 = null;
        org.joda.time.format.PeriodParser periodParser14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = new org.joda.time.format.PeriodFormatter(periodPrinter13, periodParser14);
        org.joda.time.format.PeriodPrinter periodPrinter16 = periodFormatter15.getPrinter();
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = locale17.getDisplayVariant();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter15.withLocale(locale17);
        org.joda.time.PeriodType periodType20 = periodFormatter19.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = period12.toString(periodFormatter19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNull(periodPrinter16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNull(periodType20);
    }

    @Test
    public void test04833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04833");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(144L);
        int int2 = mutablePeriod1.size();
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        org.joda.time.Interval interval6 = interval5.toInterval();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((java.lang.Object) interval6);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval6);
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval6);
        mutablePeriod1.addMinutes((-59));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(minutes8);
    }

    @Test
    public void test04834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04834");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Days days11 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.Period period12 = days11.toPeriod();
        org.joda.time.PeriodType periodType13 = days11.getPeriodType();
        org.joda.time.Days days15 = days11.minus((-27425131));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType17 = days15.getFieldType(14);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 14");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(days15);
    }

    @Test
    public void test04835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04835");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.secondOfDay();
        org.joda.time.Interval interval9 = property8.toInterval();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale10);
        int int12 = property8.getMaximumTextLength(locale10);
        org.joda.time.DateTime dateTime14 = property8.setCopy(0);
        org.joda.time.DateTime dateTime16 = dateTime14.withHourOfDay(0);
        org.joda.time.LocalDate localDate17 = dateTime16.toLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test04836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04836");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        long long11 = interval6.toDurationMillis();
        org.joda.time.Days days12 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTimeISO();
        org.joda.time.Instant instant22 = dateTime16.toInstant();
        org.joda.time.Instant instant23 = instant22.toInstant();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone26.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        boolean boolean33 = instant23.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant37 = instant23.withDurationAdded((org.joda.time.ReadableDuration) duration35, (-1));
        java.util.Date date38 = instant23.toDate();
        boolean boolean39 = interval6.isAfter((org.joda.time.ReadableInstant) instant23);
        org.joda.time.MutableDateTime mutableDateTime40 = instant23.toMutableDateTimeISO();
        org.joda.time.Period period42 = org.joda.time.Period.weeks((int) (short) -1);
        org.joda.time.Duration duration43 = period42.toStandardDuration();
        long long44 = duration43.getStandardHours();
        org.joda.time.Duration duration47 = duration43.withDurationAdded(0L, 99);
        long long48 = duration47.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime40, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        boolean boolean54 = dateTime52.isAfter((long) (byte) 10);
        org.joda.time.DateTime dateTime56 = dateTime52.minusSeconds((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((-1L), dateTimeZone61);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        boolean boolean67 = interval63.isAfter((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((-1L), dateTimeZone70);
        java.lang.String str73 = dateTimeZone70.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime74 = dateTime66.withZoneRetainFields(dateTimeZone70);
        int int76 = dateTimeZone70.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime77 = dateTime56.withZoneRetainFields(dateTimeZone70);
        org.joda.time.DateTime dateTime79 = dateTime56.minus(0L);
        boolean boolean80 = duration47.equals((java.lang.Object) 0L);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-168L) + "'", long44 == (-168L));
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-604800L) + "'", long48 == (-604800L));
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test04837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04837");
        org.joda.time.Days days0 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.PeriodType periodType1 = days0.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days3 = days0.multipliedBy((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 32");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test04838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04838");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        java.lang.String str10 = dateTimeField9.getName();
        int int12 = dateTimeField9.get((long) (byte) 100);
        java.lang.String str13 = dateTimeField9.toString();
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale14.getISO3Language();
        int int16 = dateTimeField9.getMaximumShortTextLength(locale14);
        int int18 = dateTimeField9.getMaximumValue((long) (byte) 1);
        java.lang.String str20 = dateTimeField9.getAsShortText(58110L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekOfWeekyear" + "'", str10, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str13, "DateTimeField[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fra" + "'", str15, "fra");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
    }

    @Test
    public void test04839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04839");
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType4 = minutes3.getFieldType();
        org.joda.time.Minutes minutes6 = minutes3.multipliedBy((int) 'a');
        org.joda.time.Minutes minutes7 = minutes2.plus(minutes6);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType9 = minutes8.getFieldType();
        org.joda.time.Minutes minutes11 = minutes8.multipliedBy((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean25 = dateTime23.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        org.joda.time.Minutes minutes29 = minutes26.minus((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        boolean boolean43 = dateTime41.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes44 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = minutes44.toStandardDuration();
        org.joda.time.Minutes minutes47 = minutes44.minus((int) (byte) 100);
        boolean boolean48 = minutes29.isLessThan(minutes47);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Calendar calendar54 = dateTime52.toCalendar(locale53);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime52.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        boolean boolean62 = dateTime60.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes63 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration64 = minutes63.toStandardDuration();
        org.joda.time.Minutes minutes66 = minutes63.minus((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((-1L), dateTimeZone69);
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.util.Calendar calendar72 = dateTime70.toCalendar(locale71);
        org.joda.time.DateTime dateTime74 = dateTime70.plusMillis((int) '4');
        org.joda.time.DateTime dateTime75 = dateTime70.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        boolean boolean80 = dateTime78.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes81 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Duration duration82 = minutes81.toStandardDuration();
        org.joda.time.Minutes minutes84 = minutes81.minus((int) (byte) 100);
        boolean boolean85 = minutes66.isLessThan(minutes84);
        org.joda.time.Minutes minutes86 = minutes47.plus(minutes66);
        boolean boolean87 = minutes8.isGreaterThan(minutes47);
        org.joda.time.Minutes minutes88 = minutes2.minus(minutes8);
        org.joda.time.PeriodType periodType89 = minutes88.getPeriodType();
        org.joda.time.PeriodType periodType90 = periodType89.withDaysRemoved();
        org.joda.time.Period period91 = new org.joda.time.Period((long) 170, periodType90);
        org.joda.time.PeriodType periodType92 = periodType90.withYearsRemoved();
        org.joda.time.Chronology chronology93 = null;
        org.joda.time.Period period94 = new org.joda.time.Period(0L, periodType90, chronology93);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(minutes81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(minutes84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(minutes86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(periodType92);
    }

    @Test
    public void test04840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04840");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setUnicodeLocaleKeyword("\u4e2d\u570b", "PT2H");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test04841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04841");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        org.joda.time.Period period4 = period2.plusMillis(100);
        int int5 = period4.getHours();
        org.joda.time.Period period7 = period4.plusMonths(100);
        org.joda.time.Period period9 = period7.plusMinutes(2);
        org.joda.time.Period period11 = period7.minusYears(69);
        org.joda.time.Period period12 = period7.toPeriod();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test04842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04842");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone5);
        org.joda.time.MutableInterval mutableInterval8 = interval7.toMutableInterval();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale16.getDisplayCountry(locale18);
        java.lang.String str20 = dateTimeField10.getAsText((long) (short) -1, locale18);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        boolean boolean31 = interval27.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.lang.String str37 = dateTimeZone34.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime30.withZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        boolean boolean41 = dateTimeZone34.isStandardOffset((long) (short) -1);
        java.util.Locale locale45 = new java.util.Locale("+00:00", "2022");
        java.lang.String str46 = dateTimeZone34.getShortName(600000L, locale45);
        long long48 = dateTimeZone34.nextTransition(1645513719942L);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone51.isLocalDateTimeGap(localDateTime53);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Calendar calendar60 = dateTime58.toCalendar(locale59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime63 = dateTime58.toLocalDateTime();
        boolean boolean64 = dateTimeZone51.isLocalDateTimeGap(localDateTime63);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime69 = null;
        boolean boolean70 = dateTimeZone67.isLocalDateTimeGap(localDateTime69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime73 = dateTime71.plusHours((int) 'a');
        org.joda.time.DateTime dateTime75 = dateTime71.plusHours(10);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        boolean boolean80 = dateTimeZone77.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(dateTimeZone77);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property83 = dateTime81.property(dateTimeFieldType82);
        int int84 = dateTime75.get(dateTimeFieldType82);
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType82.getRangeDurationType();
        boolean boolean86 = localDateTime63.isSupported(dateTimeFieldType82);
        boolean boolean87 = dateTimeZone34.isLocalDateTimeGap(localDateTime63);
        java.util.Locale locale91 = new java.util.Locale("PT-3M", "DaysNoDays");
        java.util.Locale locale92 = locale91.stripExtensions();
        java.lang.String str93 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime63, 170, locale91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period94 = new org.joda.time.Period(readablePartial0, (org.joda.time.ReadablePartial) localDateTime63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "19" + "'", str20, "19");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals(locale45.toString(), "+00:00_2022");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645513719942L + "'", long48 == 1645513719942L);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 5 + "'", int84 == 5);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals(locale91.toString(), "pt-3m_DAYSNODAYS");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "pt-3m_DAYSNODAYS");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "170" + "'", str93, "170");
    }

    @Test
    public void test04843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04843");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMonths(100);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant6, (org.joda.time.ReadableDuration) duration9);
        int int11 = mutablePeriod10.size();
        org.joda.time.DateTime dateTime12 = dateTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime21.plusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) dateTime21, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis((int) 'u');
        boolean boolean29 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Instant instant30 = dateTime28.toInstant();
        int int31 = dateTime28.getYearOfCentury();
        org.joda.time.DateTime dateTime33 = dateTime28.plusMonths(2021);
        org.joda.time.DateTime dateTime35 = dateTime28.withCenturyOfEra(12);
        org.joda.time.TimeOfDay timeOfDay36 = dateTime35.toTimeOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime35.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 70 + "'", int31 == 70);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
    }

    @Test
    public void test04844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04844");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds2 = seconds0.minus(seconds1);
        org.joda.time.Duration duration3 = seconds0.toStandardDuration();
        org.joda.time.Seconds seconds5 = seconds0.minus(0);
        org.joda.time.Seconds seconds7 = seconds0.multipliedBy(11);
        org.joda.time.PeriodType periodType8 = seconds0.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test04845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04845");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology19);
        mutablePeriod1.setPeriod((long) (-1), chronology19);
        org.joda.time.Days days23 = org.joda.time.Days.ZERO;
        org.joda.time.Days days24 = days23.negated();
        int[] intArray27 = chronology19.get((org.joda.time.ReadablePeriod) days23, 1L, 1645513717718L);
        org.joda.time.Days days29 = days23.minus((int) 'x');
        java.lang.String str30 = days23.toString();
        org.joda.time.Duration duration31 = days23.toStandardDuration();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.minus(readableDuration32);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[19045]");
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "P0D" + "'", str30, "P0D");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
    }

    @Test
    public void test04846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04846");
        java.lang.Object obj0 = null;
        org.joda.time.Period period1 = new org.joda.time.Period(obj0);
    }

    @Test
    public void test04847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04847");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        mutablePeriod1.setMinutes(86399);
        mutablePeriod1.addWeeks(292278993);
        int int19 = mutablePeriod1.getMillis();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test04848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04848");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Thu");
        double double2 = languageRange1.getWeight();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone5.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getDayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property15 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime16 = property15.withMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = property15.addToCopy((long) 3);
        boolean boolean20 = languageRange1.equals((java.lang.Object) property15);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04849");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (short) 0);
        org.joda.time.Period period3 = period1.plusMonths((int) 'u');
        org.joda.time.Period period5 = period3.minusDays(99);
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test04850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04850");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone13);
        org.joda.time.MutableInterval mutableInterval16 = interval15.toMutableInterval();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        mutableInterval8.setChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone25);
        int int29 = dateTimeZone25.getStandardOffset((long) 100);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = dateTimeZone25.getName((long) 100, locale31);
        java.util.Locale locale33 = locale31.stripExtensions();
        java.lang.String str34 = dateTimeField19.getAsText((-2147483647), locale33);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-2147483647" + "'", str34, "-2147483647");
    }

    @Test
    public void test04851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04851");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime5.plusMonths((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.PeriodType periodType17 = days14.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfHalfday();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType17, chronology26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.millisOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) dateTime11, chronology26);
        org.joda.time.Period period32 = new org.joda.time.Period(0L, (long) (byte) 100, chronology26);
        java.lang.String str33 = chronology26.toString();
        org.joda.time.DurationField durationField34 = chronology26.years();
        int int36 = durationField34.getValue((long) 941);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = durationField34.subtract((long) 910, 2813123359836L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -2813123359836");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test04852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04852");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime6.plusMonths((int) (byte) 1);
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        org.joda.time.PeriodType periodType18 = days15.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType18, chronology27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.millisOfDay();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime12, chronology27);
        org.joda.time.Period period33 = new org.joda.time.Period(0L, (long) (byte) 100, chronology27);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField35 = chronology27.centuryOfEra();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(172800000L, chronology27);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod36.setValue(659, (-23));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 659");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test04853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04853");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        mutablePeriod1.setMinutes(86399);
        mutablePeriod1.addWeeks(292278993);
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration31 = duration21.toDuration();
        org.joda.time.Duration duration32 = duration31.toDuration();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime36.toDateTimeISO();
        org.joda.time.DateTime dateTime43 = dateTime41.plusMillis((int) '#');
        java.util.Date date44 = dateTime41.toDate();
        org.joda.time.DateTime dateTime46 = dateTime41.withMillisOfSecond(636);
        org.joda.time.TimeOfDay timeOfDay47 = dateTime46.toTimeOfDay();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime46);
        mutablePeriod1.add((org.joda.time.ReadableDuration) duration32);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.setValue(155, 421);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 155");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(timeOfDay47);
    }

    @Test
    public void test04854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04854");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1000L);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone4.isLocalDateTimeGap(localDateTime6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime10 = dateTime8.withHourOfDay(0);
        int int11 = dateTime10.getDayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        boolean boolean28 = dateTime26.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isStandardOffset((long) (byte) 100);
        boolean boolean36 = dateTimeZone31.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone39.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = dateTime43.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        boolean boolean59 = dateTime57.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes60 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration61 = minutes60.toStandardDuration();
        org.joda.time.Duration duration62 = minutes60.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration62);
        int int64 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime65 = dateTime18.withZoneRetainFields(dateTimeZone31);
        boolean boolean66 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime67 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(0L, periodType70);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(32820001L, periodType70);
        org.joda.time.PeriodType periodType73 = periodType70.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime67, periodType70);
        org.joda.time.DateTime dateTime76 = dateTime67.minusSeconds(1969);
        org.joda.time.YearMonthDay yearMonthDay77 = dateTime76.toYearMonthDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(yearMonthDay77);
    }

    @Test
    public void test04855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04855");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration2 = period1.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration12 = duration2.toDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.plusMillis((int) '#');
        java.util.Date date25 = dateTime22.toDate();
        org.joda.time.DateTime dateTime27 = dateTime22.withMillisOfSecond(636);
        org.joda.time.TimeOfDay timeOfDay28 = dateTime27.toTimeOfDay();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        java.util.GregorianCalendar gregorianCalendar33 = dateTime32.toGregorianCalendar();
        int int34 = dateTime32.getHourOfDay();
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale36.toLanguageTag();
        java.util.Calendar calendar38 = dateTime32.toCalendar(locale36);
        org.joda.time.DateTime.Property property39 = dateTime32.minuteOfHour();
        boolean boolean40 = property39.isLeap();
        int int41 = property39.getMaximumValue();
        org.joda.time.DateTime dateTime42 = property39.roundCeilingCopy();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) mutablePeriod29, (org.joda.time.ReadableInstant) dateTime42);
        long long44 = mutableInterval43.getEndMillis();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gregorianCalendar33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zh-CN" + "'", str37, "zh-CN");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645514048060,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=8,MILLISECOND=60,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 59 + "'", int41 == 59);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645514100000L + "'", long44 == 1645514100000L);
    }

    @Test
    public void test04856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04856");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.Instant instant18 = dateTime12.toInstant();
        org.joda.time.Instant instant19 = instant18.toInstant();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.withHourOfDay(0);
        boolean boolean29 = instant19.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant33 = instant19.withDurationAdded((org.joda.time.ReadableDuration) duration31, (-1));
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime dateTime44 = dateTime42.plusMillis((int) '#');
        int int45 = instant33.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Days days46 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod47 = days46.toMutablePeriod();
        org.joda.time.Duration duration48 = days46.toStandardDuration();
        org.joda.time.Days days49 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod50 = days49.toMutablePeriod();
        org.joda.time.Duration duration51 = days49.toStandardDuration();
        boolean boolean52 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Instant instant54 = instant33.withDurationAdded((org.joda.time.ReadableDuration) duration51, 10);
        org.joda.time.DateTime dateTime55 = dateTime8.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Days days56 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod57 = days56.toMutablePeriod();
        org.joda.time.Duration duration58 = days56.toStandardDuration();
        org.joda.time.PeriodType periodType59 = days56.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = dateTime63.toCalendar(locale64);
        org.joda.time.DateTime dateTime67 = dateTime63.plusMillis((int) '4');
        org.joda.time.Chronology chronology68 = dateTime63.getChronology();
        org.joda.time.Period period69 = duration51.toPeriod(periodType59, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.centuryOfEra();
        long long73 = dateTimeField70.getDifferenceAsLong((-5356800000L), 1645513947648L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
    }

    @Test
    public void test04857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04857");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime26.withMillis(86399L);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType40 = periodType39.withMinutesRemoved();
        org.joda.time.Period period41 = interval37.toPeriod(periodType40);
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        mutablePeriod43.addWeeks((int) (short) -1);
        mutablePeriod43.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        org.joda.time.Days days58 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod59 = days58.toMutablePeriod();
        org.joda.time.Duration duration60 = days58.toStandardDuration();
        org.joda.time.PeriodType periodType61 = days58.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Calendar calendar67 = dateTime65.toCalendar(locale66);
        org.joda.time.DateTime dateTime69 = dateTime65.plusMillis((int) '4');
        org.joda.time.Chronology chronology70 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.hourOfHalfday();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType61, chronology70);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology70);
        mutablePeriod43.setPeriod(1L, chronology70);
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(chronology70);
        org.joda.time.Period period76 = new org.joda.time.Period((long) 'x', periodType40, chronology70);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int80 = dateTimeZone78.getOffsetFromLocal((long) '4');
        org.joda.time.Chronology chronology81 = chronology70.withZone(dateTimeZone78);
        org.joda.time.DateTime dateTime82 = dateTime26.toDateTime(chronology70);
        org.joda.time.DateTime.Property property83 = dateTime82.secondOfMinute();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test04858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04858");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) dateTime8, dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.Instant instant24 = dateTime18.toInstant();
        org.joda.time.Instant instant25 = instant24.toInstant();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone28.isLocalDateTimeGap(localDateTime30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        boolean boolean35 = instant25.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant39 = instant25.withDurationAdded((org.joda.time.ReadableDuration) duration37, (-1));
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime50 = dateTime48.plusMillis((int) '#');
        int int51 = instant39.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = dateTime48.toDateTime();
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Locale locale54 = locale53.stripExtensions();
        java.lang.String str55 = locale53.getISO3Language();
        java.lang.String str56 = locale53.getDisplayScript();
        java.util.Calendar calendar57 = dateTime48.toCalendar(locale53);
        int int58 = property14.getMaximumShortTextLength(locale53);
        org.joda.time.DateTime dateTime59 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime61 = property14.setCopy("698");
        org.joda.time.DateTime dateTime62 = property14.getDateTime();
        org.joda.time.DateTime dateTime64 = dateTime62.minusMinutes((-850284));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "zho" + "'", str55, "zho");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test04859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04859");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((java.lang.Object) interval3);
        org.joda.time.Interval interval5 = interval3.toInterval();
        long long6 = interval5.getEndMillis();
        org.joda.time.DateTime dateTime7 = interval5.getEnd();
        boolean boolean9 = interval5.isAfter((long) (byte) -1);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514048239L + "'", long6 == 1645514048239L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test04860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04860");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds2 = seconds0.minus(seconds1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone7);
        boolean boolean11 = interval9.isAfter(100L);
        long long12 = interval9.getEndMillis();
        org.joda.time.Interval interval13 = interval9.toInterval();
        boolean boolean15 = interval9.isBefore((long) (-1));
        boolean boolean16 = interval9.isBeforeNow();
        boolean boolean17 = interval9.isAfterNow();
        org.joda.time.Seconds seconds18 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval9);
        boolean boolean19 = seconds2.isLessThan(seconds18);
        int int20 = seconds2.getSeconds();
        org.joda.time.Seconds seconds22 = seconds2.multipliedBy(53);
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds24 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds25 = seconds23.minus(seconds24);
        org.joda.time.Seconds seconds26 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds27 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds28 = seconds26.minus(seconds27);
        org.joda.time.Seconds seconds29 = seconds25.minus(seconds26);
        org.joda.time.Seconds seconds30 = seconds29.negated();
        org.joda.time.Seconds seconds31 = seconds30.negated();
        org.joda.time.Seconds seconds32 = seconds22.plus(seconds31);
        int int33 = seconds22.size();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test04861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04861");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.Instant instant20 = dateTime14.toInstant();
        org.joda.time.Instant instant21 = instant20.toInstant();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTimeISO();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType32 = periodType31.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant20, (org.joda.time.ReadableInstant) dateTime30, periodType31);
        boolean boolean34 = interval6.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        org.joda.time.DateTime dateTime42 = dateTime38.plusMillis((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime38.toDateTimeISO();
        org.joda.time.Instant instant44 = dateTime38.toInstant();
        org.joda.time.Instant instant45 = instant44.toInstant();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType56 = periodType55.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant44, (org.joda.time.ReadableInstant) dateTime54, periodType55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant59 = instant44.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Calendar calendar68 = dateTime66.toCalendar(locale67);
        org.joda.time.DateTime dateTime70 = dateTime66.plusMillis((int) '4');
        org.joda.time.Chronology chronology71 = dateTime66.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.hourOfHalfday();
        org.joda.time.DateTime dateTime73 = dateTime62.withChronology(chronology71);
        int int74 = dateTime62.getYear();
        int int75 = dateTime62.getMillisOfSecond();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration58, (org.joda.time.ReadableInstant) dateTime62);
        mutableInterval76.setDurationAfterStart((long) 508);
        boolean boolean79 = interval6.contains((org.joda.time.ReadableInterval) mutableInterval76);
        org.joda.time.MutableInterval mutableInterval80 = mutableInterval76.copy();
        org.joda.time.Hours hours81 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) mutableInterval76);
        org.joda.time.Hours hours82 = org.joda.time.Hours.THREE;
        int int83 = hours82.getHours();
        org.joda.time.Hours hours85 = hours82.multipliedBy(2);
        org.joda.time.Hours hours87 = hours85.minus((int) '#');
        org.joda.time.Period period89 = new org.joda.time.Period((long) (byte) 10);
        int int90 = period89.getSeconds();
        org.joda.time.Period period92 = period89.minusHours(100);
        org.joda.time.Period period94 = period89.minusSeconds((int) '4');
        org.joda.time.Hours hours95 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period89);
        org.joda.time.Hours hours96 = hours85.minus(hours95);
        org.joda.time.Hours hours98 = hours96.multipliedBy(941);
        boolean boolean99 = hours81.isGreaterThan(hours98);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 270 + "'", int75 == 270);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(mutableInterval80);
        org.junit.Assert.assertNotNull(hours81);
        org.junit.Assert.assertNotNull(hours82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertNotNull(hours85);
        org.junit.Assert.assertNotNull(hours87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(hours95);
        org.junit.Assert.assertNotNull(hours96);
        org.junit.Assert.assertNotNull(hours98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test04862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04862");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        boolean boolean10 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusMinutes((int) ' ');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period31);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        boolean boolean40 = interval37.contains((-1L));
        boolean boolean41 = interval34.contains((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Interval interval42 = interval37.toInterval();
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays(172);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test04863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04863");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.Instant instant18 = dateTime12.toInstant();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        boolean boolean32 = dateTime30.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration34 = minutes33.toStandardDuration();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime6.minus((org.joda.time.ReadableDuration) duration34);
        boolean boolean37 = dateTime6.isAfterNow();
        org.joda.time.DateTime dateTime39 = dateTime6.plusDays(2108160);
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test04864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04864");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 53, 1645513719942L);
        mutableInterval2.setDurationAfterStart(69L);
    }

    @Test
    public void test04865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04865");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds3 = seconds1.minus(seconds2);
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds6 = seconds4.minus(seconds5);
        org.joda.time.Seconds seconds7 = seconds3.minus(seconds4);
        org.joda.time.Seconds seconds8 = null;
        org.joda.time.Seconds seconds9 = seconds4.minus(seconds8);
        org.joda.time.Seconds seconds11 = seconds4.multipliedBy((int) 'a');
        org.joda.time.PeriodType periodType12 = seconds11.getPeriodType();
        org.joda.time.Period period13 = new org.joda.time.Period((long) (-123), periodType12);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test04866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04866");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(5037060310L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04867");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        long long7 = interval6.toDurationMillis();
        org.joda.time.ReadableInterval readableInterval8 = null;
        boolean boolean9 = interval6.overlaps(readableInterval8);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(34, 34, (int) (short) 0, 7);
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10);
        int int17 = period16.getSeconds();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period20 = period16.withFieldAdded(durationFieldType18, 86399);
        org.joda.time.DurationFieldType durationFieldType22 = period16.getFieldType(1);
        mutablePeriod14.set(durationFieldType22, (int) 'u');
        org.joda.time.Interval interval25 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTime dateTime26 = interval25.getStart();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime31.toInstant();
        org.joda.time.Instant instant38 = instant37.toInstant();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone41.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        boolean boolean48 = instant38.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant52 = instant38.withDurationAdded((org.joda.time.ReadableDuration) duration50, (-1));
        boolean boolean54 = instant52.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Calendar calendar60 = dateTime58.toCalendar(locale59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusMillis((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime58.toDateTimeISO();
        org.joda.time.Instant instant64 = dateTime58.toInstant();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant52, (org.joda.time.ReadableInstant) dateTime58, periodType65);
        org.joda.time.PeriodType periodType67 = periodType65.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((-1L), dateTimeZone70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Calendar calendar73 = dateTime71.toCalendar(locale72);
        org.joda.time.DateTime dateTime75 = dateTime71.plusMillis((int) '4');
        org.joda.time.Chronology chronology76 = dateTime71.getChronology();
        org.joda.time.Period period77 = new org.joda.time.Period((-259200000L), periodType67, chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.millisOfDay();
        org.joda.time.DateTimeField dateTimeField79 = chronology76.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime80 = dateTime26.toMutableDateTime(chronology76);
        boolean boolean81 = dateTime26.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test04868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04868");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.Hours hours33 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime35 = dateTime23.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        int int37 = property9.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        boolean boolean48 = interval44.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.TimeOfDay timeOfDay49 = dateTime47.toTimeOfDay();
        int int50 = property9.compareTo((org.joda.time.ReadablePartial) timeOfDay49);
        org.joda.time.DateTime dateTime52 = property9.addToCopy(518400000L);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(2);
        java.util.Date date55 = dateTime52.toDate();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514048474,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=8,MILLISECOND=474,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Sat Oct 17 07:14:08 UTC 3007");
    }

    @Test
    public void test04869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04869");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration29 = period28.toStandardDuration();
        org.joda.time.Instant instant30 = instant24.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone33.isLocalDateTimeGap(localDateTime35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = dateTime37.withHourOfDay(0);
        int int40 = dateTime39.getDayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime39.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.Instant instant51 = dateTime50.toInstant();
        org.joda.time.Hours hours52 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTime dateTime54 = dateTime42.plusMillis((int) (byte) 1);
        boolean boolean55 = instant24.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime56 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Instant instant57 = dateTime42.toInstant();
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.weeks();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.dayOfYear();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval61.getEnd();
        org.joda.time.Instant instant63 = dateTime62.toInstant();
        org.joda.time.LocalDateTime localDateTime64 = dateTime62.toLocalDateTime();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period(0L, chronology67);
        org.joda.time.Period period70 = period68.plusMillis(100);
        int int71 = period70.getHours();
        org.joda.time.Period period73 = period70.plusMonths(100);
        org.joda.time.Period period75 = period73.withYears(3);
        org.joda.time.Period period76 = period73.normalizedStandard();
        org.joda.time.Period period78 = period73.multipliedBy(12);
        int[] intArray79 = period78.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray81 = dateTimeField60.set((org.joda.time.ReadablePartial) localDateTime64, 2922789, intArray79, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 1200, 0, 0, 0, 0, 0, 1200]");
    }

    @Test
    public void test04870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04870");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.addMonths((int) (byte) -1);
        mutablePeriod1.addYears(1970);
        int int8 = mutablePeriod1.getMinutes();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test04871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04871");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Duration duration20 = duration15.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        int int25 = dateTime24.getHourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.minusWeeks(59);
        org.joda.time.Duration duration29 = org.joda.time.Duration.millis(10L);
        org.joda.time.DateTime dateTime30 = dateTime24.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone35);
        int int39 = dateTimeZone35.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone35);
        boolean boolean42 = dateTimeZone35.isStandardOffset(0L);
        long long45 = dateTimeZone35.convertLocalToUTC((long) (-1), false);
        org.joda.time.DateTime dateTime46 = dateTime24.withZone(dateTimeZone35);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime46, periodType47);
        java.lang.String str49 = duration15.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514048556,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=8,MILLISECOND=556,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 23 + "'", int25 == 23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT518400S" + "'", str49, "PT518400S");
    }

    @Test
    public void test04872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04872");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        int int3 = period2.getSeconds();
        org.joda.time.Period period5 = period2.withMonths((int) (byte) 10);
        org.joda.time.Period period7 = period2.plusMinutes(108);
        int int8 = period7.getDays();
        org.joda.time.Hours hours9 = period7.toStandardHours();
        org.joda.time.Hours hours11 = hours9.minus(13);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
    }

    @Test
    public void test04873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04873");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Period period28 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Period period30 = period28.withWeeks((int) (short) -1);
        org.joda.time.Period period32 = period28.withDays(0);
        org.joda.time.Period period34 = period28.withWeeks(86399);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadablePeriod) period34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.Interval interval37 = interval36.toInterval();
        long long38 = interval37.getEndMillis();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 948);
        org.joda.time.Interval interval41 = interval37.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod40);
        mutablePeriod40.setYears(718);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52254115200000L + "'", long38 == 52254115200000L);
        org.junit.Assert.assertNotNull(interval41);
    }

    @Test
    public void test04874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04874");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        int int4 = dateTime3.getHourOfDay();
        org.joda.time.DateTime dateTime6 = dateTime3.minusWeeks(59);
        org.joda.time.Duration duration8 = org.joda.time.Duration.millis(10L);
        org.joda.time.DateTime dateTime9 = dateTime3.plus((org.joda.time.ReadableDuration) duration8);
        boolean boolean10 = dateTime3.isAfterNow();
        org.joda.time.Instant instant11 = dateTime3.toInstant();
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.ZERO;
        org.joda.time.MutablePeriod mutablePeriod13 = seconds12.toMutablePeriod();
        org.joda.time.DateTime dateTime14 = dateTime3.plus((org.joda.time.ReadablePeriod) seconds12);
        org.joda.time.DateTime dateTime16 = dateTime14.withSecondOfMinute(28);
        org.joda.time.DateTime dateTime18 = dateTime16.withYear(971);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test04875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04875");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.getDisplayLanguage();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(0L, chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.era();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(34, 34, (int) (short) 0, 7);
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10);
        int int24 = period23.getSeconds();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period27 = period23.withFieldAdded(durationFieldType25, 86399);
        org.joda.time.DurationFieldType durationFieldType29 = period23.getFieldType(1);
        mutablePeriod21.set(durationFieldType29, (int) 'u');
        mutablePeriod21.addHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone38);
        boolean boolean42 = interval40.isAfter(100L);
        long long43 = interval40.getEndMillis();
        org.joda.time.DateTime dateTime44 = interval40.getEnd();
        long long45 = interval40.getStartMillis();
        mutablePeriod21.setPeriod((org.joda.time.ReadableInterval) interval40);
        long long49 = chronology12.add((org.joda.time.ReadablePeriod) mutablePeriod21, (-31536000000L), (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone50 = chronology12.getZone();
        boolean boolean51 = locale0.equals((java.lang.Object) chronology12);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Chinese" + "'", str2, "Chinese");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-31536000000L) + "'", long49 == (-31536000000L));
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test04876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04876");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) 0, (int) 'x', (int) (byte) 10, 59);
        mutablePeriod4.setPeriod((long) (short) 0);
        mutablePeriod4.addYears(360000000);
        mutablePeriod4.setWeeks(660);
    }

    @Test
    public void test04877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04877");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        boolean boolean8 = interval6.isBeforeNow();
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.Period period10 = minutes9.toPeriod();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test04878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04878");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra(7);
        org.joda.time.DateTime.Property property7 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.plus(2L);
        org.joda.time.DateTime.Property property10 = dateTime6.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime6.withDayOfWeek(941);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 941 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test04879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04879");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology19);
        mutablePeriod1.setPeriod((long) (-1), chronology19);
        org.joda.time.Days days23 = org.joda.time.Days.ZERO;
        org.joda.time.Days days24 = days23.negated();
        int[] intArray27 = chronology19.get((org.joda.time.ReadablePeriod) days23, 1L, 1645513717718L);
        org.joda.time.Days days29 = days23.minus((int) 'x');
        java.lang.String str30 = days23.toString();
        org.joda.time.Days days32 = days23.dividedBy(68);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[19045]");
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "P0D" + "'", str30, "P0D");
        org.junit.Assert.assertNotNull(days32);
    }

    @Test
    public void test04880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04880");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = periodFormatter3.getParseType();
        org.joda.time.PeriodType periodType5 = periodFormatter3.getParseType();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter3.withLocale(locale6);
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.PeriodType periodType13 = days10.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType13, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekyearOfCentury();
        long long28 = dateTimeField25.add((long) 618, 259199999L);
        java.lang.String str29 = dateTimeField25.getName();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone35);
        int int39 = dateTimeZone35.getStandardOffset((long) 100);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = dateTimeZone35.getName((long) 100, locale41);
        java.lang.String str43 = dateTimeField25.getAsShortText((long) (-6), locale41);
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter3.withLocale(locale41);
        org.joda.time.format.PeriodParser periodParser45 = periodFormatter44.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period46 = org.joda.time.Period.parse("436", periodFormatter44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodType5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 8179561926864000618L + "'", long28 == 8179561926864000618L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekyearOfCentury" + "'", str29, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "69" + "'", str43, "69");
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNull(periodParser45);
    }

    @Test
    public void test04881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04881");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 22, 1645513719942L, periodType2);
        mutablePeriod3.setMonths(25785);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setHours((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test04882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04882");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(0L, (long) 360000000);
    }

    @Test
    public void test04883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04883");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, periodType3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 823, 25995571L, periodType3, chronology5);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test04884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04884");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\uc911\uad6d", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04885");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 291);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime10 = dateTime5.toLocalDateTime();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = dateTime5.toCalendar(locale11);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Duration duration19 = days17.toStandardDuration();
        boolean boolean20 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime21 = dateTime5.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        int int31 = dateTime30.getDayOfWeek();
        org.joda.time.Days days32 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod33 = days32.toMutablePeriod();
        org.joda.time.Duration duration34 = days32.toStandardDuration();
        long long35 = duration34.getStandardHours();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration34, periodType37);
        org.joda.time.DateTime dateTime40 = dateTime30.withWeekyear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone43.isLocalDateTimeGap(localDateTime45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime49 = dateTime47.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime49.toMutableDateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = dateTime30.withZoneRetainFields(dateTimeZone50);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime55 = dateTime21.minusYears(1439);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Calendar calendar61 = dateTime59.toCalendar(locale60);
        org.joda.time.DateTime dateTime63 = dateTime59.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime64 = dateTime59.toLocalDateTime();
        java.util.Locale locale65 = java.util.Locale.CHINA;
        java.util.Locale locale66 = locale65.stripExtensions();
        java.util.Calendar calendar67 = dateTime59.toCalendar(locale65);
        org.joda.time.Days days68 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod69 = days68.toMutablePeriod();
        org.joda.time.Duration duration70 = days68.toStandardDuration();
        org.joda.time.Days days71 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod72 = days71.toMutablePeriod();
        org.joda.time.Duration duration73 = days71.toStandardDuration();
        boolean boolean74 = duration70.isLongerThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.DateTime dateTime75 = dateTime59.minus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTime.Property property76 = dateTime59.secondOfMinute();
        int int77 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime59.getZone();
        org.joda.time.DateTime.Property property79 = dateTime59.era();
        org.joda.time.DateTime.Property property80 = dateTime59.yearOfCentury();
        org.joda.time.Period period81 = org.joda.time.Period.ZERO;
        int int82 = period81.getDays();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod(0L, chronology85);
        org.joda.time.DurationFieldType[] durationFieldTypeArray87 = mutablePeriod86.getFieldTypes();
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.forFields(durationFieldTypeArray87);
        org.joda.time.PeriodType periodType89 = periodType88.withSecondsRemoved();
        org.joda.time.Period period90 = new org.joda.time.Period(164096150400000L, periodType88);
        org.joda.time.PeriodType periodType91 = periodType88.withDaysRemoved();
        org.joda.time.Period period92 = period81.withPeriodType(periodType91);
        org.joda.time.Period period93 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime59, periodType91);
        org.joda.time.Period period94 = duration1.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 144L + "'", long35 == 144L);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days68);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(days71);
        org.junit.Assert.assertNotNull(mutablePeriod72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(period94);
    }

    @Test
    public void test04886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04886");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology10);
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds15 = seconds13.minus(seconds14);
        org.joda.time.Duration duration16 = seconds13.toStandardDuration();
        int[] intArray19 = chronology10.get((org.joda.time.ReadablePeriod) seconds13, 652278993L, (long) (-1));
        org.joda.time.DateTimeField dateTimeField20 = chronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = chronology10.weekyear();
        org.joda.time.DurationField durationField22 = chronology10.months();
        java.lang.String str23 = durationField22.getName();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-652278]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "months" + "'", str23, "months");
    }

    @Test
    public void test04887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04887");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology19);
        mutablePeriod1.setPeriod((long) (-1), chronology19);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property24 = dateTime23.year();
        org.joda.time.Duration duration26 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTimeISO();
        org.joda.time.DateTime.Property property36 = dateTime30.weekyear();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime30, periodType37);
        org.joda.time.Period period40 = period38.plusYears((int) (byte) 0);
        org.joda.time.Period period41 = period38.toPeriod();
        org.joda.time.Period period43 = period38.plusYears(96);
        org.joda.time.Period period45 = period43.withHours(107);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadablePeriod) period45);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) 53, 1645513719942L);
        org.joda.time.Interval interval50 = interval46.overlap((org.joda.time.ReadableInterval) mutableInterval49);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNull(interval50);
    }

    @Test
    public void test04888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04888");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) 0, (int) 'x', (int) (byte) 10, 59);
        mutablePeriod4.addHours(10);
        int[] intArray7 = mutablePeriod4.getValues();
        org.joda.time.Days days8 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod9 = days8.toMutablePeriod();
        org.joda.time.Days days10 = org.joda.time.Days.MIN_VALUE;
        boolean boolean11 = days8.isLessThan(days10);
        org.joda.time.DurationFieldType durationFieldType12 = days10.getFieldType();
        mutablePeriod4.set(durationFieldType12, 652);
        mutablePeriod4.setHours(291);
        mutablePeriod4.setYears(78);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 10, 120, 10, 59]");
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationFieldType12);
    }

    @Test
    public void test04889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04889");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.addWeeks((int) (short) -1);
        mutablePeriod1.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        org.joda.time.Days days16 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod17 = days16.toMutablePeriod();
        org.joda.time.Duration duration18 = days16.toStandardDuration();
        org.joda.time.PeriodType periodType19 = days16.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        org.joda.time.Period period30 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType19, chronology28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology28);
        mutablePeriod1.setPeriod(1L, chronology28);
        mutablePeriod1.setSeconds((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10);
        int int37 = period36.getSeconds();
        org.joda.time.Period period39 = period36.minusHours(100);
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period42 = period39.withMillis(9);
        java.lang.String str43 = period42.toString();
        org.joda.time.Days days44 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod45 = days44.toMutablePeriod();
        mutablePeriod45.setSeconds((int) (byte) 0);
        mutablePeriod45.setDays((int) 'a');
        mutablePeriod45.setDays((int) '4');
        org.joda.time.PeriodType periodType52 = mutablePeriod45.getPeriodType();
        org.joda.time.Period period53 = period42.plus((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.Period period55 = period42.minusSeconds(604);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT-100H0.009S" + "'", str43, "PT-100H0.009S");
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test04890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04890");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone18);
        org.joda.time.MutableInterval mutableInterval21 = interval20.toMutableInterval();
        boolean boolean23 = mutableInterval21.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray34 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList35);
        boolean boolean38 = mutableInterval21.equals((java.lang.Object) strList35);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList35, filteringMode39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap41);
        java.util.Locale locale44 = new java.util.Locale("\u4e2d\u6587");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.lang.String[] strArray56 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList57);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone64);
        org.joda.time.MutableInterval mutableInterval67 = interval66.toMutableInterval();
        boolean boolean69 = mutableInterval67.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.lang.String[] strArray80 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.lang.String>) strList81);
        boolean boolean84 = mutableInterval67.equals((java.lang.Object) strList81);
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList81, filteringMode85);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet45, filteringMode85);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode39.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertEquals(locale44.toString(), "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(mutableInterval67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode85.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strList87);
    }

    @Test
    public void test04891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04891");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) 0, (int) 'x', (int) (byte) 10, 59);
        mutablePeriod4.setPeriod((long) (short) 0);
        mutablePeriod4.addYears(360000000);
        mutablePeriod4.addMillis(57);
        mutablePeriod4.addYears(0);
    }

    @Test
    public void test04892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04892");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTimeISO();
        org.joda.time.Instant instant36 = dateTime30.toInstant();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadableInstant) dateTime30, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withWeeksRemoved();
        java.lang.String str40 = periodType39.toString();
        org.joda.time.PeriodType periodType41 = periodType39.withMillisRemoved();
        org.joda.time.DurationFieldType durationFieldType42 = null;
        boolean boolean43 = periodType41.isSupported(durationFieldType42);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PeriodType[Minutes]" + "'", str40, "PeriodType[Minutes]");
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test04893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04893");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        boolean boolean22 = instant12.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant26 = instant12.withDurationAdded((org.joda.time.ReadableDuration) duration24, (-1));
        boolean boolean28 = instant26.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology29 = instant26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-100L), (long) (byte) 100, chronology29);
        org.joda.time.Duration duration33 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime.Property property43 = dateTime37.weekyear();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime37, periodType44);
        int int46 = dateTime37.getSecondOfDay();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone52);
        org.joda.time.MutableInterval mutableInterval55 = interval54.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval56 = interval54.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval57 = interval54.toMutableInterval();
        org.joda.time.Days days58 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod59 = days58.toMutablePeriod();
        mutablePeriod59.setSeconds((int) (byte) 0);
        mutablePeriod59.setDays((int) 'a');
        mutablePeriod59.addSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology68 = null;
        mutablePeriod59.setPeriod(10L, (long) (byte) 1, chronology68);
        int int70 = mutablePeriod59.getWeeks();
        boolean boolean71 = interval54.equals((java.lang.Object) mutablePeriod59);
        boolean boolean72 = interval47.isBefore((org.joda.time.ReadableInterval) interval54);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 86399 + "'", int46 == 86399);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test04894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04894");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTime dateTime6 = property5.getDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.plusSeconds(10);
        org.joda.time.DateTime.Property property9 = dateTime6.yearOfEra();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        int int13 = property9.getMaximumShortTextLength(locale11);
        org.joda.time.DateTime dateTime14 = property9.withMinimumValue();
        java.lang.String str15 = property9.getName();
        org.joda.time.DateTimeField dateTimeField16 = property9.getField();
        org.joda.time.DateTime dateTime17 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime18 = property9.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yearOfEra" + "'", str15, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test04895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04895");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Interval interval16 = interval7.gap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Period period18 = org.joda.time.Period.millis(8);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone23);
        boolean boolean27 = interval25.isAfter(100L);
        long long28 = interval25.getEndMillis();
        org.joda.time.Interval interval29 = interval25.toInterval();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval29.withDurationBeforeEnd(readableDuration30);
        org.joda.time.Period period32 = interval29.toPeriod();
        org.joda.time.Seconds seconds33 = period32.toStandardSeconds();
        org.joda.time.PeriodType periodType34 = seconds33.getPeriodType();
        org.joda.time.PeriodType periodType35 = periodType34.withSecondsRemoved();
        org.joda.time.Period period36 = period18.normalizedStandard(periodType35);
        org.joda.time.Period period37 = interval7.toPeriod(periodType35);
        boolean boolean38 = interval7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone41.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        int int48 = dateTime47.getDayOfWeek();
        org.joda.time.DateTime dateTime50 = dateTime47.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property51 = dateTime47.millisOfSecond();
        org.joda.time.DateTime dateTime52 = property51.withMinimumValue();
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 10);
        int int55 = period54.getSeconds();
        org.joda.time.Period period57 = period54.minusHours(100);
        int int58 = period57.getMillis();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((-1L), dateTimeZone61);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Calendar calendar64 = dateTime62.toCalendar(locale63);
        org.joda.time.Duration duration65 = period57.toDurationTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableDuration) duration65);
        long long67 = duration65.getStandardDays();
        org.joda.time.Duration duration68 = duration65.toDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval69 = interval7.withDurationAfterStart((org.joda.time.ReadableDuration) duration65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNull(interval16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-4L) + "'", long67 == (-4L));
        org.junit.Assert.assertNotNull(duration68);
    }

    @Test
    public void test04896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04896");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("dayOfWeek");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"dayOfWeek\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04897");
        org.joda.time.Duration duration2 = org.joda.time.Duration.millis((long) (short) -1);
        long long3 = duration2.getStandardMinutes();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType7 = periodType6.withYearsRemoved();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.PeriodType periodType13 = days10.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType13, chronology22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.millisOfDay();
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType6, chronology22);
        org.joda.time.Period period28 = duration2.toPeriod(chronology22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(671L, chronology22);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test04898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04898");
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType5, chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        long long26 = dateTimeZone20.previousTransition(518400000L);
        long long30 = dateTimeZone20.convertLocalToUTC((long) (short) 1, true, 652278993L);
        org.joda.time.Chronology chronology31 = chronology14.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField32 = chronology14.years();
        int int35 = durationField32.getDifference((long) 660, (long) 302);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 518400000L + "'", long26 == 518400000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test04899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04899");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.standardDaysIn(readablePeriod0);
        org.joda.time.PeriodType periodType2 = days1.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod3 = days1.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        int int10 = dateTime7.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime7.getZone();
        org.joda.time.TimeOfDay timeOfDay12 = dateTime7.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.Days days17 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) timeOfDay12, (org.joda.time.ReadablePartial) localTime16);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        boolean boolean28 = interval24.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.TimeOfDay timeOfDay29 = dateTime27.toTimeOfDay();
        org.joda.time.Days days30 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) timeOfDay29);
        org.joda.time.Days days32 = days30.multipliedBy(292278993);
        org.joda.time.Days days33 = days1.minus(days32);
        org.joda.time.PeriodType periodType34 = days32.getPeriodType();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(periodType34);
    }

    @Test
    public void test04900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04900");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        org.joda.time.PeriodType periodType25 = days22.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType25, chronology34);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.millisOfDay();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-259200000L), (long) '#', chronology34);
        boolean boolean40 = interval17.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType42 = periodType41.withYearsRemoved();
        org.joda.time.Duration duration44 = org.joda.time.Duration.millis((long) (short) -1);
        long long45 = duration44.getStandardMinutes();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType49 = periodType48.withYearsRemoved();
        org.joda.time.Days days52 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod53 = days52.toMutablePeriod();
        org.joda.time.Duration duration54 = days52.toStandardDuration();
        org.joda.time.PeriodType periodType55 = days52.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Calendar calendar61 = dateTime59.toCalendar(locale60);
        org.joda.time.DateTime dateTime63 = dateTime59.plusMillis((int) '4');
        org.joda.time.Chronology chronology64 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.hourOfHalfday();
        org.joda.time.Period period66 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType55, chronology64);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology64);
        org.joda.time.DateTimeField dateTimeField68 = chronology64.millisOfDay();
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType48, chronology64);
        org.joda.time.Period period70 = duration44.toPeriod(chronology64);
        org.joda.time.DateTimeField dateTimeField71 = chronology64.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((java.lang.Object) interval17, periodType42, chronology64);
        org.joda.time.DateTimeField dateTimeField73 = chronology64.minuteOfHour();
        int int75 = dateTimeField73.getMinimumValue(4518762908L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514049880,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=9,MILLISECOND=880,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test04901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04901");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        boolean boolean12 = interval6.isBefore((long) (-1));
        boolean boolean13 = interval6.isBeforeNow();
        boolean boolean14 = interval6.isAfterNow();
        org.joda.time.DateTime dateTime15 = interval6.getStart();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        boolean boolean20 = dateTime18.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property21 = dateTime18.millisOfSecond();
        org.joda.time.DateTime dateTime22 = property21.getDateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds(10);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.Interval interval26 = interval6.withEnd((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTimeZone28.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime32, readableDuration33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = interval26.isAfter((org.joda.time.ReadableInterval) interval35);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMillis((int) '4');
        org.joda.time.Chronology chronology47 = dateTime42.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.minutes();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        boolean boolean53 = dateTimeZone50.isStandardOffset((long) (byte) 100);
        boolean boolean55 = dateTimeZone50.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime60 = null;
        boolean boolean61 = dateTimeZone58.isLocalDateTimeGap(localDateTime60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime64 = dateTime62.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Calendar calendar70 = dateTime68.toCalendar(locale69);
        org.joda.time.DateTime dateTime72 = dateTime68.plusMillis((int) '4');
        org.joda.time.DateTime dateTime73 = dateTime68.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone75);
        boolean boolean78 = dateTime76.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes79 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Duration duration80 = minutes79.toStandardDuration();
        org.joda.time.Duration duration81 = minutes79.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableDuration) duration81);
        int int83 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology84 = chronology47.withZone(dateTimeZone50);
        org.joda.time.DurationField durationField85 = chronology47.days();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod(652278993L, (long) 86399, chronology47);
        org.joda.time.PeriodType periodType87 = mutablePeriod86.getPeriodType();
        org.joda.time.Period period88 = interval26.toPeriod(periodType87);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(minutes79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(period88);
    }

    @Test
    public void test04902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04902");
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        org.joda.time.Duration duration4 = days2.toStandardDuration();
        org.joda.time.PeriodType periodType5 = days2.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) '4');
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType5, chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        java.lang.String str18 = dateTimeField17.getName();
        long long21 = dateTimeField17.add(144L, 2L);
        org.joda.time.DurationField durationField22 = dateTimeField17.getRangeDurationField();
        int int25 = durationField22.getValue(2760L, 1645056000000L);
        int int28 = durationField22.getValue(1645514028793L, (long) (short) 0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "weekyearOfCentury" + "'", str18, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 63072000144L + "'", long21 == 63072000144L);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test04903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04903");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int3 = dateTimeZone1.getStandardOffset((long) 'x');
        long long5 = dateTimeZone1.previousTransition((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        int int12 = dateTime9.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime9.getZone();
        long long15 = dateTimeZone1.getMillisKeepLocal(dateTimeZone13, 247541L);
        java.lang.String str17 = dateTimeZone1.getNameKey((long) 348);
        java.lang.String str18 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10L + "'", long5 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 247541L + "'", long15 == 247541L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
    }

    @Test
    public void test04904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04904");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration2 = period1.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.Instant instant21 = dateTime15.toInstant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone25.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime31 = dateTime29.withHourOfDay(0);
        boolean boolean32 = instant22.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime36.toDateTimeISO();
        org.joda.time.Instant instant42 = dateTime36.toInstant();
        org.joda.time.Instant instant43 = instant42.toInstant();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone46.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime52 = dateTime50.withHourOfDay(0);
        boolean boolean53 = instant43.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant57 = instant43.withDurationAdded((org.joda.time.ReadableDuration) duration55, (-1));
        boolean boolean59 = instant57.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = dateTime63.toCalendar(locale64);
        org.joda.time.DateTime dateTime67 = dateTime63.plusMillis((int) '4');
        org.joda.time.DateTime dateTime68 = dateTime63.toDateTimeISO();
        org.joda.time.Instant instant69 = dateTime63.toInstant();
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant57, (org.joda.time.ReadableInstant) dateTime63, periodType70);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant22, (org.joda.time.ReadablePeriod) period71);
        boolean boolean73 = duration2.equals((java.lang.Object) period71);
        org.joda.time.Days days74 = duration2.toStandardDays();
        org.joda.time.PeriodType periodType75 = days74.getPeriodType();
        int int76 = days74.getDays();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test04905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04905");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean12 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.lang.String str18 = dateTimeZone15.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime11.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 12, 1645513731014L, dateTimeZone15);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone31);
        boolean boolean35 = interval33.isAfter(100L);
        long long36 = interval33.getEndMillis();
        org.joda.time.Interval interval37 = interval33.toInterval();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Interval interval39 = interval37.withDurationBeforeEnd(readableDuration38);
        org.joda.time.Period period40 = interval37.toPeriod();
        org.joda.time.Seconds seconds41 = period40.toStandardSeconds();
        org.joda.time.PeriodType periodType42 = seconds41.getPeriodType();
        org.joda.time.PeriodType periodType43 = periodType42.withSecondsRemoved();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 508, 86399L, periodType43);
        org.joda.time.PeriodType periodType45 = periodType43.withMinutesRemoved();
        org.joda.time.PeriodType periodType46 = periodType45.withYearsRemoved();
        org.joda.time.PeriodType periodType47 = periodType46.withMonthsRemoved();
        org.joda.time.Period period48 = new org.joda.time.Period(15724841402L, periodType46);
        org.joda.time.Period period49 = mutableInterval22.toPeriod(periodType46);
        mutableInterval22.setEndMillis((long) 86405);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period49);
    }

    @Test
    public void test04906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04906");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = dateTime8.withWeekyear((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period17 = new org.joda.time.Period((java.lang.Object) dateTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test04907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04907");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType3 = periodType2.withMillisRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (-1), periodType3, chronology4);
        org.joda.time.PeriodType periodType6 = mutablePeriod5.getPeriodType();
        org.joda.time.PeriodType periodType7 = periodType6.withDaysRemoved();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime12.plusMonths((int) (byte) 1);
        org.joda.time.Days days21 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod22 = days21.toMutablePeriod();
        org.joda.time.Duration duration23 = days21.toStandardDuration();
        org.joda.time.PeriodType periodType24 = days21.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.Chronology chronology33 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType24, chronology33);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.millisOfDay();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) dateTime18, chronology33);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology33.clockhourOfDay();
        org.joda.time.Period period41 = new org.joda.time.Period(15724841402L, chronology33);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 432, periodType7, chronology33);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test04908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04908");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration15 = minutes14.toStandardDuration();
        org.joda.time.Minutes minutes17 = minutes14.minus((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime21.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTime29.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration33 = minutes32.toStandardDuration();
        org.joda.time.Minutes minutes35 = minutes32.minus((int) (byte) 100);
        boolean boolean36 = minutes17.isLessThan(minutes35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        int int41 = dateTime40.getHourOfDay();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) minutes17, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime44 = dateTime40.withWeekyear((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str46 = dateTimeFieldType45.getName();
        boolean boolean47 = dateTime44.isSupported(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 23 + "'", int41 == 23);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "weekyear" + "'", str46, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test04909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04909");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.addWeeks((int) (short) -1);
        mutablePeriod1.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        mutablePeriod1.add(2, (int) (byte) 0, 2, (int) (short) 0, 0, 10, (int) (short) 0, (-1));
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        int int24 = days22.getDays();
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        boolean boolean27 = days22.equals((java.lang.Object) locale26);
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) days22);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        int int33 = dateTime32.getHourOfDay();
        org.joda.time.Days days34 = org.joda.time.Days.SIX;
        org.joda.time.Days days36 = days34.multipliedBy(100);
        org.joda.time.Duration duration37 = days36.toStandardDuration();
        org.joda.time.DateTime dateTime38 = dateTime32.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime32.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone44);
        boolean boolean48 = interval46.isAfter(100L);
        long long49 = interval46.getEndMillis();
        org.joda.time.Interval interval50 = interval46.toInterval();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Interval interval52 = interval50.withDurationBeforeEnd(readableDuration51);
        org.joda.time.Duration duration53 = interval52.toDuration();
        org.joda.time.MutableInterval mutableInterval54 = interval52.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Calendar calendar60 = dateTime58.toCalendar(locale59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusMillis((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime58.toDateTimeISO();
        boolean boolean64 = dateTime58.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = dateTime58.toString(dateTimeFormatter65);
        int int67 = dateTime58.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((-1L), dateTimeZone70);
        org.joda.time.LocalDateTime localDateTime72 = null;
        boolean boolean73 = dateTimeZone70.isLocalDateTimeGap(localDateTime72);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone70);
        org.joda.time.DateTime dateTime76 = dateTime74.withHourOfDay(0);
        int int77 = dateTime76.getDayOfWeek();
        org.joda.time.DateTime dateTime79 = dateTime76.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime81 = dateTime76.withWeekyear((int) '4');
        boolean boolean82 = dateTime58.isEqual((org.joda.time.ReadableInstant) dateTime76);
        mutableInterval54.setStart((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime84 = dateTime58.withEarlierOffsetAtOverlap();
        mutablePeriod1.setPeriod((org.joda.time.ReadableInstant) mutableDateTime39, (org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 23 + "'", int33 == 23);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str66, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 86399 + "'", int67 == 86399);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime84);
    }

    @Test
    public void test04910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04910");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.lang.String str5 = dateTimeZone2.getShortName((long) (short) 100);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test04911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04911");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.Interval interval7 = interval6.toInterval();
        boolean boolean9 = interval6.contains((-1L));
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.Instant instant17 = dateTime14.toInstant();
        boolean boolean18 = interval6.contains((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property19 = dateTime14.millisOfSecond();
        org.joda.time.DateTime.Property property20 = dateTime14.monthOfYear();
        int int21 = property20.get();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
    }

    @Test
    public void test04912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04912");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.Period period3 = mutableInterval0.toPeriod(periodType1);
        org.joda.time.DateTime dateTime4 = mutableInterval0.getEnd();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Calendar calendar10 = dateTime8.toCalendar(locale9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusMillis((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime8.plusMonths((int) (byte) 1);
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Duration duration19 = days17.toStandardDuration();
        org.joda.time.PeriodType periodType20 = days17.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.Chronology chronology29 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType20, chronology29);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.millisOfDay();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) dateTime14, chronology29);
        org.joda.time.DateTimeField dateTimeField35 = chronology29.hourOfDay();
        int int36 = dateTime4.get(dateTimeField35);
        long long39 = dateTimeField35.getDifferenceAsLong((long) 502, (long) (-27425128));
        java.lang.String str41 = dateTimeField35.getAsText(1645513806809L);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 7L + "'", long39 == 7L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "7" + "'", str41, "7");
    }

    @Test
    public void test04913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04913");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = days0.negated();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = days0.plus(days4);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        int int14 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime11.getZone();
        org.joda.time.TimeOfDay timeOfDay16 = dateTime11.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        org.joda.time.Days days21 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) timeOfDay16, (org.joda.time.ReadablePartial) localTime20);
        boolean boolean22 = days7.isGreaterThan(days21);
        org.joda.time.Days days24 = days7.minus((int) (byte) 1);
        org.joda.time.Period period25 = days24.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        boolean boolean36 = dateTime29.equals((java.lang.Object) dateTime35);
        org.joda.time.Chronology chronology37 = dateTime29.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.weekyears();
        long long41 = durationField38.getMillis((int) ' ', (long) 347);
        org.joda.time.DurationFieldType durationFieldType42 = durationField38.getType();
        java.lang.String str43 = durationFieldType42.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period45 = period25.withField(durationFieldType42, 808);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weekyears'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1010016000000L + "'", long41 == 1010016000000L);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "weekyears" + "'", str43, "weekyears");
    }

    @Test
    public void test04914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04914");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.Hours hours33 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime35 = dateTime23.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        int int37 = property9.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeField dateTimeField38 = property9.getField();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        int int45 = dateTime42.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime42.getZone();
        org.joda.time.TimeOfDay timeOfDay47 = dateTime42.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.DateTime dateTime56 = timeOfDay47.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        int int63 = dateTime60.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime60.getZone();
        org.joda.time.TimeOfDay timeOfDay65 = dateTime60.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-1L), dateTimeZone68);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.util.Calendar calendar71 = dateTime69.toCalendar(locale70);
        org.joda.time.DateTime dateTime73 = dateTime69.plusMillis((int) '4');
        org.joda.time.DateTime dateTime74 = timeOfDay65.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period75 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay47, (org.joda.time.ReadablePartial) timeOfDay65);
        int int76 = timeOfDay65.size();
        java.lang.String str77 = timeOfDay65.toString();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(dateTimeZone80);
        boolean boolean83 = dateTime81.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property84 = dateTime81.millisOfSecond();
        org.joda.time.DateTime dateTime85 = property84.getDateTime();
        org.joda.time.DateTime dateTime87 = dateTime85.plusSeconds(10);
        org.joda.time.DateTime.Property property88 = dateTime85.yearOfEra();
        java.util.Locale.Category category89 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale90 = java.util.Locale.getDefault(category89);
        java.util.Set<java.lang.Character> charSet91 = locale90.getExtensionKeys();
        int int92 = property88.getMaximumShortTextLength(locale90);
        java.lang.String str93 = locale90.getLanguage();
        java.lang.String str94 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) timeOfDay65, 618, locale90);
        java.lang.String str95 = timeOfDay65.toString();
        org.joda.time.Chronology chronology96 = timeOfDay65.getChronology();
        org.joda.time.Chronology chronology97 = timeOfDay65.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514050594,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=10,MILLISECOND=594,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 59 + "'", int45 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 59 + "'", int63 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "T23:59:59.999" + "'", str77, "T23:59:59.999");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + category89 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category89.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "");
        org.junit.Assert.assertNotNull(charSet91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 9 + "'", int92 == 9);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "618" + "'", str94, "618");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "T23:59:59.999" + "'", str95, "T23:59:59.999");
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(chronology97);
    }

    @Test
    public void test04915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04915");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths((int) (byte) 1);
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        org.joda.time.PeriodType periodType15 = days12.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.Chronology chronology24 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType15, chronology24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.millisOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime9, chronology24);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        long long38 = dateTimeZone34.convertLocalToUTC(10L, true);
        java.lang.String str39 = dateTimeZone34.getID();
        java.lang.String str41 = dateTimeZone34.getName((long) (short) 10);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone34);
        boolean boolean44 = dateTimeZone34.isStandardOffset(0L);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(436278993L, dateTimeZone34);
        org.joda.time.DateTime dateTime46 = dateTime29.toDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(360);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((long) (byte) 1);
        org.joda.time.DateTime dateTime51 = dateTime48.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Days days53 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod54 = days53.toMutablePeriod();
        mutablePeriod54.addWeeks((int) (short) -1);
        mutablePeriod54.add((int) (short) 1, (int) '4', 2, (int) (short) -1, 2, (int) '4', 59, (int) 'a');
        org.joda.time.Days days69 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod70 = days69.toMutablePeriod();
        org.joda.time.Duration duration71 = days69.toStandardDuration();
        org.joda.time.PeriodType periodType72 = days69.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((-1L), dateTimeZone75);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Calendar calendar78 = dateTime76.toCalendar(locale77);
        org.joda.time.DateTime dateTime80 = dateTime76.plusMillis((int) '4');
        org.joda.time.Chronology chronology81 = dateTime76.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.hourOfHalfday();
        org.joda.time.Period period83 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType72, chronology81);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(chronology81);
        mutablePeriod54.setPeriod(1L, chronology81);
        org.joda.time.DateTime dateTime86 = org.joda.time.DateTime.now(chronology81);
        org.joda.time.DateTime.Property property87 = dateTime86.millisOfDay();
        int int88 = dateTime86.getYearOfEra();
        org.joda.time.Period period89 = new org.joda.time.Period(readableInstant52, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int91 = dateTime86.get(dateTimeFieldType90);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime93 = dateTime51.withField(dateTimeFieldType90, 50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2678399999L + "'", long30 == 2678399999L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar78);
        org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2022 + "'", int88 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 7 + "'", int91 == 7);
    }

    @Test
    public void test04916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04916");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((-14929920086400000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -4147200024");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04917");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.Days days6 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod7 = days6.toMutablePeriod();
        org.joda.time.Duration duration8 = days6.toStandardDuration();
        org.joda.time.PeriodType periodType9 = days6.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.Period period20 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType9, chronology18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.millisOfDay();
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType2, chronology18);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.dayOfYear();
        org.joda.time.format.PeriodPrinter periodPrinter26 = null;
        org.joda.time.format.PeriodParser periodParser27 = null;
        org.joda.time.format.PeriodFormatter periodFormatter28 = new org.joda.time.format.PeriodFormatter(periodPrinter26, periodParser27);
        org.joda.time.PeriodType periodType29 = periodFormatter28.getParseType();
        org.joda.time.PeriodType periodType30 = periodFormatter28.getParseType();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter32 = periodFormatter28.withLocale(locale31);
        java.lang.String str33 = dateTimeField24.getAsText(86399, locale31);
        java.util.Set<java.lang.Character> charSet34 = locale31.getExtensionKeys();
        java.lang.String str35 = locale31.getDisplayScript();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNull(periodType29);
        org.junit.Assert.assertNull(periodType30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "86399" + "'", str33, "86399");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test04918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04918");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = dateTime3.isEqual(readableInstant9);
        int int11 = dateTime3.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 999 + "'", int11 == 999);
    }

    @Test
    public void test04919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04919");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        boolean boolean14 = interval10.isAfter((long) 10);
        org.joda.time.Chronology chronology15 = interval10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone20);
        boolean boolean24 = interval22.isAfter(100L);
        long long25 = interval22.getEndMillis();
        org.joda.time.Interval interval26 = interval22.toInterval();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Interval interval28 = interval26.withDurationBeforeEnd(readableDuration27);
        org.joda.time.Period period29 = interval26.toPeriod();
        org.joda.time.Interval interval30 = interval10.gap((org.joda.time.ReadableInterval) interval26);
        org.joda.time.MutableInterval mutableInterval31 = interval26.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(23L, (long) 86399999);
        long long35 = mutableInterval34.getEndMillis();
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = mutableInterval34.isBefore(readableInterval36);
        org.joda.time.DateTime dateTime38 = mutableInterval34.getStart();
        org.joda.time.Interval interval39 = interval26.gap((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.Hours hours40 = org.joda.time.Hours.EIGHT;
        org.joda.time.DurationFieldType durationFieldType41 = hours40.getFieldType();
        org.joda.time.Hours hours43 = hours40.minus((int) (byte) 1);
        org.joda.time.PeriodType periodType44 = hours43.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType45 = hours43.getFieldType();
        org.joda.time.Hours hours46 = org.joda.time.Hours.EIGHT;
        org.joda.time.DurationFieldType durationFieldType47 = hours46.getFieldType();
        org.joda.time.Hours hours49 = hours46.minus((int) (byte) 1);
        org.joda.time.Hours hours51 = hours46.minus((-457087));
        org.joda.time.Hours hours52 = hours43.plus(hours46);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.centuries();
        boolean boolean54 = hours52.isSupported(durationFieldType53);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Calendar calendar60 = dateTime58.toCalendar(locale59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusMillis((int) '4');
        org.joda.time.Chronology chronology63 = dateTime58.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.minutes();
        org.joda.time.DurationField durationField65 = chronology63.months();
        boolean boolean66 = durationFieldType53.isSupported(chronology63);
        mutableInterval34.setChronology(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNull(interval30);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 86399999L + "'", long35 == 86399999L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(hours46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(hours49);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test04920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04920");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone5);
        int int9 = dateTimeZone5.getStandardOffset((long) 100);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = dateTimeZone5.getName((long) 100, locale11);
        java.util.Locale locale13 = locale11.stripExtensions();
        java.lang.String str14 = locale0.getDisplayName(locale13);
        java.lang.String str15 = locale13.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str14, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ko" + "'", str15, "ko");
    }

    @Test
    public void test04921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04921");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Interval interval16 = interval7.gap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTimeZone28.isStandardOffset((long) (byte) 100);
        boolean boolean33 = dateTimeZone28.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone36.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        boolean boolean56 = dateTime54.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = minutes57.toStandardDuration();
        org.joda.time.Duration duration59 = minutes57.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration59);
        int int61 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology62 = chronology25.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField63 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField64 = chronology25.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology25.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) interval14, chronology25);
        int int67 = mutablePeriod66.getWeeks();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test04922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04922");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 0, 144L);
        int int3 = period2.getWeeks();
        org.joda.time.Period period5 = period2.withMinutes(1);
        org.joda.time.Period period7 = period5.plusMillis(20);
        org.joda.time.Period period9 = period7.minusMonths(138);
        int int10 = period7.getMillis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 164 + "'", int10 == 164);
    }

    @Test
    public void test04923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04923");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) -1);
        org.joda.time.Period period3 = period1.plusMinutes((-1));
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.PeriodType periodType7 = days4.getPeriodType();
        org.joda.time.Period period8 = period1.normalizedStandard(periodType7);
        org.joda.time.PeriodType periodType9 = periodType7.withMinutesRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withYearsRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withMonthsRemoved();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test04924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04924");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        int int8 = dateTime5.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
    }

    @Test
    public void test04925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04925");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(2022);
        org.joda.time.Minutes minutes2 = period1.toStandardMinutes();
        int int3 = period1.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) dateTime11);
        org.joda.time.DateTime.Property property14 = dateTime11.weekyear();
        org.joda.time.DateTime dateTime15 = property14.getDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds(1439);
        int int18 = dateTime15.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone23);
        org.joda.time.MutableInterval mutableInterval26 = interval25.toMutableInterval();
        boolean boolean28 = mutableInterval26.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.lang.String[] strArray39 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strList40);
        boolean boolean43 = mutableInterval26.equals((java.lang.Object) strList40);
        org.joda.time.MutableInterval mutableInterval44 = mutableInterval26.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Calendar calendar50 = dateTime48.toCalendar(locale49);
        org.joda.time.DateTime dateTime52 = dateTime48.plusMillis((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime48.toDateTimeISO();
        org.joda.time.Instant instant54 = dateTime48.toInstant();
        org.joda.time.Instant instant55 = instant54.toInstant();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Calendar calendar61 = dateTime59.toCalendar(locale60);
        org.joda.time.DateTime dateTime63 = dateTime59.plusMillis((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime59.toDateTimeISO();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType66 = periodType65.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant54, (org.joda.time.ReadableInstant) dateTime64, periodType65);
        org.joda.time.Duration duration68 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant69 = instant54.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((-1L), dateTimeZone72);
        int int74 = dateTime73.getHourOfDay();
        org.joda.time.DateTime dateTime76 = dateTime73.minusWeeks(59);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((-1L), dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime81 = null;
        boolean boolean82 = dateTimeZone79.isLocalDateTimeGap(localDateTime81);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone79);
        org.joda.time.DateTime dateTime85 = dateTime83.plusHours((int) 'a');
        org.joda.time.DateTime dateTime87 = dateTime83.plusHours(10);
        org.joda.time.Minutes minutes88 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime83);
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) instant54, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.PeriodType periodType91 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType92 = periodType91.withMinutesRemoved();
        org.joda.time.Period period93 = new org.joda.time.Period((long) (byte) 10, periodType92);
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod(periodType92);
        org.joda.time.Period period95 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) instant54, periodType92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period96 = new org.joda.time.Period((java.lang.Object) period1, periodType92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 23 + "'", int74 == 23);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(periodType92);
    }

    @Test
    public void test04926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04926");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        org.joda.time.PeriodType periodType15 = days12.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.Chronology chronology24 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType15, chronology24);
        org.joda.time.Period period27 = duration3.toPeriodTo((org.joda.time.ReadableInstant) dateTime7, periodType15);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(21600000L, (long) 86405, periodType15, chronology28);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test04927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04927");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((java.lang.Object) interval3);
        boolean boolean5 = interval3.containsNow();
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.seconds(0);
        org.joda.time.PeriodType periodType8 = seconds7.getPeriodType();
        org.joda.time.Interval interval9 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) seconds7);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test04928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04928");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime3.toCalendar(locale9);
        org.joda.time.DateTime dateTime13 = dateTime3.plusYears((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.plusMillis((int) '#');
        java.util.Date date25 = dateTime22.toDate();
        org.joda.time.DateTime.Property property26 = dateTime22.weekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone29.isLocalDateTimeGap(localDateTime31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours((int) 'a');
        org.joda.time.DateTime dateTime37 = dateTime33.plusHours(10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        boolean boolean42 = dateTimeZone39.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property45 = dateTime43.property(dateTimeFieldType44);
        int int46 = dateTime37.get(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType44.getRangeDurationType();
        int int48 = dateTime22.get(dateTimeFieldType44);
        java.util.GregorianCalendar gregorianCalendar49 = dateTime22.toGregorianCalendar();
        long long50 = dateTime22.getMillis();
        org.joda.time.Hours hours51 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours52 = hours51.negated();
        org.joda.time.DurationFieldType durationFieldType53 = hours52.getFieldType();
        org.joda.time.PeriodType periodType54 = hours52.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime22, periodType54);
        java.lang.Object obj56 = mutablePeriod55.clone();
        org.joda.time.MutablePeriod mutablePeriod57 = mutablePeriod55.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod55.addYears((-27425128));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 11 + "'", int48 == 11);
        org.junit.Assert.assertNotNull(gregorianCalendar49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "PT0H");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "PT0H");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "PT0H");
        org.junit.Assert.assertNotNull(mutablePeriod57);
    }

    @Test
    public void test04929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04929");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Interval interval16 = interval7.gap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTimeZone28.isStandardOffset((long) (byte) 100);
        boolean boolean33 = dateTimeZone28.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone36.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        boolean boolean56 = dateTime54.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = minutes57.toStandardDuration();
        org.joda.time.Duration duration59 = minutes57.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration59);
        int int61 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology62 = chronology25.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField63 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField64 = chronology25.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology25.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) interval14, chronology25);
        org.joda.time.DateTimeField dateTimeField67 = chronology25.era();
        org.joda.time.DateTimeField dateTimeField68 = chronology25.weekyearOfCentury();
        org.joda.time.DurationField durationField69 = dateTimeField68.getDurationField();
        java.lang.String str70 = durationField69.toString();
        long long72 = durationField69.getValueAsLong(1071360068060L);
        org.joda.time.DurationFieldType durationFieldType73 = durationField69.getType();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "DurationField[years]" + "'", str70, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 33L + "'", long72 == 33L);
        org.junit.Assert.assertNotNull(durationFieldType73);
    }

    @Test
    public void test04930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04930");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        int int4 = days2.getDays();
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        boolean boolean7 = days2.equals((java.lang.Object) locale6);
        boolean boolean8 = days0.equals((java.lang.Object) days2);
        org.joda.time.Period period9 = days0.toPeriod();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 6 + "'", int4 == 6);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test04931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04931");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime5.plusMonths((int) (byte) 1);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.PeriodType periodType17 = days14.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfHalfday();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType17, chronology26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.millisOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) dateTime11, chronology26);
        org.joda.time.Period period32 = new org.joda.time.Period(0L, (long) (byte) 100, chronology26);
        java.lang.String str33 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.centuryOfEra();
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeField34.getAsShortText(138L, locale36);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "19" + "'", str37, "19");
    }

    @Test
    public void test04932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04932");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType6.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.Instant instant20 = dateTime14.toInstant();
        org.joda.time.Instant instant21 = instant20.toInstant();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        boolean boolean31 = instant21.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant35 = instant21.withDurationAdded((org.joda.time.ReadableDuration) duration33, (-1));
        boolean boolean37 = instant35.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime41.toDateTimeISO();
        org.joda.time.Instant instant47 = dateTime41.toInstant();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant35, (org.joda.time.ReadableInstant) dateTime41, periodType48);
        org.joda.time.PeriodType periodType50 = periodType48.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.Chronology chronology59 = dateTime54.getChronology();
        org.joda.time.Period period60 = new org.joda.time.Period((-259200000L), periodType50, chronology59);
        boolean boolean61 = dateTimeFieldType9.isSupported(chronology59);
        org.joda.time.DurationField durationField62 = durationFieldType8.getField(chronology59);
        int int64 = durationField62.getValue((-259200000L));
        java.lang.String str65 = durationField62.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-72) + "'", int64 == (-72));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "DurationField[hours]" + "'", str65, "DurationField[hours]");
    }

    @Test
    public void test04933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04933");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(0L, chronology10);
        org.joda.time.Period period13 = period11.plusMillis(100);
        int int14 = period13.getHours();
        org.joda.time.Period period16 = period13.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant26 = dateTime20.toInstant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        boolean boolean37 = instant27.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant41 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration39, (-1));
        boolean boolean43 = instant41.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime47.toDateTimeISO();
        org.joda.time.Instant instant53 = dateTime47.toInstant();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant41, (org.joda.time.ReadableInstant) dateTime47, periodType54);
        org.joda.time.PeriodType periodType56 = periodType54.withWeeksRemoved();
        org.joda.time.PeriodType periodType57 = periodType56.withYearsRemoved();
        org.joda.time.Period period58 = period13.normalizedStandard(periodType57);
        org.joda.time.Interval interval59 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = dateTime63.toCalendar(locale64);
        org.joda.time.DateTime dateTime67 = dateTime63.plusMillis((int) '4');
        org.joda.time.DateTime dateTime68 = dateTime63.toDateTimeISO();
        org.joda.time.DateTime dateTime70 = dateTime68.plusMillis((int) '#');
        int int71 = dateTime68.getMinuteOfDay();
        boolean boolean72 = interval6.isBefore((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Period period73 = interval6.toPeriod();
        org.joda.time.Period period75 = new org.joda.time.Period((long) (byte) 10);
        int int76 = period75.getSeconds();
        org.joda.time.Period period78 = period75.minusHours(100);
        int int79 = period78.getMillis();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((-1L), dateTimeZone82);
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.util.Calendar calendar85 = dateTime83.toCalendar(locale84);
        org.joda.time.Duration duration86 = period78.toDurationTo((org.joda.time.ReadableInstant) dateTime83);
        boolean boolean87 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Period period88 = new org.joda.time.Period((java.lang.Object) interval6);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Interval interval90 = interval6.withChronology(chronology89);
        org.joda.time.Period period91 = interval6.toPeriod();
        org.joda.time.Period period92 = period91.toPeriod();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1439 + "'", int71 == 1439);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(period92);
    }

    @Test
    public void test04934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04934");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Days days5 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod6 = days5.toMutablePeriod();
        org.joda.time.Duration duration7 = days5.toStandardDuration();
        long long8 = duration7.getStandardHours();
        mutableInterval4.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        long long10 = duration7.getMillis();
        java.lang.String str11 = duration7.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone16);
        boolean boolean20 = interval18.isAfter(100L);
        long long21 = interval18.getEndMillis();
        org.joda.time.Interval interval22 = interval18.toInterval();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.Instant instant32 = dateTime26.toInstant();
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType44 = periodType43.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime42, periodType43);
        boolean boolean46 = interval18.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Period period47 = duration7.toPeriodTo((org.joda.time.ReadableInstant) dateTime42);
        int int48 = dateTime42.getMillisOfDay();
        org.joda.time.DateTime dateTime50 = dateTime42.withCenturyOfEra((int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, readableInstant51);
        org.joda.time.MutableInterval mutableInterval53 = interval52.toMutableInterval();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 144L + "'", long8 == 144L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 518400000L + "'", long10 == 518400000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT518400S" + "'", str11, "PT518400S");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 86399999 + "'", int48 == 86399999);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableInterval53);
    }

    @Test
    public void test04935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04935");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException(throwable2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException(throwable5);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException6);
        iOException4.addSuppressed((java.lang.Throwable) iOException8);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) iOException8);
        java.io.IOException iOException11 = new java.io.IOException("weekyearOfCentury", (java.lang.Throwable) iOException8);
        java.io.IOException iOException12 = new java.io.IOException("JPN", (java.lang.Throwable) iOException8);
    }

    @Test
    public void test04936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04936");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis((int) '#');
        java.util.Date date11 = dateTime8.toDate();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateMidnight dateMidnight13 = dateTime8.toDateMidnight();
        org.joda.time.DateTime dateTime15 = dateTime8.withYear((int) (short) 10);
        org.joda.time.Days days16 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod17 = days16.toMutablePeriod();
        mutablePeriod17.setSeconds((int) (byte) 0);
        mutablePeriod17.setDays((int) 'a');
        mutablePeriod17.addSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology26 = null;
        mutablePeriod17.setPeriod(10L, (long) (byte) 1, chronology26);
        int int28 = mutablePeriod17.getYears();
        org.joda.time.Period period33 = new org.joda.time.Period((int) (byte) 1, 0, (-1), 10);
        mutablePeriod17.mergePeriod((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Chronology chronology36 = null;
        mutablePeriod17.add((long) (short) -1, chronology36);
        mutablePeriod17.addDays(0);
        org.joda.time.DateTime dateTime40 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfCentury(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTime42.withMinuteOfHour(128);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 128 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test04937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04937");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) dateTime8, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMillis((int) 'u');
        java.lang.String str17 = dateTime13.toString("\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)");
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getHourOfDay();
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Calendar calendar26 = dateTime20.toCalendar(locale24);
        org.joda.time.DateTime.Property property27 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime29 = property27.addToCopy(10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMillis((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime42.toDateTimeISO();
        org.joda.time.Instant instant48 = dateTime42.toInstant();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Calendar calendar54 = dateTime52.toCalendar(locale53);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime52.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        boolean boolean62 = dateTime60.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes63 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration64 = minutes63.toStandardDuration();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.DateTime dateTime66 = dateTime36.minus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((-1L), dateTimeZone69);
        org.joda.time.LocalDateTime localDateTime71 = null;
        boolean boolean72 = dateTimeZone69.isLocalDateTimeGap(localDateTime71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone69);
        org.joda.time.DateTime dateTime75 = dateTime73.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((-1L), dateTimeZone78);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.util.Calendar calendar81 = dateTime79.toCalendar(locale80);
        org.joda.time.DateTime dateTime83 = dateTime79.plusMillis((int) '4');
        org.joda.time.DateTime dateTime84 = dateTime79.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(dateTimeZone86);
        boolean boolean89 = dateTime87.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes90 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Duration duration91 = minutes90.toStandardDuration();
        org.joda.time.Duration duration92 = minutes90.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableDuration) duration92);
        int int94 = duration64.compareTo((org.joda.time.ReadableDuration) duration92);
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration92);
        org.joda.time.LocalTime localTime96 = dateTime29.toLocalTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter97 = null;
        java.lang.String str98 = dateTime29.toString(dateTimeFormatter97);
        org.joda.time.MutablePeriod mutablePeriod99 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)" + "'", str17, "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7 + "'", int22 == 7);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh-CN" + "'", str25, "zh-CN");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645514051675,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=11,MILLISECOND=675,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar81);
        org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(minutes90);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(localTime96);
// flaky:         org.junit.Assert.assertEquals("'" + str98 + "' != '" + "2022-02-22T07:24:11.675Z" + "'", str98, "2022-02-22T07:24:11.675Z");
    }

    @Test
    public void test04938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04938");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) -1);
        org.joda.time.Period period2 = period1.normalizedStandard();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test04939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04939");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(dateTimeZone9);
        long long12 = dateTimeZone9.nextTransition((long) (short) 100);
        long long14 = dateTimeZone9.convertUTCToLocal(5184000000L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime27.toDateTimeISO();
        org.joda.time.Instant instant33 = dateTime27.toInstant();
        org.joda.time.Instant instant34 = instant33.toInstant();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = null;
        boolean boolean40 = dateTimeZone37.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime43 = dateTime41.withHourOfDay(0);
        boolean boolean44 = instant34.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant48 = instant34.withDurationAdded((org.joda.time.ReadableDuration) duration46, (-1));
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Calendar calendar54 = dateTime52.toCalendar(locale53);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime dateTime59 = dateTime57.plusMillis((int) '#');
        int int60 = instant48.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Days days61 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod62 = days61.toMutablePeriod();
        org.joda.time.Duration duration63 = days61.toStandardDuration();
        org.joda.time.Days days64 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod65 = days64.toMutablePeriod();
        org.joda.time.Duration duration66 = days64.toStandardDuration();
        boolean boolean67 = duration63.isLongerThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Instant instant69 = instant48.withDurationAdded((org.joda.time.ReadableDuration) duration66, 10);
        org.joda.time.DateTime dateTime70 = dateTime23.plus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Days days71 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod72 = days71.toMutablePeriod();
        org.joda.time.Duration duration73 = days71.toStandardDuration();
        org.joda.time.PeriodType periodType74 = days71.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((-1L), dateTimeZone77);
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.util.Calendar calendar80 = dateTime78.toCalendar(locale79);
        org.joda.time.DateTime dateTime82 = dateTime78.plusMillis((int) '4');
        org.joda.time.Chronology chronology83 = dateTime78.getChronology();
        org.joda.time.Period period84 = duration66.toPeriod(periodType74, chronology83);
        org.joda.time.DateTimeField dateTimeField85 = chronology83.year();
        long long89 = chronology83.add((long) 291, 0L, 941);
        boolean boolean90 = dateTimeZone9.equals((java.lang.Object) chronology83);
        org.joda.time.DateTimeField dateTimeField91 = chronology83.secondOfDay();
        org.joda.time.DateTimeField dateTimeField92 = chronology83.yearOfCentury();
        org.joda.time.DurationField durationField93 = chronology83.years();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 5184000000L + "'", long14 == 5184000000L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertNotNull(mutablePeriod65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(days71);
        org.junit.Assert.assertNotNull(mutablePeriod72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 291L + "'", long89 == 291L);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
    }

    @Test
    public void test04940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04940");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        int int11 = property9.getMaximumValue();
        int int12 = property9.getMaximumValue();
        org.joda.time.DateTime dateTime13 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekOfWeekyear();
        java.lang.String str24 = dateTimeField23.getName();
        int int26 = dateTimeField23.get((long) (byte) 100);
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str29 = locale28.getISO3Language();
        java.lang.String str30 = dateTimeField23.getAsText((-1), locale28);
        int int32 = dateTimeField23.getMaximumValue((long) 68);
        int int33 = dateTime13.get(dateTimeField23);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime36 = dateTime13.withZoneRetainFields(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514051862,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=11,MILLISECOND=862,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekOfWeekyear" + "'", str24, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fra" + "'", str29, "fra");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1" + "'", str30, "-1");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53 + "'", int32 == 53);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test04941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04941");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfDay();
        long long12 = dateTimeField10.roundCeiling((long) 6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekOfWeekyear();
        long long24 = dateTimeField22.roundHalfEven(1L);
        org.joda.time.DurationField durationField25 = dateTimeField22.getLeapDurationField();
        long long28 = dateTimeField22.getDifferenceAsLong((long) (short) 100, 100L);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone31.isLocalDateTimeGap(localDateTime33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = dateTime35.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime37.toMutableDateTime(dateTimeZone38);
        org.joda.time.LocalDate localDate40 = dateTime37.toLocalDate();
        java.util.Locale.Category category41 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale42 = java.util.Locale.getDefault(category41);
        java.util.Locale locale43 = java.util.Locale.getDefault(category41);
        java.lang.String str44 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDate40, locale43);
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10);
        int int48 = period47.getSeconds();
        org.joda.time.Period period50 = period47.minusDays((int) (short) 1);
        org.joda.time.Duration duration51 = period50.toStandardDuration();
        org.joda.time.Period period52 = duration51.toPeriod();
        int[] intArray53 = period52.getValues();
        int[] intArray55 = dateTimeField10.set((org.joda.time.ReadablePartial) localDate40, 2, intArray53, 0);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        java.util.GregorianCalendar gregorianCalendar61 = dateTime60.toGregorianCalendar();
        int int62 = dateTime60.getHourOfDay();
        java.util.Locale locale63 = java.util.Locale.CHINA;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.lang.String str65 = locale64.toLanguageTag();
        java.util.Calendar calendar66 = dateTime60.toCalendar(locale64);
        org.joda.time.DateTime.Property property67 = dateTime60.minuteOfHour();
        org.joda.time.DateTime dateTime69 = property67.addToCopy(10);
        java.util.Locale locale70 = java.util.Locale.CHINA;
        java.util.Locale locale71 = locale70.stripExtensions();
        java.lang.String str72 = locale70.getISO3Language();
        java.lang.String str73 = locale70.getDisplayScript();
        java.lang.String str74 = property67.getAsShortText(locale70);
        java.util.Locale.setDefault(locale70);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale70.getDisplayScript(locale76);
        java.lang.String str78 = locale76.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            long long79 = dateTimeField10.set(10740000L, "", locale76);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 6L + "'", long12 == 6L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-259200000L) + "'", long24 == (-259200000L));
        org.junit.Assert.assertNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category41.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "8" + "'", str44, "8");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 0, -23, -59, -59, -990]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, -23, -59, -59, -990]");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(gregorianCalendar61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 7 + "'", int62 == 7);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "zh-CN" + "'", str65, "zh-CN");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1645514051889,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=11,MILLISECOND=889,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "zho" + "'", str72, "zho");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "14" + "'", str74, "14");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "kor" + "'", str78, "kor");
    }

    @Test
    public void test04942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04942");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        boolean boolean9 = dateTime7.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property10 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds(10);
        org.joda.time.DateTime.Property property14 = dateTime11.yearOfEra();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        int int18 = property14.getMaximumShortTextLength(locale16);
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter2.withLocale(locale16);
        org.joda.time.PeriodType periodType20 = periodFormatter19.getParseType();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 2, 2L);
        mutablePeriod23.addSeconds(51);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = periodFormatter19.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod23, "2022-02-22T00:10:37.834Z", 31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNull(periodType20);
    }

    @Test
    public void test04943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04943");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Period period13 = interval10.toPeriod();
        org.joda.time.Period period15 = period13.minusMonths((-1));
        org.joda.time.Period period17 = period15.plusSeconds((int) (byte) 10);
        org.joda.time.Period period19 = period15.withMinutes((int) (byte) 1);
        org.joda.time.Period period21 = period15.plusSeconds(881);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test04944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04944");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Days days5 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod6 = days5.toMutablePeriod();
        org.joda.time.Duration duration7 = days5.toStandardDuration();
        long long8 = duration7.getStandardHours();
        mutableInterval4.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        long long10 = duration7.getMillis();
        java.lang.String str11 = duration7.toString();
        org.joda.time.Duration duration12 = duration7.toDuration();
        org.joda.time.Period period13 = duration7.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime17.millisOfDay();
        org.joda.time.DurationField durationField24 = property23.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.Instant instant34 = dateTime28.toInstant();
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone38.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        boolean boolean45 = instant35.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant49 = instant35.withDurationAdded((org.joda.time.ReadableDuration) duration47, (-1));
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Calendar calendar55 = dateTime53.toCalendar(locale54);
        org.joda.time.DateTime dateTime57 = dateTime53.plusMillis((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime53.toDateTimeISO();
        org.joda.time.Instant instant59 = dateTime53.toInstant();
        org.joda.time.Instant instant60 = instant59.toInstant();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime65 = null;
        boolean boolean66 = dateTimeZone63.isLocalDateTimeGap(localDateTime65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone63);
        org.joda.time.DateTime dateTime69 = dateTime67.withHourOfDay(0);
        boolean boolean70 = instant60.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Duration duration72 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant74 = instant60.withDurationAdded((org.joda.time.ReadableDuration) duration72, (-1));
        java.util.Date date75 = instant60.toDate();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant35, (org.joda.time.ReadableInstant) instant60);
        org.joda.time.Instant instant78 = instant35.plus(89424000000L);
        org.joda.time.Instant instant81 = instant35.withDurationAdded(1L, 3);
        int int82 = property23.compareTo((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Chronology chronology83 = instant35.getChronology();
        org.joda.time.Period period84 = duration7.toPeriod(chronology83);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 144L + "'", long8 == 144L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 518400000L + "'", long10 == 518400000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT518400S" + "'", str11, "PT518400S");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(period84);
    }

    @Test
    public void test04945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04945");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationFieldType2);
    }

    @Test
    public void test04946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04946");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean24 = interval20.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.lang.String str30 = dateTimeZone27.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime23.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        boolean boolean34 = dateTimeZone27.isStandardOffset((long) (short) -1);
        java.util.Locale locale38 = new java.util.Locale("+00:00", "2022");
        java.lang.String str39 = dateTimeZone27.getShortName(600000L, locale38);
        long long41 = dateTimeZone27.nextTransition(1645513719942L);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone44.isLocalDateTimeGap(localDateTime46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime56 = dateTime51.toLocalDateTime();
        boolean boolean57 = dateTimeZone44.isLocalDateTimeGap(localDateTime56);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime62 = null;
        boolean boolean63 = dateTimeZone60.isLocalDateTimeGap(localDateTime62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime66 = dateTime64.plusHours((int) 'a');
        org.joda.time.DateTime dateTime68 = dateTime64.plusHours(10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        boolean boolean73 = dateTimeZone70.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone70);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property76 = dateTime74.property(dateTimeFieldType75);
        int int77 = dateTime68.get(dateTimeFieldType75);
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType75.getRangeDurationType();
        boolean boolean79 = localDateTime56.isSupported(dateTimeFieldType75);
        boolean boolean80 = dateTimeZone27.isLocalDateTimeGap(localDateTime56);
        java.util.Locale locale81 = java.util.Locale.US;
        java.lang.String str82 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime56, locale81);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = dateTimeField13.getType();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals(locale38.toString(), "+00:00_2022");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645513719942L + "'", long41 == 1645513719942L);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "59" + "'", str82, "59");
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
    }

    @Test
    public void test04947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04947");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 10, periodType4);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType4);
        org.joda.time.Hours hours7 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Hours hours8 = hours0.minus(hours7);
        java.lang.String str9 = hours8.toString();
        int int11 = hours8.getValue(0);
        org.joda.time.Duration duration12 = hours8.toStandardDuration();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT8H" + "'", str9, "PT8H");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(duration12);
    }

    @Test
    public void test04948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04948");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        int int4 = dateTime3.getHourOfDay();
        org.joda.time.DateTime dateTime6 = dateTime3.minusWeeks(59);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone9.isLocalDateTimeGap(localDateTime11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) 'a');
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours(10);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property19 = dateTime3.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test04949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04949");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("804");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        int int11 = dateTime5.getDayOfWeek();
        boolean boolean12 = instant1.isAfter((org.joda.time.ReadableInstant) dateTime5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime5.withWeekOfWeekyear(19045);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19045 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04950");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = days0.negated();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = days0.plus(days4);
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(34, 34, (int) (short) 0, 7);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.addHours(20);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone21);
        boolean boolean25 = interval23.isAfter(100L);
        long long26 = interval23.getEndMillis();
        org.joda.time.Interval interval27 = interval23.toInterval();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Interval interval29 = interval27.withDurationBeforeEnd(readableDuration28);
        org.joda.time.Period period30 = interval27.toPeriod();
        mutablePeriod13.add((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period33 = period30.plusMinutes(845);
        org.joda.time.Period period35 = period33.plusMillis(291);
        org.joda.time.Period period37 = period33.plusDays(823);
        int int38 = period33.getSeconds();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test04951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04951");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Instant instant25 = instant9.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant27 = instant25.plus((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime28 = instant25.toMutableDateTimeISO();
        org.joda.time.Instant instant30 = instant25.minus(8179561926864000618L);
        org.joda.time.Chronology chronology31 = instant25.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test04952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04952");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime2.minusSeconds((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone9.isLocalDateTimeGap(localDateTime11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime15 = dateTime13.withHourOfDay(0);
        int int16 = dateTime15.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        java.util.GregorianCalendar gregorianCalendar20 = dateTime19.toGregorianCalendar();
        int int21 = dateTime19.getHourOfDay();
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale23.toLanguageTag();
        java.util.Calendar calendar25 = dateTime19.toCalendar(locale23);
        org.joda.time.DateTime.Property property26 = dateTime19.minuteOfHour();
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        org.joda.time.Duration duration29 = days27.toStandardDuration();
        org.joda.time.Days days30 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod31 = days30.toMutablePeriod();
        org.joda.time.Duration duration32 = days30.toStandardDuration();
        boolean boolean33 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Days days39 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod40 = days39.toMutablePeriod();
        org.joda.time.Duration duration41 = days39.toStandardDuration();
        org.joda.time.PeriodType periodType42 = days39.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.Chronology chronology51 = dateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.hourOfHalfday();
        org.joda.time.Period period53 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType42, chronology51);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology51);
        org.joda.time.DateTimeField dateTimeField55 = chronology51.millisOfDay();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((-259200000L), (long) '#', chronology51);
        boolean boolean57 = interval34.isBefore((org.joda.time.ReadableInterval) interval56);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType59 = periodType58.withYearsRemoved();
        org.joda.time.Duration duration61 = org.joda.time.Duration.millis((long) (short) -1);
        long long62 = duration61.getStandardMinutes();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType66 = periodType65.withYearsRemoved();
        org.joda.time.Days days69 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod70 = days69.toMutablePeriod();
        org.joda.time.Duration duration71 = days69.toStandardDuration();
        org.joda.time.PeriodType periodType72 = days69.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((-1L), dateTimeZone75);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Calendar calendar78 = dateTime76.toCalendar(locale77);
        org.joda.time.DateTime dateTime80 = dateTime76.plusMillis((int) '4');
        org.joda.time.Chronology chronology81 = dateTime76.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.hourOfHalfday();
        org.joda.time.Period period83 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType72, chronology81);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(chronology81);
        org.joda.time.DateTimeField dateTimeField85 = chronology81.millisOfDay();
        org.joda.time.Period period86 = new org.joda.time.Period((long) (byte) 1, (long) 1, periodType65, chronology81);
        org.joda.time.Period period87 = duration61.toPeriod(chronology81);
        org.joda.time.DateTimeField dateTimeField88 = chronology81.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((java.lang.Object) interval34, periodType59, chronology81);
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime15, periodType59);
        org.joda.time.Days days91 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod92 = days91.toMutablePeriod();
        org.joda.time.Duration duration93 = days91.toStandardDuration();
        long long94 = duration93.getStandardHours();
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration93);
        long long96 = duration93.getStandardMinutes();
        org.joda.time.Duration duration97 = duration93.toDuration();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh-CN" + "'", str24, "zh-CN");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645514052473,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=12,MILLISECOND=473,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar78);
        org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(days91);
        org.junit.Assert.assertNotNull(mutablePeriod92);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 144L + "'", long94 == 144L);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 8640L + "'", long96 == 8640L);
        org.junit.Assert.assertNotNull(duration97);
    }

    @Test
    public void test04953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04953");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds1 = seconds0.negated();
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds4 = seconds2.dividedBy(23);
        org.joda.time.Seconds seconds5 = seconds0.plus(seconds4);
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds7 = seconds6.negated();
        org.joda.time.Seconds seconds8 = seconds4.minus(seconds6);
        org.joda.time.PeriodType periodType9 = seconds4.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.era();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(0L, chronology19);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone27);
        boolean boolean31 = interval29.isAfter(100L);
        long long32 = interval29.getEndMillis();
        org.joda.time.Interval interval33 = interval29.toInterval();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Interval interval35 = interval33.withDurationBeforeEnd(readableDuration34);
        boolean boolean37 = interval33.isAfter((long) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime41.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        boolean boolean51 = dateTime49.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes52 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        boolean boolean57 = dateTimeZone54.isStandardOffset((long) (byte) 100);
        boolean boolean59 = dateTimeZone54.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime64 = null;
        boolean boolean65 = dateTimeZone62.isLocalDateTimeGap(localDateTime64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime68 = dateTime66.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((-1L), dateTimeZone71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Calendar calendar74 = dateTime72.toCalendar(locale73);
        org.joda.time.DateTime dateTime76 = dateTime72.plusMillis((int) '4');
        org.joda.time.DateTime dateTime77 = dateTime72.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone79);
        boolean boolean82 = dateTime80.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes83 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Duration duration84 = minutes83.toStandardDuration();
        org.joda.time.Duration duration85 = minutes83.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableDuration) duration85);
        int int87 = dateTimeZone54.getOffset((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime88 = dateTime41.withZoneRetainFields(dateTimeZone54);
        boolean boolean89 = interval33.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime91 = dateTime88.plusHours(86399);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType93 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType94 = periodType93.withMillisRemoved();
        org.joda.time.Period period95 = mutableInterval92.toPeriod(periodType93);
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime88, periodType93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval97 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) seconds4, (org.joda.time.ReadableInstant) dateTime88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(minutes83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(periodType93);
        org.junit.Assert.assertNotNull(periodType94);
        org.junit.Assert.assertNotNull(period95);
    }

    @Test
    public void test04954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04954");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        boolean boolean5 = interval2.contains((-1L));
        org.joda.time.Interval interval7 = interval2.withStartMillis((long) 100);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((java.lang.Object) interval7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.Instant instant18 = dateTime12.toInstant();
        org.joda.time.Instant instant19 = instant18.toInstant();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTimeISO();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType30 = periodType29.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant18, (org.joda.time.ReadableInstant) dateTime28, periodType29);
        org.joda.time.Instant instant34 = instant18.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant35 = instant18.toInstant();
        org.joda.time.Instant instant36 = instant35.toInstant();
        org.joda.time.MutableDateTime mutableDateTime37 = instant36.toMutableDateTime();
        org.joda.time.DateTime dateTime38 = instant36.toDateTimeISO();
        boolean boolean39 = mutableInterval8.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test04955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04955");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds2 = seconds0.minus(seconds1);
        org.joda.time.Duration duration3 = seconds0.toStandardDuration();
        java.lang.String str4 = seconds0.toString();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1S" + "'", str4, "PT1S");
    }

    @Test
    public void test04956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04956");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMillis((int) '#');
        int int36 = instant24.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale38.getISO3Language();
        java.lang.String str41 = locale38.getDisplayScript();
        java.util.Calendar calendar42 = dateTime33.toCalendar(locale38);
        org.joda.time.DateTime dateTime44 = dateTime33.withWeekyear(207);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfEra(948);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((-23));
        java.util.GregorianCalendar gregorianCalendar49 = dateTime48.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zho" + "'", str40, "zho");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(gregorianCalendar49);
    }

    @Test
    public void test04957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04957");
        org.joda.time.Period period0 = new org.joda.time.Period();
        java.lang.String str1 = period0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT0S" + "'", str1, "PT0S");
    }

    @Test
    public void test04958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04958");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(34, 34, (int) (short) 0, 7);
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10);
        int int7 = period6.getSeconds();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period10 = period6.withFieldAdded(durationFieldType8, 86399);
        org.joda.time.DurationFieldType durationFieldType12 = period6.getFieldType(1);
        mutablePeriod4.set(durationFieldType12, (int) 'u');
        mutablePeriod4.addHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone21);
        boolean boolean25 = interval23.isAfter(100L);
        long long26 = interval23.getEndMillis();
        org.joda.time.DateTime dateTime27 = interval23.getEnd();
        long long28 = interval23.getStartMillis();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval23);
        mutablePeriod4.addYears((int) 'a');
        mutablePeriod4.add(618, (-6), 25798227, (int) (short) 1, 11, 138, 577, 35);
        mutablePeriod4.setHours(544);
        int int43 = mutablePeriod4.getSeconds();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 577 + "'", int43 == 577);
    }

    @Test
    public void test04959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04959");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime6.plusMonths((int) (byte) 1);
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        org.joda.time.PeriodType periodType18 = days15.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType18, chronology27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.millisOfDay();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime12, chronology27);
        org.joda.time.Period period33 = new org.joda.time.Period(0L, (long) (byte) 100, chronology27);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 848, chronology27);
        mutablePeriod34.clear();
        mutablePeriod34.addSeconds(604);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test04960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04960");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, readableDuration6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone12);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval16 = interval14.toMutableInterval();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(0L, chronology18);
        org.joda.time.Period period21 = period19.plusMillis(100);
        int int22 = period21.getHours();
        org.joda.time.Period period24 = period21.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.Instant instant34 = dateTime28.toInstant();
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone38.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        boolean boolean45 = instant35.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant49 = instant35.withDurationAdded((org.joda.time.ReadableDuration) duration47, (-1));
        boolean boolean51 = instant49.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Calendar calendar57 = dateTime55.toCalendar(locale56);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMillis((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime55.toDateTimeISO();
        org.joda.time.Instant instant61 = dateTime55.toInstant();
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant49, (org.joda.time.ReadableInstant) dateTime55, periodType62);
        org.joda.time.PeriodType periodType64 = periodType62.withWeeksRemoved();
        org.joda.time.PeriodType periodType65 = periodType64.withYearsRemoved();
        org.joda.time.Period period66 = period21.normalizedStandard(periodType65);
        org.joda.time.Interval interval67 = interval14.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period21);
        mutableInterval7.setInterval((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Days days69 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod70 = days69.toMutablePeriod();
        org.joda.time.Days days71 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod72 = days71.toMutablePeriod();
        mutablePeriod72.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval75 = null;
        mutablePeriod72.add(readableInterval75);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.eras();
        int int78 = mutablePeriod72.get(durationFieldType77);
        boolean boolean79 = mutablePeriod70.isSupported(durationFieldType77);
        mutablePeriod70.addSeconds((int) '#');
        mutablePeriod70.setValue(4, 69);
        mutablePeriod70.addHours((int) (byte) 100);
        mutableInterval7.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod70);
        mutablePeriod70.addMinutes(117);
        mutablePeriod70.setPeriod(0L, (-72120258057597926L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(days71);
        org.junit.Assert.assertNotNull(mutablePeriod72);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test04961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04961");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = dateTime3.toLocalDateTime();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime3.toCalendar(locale9);
        org.joda.time.DateTime dateTime13 = dateTime3.plusYears((int) (short) 0);
        boolean boolean14 = dateTime3.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime3.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime3.minusMinutes(291);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime3.toMutableDateTime();
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        org.joda.time.Duration duration21 = days19.toStandardDuration();
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        boolean boolean25 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration28 = new org.joda.time.Duration(0L, (long) 848);
        boolean boolean29 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime31 = dateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration24, 4);
        long long32 = duration24.getStandardDays();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 6L + "'", long32 == 6L);
    }

    @Test
    public void test04962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04962");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.millisOfDay();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        long long12 = durationField10.getValueAsLong((long) 100);
        int int14 = durationField10.getValue((long) 292278993);
        int int17 = durationField10.getDifference((long) 'x', 1645513717718L);
        org.joda.time.DurationFieldType durationFieldType18 = durationField10.getType();
        long long21 = durationField10.add(144L, 845);
        long long24 = durationField10.add(0L, 34);
        java.lang.String str25 = durationField10.getName();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-19045) + "'", int17 == (-19045));
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 73008000144L + "'", long21 == 73008000144L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2937600000L + "'", long24 == 2937600000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "days" + "'", str25, "days");
    }

    @Test
    public void test04963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04963");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 86399);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        boolean boolean18 = dateTimeZone15.isStandardOffset((long) (byte) 100);
        boolean boolean20 = dateTimeZone15.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        boolean boolean43 = dateTime41.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes44 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = minutes44.toStandardDuration();
        org.joda.time.Duration duration46 = minutes44.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration46);
        int int48 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology49 = chronology12.withZone(dateTimeZone15);
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10);
        int int52 = period51.getSeconds();
        org.joda.time.Period period54 = period51.minusHours(100);
        int int55 = period54.getDays();
        int[] intArray58 = chronology12.get((org.joda.time.ReadablePeriod) period54, (-1L), (long) 'a');
        org.joda.time.DateTimeField dateTimeField59 = chronology12.minuteOfHour();
        org.joda.time.DurationField durationField60 = chronology12.centuries();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 108, 172800000L, chronology12);
        int int62 = period61.getSeconds();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadablePeriod) period61);
        int int64 = period61.getMonths();
        org.joda.time.Period period66 = period61.withSeconds(0);
        org.joda.time.Period period68 = period66.minusMonths(25902);
        org.joda.time.Duration duration70 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Calendar calendar76 = dateTime74.toCalendar(locale75);
        org.joda.time.DateTime dateTime78 = dateTime74.plusMillis((int) '4');
        org.joda.time.DateTime dateTime79 = dateTime74.toDateTimeISO();
        org.joda.time.DateTime.Property property80 = dateTime74.weekyear();
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime74, periodType81);
        org.joda.time.Period period84 = period82.plusWeeks(1439);
        org.joda.time.Period period86 = period82.minusHours(8);
        org.joda.time.Period period88 = period86.withYears(86399999);
        org.joda.time.Period period90 = period86.plusMonths(86399);
        org.joda.time.DurationFieldType durationFieldType91 = org.joda.time.DurationFieldType.years();
        boolean boolean92 = period86.isSupported(durationFieldType91);
        org.joda.time.Period period94 = period68.withFieldAdded(durationFieldType91, 415);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours95 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as years is not precise in the period P415Y-25902M1DT23H59M0.892S");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 98]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 59 + "'", int62 == 59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(period94);
    }

    @Test
    public void test04964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04964");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 10);
        int int5 = period4.getSeconds();
        int int6 = period4.getSeconds();
        org.joda.time.Period period8 = period4.minusMinutes((-59));
        org.joda.time.Period period9 = period2.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        boolean boolean20 = interval16.isAfter((org.joda.time.ReadableInstant) dateTime19);
        long long21 = interval16.toDurationMillis();
        org.joda.time.Days days22 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval16);
        long long23 = interval16.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        boolean boolean28 = dateTime26.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property29 = dateTime26.millisOfSecond();
        org.joda.time.DateTime dateTime30 = property29.getDateTime();
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds(10);
        org.joda.time.DateTime dateTime34 = dateTime30.minusMinutes((int) (byte) -1);
        org.joda.time.DateTime.Property property35 = dateTime34.hourOfDay();
        org.joda.time.DateTime dateTime37 = dateTime34.plusMillis(12);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime41.toDateTimeISO();
        org.joda.time.DateTime.Property property47 = dateTime41.weekyear();
        org.joda.time.Duration duration49 = org.joda.time.Duration.millis((long) (short) -1);
        long long50 = duration49.getMillis();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType52 = periodType51.withMinutesRemoved();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration49, periodType51);
        org.joda.time.DateMidnight dateMidnight54 = dateTime41.toDateMidnight();
        int int55 = dateTime41.getYearOfEra();
        int int56 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean57 = interval16.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration58 = period4.toDurationFrom((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1969 + "'", int55 == 1969);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration58);
    }

    @Test
    public void test04965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04965");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) dateTime9, dateTimeZone13);
        org.joda.time.DateTime.Property property15 = dateTime9.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTimeISO();
        org.joda.time.Instant instant25 = dateTime19.toInstant();
        org.joda.time.Instant instant26 = instant25.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone29.isLocalDateTimeGap(localDateTime31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        boolean boolean36 = instant26.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant40 = instant26.withDurationAdded((org.joda.time.ReadableDuration) duration38, (-1));
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Calendar calendar46 = dateTime44.toCalendar(locale45);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.plusMillis((int) '#');
        int int52 = instant40.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime53 = dateTime49.toDateTime();
        java.util.Locale locale54 = java.util.Locale.CHINA;
        java.util.Locale locale55 = locale54.stripExtensions();
        java.lang.String str56 = locale54.getISO3Language();
        java.lang.String str57 = locale54.getDisplayScript();
        java.util.Calendar calendar58 = dateTime49.toCalendar(locale54);
        int int59 = property15.getMaximumShortTextLength(locale54);
        java.util.Locale.setDefault(locale54);
        java.lang.String str61 = locale0.getDisplayLanguage(locale54);
        java.lang.String str62 = locale54.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "zho" + "'", str56, "zho");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u6cd5\u6587" + "'", str61, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test04966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04966");
        org.joda.time.Days days8 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod9 = days8.toMutablePeriod();
        mutablePeriod9.setSeconds((int) (byte) 0);
        mutablePeriod9.setDays((int) 'a');
        mutablePeriod9.setDays((int) '4');
        org.joda.time.PeriodType periodType16 = mutablePeriod9.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(500, 829, 27424811, 773, 656, (-27425129), 0, (-1), periodType16);
        mutablePeriod17.setHours((int) ' ');
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(periodType16);
    }

    @Test
    public void test04967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04967");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        java.lang.String str10 = dateTimeField9.getName();
        org.joda.time.DurationField durationField11 = dateTimeField9.getLeapDurationField();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.lang.String str15 = dateTimeField9.getAsShortText((long) 100, locale14);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.toLanguageTag();
        java.lang.String str20 = dateTimeField9.getAsText(0, locale18);
        int int22 = dateTimeField9.getMinimumValue((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField9.getType();
        boolean boolean25 = dateTimeField9.isLeap(1047600035L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone28.isLocalDateTimeGap(localDateTime30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime40 = dateTime35.toLocalDateTime();
        boolean boolean41 = dateTimeZone28.isLocalDateTimeGap(localDateTime40);
        int int42 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime46.plusMonths((int) (byte) 1);
        org.joda.time.DateTime dateTime54 = dateTime46.plus(59L);
        org.joda.time.LocalDateTime localDateTime55 = dateTime46.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Calendar calendar61 = dateTime59.toCalendar(locale60);
        org.joda.time.DateTime dateTime63 = dateTime59.plusMillis((int) '4');
        org.joda.time.Chronology chronology64 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.millisOfDay();
        long long68 = dateTimeField66.roundCeiling((long) 6);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = dateTimeField66.getType();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        boolean boolean71 = localDateTime55.isSupported(dateTimeFieldType69);
        org.joda.time.Days days72 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod73 = days72.toMutablePeriod();
        org.joda.time.Days days74 = org.joda.time.Days.MIN_VALUE;
        boolean boolean75 = days72.isLessThan(days74);
        org.joda.time.PeriodType periodType76 = days74.getPeriodType();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime40, (org.joda.time.ReadablePartial) localDateTime55, periodType76);
        java.lang.String str78 = periodType76.getName();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekOfWeekyear" + "'", str10, "weekOfWeekyear");
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-CN" + "'", str19, "zh-CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 53 + "'", int42 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 6L + "'", long68 == 6L);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(days72);
        org.junit.Assert.assertNotNull(mutablePeriod73);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Days" + "'", str78, "Days");
    }

    @Test
    public void test04968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04968");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        mutablePeriod1.addMonths((int) (byte) -1);
        mutablePeriod1.setWeeks((-1));
        org.joda.time.Duration duration9 = org.joda.time.Duration.millis((-1L));
        java.lang.String str10 = duration9.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        boolean boolean15 = dateTime13.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property16 = dateTime13.millisOfSecond();
        int int17 = property16.getLeapAmount();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.time();
        org.joda.time.Period period20 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime18, periodType19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime29.plusMillis((int) '#');
        java.util.Date date32 = dateTime29.toDate();
        org.joda.time.DateTime.Property property33 = dateTime29.weekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone36.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours((int) 'a');
        org.joda.time.DateTime dateTime44 = dateTime40.plusHours(10);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        boolean boolean49 = dateTimeZone46.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property52 = dateTime50.property(dateTimeFieldType51);
        int int53 = dateTime44.get(dateTimeFieldType51);
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType51.getRangeDurationType();
        int int55 = dateTime29.get(dateTimeFieldType51);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType51.getRangeDurationType();
        boolean boolean57 = periodType19.isSupported(durationFieldType56);
        mutablePeriod1.add(durationFieldType56, 0);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((-1L), dateTimeZone66);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Calendar calendar69 = dateTime67.toCalendar(locale68);
        org.joda.time.DateTime dateTime71 = dateTime67.plusMillis((int) '4');
        org.joda.time.Chronology chronology72 = dateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology72);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((-1L), 59L, chronology72);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        java.lang.String str79 = dateTimeZone77.toString();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((-1L), dateTimeZone82);
        int int84 = dateTime83.getHourOfDay();
        boolean boolean85 = dateTimeZone77.equals((java.lang.Object) int84);
        org.joda.time.Chronology chronology86 = chronology72.withZone(dateTimeZone77);
        boolean boolean87 = durationFieldType56.isSupported(chronology86);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT-0.001S" + "'", str10, "PT-0.001S");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 11 + "'", int55 == 11);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "UTC" + "'", str79, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 23 + "'", int84 == 23);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test04969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04969");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property7 = dateTime5.property(dateTimeFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType6.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        boolean boolean18 = durationFieldType8.isSupported(chronology17);
        org.joda.time.DurationField durationField19 = chronology17.years();
        long long22 = durationField19.add((long) 784, (-2));
        long long23 = durationField19.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-63158399216L) + "'", long22 == (-63158399216L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 31556952000L + "'", long23 == 31556952000L);
    }

    @Test
    public void test04970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04970");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration29 = period28.toStandardDuration();
        org.joda.time.Instant instant30 = instant24.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration29.plus((-86400000L));
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(0L);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Seconds seconds36 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds37 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds38 = seconds36.minus(seconds37);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone43);
        boolean boolean47 = interval45.isAfter(100L);
        long long48 = interval45.getEndMillis();
        org.joda.time.Interval interval49 = interval45.toInterval();
        boolean boolean51 = interval45.isBefore((long) (-1));
        boolean boolean52 = interval45.isBeforeNow();
        boolean boolean53 = interval45.isAfterNow();
        org.joda.time.Seconds seconds54 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval45);
        boolean boolean55 = seconds38.isLessThan(seconds54);
        org.joda.time.Seconds seconds57 = seconds38.plus(59);
        boolean boolean58 = duration29.equals((java.lang.Object) seconds38);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(seconds54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(seconds57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test04971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04971");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        int int8 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone4);
        boolean boolean11 = dateTimeZone4.isStandardOffset(0L);
        long long14 = dateTimeZone4.convertLocalToUTC((long) (-1), false);
        java.util.TimeZone timeZone15 = dateTimeZone4.toTimeZone();
        boolean boolean17 = dateTimeZone4.isStandardOffset(1645513740502L);
        long long19 = dateTimeZone4.previousTransition((-380L));
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getDisplayCountry();
        java.lang.String str23 = dateTimeZone4.getName(2678399999L, locale21);
        long long26 = dateTimeZone4.convertLocalToUTC(259200002L, false);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-380L) + "'", long19 == (-380L));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 259200002L + "'", long26 == 259200002L);
    }

    @Test
    public void test04972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04972");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) 1439, 0L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.millis((long) (short) -1);
        long long26 = duration25.getMillis();
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        org.joda.time.Duration duration29 = days27.toStandardDuration();
        long long30 = duration29.getStandardHours();
        boolean boolean31 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration33 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) 'x');
        org.joda.time.Duration duration35 = duration23.plus((long) (-1));
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration23);
        int int37 = dateTime19.getCenturyOfEra();
        int int38 = dateTime19.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 144L + "'", long30 == 144L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20 + "'", int37 == 20);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 53 + "'", int38 == 53);
    }

    @Test
    public void test04973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04973");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Thu");
        java.lang.String str2 = languageRange1.getRange();
        org.joda.time.format.PeriodPrinter periodPrinter3 = null;
        org.joda.time.format.PeriodParser periodParser4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = new org.joda.time.format.PeriodFormatter(periodPrinter3, periodParser4);
        org.joda.time.PeriodType periodType6 = periodFormatter5.getParseType();
        org.joda.time.PeriodType periodType7 = periodFormatter5.getParseType();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter5.withLocale(locale8);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType12 = periodType11.withMinutesRemoved();
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, periodType12);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(periodType12);
        org.joda.time.Hours hours15 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(0L, chronology17);
        org.joda.time.Period period20 = period18.plusMillis(100);
        int int21 = period20.getHours();
        org.joda.time.Period period23 = period20.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime27.toDateTimeISO();
        org.joda.time.Instant instant33 = dateTime27.toInstant();
        org.joda.time.Instant instant34 = instant33.toInstant();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = null;
        boolean boolean40 = dateTimeZone37.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime43 = dateTime41.withHourOfDay(0);
        boolean boolean44 = instant34.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant48 = instant34.withDurationAdded((org.joda.time.ReadableDuration) duration46, (-1));
        boolean boolean50 = instant48.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime54.toDateTimeISO();
        org.joda.time.Instant instant60 = dateTime54.toInstant();
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant48, (org.joda.time.ReadableInstant) dateTime54, periodType61);
        org.joda.time.PeriodType periodType63 = periodType61.withWeeksRemoved();
        org.joda.time.PeriodType periodType64 = periodType63.withYearsRemoved();
        org.joda.time.Period period65 = period20.normalizedStandard(periodType64);
        org.joda.time.Period period66 = new org.joda.time.Period((java.lang.Object) mutablePeriod14, periodType64);
        org.joda.time.format.PeriodFormatter periodFormatter67 = periodFormatter5.withParseType(periodType64);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType69 = periodType68.withYearsRemoved();
        org.joda.time.PeriodType periodType70 = periodType69.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter67.withParseType(periodType69);
        org.joda.time.format.PeriodParser periodParser72 = periodFormatter67.getParser();
        org.joda.time.format.PeriodParser periodParser73 = periodFormatter67.getParser();
        boolean boolean74 = languageRange1.equals((java.lang.Object) periodFormatter67);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "thu" + "'", str2, "thu");
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNull(periodType7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(periodFormatter67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodFormatter71);
        org.junit.Assert.assertNull(periodParser72);
        org.junit.Assert.assertNull(periodParser73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test04974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04974");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        mutablePeriod1.setYears(7);
        mutablePeriod1.setMillis(69);
        org.joda.time.Period period19 = mutablePeriod1.toPeriod();
        int int20 = mutablePeriod1.getYears();
        mutablePeriod1.addMillis(679);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
    }

    @Test
    public void test04975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04975");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.Hours hours33 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime35 = dateTime23.plusMillis((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        int int37 = property9.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime39 = dateTime35.withYearOfCentury(3);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths(0);
        org.joda.time.DateTime dateTime43 = dateTime39.minusYears(4);
        org.joda.time.DateTime dateTime45 = dateTime39.withYear(948);
        org.joda.time.DateTime dateTime47 = dateTime39.minusSeconds(636);
        org.joda.time.DateTime dateTime48 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime49 = dateTime48.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514053337,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=13,MILLISECOND=337,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test04976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04976");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        long long11 = dateTimeZone7.convertLocalToUTC(10L, true);
        java.lang.String str12 = dateTimeZone7.getID();
        long long14 = dateTimeZone7.previousTransition((long) 23);
        java.util.TimeZone timeZone15 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(971, 43200000, 500, 78, 108, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 78 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 23L + "'", long14 == 23L);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test04977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04977");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addSeconds((int) (short) 0);
        mutablePeriod1.setYears(7);
        mutablePeriod1.setMonths((-100));
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod1.copy();
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod19.copy();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        boolean boolean34 = interval30.isAfter((org.joda.time.ReadableInstant) dateTime33);
        long long35 = interval30.toDurationMillis();
        org.joda.time.Duration duration36 = interval30.toDuration();
        org.joda.time.Days days37 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod38 = days37.toMutablePeriod();
        mutablePeriod38.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval41 = null;
        mutablePeriod38.add(readableInterval41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.eras();
        int int44 = mutablePeriod38.get(durationFieldType43);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.Chronology chronology56 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.hourOfHalfday();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((long) (short) 1, (long) 86399, chronology56);
        mutablePeriod38.setPeriod((long) (-1), chronology56);
        org.joda.time.Days days60 = org.joda.time.Days.ZERO;
        org.joda.time.Days days61 = days60.negated();
        int[] intArray64 = chronology56.get((org.joda.time.ReadablePeriod) days60, 1L, 1645513717718L);
        org.joda.time.Period period65 = duration36.toPeriod(chronology56);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) (short) 100, periodType23, chronology56);
        org.joda.time.DateTimeField dateTimeField67 = chronology56.year();
        org.joda.time.DateTimeField dateTimeField68 = chronology56.millisOfSecond();
        mutablePeriod20.setPeriod(345600000L, chronology56);
        mutablePeriod20.addMinutes(4800000);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2L + "'", long35 == 2L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[19045]");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test04978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04978");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.Instant instant34 = dateTime28.toInstant();
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone38.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        boolean boolean45 = instant35.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant49 = instant35.withDurationAdded((org.joda.time.ReadableDuration) duration47, (-1));
        java.util.Date date50 = instant35.toDate();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant53 = instant35.withMillis((long) (-100));
        org.joda.time.Chronology chronology54 = instant35.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test04979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04979");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(345600000L);
        long long2 = duration1.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        java.util.GregorianCalendar gregorianCalendar6 = dateTime5.toGregorianCalendar();
        int int7 = dateTime5.getHourOfDay();
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Calendar calendar11 = dateTime5.toCalendar(locale9);
        org.joda.time.DateTime dateTime13 = dateTime5.plusHours((int) 'x');
        org.joda.time.Chronology chronology14 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.era();
        org.joda.time.Period period16 = duration1.toPeriod(chronology14);
        org.joda.time.DurationField durationField17 = chronology14.millis();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology14.getDateTimeMillis((long) 415, 57, (-6), 27423260, 1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 96L + "'", long2 == 96L);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh-CN" + "'", str10, "zh-CN");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645514053449,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=13,MILLISECOND=449,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test04980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04980");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        boolean boolean13 = instant11.isBefore((long) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime17.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        boolean boolean27 = dateTime25.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration29 = minutes28.toStandardDuration();
        org.joda.time.Duration duration30 = minutes28.toStandardDuration();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant11, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period33 = period31.withMinutes((int) (short) 10);
        org.joda.time.Period period34 = new org.joda.time.Period((java.lang.Object) period33);
        org.joda.time.PeriodType periodType35 = period34.getPeriodType();
        int int36 = periodType35.size();
        org.joda.time.Period period37 = new org.joda.time.Period(0L, (-1645488797282L), periodType35);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
    }

    @Test
    public void test04981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04981");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis((int) '#');
        java.util.Date date11 = dateTime8.toDate();
        org.joda.time.DateTime dateTime13 = dateTime8.withMillisOfSecond(636);
        org.joda.time.TimeOfDay timeOfDay14 = dateTime13.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        int int21 = dateTime18.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime18.getZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) dateTime18, dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime18.plusMillis(5);
        org.joda.time.DateTime dateTime34 = dateTime18.minusSeconds(0);
        org.joda.time.DateTime dateTime35 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.Days days43 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod44 = days43.toMutablePeriod();
        org.joda.time.Duration duration45 = days43.toStandardDuration();
        org.joda.time.PeriodType periodType46 = days43.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Calendar calendar52 = dateTime50.toCalendar(locale51);
        org.joda.time.DateTime dateTime54 = dateTime50.plusMillis((int) '4');
        org.joda.time.Chronology chronology55 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType46, chronology55);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTimeField dateTimeField59 = chronology55.millisOfDay();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((-259200000L), (long) '#', chronology55);
        mutableInterval37.setChronology(chronology55);
        org.joda.time.DurationField durationField62 = chronology55.eras();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(71L, chronology55);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Calendar calendar70 = dateTime68.toCalendar(locale69);
        org.joda.time.DateTime dateTime72 = dateTime68.plusMillis((int) '4');
        org.joda.time.Chronology chronology73 = dateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.era();
        int int77 = dateTimeField75.getLeapAmount((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = dateTimeField75.getType();
        int int79 = dateTime63.get(dateTimeFieldType78);
        boolean boolean80 = timeOfDay14.isSupported(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test04982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04982");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Duration duration42 = minutes40.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42);
        int int44 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology45 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.minutes();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        boolean boolean60 = dateTimeZone57.isStandardOffset((long) (byte) 100);
        boolean boolean62 = dateTimeZone57.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone65.isLocalDateTimeGap(localDateTime67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime71 = dateTime69.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-1L), dateTimeZone74);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Calendar calendar77 = dateTime75.toCalendar(locale76);
        org.joda.time.DateTime dateTime79 = dateTime75.plusMillis((int) '4');
        org.joda.time.DateTime dateTime80 = dateTime75.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        boolean boolean85 = dateTime83.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes86 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Duration duration87 = minutes86.toStandardDuration();
        org.joda.time.Duration duration88 = minutes86.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableDuration) duration88);
        int int90 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology91 = chronology54.withZone(dateTimeZone57);
        org.joda.time.Chronology chronology92 = chronology45.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField93 = chronology92.minuteOfHour();
        org.joda.time.DurationField durationField94 = chronology92.weekyears();
        org.joda.time.DateTime dateTime95 = org.joda.time.DateTime.now(chronology92);
        org.joda.time.Chronology chronology96 = chronology92.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(minutes86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(chronology96);
    }

    @Test
    public void test04983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04983");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds2 = seconds0.minus(0);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.centuries();
        int int4 = seconds0.get(durationFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(0L, chronology6);
        org.joda.time.Period period9 = period7.plusMillis(100);
        int int10 = period9.getHours();
        org.joda.time.Period period12 = period9.minusMinutes(508);
        org.joda.time.Seconds seconds13 = period12.toStandardSeconds();
        org.joda.time.Seconds seconds15 = seconds13.plus(134);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds16 = seconds0.plus(seconds15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -2147483648 + -30346");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds15);
    }

    @Test
    public void test04984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04984");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfDay();
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 1, chronology9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        int int22 = dateTime21.getDayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime21.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.Instant instant33 = dateTime32.toInstant();
        org.joda.time.Hours hours34 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) instant33);
        org.joda.time.Hours hours35 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours37 = hours35.plus((int) (byte) 100);
        org.joda.time.PeriodType periodType38 = hours35.getPeriodType();
        org.joda.time.Hours hours39 = hours34.plus(hours35);
        org.joda.time.Period period40 = period12.minus((org.joda.time.ReadablePeriod) hours39);
        org.joda.time.Hours hours41 = org.joda.time.Hours.EIGHT;
        org.joda.time.DurationFieldType durationFieldType42 = hours41.getFieldType();
        org.joda.time.Hours hours44 = hours41.minus((int) (byte) 1);
        org.joda.time.PeriodType periodType45 = hours44.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType46 = hours44.getFieldType();
        boolean boolean47 = hours39.isGreaterThan(hours44);
        org.joda.time.Hours hours48 = org.joda.time.Hours.TWO;
        int int49 = hours48.getHours();
        org.joda.time.PeriodType periodType50 = hours48.getPeriodType();
        boolean boolean51 = hours44.isLessThan(hours48);
        org.joda.time.DurationFieldType durationFieldType52 = hours44.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(hours34);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(hours44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(durationFieldType52);
    }

    @Test
    public void test04985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04985");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.Instant instant21 = dateTime15.toInstant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone25.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime31 = dateTime29.withHourOfDay(0);
        boolean boolean32 = instant22.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant36 = instant22.withDurationAdded((org.joda.time.ReadableDuration) duration34, (-1));
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime40.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.plusMillis((int) '#');
        int int48 = instant36.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration50 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime54.toDateTimeISO();
        org.joda.time.DateTime.Property property60 = dateTime54.weekyear();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime54, periodType61);
        int int63 = dateTime54.getSecondOfDay();
        boolean boolean64 = dateTime45.isBefore((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean65 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime67 = dateTime11.withMonthOfYear((int) (byte) 10);
        int int68 = dateTime67.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514053825,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=14,SECOND=13,MILLISECOND=825,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 86399 + "'", int63 == 86399);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 20 + "'", int68 == 20);
    }

    @Test
    public void test04986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04986");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 2, (long) 23);
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        mutablePeriod5.setSeconds((int) (byte) 0);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod5);
        mutablePeriod5.setPeriod((long) 100);
        org.joda.time.ReadableInterval readableInterval11 = null;
        mutablePeriod5.setPeriod(readableInterval11);
        mutablePeriod5.setMillis(577);
        int int15 = mutablePeriod5.size();
        int int16 = mutablePeriod5.getMonths();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04987");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Days days4 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod5 = days4.toMutablePeriod();
        org.joda.time.Duration duration6 = days4.toStandardDuration();
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        boolean boolean10 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Duration duration13 = days11.toStandardDuration();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Days days18 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod19 = days18.toMutablePeriod();
        org.joda.time.Duration duration20 = days18.toStandardDuration();
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusMinutes((int) ' ');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period31);
        int int35 = dateTime2.getWeekyear();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        org.joda.time.PeriodType periodType45 = days42.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.hourOfHalfday();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType45, chronology54);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTimeField dateTimeField58 = chronology54.millisOfDay();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((-259200000L), (long) '#', chronology54);
        mutableInterval36.setChronology(chronology54);
        org.joda.time.DateTime dateTime61 = dateTime2.withChronology(chronology54);
        org.joda.time.DateTimeField dateTimeField62 = chronology54.dayOfMonth();
        long long64 = dateTimeField62.roundCeiling(4665600000L);
        long long66 = dateTimeField62.remainder((long) 1439);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 4665600000L + "'", long64 == 4665600000L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1439L + "'", long66 == 1439L);
    }

    @Test
    public void test04988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04988");
        java.lang.Throwable throwable0 = null;
        java.io.IOException iOException1 = new java.io.IOException(throwable0);
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException(throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException4);
        iOException2.addSuppressed((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.lang.Throwable[] throwableArray9 = iOException6.getSuppressed();
        java.lang.String str10 = iOException6.toString();
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.io.IOException: java.io.IOException" + "'", str10, "java.io.IOException: java.io.IOException");
    }

    @Test
    public void test04989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04989");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("Property[secondOfDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[secondOfDay]\" is malformed at \"roperty[secondOfDay]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04990");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 8, 600000L, chronology2);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.millis();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        org.joda.time.Days days16 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod17 = days16.toMutablePeriod();
        org.joda.time.Duration duration18 = days16.toStandardDuration();
        boolean boolean19 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Days days20 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod21 = days20.toMutablePeriod();
        org.joda.time.Duration duration22 = days20.toStandardDuration();
        org.joda.time.Days days23 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod24 = days23.toMutablePeriod();
        org.joda.time.Duration duration25 = days23.toStandardDuration();
        boolean boolean26 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        org.joda.time.Duration duration29 = days27.toStandardDuration();
        boolean boolean30 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration29);
        boolean boolean31 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Period period42 = period40.minusMinutes((int) ' ');
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadablePeriod) period40);
        int int44 = dateTime11.getWeekyear();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.Days days51 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod52 = days51.toMutablePeriod();
        org.joda.time.Duration duration53 = days51.toStandardDuration();
        org.joda.time.PeriodType periodType54 = days51.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Calendar calendar60 = dateTime58.toCalendar(locale59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusMillis((int) '4');
        org.joda.time.Chronology chronology63 = dateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.hourOfHalfday();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 'a', (long) (byte) 0, periodType54, chronology63);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(chronology63);
        org.joda.time.DateTimeField dateTimeField67 = chronology63.millisOfDay();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((-259200000L), (long) '#', chronology63);
        mutableInterval45.setChronology(chronology63);
        org.joda.time.DateTime dateTime70 = dateTime11.withChronology(chronology63);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime75 = null;
        boolean boolean76 = dateTimeZone73.isLocalDateTimeGap(localDateTime75);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((-1L), dateTimeZone79);
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.util.Calendar calendar82 = dateTime80.toCalendar(locale81);
        org.joda.time.DateTime dateTime84 = dateTime80.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime85 = dateTime80.toLocalDateTime();
        boolean boolean86 = dateTimeZone73.isLocalDateTimeGap(localDateTime85);
        int[] intArray88 = chronology63.get((org.joda.time.ReadablePartial) localDateTime85, (long) 100);
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((-82737998L), 3600000L, periodType8, chronology63);
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((long) 0, periodType5, chronology63);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod90);
        mutablePeriod90.setMillis(50);
        mutablePeriod90.addHours((int) (byte) 0);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar82);
        org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1970, 1, 1, 100]");
    }

    @Test
    public void test04991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04991");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration29 = period28.toStandardDuration();
        org.joda.time.Instant instant30 = instant24.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone33.isLocalDateTimeGap(localDateTime35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = dateTime37.withHourOfDay(0);
        int int40 = dateTime39.getDayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime39.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.Instant instant51 = dateTime50.toInstant();
        org.joda.time.Hours hours52 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTime dateTime54 = dateTime42.plusMillis((int) (byte) 1);
        boolean boolean55 = instant24.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime56 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Instant instant57 = dateTime42.toInstant();
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.MutableDateTime mutableDateTime59 = instant57.toMutableDateTime();
        int int60 = mutableDateTime59.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 12 + "'", int60 == 12);
    }

    @Test
    public void test04992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04992");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        org.joda.time.format.PeriodPrinter periodPrinter2 = null;
        org.joda.time.format.PeriodParser periodParser3 = null;
        org.joda.time.format.PeriodFormatter periodFormatter4 = new org.joda.time.format.PeriodFormatter(periodPrinter2, periodParser3);
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter4.getPrinter();
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String str7 = locale6.getDisplayVariant();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter4.withLocale(locale6);
        org.joda.time.PeriodType periodType9 = periodFormatter8.getParseType();
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = locale11.getVariant();
        org.joda.time.format.PeriodFormatter periodFormatter16 = periodFormatter8.withLocale(locale11);
        java.util.Locale locale17 = periodFormatter16.getLocale();
        java.lang.String str18 = locale1.getDisplayScript(locale17);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNull(periodPrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(periodType9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-CN" + "'", str12, "zh-CN");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(periodFormatter16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test04993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04993");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(2720);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04994");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Calendar calendar10 = dateTime8.toCalendar(locale9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusMillis((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime8.toDateTimeISO();
        org.joda.time.Instant instant14 = dateTime8.toInstant();
        org.joda.time.Instant instant15 = instant14.toInstant();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone18.isLocalDateTimeGap(localDateTime20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime24 = dateTime22.withHourOfDay(0);
        boolean boolean25 = instant15.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant29 = instant15.withDurationAdded((org.joda.time.ReadableDuration) duration27, (-1));
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = dateTime38.plusMillis((int) '#');
        int int41 = instant29.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        org.joda.time.Days days45 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod46 = days45.toMutablePeriod();
        org.joda.time.Duration duration47 = days45.toStandardDuration();
        boolean boolean48 = duration44.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Instant instant50 = instant29.withDurationAdded((org.joda.time.ReadableDuration) duration47, 10);
        mutableInterval4.setDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        java.lang.Object obj52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval(obj52, chronology53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Calendar calendar61 = dateTime59.toCalendar(locale60);
        int int62 = dateTime59.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone63 = dateTime59.getZone();
        boolean boolean64 = interval55.isBefore((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval65 = interval55.toMutableInterval();
        mutableInterval65.setDurationAfterStart(71L);
        boolean boolean68 = mutableInterval4.isBefore((org.joda.time.ReadableInterval) mutableInterval65);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType71 = periodType70.withMillisRemoved();
        org.joda.time.Period period72 = mutableInterval69.toPeriod(periodType70);
        org.joda.time.DateTime dateTime73 = mutableInterval69.getEnd();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((-1L), dateTimeZone78);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone78);
        org.joda.time.MutableInterval mutableInterval81 = interval80.toMutableInterval();
        java.lang.String str82 = interval80.toString();
        boolean boolean83 = mutableInterval69.isBefore((org.joda.time.ReadableInterval) interval80);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime86 = org.joda.time.DateTime.now(dateTimeZone85);
        boolean boolean88 = dateTime86.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property89 = dateTime86.millisOfSecond();
        org.joda.time.DateTime dateTime90 = property89.getDateTime();
        org.joda.time.DateTime dateTime92 = dateTime90.plusSeconds(10);
        boolean boolean93 = interval80.isAfter((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean94 = mutableInterval65.isAfter((org.joda.time.ReadableInterval) interval80);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 59 + "'", int62 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mutableInterval65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z" + "'", str82, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test04995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04995");
        org.joda.time.Period period8 = new org.joda.time.Period((-2147483648), 21600000, (-3), 25785, 679, 8, (-2147483648), 6);
        org.joda.time.Period period10 = period8.withMinutes(324);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test04996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04996");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        int int8 = mutablePeriod1.getMinutes();
        mutablePeriod1.setPeriod((int) '#', 0, 1, (int) (byte) 0, (int) ' ', (-1), 100, (int) (byte) -1);
        mutablePeriod1.setPeriod(3600000L, 6L);
        int int21 = mutablePeriod1.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        java.util.GregorianCalendar gregorianCalendar25 = dateTime24.toGregorianCalendar();
        int int26 = dateTime24.getHourOfDay();
        org.joda.time.DateTime dateTime28 = dateTime24.withCenturyOfEra(7);
        org.joda.time.DateTime.Property property29 = dateTime28.weekyear();
        org.joda.time.DurationField durationField30 = property29.getLeapDurationField();
        int int31 = property29.getLeapAmount();
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale35);
        int int37 = property29.getMaximumShortTextLength(locale35);
        boolean boolean38 = mutablePeriod1.equals((java.lang.Object) locale35);
        mutablePeriod1.addMonths(347);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-59) + "'", int21 == (-59));
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(gregorianCalendar25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u4e2d\u6587" + "'", str33, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str36, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test04997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04997");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime3.millisOfDay();
        int int10 = property9.getLeapAmount();
        int int11 = property9.get();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 86399999 + "'", int11 == 86399999);
    }

    @Test
    public void test04998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04998");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        boolean boolean9 = mutableInterval7.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray20 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList21);
        boolean boolean24 = mutableInterval7.equals((java.lang.Object) strList21);
        boolean boolean26 = mutableInterval7.isAfter((long) 2022);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone31);
        org.joda.time.MutableInterval mutableInterval34 = interval33.toMutableInterval();
        boolean boolean36 = mutableInterval34.isBefore((long) 59);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.lang.String[] strArray47 = new java.lang.String[] { "+00:00", "+00:00", "zho", "millisOfSecond", "P-2147483648D", "P-2147483648D", "eras" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strList48);
        boolean boolean51 = mutableInterval34.equals((java.lang.Object) strList48);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Calendar calendar57 = dateTime55.toCalendar(locale56);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMillis((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime55.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        boolean boolean65 = dateTime63.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes66 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration67 = minutes66.toStandardDuration();
        org.joda.time.Minutes minutes69 = minutes66.minus((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((-1L), dateTimeZone72);
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.util.Calendar calendar75 = dateTime73.toCalendar(locale74);
        org.joda.time.DateTime dateTime77 = dateTime73.plusMillis((int) '4');
        org.joda.time.DateTime dateTime78 = dateTime73.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(dateTimeZone80);
        boolean boolean83 = dateTime81.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes84 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Duration duration85 = minutes84.toStandardDuration();
        org.joda.time.Minutes minutes87 = minutes84.minus((int) (byte) 100);
        boolean boolean88 = minutes69.isLessThan(minutes87);
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime((-1L), dateTimeZone91);
        int int93 = dateTime92.getHourOfDay();
        org.joda.time.Interval interval94 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) minutes69, (org.joda.time.ReadableInstant) dateTime92);
        mutableInterval34.setStart((org.joda.time.ReadableInstant) dateTime92);
        int int96 = dateTime92.getWeekyear();
        mutableInterval7.setEnd((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.Period period98 = mutableInterval7.toPeriod();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar75);
        org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(minutes84);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(minutes87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 23 + "'", int93 == 23);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1970 + "'", int96 == 1970);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test04999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04999");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone6);
        int int10 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone6);
        boolean boolean13 = dateTimeZone6.isStandardOffset(0L);
        org.joda.time.Interval interval14 = new org.joda.time.Interval(21600000L, 63072000144L, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        boolean boolean28 = dateTime26.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property29 = dateTime26.millisOfSecond();
        int int30 = property29.getLeapAmount();
        org.joda.time.DateTime dateTime31 = property29.roundHalfEvenCopy();
        int int32 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime31);
        long long33 = dateTime31.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        int int36 = dateTime31.get(dateTimeFieldType34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        int int41 = dateTime40.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        boolean boolean45 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.Duration duration49 = new org.joda.time.Duration((long) 1439, 0L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.millis((long) (short) -1);
        long long52 = duration51.getMillis();
        org.joda.time.Days days53 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod54 = days53.toMutablePeriod();
        org.joda.time.Duration duration55 = days53.toStandardDuration();
        long long56 = duration55.getStandardHours();
        boolean boolean57 = duration51.isLongerThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration59 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) 'x');
        org.joda.time.DateTime dateTime60 = dateTime40.minus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTime dateTime61 = dateTime31.plus((org.joda.time.ReadableDuration) duration59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval62 = interval14.withDurationAfterStart((org.joda.time.ReadableDuration) duration59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645514054627L + "'", long33 == 1645514054627L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 23 + "'", int41 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 144L + "'", long56 == 144L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test05000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test05000");
        org.joda.time.Period period1 = org.joda.time.Period.millis(3);
        org.joda.time.Period period3 = period1.plusHours(0);
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) -1);
        org.joda.time.Period period7 = period5.plusMinutes((-1));
        org.joda.time.Days days8 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod9 = days8.toMutablePeriod();
        org.joda.time.Duration duration10 = days8.toStandardDuration();
        org.joda.time.PeriodType periodType11 = days8.getPeriodType();
        org.joda.time.Period period12 = period5.normalizedStandard(periodType11);
        org.joda.time.PeriodType periodType13 = periodType11.withMinutesRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period16 = new org.joda.time.Period((java.lang.Object) 0, periodType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
    }
}

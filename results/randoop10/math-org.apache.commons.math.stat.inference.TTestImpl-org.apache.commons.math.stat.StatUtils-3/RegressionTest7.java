import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test3501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3501");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution((double) 10.0f, 0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution17 = distributionFactory0.createExponentialDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution20 = distributionFactory0.createBinomialDistribution(120, 0.0d);
        binomialDistribution20.setNumberOfTrials(120);
        binomialDistribution20.setNumberOfTrials((int) ' ');
        double double25 = binomialDistribution20.getProbabilityOfSuccess();
        double double26 = binomialDistribution20.getProbabilityOfSuccess();
        double double28 = binomialDistribution20.cumulativeProbability(10);
        // The following exception was thrown during execution in test generation
        try {
            binomialDistribution20.setNumberOfTrials((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of trials must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution15);
        org.junit.Assert.assertNotNull(exponentialDistribution17);
        org.junit.Assert.assertNotNull(binomialDistribution20);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
    }

    @Test
    public void test3502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3502");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) 100L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution(1.0000000000000402d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
    }

    @Test
    public void test3503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3503");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        byte[] byteArray2 = new byte[] {};
        printStream1.write(byteArray2);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.print((long) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        byte[] byteArray10 = new byte[] {};
        printStream9.write(byteArray10);
        printStream5.write(byteArray10);
        printStream1.write(byteArray10);
        java.io.PrintStream printStream15 = printStream1.append('u');
        printStream1.print((float) 'a');
        java.io.PrintStream printStream19 = new java.io.PrintStream("French (France)");
        printStream19.println((float) (short) -1);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Locale[] localeArray33 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.util.Locale>) localeList34);
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 1, mathException28, (byte) 0, localeList36, 1225.0d };
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("de", objArray38);
        java.io.PrintStream printStream41 = printStream19.printf(locale22, "hi!", objArray38);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 1, (byte) 0, (byte) 10, (byte) -1 };
        printStream41.write(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray47, (int) '#', 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 1, 0, 10, -1]");
    }

    @Test
    public void test3504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3504");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        printWriter5.println(false);
        printWriter5.println('4');
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
    }

    @Test
    public void test3505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3505");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        cauchyDistribution6.setScale((double) 'x');
        double double9 = cauchyDistribution6.getMedian();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test3506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3506");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.lang.Object obj10 = null;
        printWriter9.println(obj10);
        printWriter9.write((int) (short) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        char[] charArray21 = new char[] { ' ' };
        printWriter19.write(charArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printWriter19.println(charArray30);
        printWriter9.write(charArray30, (int) (byte) 0, 1);
        printStream1.print(charArray30);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream40 = printStream1.append('#');
        printStream1.print((float) 17);
        printStream1.flush();
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
        org.junit.Assert.assertNotNull(printStream40);
    }

    @Test
    public void test3507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3507");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter47, false);
        printWriter47.println();
        printWriter47.print((float) (-1));
        org.apache.commons.math.distribution.DistributionFactory distributionFactory53 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution56 = distributionFactory53.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution59 = distributionFactory53.createFDistribution(35.0d, 100.0d);
        double double60 = fDistribution59.getDenominatorDegreesOfFreedom();
        double double61 = fDistribution59.getNumeratorDegreesOfFreedom();
        fDistribution59.setDenominatorDegreesOfFreedom(0.24999999999999964d);
        double double64 = fDistribution59.getDenominatorDegreesOfFreedom();
        fDistribution59.setNumeratorDegreesOfFreedom((double) '#');
        printWriter47.println((java.lang.Object) '#');
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(distributionFactory53);
        org.junit.Assert.assertNotNull(weibullDistribution56);
        org.junit.Assert.assertNotNull(fDistribution59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 100.0d + "'", double60 == 100.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.24999999999999964d + "'", double64 == 0.24999999999999964d);
    }

    @Test
    public void test3508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3508");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.print('x');
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42);
        double double45 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray42);
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray42);
        double double47 = org.apache.commons.math.stat.StatUtils.sum(doubleArray42);
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double double51 = org.apache.commons.math.stat.StatUtils.sum(doubleArray42, (int) (short) 100, 2147483647);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray42);
        printWriter8.println((java.lang.Object) double52);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 34.99999999999999d + "'", double45 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.5553480614894135d + "'", double46 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.5553480614894135d + "'", double52 == 3.5553480614894135d);
    }

    @Test
    public void test3509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3509");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        printWriter8.println(true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test3510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3510");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 0, 0);
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 2.2288027128982685E-37d);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, 0, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test3511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3511");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double32 = org.apache.commons.math.stat.StatUtils.max(doubleArray27, 0, 0);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34, (double) '#');
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double42 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray27, doubleArray34);
        double[] doubleArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double44 = tTestImpl15.homoscedasticT(doubleArray34, doubleArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.5553480614894135d + "'", double41 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    }

    @Test
    public void test3512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3512");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double double34 = org.apache.commons.math.stat.StatUtils.product(doubleArray25, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (int) (short) -1, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
    }

    @Test
    public void test3513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3513");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        java.util.Locale locale32 = java.util.Locale.UK;
        printWriter5.println((java.lang.Object) locale32);
        printWriter5.print((-1));
        java.io.PrintWriter printWriter37 = printWriter5.append('#');
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.toLanguageTag();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getISO3Language();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale40.getDisplayScript(locale42);
        java.lang.String str44 = locale40.getISO3Language();
        java.lang.String str45 = locale38.getDisplayName(locale40);
        java.io.PrintStream printStream49 = new java.io.PrintStream("French (France)");
        printStream49.println((float) (short) -1);
        printStream49.println(' ');
        printStream49.print(false);
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.OutputStream) printStream49);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        boolean boolean58 = locale57.hasExtensions();
        java.lang.String str59 = locale57.getDisplayVariant();
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        boolean boolean61 = locale60.hasExtensions();
        java.lang.String str62 = locale57.getDisplayLanguage(locale60);
        boolean boolean63 = locale57.hasExtensions();
        java.lang.Object[] objArray65 = null;
        java.io.PrintWriter printWriter66 = printWriter56.printf(locale57, "German", objArray65);
        java.util.Locale locale67 = null;
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Locale[] localeArray78 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.util.Locale>) localeList79);
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 1, mathException73, (byte) 0, localeList81, 1225.0d };
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("hi!", objArray83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("de", objArray83);
        java.io.PrintWriter printWriter86 = printWriter56.printf(locale67, "zh-CN", objArray83);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("FR", objArray83);
        java.io.PrintWriter printWriter88 = printWriter5.printf(locale40, "ko_KR", objArray83);
        java.lang.String str89 = locale40.getScript();
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "de" + "'", str39, "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "German" + "'", str45, "German");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Deutsch" + "'", str62, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter86);
        org.junit.Assert.assertNotNull(printWriter88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test3514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3514");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory0.createTDistribution((double) 2147483647);
        double double9 = tDistribution8.getDegreesOfFreedom();
        double double10 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl11 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        java.io.PrintStream printStream14 = new java.io.PrintStream("French (France)");
        printStream14.println((float) (short) -1);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale[] localeArray28 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList29);
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 1, mathException23, (byte) 0, localeList31, 1225.0d };
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("de", objArray33);
        java.io.PrintStream printStream36 = printStream14.printf(locale17, "hi!", objArray33);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38, (double) '#');
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        printStream36.print((java.lang.Object) doubleArray38);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38, 515.7000000000007d);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            double double48 = tTestImpl11.t((double) ' ', doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2.147483647E9d + "'", double9 == 2.147483647E9d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 2.147483647E9d + "'", double10 == 2.147483647E9d);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test3515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3515");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getVariant();
        java.lang.String str2 = locale0.getLanguage();
        java.lang.String str3 = locale0.getVariant();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test3516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3516");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream1.println('#');
        java.io.PrintStream printStream61 = new java.io.PrintStream("French (France)");
        printStream61.println((float) (short) -1);
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Locale[] localeArray75 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList76);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 1, mathException70, (byte) 0, localeList78, 1225.0d };
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", objArray80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("de", objArray80);
        java.io.PrintStream printStream83 = printStream61.printf(locale64, "hi!", objArray80);
        byte[] byteArray89 = new byte[] { (byte) -1, (byte) 1, (byte) 0, (byte) 10, (byte) -1 };
        printStream83.write(byteArray89);
        printStream1.write(byteArray89);
        boolean boolean92 = printStream1.checkError();
        printStream1.println((long) 10);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream83);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-1, 1, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3517");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.print((long) ' ');
        java.io.PrintStream printStream8 = printStream4.append('x');
        printStream8.flush();
        printStream8.println(52);
        org.junit.Assert.assertNotNull(printStream8);
    }

    @Test
    public void test3518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3518");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList12, strMap13);
        java.lang.String[] strArray22 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strList23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList25, filteringMode27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap29);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale[] localeArray34 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale[] localeArray41 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.List<java.util.Locale> localeList44 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList44);
        java.util.Locale.LanguageRange languageRange47 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange languageRange49 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] { languageRange47, languageRange49 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Locale locale56 = new java.util.Locale("allemand", "allemand", "");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strSet57, filteringMode58);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter(languageRangeList30, (java.util.Collection<java.util.Locale>) localeList44, filteringMode58);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode27.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localeList44);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals(locale56.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(localeList60);
    }

    @Test
    public void test3519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3519");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray9, (double) (short) 100);
        double double18 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) (byte) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test3520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3520");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder9 = builder6.setExtension('u', "german");
        java.util.Locale.Builder builder12 = builder9.setExtension('u', "en");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setRegion("hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3521");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("france");
    }

    @Test
    public void test3522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3522");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, (double) '#');
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double18 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
    }

    @Test
    public void test3523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3523");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        char[] charArray14 = new char[] { ' ' };
        printWriter12.write(charArray14);
        printStream1.print(charArray14);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter20.close();
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ]");
    }

    @Test
    public void test3524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3524");
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 1, mathException11, (byte) 0, localeList19, 1225.0d };
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("de", objArray21);
        java.io.PrintStream printStream24 = printStream2.printf(locale5, "hi!", objArray21);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("und", objArray21);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException25);
        java.lang.Object[] objArray27 = mathException26.getArguments();
        java.lang.String str28 = mathException26.getPattern();
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "und" + "'", str28, "und");
    }

    @Test
    public void test3525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3525");
        java.util.Locale locale2 = new java.util.Locale("Chine", "it_IT");
        org.junit.Assert.assertEquals(locale2.toString(), "chine_IT_IT");
    }

    @Test
    public void test3526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3526");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en");
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("de", objArray23);
        java.io.PrintStream printStream26 = printStream4.printf(locale7, "hi!", objArray23);
        java.io.PrintStream printStream27 = printStream1.printf("FR", objArray23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("", objArray43, (java.lang.Throwable) mathException47);
        java.lang.Object[] objArray49 = mathException48.getArguments();
        printStream1.println((java.lang.Object) objArray49);
        double[] doubleArray52 = new double[] { '#' };
        double double53 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray52);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray52);
        printStream1.print((java.lang.Object) double55);
        printStream1.flush();
        printStream1.print(0.0d);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1225.0d + "'", double53 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 34.99999999999999d + "'", double55 == 34.99999999999999d);
    }

    @Test
    public void test3527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3527");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category0, locale8);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
    }

    @Test
    public void test3528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3528");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.sum(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3529");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder11 = builder6.setExtension('x', "FRA");
        java.util.Locale.Builder builder14 = builder6.setExtension('x', "german");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("\u5fb7\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3530");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution13 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution15 = distributionFactory0.createPoissonDistribution(100.0d);
        poissonDistribution15.setMean(0.002555130330427813d);
        double double18 = poissonDistribution15.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution13);
        org.junit.Assert.assertNotNull(poissonDistribution15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.002555130330427813d + "'", double18 == 0.002555130330427813d);
    }

    @Test
    public void test3531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3531");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14, (double) '#');
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double double22 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray14, (double) 1.0f);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double25 = org.apache.commons.math.stat.StatUtils.mean(doubleArray14);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, (double) '#');
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = tTestImpl12.tTest(doubleArray14, doubleArray27, 1.0000000000000402d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0000000000000402");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test3532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3532");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.print('x');
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale locale44 = builder43.build();
        java.lang.String str45 = locale44.toLanguageTag();
        java.io.PrintStream printStream48 = new java.io.PrintStream("en");
        java.io.PrintStream printStream51 = new java.io.PrintStream("French (France)");
        printStream51.println((float) (short) -1);
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale[] localeArray65 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList66);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 1, mathException60, (byte) 0, localeList68, 1225.0d };
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("de", objArray70);
        java.io.PrintStream printStream73 = printStream51.printf(locale54, "hi!", objArray70);
        java.io.PrintStream printStream74 = printStream48.printf("FR", objArray70);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray82 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList83 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList83, languageRangeArray82);
        java.util.Locale[] localeArray85 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList86 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList86, localeArray85);
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList83, (java.util.Collection<java.util.Locale>) localeList86);
        java.lang.Object[] objArray90 = new java.lang.Object[] { (byte) 1, mathException80, (byte) 0, localeList88, 1225.0d };
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("hi!", objArray90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("de", objArray90);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("", objArray90, (java.lang.Throwable) mathException94);
        java.lang.Object[] objArray96 = mathException95.getArguments();
        printStream48.println((java.lang.Object) objArray96);
        java.io.PrintWriter printWriter98 = printWriter8.format(locale44, "FR_FR", objArray96);
        java.lang.String str99 = locale44.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "und" + "'", str45, "und");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(languageRangeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(localeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray96), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray96), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test3533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3533");
        java.io.PrintStream printStream3 = new java.io.PrintStream("French (France)");
        printStream3.println((float) (short) -1);
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale[] localeArray17 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList18);
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 1, mathException12, (byte) 0, localeList20, 1225.0d };
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("de", objArray22);
        java.io.PrintStream printStream25 = printStream3.printf(locale6, "hi!", objArray22);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("und", objArray22);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException26);
        java.lang.Object[] objArray28 = mathException26.getArguments();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("Chinese (Taiwan)", objArray28);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
    }

    @Test
    public void test3534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3534");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = locale2.getISO3Language();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getISO3Language();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Locale locale8 = locale0.stripExtensions();
        java.lang.String str9 = locale8.toLanguageTag();
        boolean boolean10 = locale8.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de" + "'", str1, "de");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "German" + "'", str7, "German");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "de" + "'", str9, "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3535");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayScript(locale9);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale7.getDisplayScript(locale11);
        java.lang.String str14 = locale7.toLanguageTag();
        java.lang.String str15 = locale5.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder16 = builder0.setLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder0.removeUnicodeLocaleAttribute("hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "French" + "'", str15, "French");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3536");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.print((long) ' ');
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        byte[] byteArray13 = new byte[] {};
        printStream12.write(byteArray13);
        printStream8.write(byteArray13);
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        printStream18.println(' ');
        printStream18.print(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = locale26.getDisplayLanguage(locale29);
        boolean boolean32 = locale26.hasExtensions();
        java.lang.Object[] objArray34 = null;
        java.io.PrintWriter printWriter35 = printWriter25.printf(locale26, "German", objArray34);
        java.util.Locale locale36 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter25.printf(locale36, "zh-CN", objArray52);
        java.io.PrintStream printStream56 = printStream8.format("Chinese (Taiwan)", objArray52);
        java.io.PrintWriter printWriter57 = printWriter5.printf("Franz\366sisch (Frankreich)", objArray52);
        printWriter5.println((int) (byte) 100);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory60 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution63 = distributionFactory60.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution66 = distributionFactory60.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double67 = pascalDistribution66.getProbabilityOfSuccess();
        printWriter5.print((java.lang.Object) pascalDistribution66);
        printWriter5.println(1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Deutsch" + "'", str31, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(distributionFactory60);
        org.junit.Assert.assertNotNull(weibullDistribution63);
        org.junit.Assert.assertNotNull(pascalDistribution66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test3537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3537");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        printWriter8.print(false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter8.println((int) '4');
        printWriter8.print(false);
        printWriter8.print(0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test3538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3538");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize(0);
        hypergeometricDistribution10.setPopulationSize(2147483646);
        double double17 = hypergeometricDistribution10.cumulativeProbability(0);
        int int18 = hypergeometricDistribution10.getPopulationSize();
        hypergeometricDistribution10.setSampleSize((int) (byte) 10);
        int int21 = hypergeometricDistribution10.getNumberOfSuccesses();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483646 + "'", int18 == 2147483646);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
    }

    @Test
    public void test3539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3539");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter13.println((float) '#');
        printWriter13.println(100L);
    }

    @Test
    public void test3540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3540");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution7 = distributionFactory0.createTDistribution((double) (byte) 1);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution9 = distributionFactory0.createExponentialDistribution(1.1102230246251565E-16d);
        double double10 = exponentialDistribution9.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(tDistribution7);
        org.junit.Assert.assertNotNull(exponentialDistribution9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.1102230246251565E-16d + "'", double10 == 1.1102230246251565E-16d);
    }

    @Test
    public void test3541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3541");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        printWriter10.println((long) 97);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
    }

    @Test
    public void test3542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3542");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        char[] charArray14 = new char[] { ' ' };
        printWriter12.write(charArray14);
        printStream1.print(charArray14);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream23 = new java.io.PrintStream("French (France)");
        printStream23.println((float) (short) -1);
        printStream23.println(' ');
        printStream23.flush();
        java.util.Locale locale29 = null;
        java.io.PrintStream printStream32 = new java.io.PrintStream("French (France)");
        printStream32.println((float) (short) -1);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream32);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream32);
        java.io.PrintStream printStream39 = new java.io.PrintStream("French (France)");
        printStream39.println((float) (short) -1);
        printStream39.println(' ');
        printStream39.print(false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        java.io.PrintWriter printWriter48 = printWriter46.append(' ');
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        boolean boolean50 = locale49.hasExtensions();
        java.lang.String str51 = locale49.getDisplayVariant();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale52.getDisplayName();
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = locale54.getISO3Country();
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleKeys();
        java.lang.String str57 = locale52.getDisplayCountry(locale54);
        java.lang.String str58 = locale49.getDisplayName(locale54);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale[] localeArray69 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 1, mathException64, (byte) 0, localeList72, 1225.0d };
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("de", objArray74);
        java.io.PrintWriter printWriter77 = printWriter48.printf(locale49, "zho", objArray74);
        java.io.PrintWriter printWriter78 = printWriter36.printf("", objArray74);
        java.io.PrintStream printStream79 = printStream23.printf(locale29, "und", objArray74);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("fra", objArray74);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("", objArray74);
        java.io.PrintStream printStream82 = printStream1.format("\uc774\ud0c8\ub9ac\uc544\uc5b4", objArray74);
        printStream82.print('x');
        java.util.Locale locale85 = java.util.Locale.GERMAN;
        java.lang.String str86 = locale85.getDisplayName();
        java.lang.String str87 = locale85.getLanguage();
        java.util.Locale locale88 = locale85.stripExtensions();
        java.lang.String str89 = locale88.getVariant();
        printStream82.println((java.lang.Object) locale88);
        java.io.PrintStream printStream92 = new java.io.PrintStream((java.io.OutputStream) printStream82, false);
        printStream92.print((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream98 = printStream92.append((java.lang.CharSequence) "org.apache.commons.math.MathException: und", (int) 'x', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ]");
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Deutsch" + "'", str53, "Deutsch");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "FRA" + "'", str55, "FRA");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "allemand" + "'", str58, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Deutsch" + "'", str86, "Deutsch");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "de" + "'", str87, "de");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test3543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3543");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 1, mathException11, (byte) 0, localeList19, 1225.0d };
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("de", objArray21);
        java.io.PrintStream printStream24 = printStream2.printf(locale5, "hi!", objArray21);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale5.getDisplayLanguage(locale25);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.setLanguage("German");
        java.util.Locale locale31 = builder28.build();
        java.util.Locale.Builder builder32 = builder28.clearExtensions();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getISO3Language();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale35.getDisplayScript(locale37);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale39.getDisplayName();
        java.lang.String str41 = locale35.getDisplayScript(locale39);
        java.lang.String str42 = locale35.toLanguageTag();
        java.lang.String str43 = locale33.getDisplayLanguage(locale35);
        java.util.Locale.Builder builder44 = builder28.setLocale(locale35);
        java.util.Locale.setDefault(category0, locale35);
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder46.setLanguage("German");
        java.util.Locale.Builder builder49 = builder48.clearExtensions();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = locale50.getDisplayLanguage(locale51);
        java.util.Locale.Builder builder54 = builder48.setLocale(locale50);
        java.lang.String str55 = locale50.getVariant();
        java.util.Locale.setDefault(category0, locale50);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = locale57.getISO3Country();
        java.lang.String str59 = locale57.getDisplayName();
        java.util.Locale.setDefault(category0, locale57);
        java.util.Locale locale61 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str26, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "german");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FRA" + "'", str34, "FRA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "French" + "'", str43, "French");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Italienisch" + "'", str53, "Italienisch");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "FRA" + "'", str58, "FRA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "francese (Francia)" + "'", str59, "francese (Francia)");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
    }

    @Test
    public void test3544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3544");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("zh_TW");
    }

    @Test
    public void test3545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3545");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("it-IT", 2.147483646E9d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=2.147483646E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3546");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale[] localeArray51 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList52);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 1, mathException46, (byte) 0, localeList54, 1225.0d };
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("de", objArray56);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", objArray56, (java.lang.Throwable) mathException60);
        java.lang.Object[] objArray62 = mathException61.getArguments();
        java.io.PrintWriter printWriter63 = printWriter39.printf("ITA", objArray62);
        printWriter39.println((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter69 = printWriter39.append((java.lang.CharSequence) "Cina", (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter63);
    }

    @Test
    public void test3547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3547");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        cauchyDistribution6.setScale((double) 1.0f);
        double double10 = cauchyDistribution6.getMedian();
        double double13 = cauchyDistribution6.cumulativeProbability((double) 0L, 97.0d);
        double double14 = cauchyDistribution6.getScale();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9646159093607598d + "'", double13 == 0.9646159093607598d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test3548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3548");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        double double38 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray25, (double) ' ');
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray25);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 0.035086649709077655d);
        double[] doubleArray43 = new double[] { '#' };
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray43, 1, 0);
        double double48 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray43);
        double double49 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray25, doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = org.apache.commons.math.stat.StatUtils.min(doubleArray43, (int) 'u', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 34.99999999999999d + "'", double48 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test3549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3549");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.print((long) ' ');
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        byte[] byteArray13 = new byte[] {};
        printStream12.write(byteArray13);
        printStream8.write(byteArray13);
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        printStream18.println(' ');
        printStream18.print(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = locale26.getDisplayLanguage(locale29);
        boolean boolean32 = locale26.hasExtensions();
        java.lang.Object[] objArray34 = null;
        java.io.PrintWriter printWriter35 = printWriter25.printf(locale26, "German", objArray34);
        java.util.Locale locale36 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter25.printf(locale36, "zh-CN", objArray52);
        java.io.PrintStream printStream56 = printStream8.format("Chinese (Taiwan)", objArray52);
        java.io.PrintWriter printWriter57 = printWriter5.printf("Franz\366sisch (Frankreich)", objArray52);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale[] localeArray67 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList68);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 1, mathException62, (byte) 0, localeList70, 1225.0d };
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("hi!", objArray72);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!");
        java.lang.Object[] objArray76 = new java.lang.Object[] { mathException73, mathException75 };
        java.io.PrintWriter printWriter77 = printWriter5.format("zh", objArray76);
        printWriter5.println('#');
        java.io.PrintWriter printWriter81 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Deutsch" + "'", str31, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[org.apache.commons.math.MathException: hi!, org.apache.commons.math.MathException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[org.apache.commons.math.MathException: hi!, org.apache.commons.math.MathException: hi!]");
        org.junit.Assert.assertNotNull(printWriter77);
    }

    @Test
    public void test3550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3550");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str7 = locale4.getUnicodeLocaleType("en");
        java.lang.String str8 = locale4.getDisplayLanguage();
        java.util.Locale.Builder builder9 = builder0.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder0.setUnicodeLocaleKeyword("CHN", "\uc601\uc5b4\uc601\uad6d)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: CHN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "anglais" + "'", str8, "anglais");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3551");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test3552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3552");
        java.util.Locale locale2 = new java.util.Locale("it", "\ud504\ub791\uc2a4");
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getLanguage();
        java.lang.String str5 = locale2.getDisplayName(locale3);
        java.lang.String str6 = locale2.getLanguage();
        org.junit.Assert.assertEquals(locale2.toString(), "\ud504\ub791\uc2a4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud504\ub791\uc2a4)" + "'", str5, "\ud504\ub791\uc2a4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "it" + "'", str6, "it");
    }

    @Test
    public void test3553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3553");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str7 = locale4.getUnicodeLocaleType("en");
        java.lang.String str8 = locale4.getDisplayLanguage();
        java.util.Locale.Builder builder9 = builder0.setLocale(locale4);
        java.lang.String str10 = locale4.getDisplayName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "anglais" + "'", str8, "anglais");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "anglais" + "'", str10, "anglais");
    }

    @Test
    public void test3554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3554");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setLanguage("German");
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale15.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder19 = builder13.setLocale(locale15);
        java.util.Locale.Builder builder20 = builder10.setLocale(locale15);
        java.util.Locale locale21 = builder20.build();
        java.lang.String str22 = locale21.toLanguageTag();
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale28.getISO3Language();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale28.getDisplayScript(locale30);
        java.lang.String str32 = locale30.getDisplayLanguage();
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        printStream35.println(' ');
        printStream35.print(false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        java.io.PrintWriter printWriter44 = printWriter42.append(' ');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale45.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = locale50.getISO3Country();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.lang.String str53 = locale48.getDisplayCountry(locale50);
        java.lang.String str54 = locale45.getDisplayName(locale50);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale[] localeArray65 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList66);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 1, mathException60, (byte) 0, localeList68, 1225.0d };
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("de", objArray70);
        java.io.PrintWriter printWriter73 = printWriter44.printf(locale45, "zho", objArray70);
        java.io.PrintStream printStream74 = printStream27.format(locale30, "fra", objArray70);
        java.lang.String str75 = locale21.getDisplayVariant(locale30);
        java.util.Locale locale76 = locale30.stripExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italienisch" + "'", str18, "Italienisch");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "allemand" + "'", str32, "allemand");
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "allemand" + "'", str49, "allemand");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FRA" + "'", str51, "FRA");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "allemand" + "'", str54, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
    }

    @Test
    public void test3555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3555");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en");
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("de", objArray23);
        java.io.PrintStream printStream26 = printStream4.printf(locale7, "hi!", objArray23);
        java.io.PrintStream printStream27 = printStream1.printf("FR", objArray23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("", objArray43, (java.lang.Throwable) mathException47);
        java.lang.Object[] objArray49 = mathException48.getArguments();
        printStream1.println((java.lang.Object) objArray49);
        boolean boolean51 = printStream1.checkError();
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test3556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3556");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en");
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("de", objArray23);
        java.io.PrintStream printStream26 = printStream4.printf(locale7, "hi!", objArray23);
        java.io.PrintStream printStream27 = printStream1.printf("FR", objArray23);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory28 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution31 = distributionFactory28.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution34 = distributionFactory28.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution37 = distributionFactory28.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution40 = distributionFactory28.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution43 = distributionFactory28.createNormalDistribution((double) 10.0f, 0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution45 = distributionFactory28.createExponentialDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution48 = distributionFactory28.createBinomialDistribution(120, 0.0d);
        double double49 = binomialDistribution48.getProbabilityOfSuccess();
        printStream27.print((java.lang.Object) binomialDistribution48);
        binomialDistribution48.setNumberOfTrials((int) '#');
        double double53 = binomialDistribution48.getProbabilityOfSuccess();
        binomialDistribution48.setNumberOfTrials((int) '4');
        binomialDistribution48.setNumberOfTrials((int) ' ');
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(distributionFactory28);
        org.junit.Assert.assertNotNull(weibullDistribution31);
        org.junit.Assert.assertNotNull(fDistribution34);
        org.junit.Assert.assertNotNull(normalDistribution37);
        org.junit.Assert.assertNotNull(normalDistribution40);
        org.junit.Assert.assertNotNull(normalDistribution43);
        org.junit.Assert.assertNotNull(exponentialDistribution45);
        org.junit.Assert.assertNotNull(binomialDistribution48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test3557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3557");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale[] localeArray9 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 1, mathException4, (byte) 0, localeList12, 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("");
        mathException15.addSuppressed((java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException19);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
    }

    @Test
    public void test3558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3558");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl20 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        tTestImpl12.setDistribution(tDistribution19);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray24);
        double double31 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, (double) '#');
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray24, doubleArray33);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = tTestImpl12.tTest(515.6999999999999d, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.5553480614894135d + "'", double28 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test3559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3559");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("\uc601\uc5b4", "Canada");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Canada");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3560");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray31);
        double double38 = org.apache.commons.math.stat.StatUtils.min(doubleArray31);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double[] doubleArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double41 = tTestImpl12.homoscedasticTTest(doubleArray31, doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test3561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3561");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("CHINESISCH (CHINA)");
    }

    @Test
    public void test3562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3562");
        java.util.Locale locale1 = new java.util.Locale("German");
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "german");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "german" + "'", str3, "german");
    }

    @Test
    public void test3563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3563");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl16 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double double17 = tDistribution11.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
    }

    @Test
    public void test3564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3564");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("eng");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setScript("tedesco");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: tedesco [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "german");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3565");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\uc911\uad6d\uc5b4\ub300\ub9cc)", 272373.4204903813d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=272373.4204903813");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3566");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.print("org.apache.commons.math.MathException: de");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory9 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory9.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution15 = distributionFactory9.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double16 = cauchyDistribution15.getScale();
        cauchyDistribution15.setScale((double) 1.0f);
        double double19 = cauchyDistribution15.getMedian();
        cauchyDistribution15.setScale((double) 1);
        printStream1.println((java.lang.Object) cauchyDistribution15);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale23.getDisplayLanguage(locale24);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = locale27.getISO3Language();
        java.lang.String str29 = locale27.getDisplayName();
        boolean boolean30 = locale27.hasExtensions();
        java.lang.String str31 = locale24.getDisplayLanguage(locale27);
        java.io.PrintStream printStream34 = new java.io.PrintStream("French (France)");
        printStream34.println((float) (short) -1);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale[] localeArray48 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList49);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 1, mathException43, (byte) 0, localeList51, 1225.0d };
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("de", objArray53);
        java.io.PrintStream printStream56 = printStream34.printf(locale37, "hi!", objArray53);
        java.io.PrintStream printStream57 = printStream1.format(locale24, "USA", objArray53);
        java.lang.String str58 = locale24.getDisplayName();
        java.lang.Object obj59 = locale24.clone();
        org.junit.Assert.assertNotNull(distributionFactory9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(cauchyDistribution15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Italienisch" + "'", str26, "Italienisch");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fra" + "'", str28, "fra");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fran\347ais (France)" + "'", str29, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "allemand" + "'", str31, "allemand");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "allemand" + "'", str58, "allemand");
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "de");
    }

    @Test
    public void test3567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3567");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory32 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution35 = distributionFactory32.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution36 = distributionFactory32.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution38 = distributionFactory32.createTDistribution((double) 1L);
        double double39 = tDistribution38.getDegreesOfFreedom();
        tTestImpl31.setDistribution(tDistribution38);
        double double41 = tDistribution38.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution38);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double45 = tTestImpl12.t(statisticalSummary43, statisticalSummary44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory32);
        org.junit.Assert.assertNotNull(weibullDistribution35);
        org.junit.Assert.assertNotNull(normalDistribution36);
        org.junit.Assert.assertNotNull(tDistribution38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
    }

    @Test
    public void test3568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3568");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter18.print((long) (byte) 10);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution29 = distributionFactory23.createTDistribution((double) 1L);
        double double30 = tDistribution29.getDegreesOfFreedom();
        tTestImpl22.setDistribution(tDistribution29);
        org.apache.commons.math.distribution.TDistribution tDistribution32 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl33 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution32);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory34 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution37 = distributionFactory34.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution38 = distributionFactory34.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution40 = distributionFactory34.createTDistribution((double) 1L);
        double double41 = tDistribution40.getDegreesOfFreedom();
        tTestImpl33.setDistribution(tDistribution40);
        tTestImpl22.setDistribution(tDistribution40);
        printWriter18.print((java.lang.Object) tTestImpl22);
        double[] doubleArray46 = new double[] { '#' };
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        double double51 = org.apache.commons.math.stat.StatUtils.max(doubleArray46, 0, 0);
        double[] doubleArray53 = new double[] { '#' };
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray53);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray53);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray53);
        double double59 = org.apache.commons.math.stat.StatUtils.sum(doubleArray53);
        double double61 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray53, (double) (short) 100);
        double double62 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray46, doubleArray53);
        double double64 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray46, 0.24999999999999964d);
        double double65 = org.apache.commons.math.stat.StatUtils.mean(doubleArray46);
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46, (int) (byte) 0, 1);
        double double69 = org.apache.commons.math.stat.StatUtils.mean(doubleArray46);
        double[] doubleArray71 = new double[] { '#' };
        double double72 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray71);
        double[] doubleArray74 = new double[] { '#' };
        double double75 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray74);
        double double76 = org.apache.commons.math.stat.StatUtils.variance(doubleArray74);
        double double78 = org.apache.commons.math.stat.StatUtils.variance(doubleArray74, (double) '#');
        double double79 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray74);
        double double80 = org.apache.commons.math.stat.StatUtils.variance(doubleArray74);
        double double83 = org.apache.commons.math.stat.StatUtils.mean(doubleArray74, (int) (short) 0, (int) (byte) 0);
        double double84 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray71, doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = tTestImpl22.homoscedasticT(doubleArray46, doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(tDistribution29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory34);
        org.junit.Assert.assertNotNull(weibullDistribution37);
        org.junit.Assert.assertNotNull(normalDistribution38);
        org.junit.Assert.assertNotNull(tDistribution40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1225.0d + "'", double47 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 34.99999999999999d + "'", double56 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 3.5553480614894135d + "'", double57 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 35.0d + "'", double59 == 35.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 35.0d + "'", double65 == 35.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 3.5553480614894135d + "'", double68 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 35.0d + "'", double69 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[35.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1225.0d + "'", double72 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1225.0d + "'", double75 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1225.0d + "'", double79 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
    }

    @Test
    public void test3569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3569");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray8);
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double13 = org.apache.commons.math.stat.StatUtils.sum(doubleArray8);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double15 = org.apache.commons.math.stat.StatUtils.min(doubleArray8);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.sum(doubleArray18);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, 1, 0);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray18, doubleArray26);
        double double33 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray8, doubleArray26);
        double double35 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray8, (double) 10);
        double double36 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray8);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8, 0.5199388058383725d);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray8, (int) (short) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 34.99999999999999d + "'", double11 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.5553480614894135d + "'", double12 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 34.99999999999999d + "'", double21 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.5553480614894135d + "'", double22 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test3570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3570");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution29 = distributionFactory23.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution31 = distributionFactory23.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution33 = distributionFactory23.createChiSquareDistribution(0.6321205588285574d);
        org.apache.commons.math.distribution.TDistribution tDistribution35 = distributionFactory23.createTDistribution(0.5199388058383725d);
        tTestImpl1.setDistribution(tDistribution35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl1.t(statisticalSummary37, statisticalSummary38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(exponentialDistribution29);
        org.junit.Assert.assertNotNull(poissonDistribution31);
        org.junit.Assert.assertNotNull(chiSquaredDistribution33);
        org.junit.Assert.assertNotNull(tDistribution35);
    }

    @Test
    public void test3571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3571");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution12 = distributionFactory0.createCauchyDistribution((double) 0, 117.0d);
        double double13 = cauchyDistribution12.getMedian();
        double double14 = cauchyDistribution12.getScale();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(cauchyDistribution12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 117.0d + "'", double14 == 117.0d);
    }

    @Test
    public void test3572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3572");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        tDistribution22.setDegreesOfFreedom((double) (short) 10);
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory26 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution29 = distributionFactory26.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution32 = distributionFactory26.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution35 = distributionFactory26.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory26.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        tTestImpl15.setDistribution(tDistribution37);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl15.homoscedasticT(statisticalSummary40, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertNotNull(distributionFactory26);
        org.junit.Assert.assertNotNull(weibullDistribution29);
        org.junit.Assert.assertNotNull(fDistribution32);
        org.junit.Assert.assertNotNull(normalDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
    }

    @Test
    public void test3573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3573");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        double double21 = tDistribution19.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, (double) '#');
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double36 = org.apache.commons.math.stat.StatUtils.mean(doubleArray27, (int) (short) 0, (int) (byte) 0);
        double double37 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray24, doubleArray27);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42);
        double double45 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray42);
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray42);
        double double47 = org.apache.commons.math.stat.StatUtils.sum(doubleArray42);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray42);
        double double51 = org.apache.commons.math.stat.StatUtils.mean(doubleArray42, 1, 0);
        double double52 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray39, doubleArray42);
        double double53 = org.apache.commons.math.stat.StatUtils.sum(doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = tTestImpl22.pairedT(doubleArray27, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 34.99999999999999d + "'", double45 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.5553480614894135d + "'", double46 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.5553480614894135d + "'", double48 == 3.5553480614894135d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
    }

    @Test
    public void test3574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3574");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder0.setLanguage("English");
        java.util.Locale.Builder builder9 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder0.setRegion("it_IT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: it_IT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3575");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("\ud504\ub791\uc2a4");
        java.lang.String str2 = mathException1.getPattern();
        java.lang.String str3 = mathException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud504\ub791\uc2a4" + "'", str2, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud504\ub791\uc2a4" + "'", str3, "\ud504\ub791\uc2a4");
    }

    @Test
    public void test3576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3576");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        printWriter5.println(charArray16);
        java.io.PrintWriter printWriter20 = printWriter5.append((java.lang.CharSequence) "FRA");
        char[] charArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter5.write(charArray21, (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test3577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3577");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        printWriter5.println((-1.0d));
        printWriter5.print((int) (short) -1);
        printWriter5.println((double) '#');
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory18 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory18.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution22 = distributionFactory18.createChiSquareDistribution((double) (short) 1);
        chiSquaredDistribution22.setDegreesOfFreedom((double) 2147483647);
        chiSquaredDistribution22.setDegreesOfFreedom((double) (byte) 10);
        chiSquaredDistribution22.setDegreesOfFreedom(0.9999999999999989d);
        printWriter5.println((java.lang.Object) 0.9999999999999989d);
        org.junit.Assert.assertNotNull(distributionFactory18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
        org.junit.Assert.assertNotNull(chiSquaredDistribution22);
    }

    @Test
    public void test3578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3578");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("allemand", (double) 0L);
        java.lang.String str3 = languageRange2.getRange();
        java.lang.String str4 = languageRange2.getRange();
        double double5 = languageRange2.getWeight();
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale[] localeArray22 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList23);
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 1, mathException17, (byte) 0, localeList25, 1225.0d };
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", objArray27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("de", objArray27);
        java.io.PrintStream printStream30 = printStream8.printf(locale11, "hi!", objArray27);
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.lang.String str32 = locale11.getDisplayLanguage(locale31);
        java.util.Locale.setDefault(category6, locale11);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder34.setLanguage("German");
        java.util.Locale locale37 = builder34.build();
        java.util.Locale.Builder builder38 = builder34.clearExtensions();
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = locale39.getISO3Country();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getISO3Language();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale41.getDisplayScript(locale43);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = locale41.getDisplayScript(locale45);
        java.lang.String str48 = locale41.toLanguageTag();
        java.lang.String str49 = locale39.getDisplayLanguage(locale41);
        java.util.Locale.Builder builder50 = builder34.setLocale(locale41);
        java.util.Locale.setDefault(category6, locale41);
        java.lang.String str52 = locale41.getDisplayVariant();
        boolean boolean53 = languageRange2.equals((java.lang.Object) locale41);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "allemand" + "'", str3, "allemand");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "allemand" + "'", str4, "allemand");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str32, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "german");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "FRA" + "'", str40, "FRA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "und" + "'", str48, "und");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "French" + "'", str49, "French");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test3579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3579");
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        printStream2.println(' ');
        printStream2.print(false);
        printStream2.println((float) '#');
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream2, true);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        printStream16.println(' ');
        printStream16.print(false);
        printStream16.println((float) '#');
        printStream16.println((float) 100L);
        java.io.PrintStream printStream29 = new java.io.PrintStream("French (France)");
        printStream29.println((float) (short) -1);
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream29);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream29);
        java.io.PrintStream printStream36 = new java.io.PrintStream("French (France)");
        printStream36.println((float) (short) -1);
        printStream36.println(' ');
        printStream36.print(false);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream36);
        java.io.PrintWriter printWriter45 = printWriter43.append(' ');
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale46.getDisplayVariant();
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getDisplayName();
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = locale51.getISO3Country();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.lang.String str54 = locale49.getDisplayCountry(locale51);
        java.lang.String str55 = locale46.getDisplayName(locale51);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale[] localeArray66 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList67);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 1, mathException61, (byte) 0, localeList69, 1225.0d };
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", objArray71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("de", objArray71);
        java.io.PrintWriter printWriter74 = printWriter45.printf(locale46, "zho", objArray71);
        java.io.PrintWriter printWriter75 = printWriter33.printf("", objArray71);
        java.io.PrintStream printStream76 = printStream16.printf("org.apache.commons.math.mathexception: de", objArray71);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.mathexception: de", objArray71);
        java.io.PrintStream printStream78 = printStream2.printf("tedesco", objArray71);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray85 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList86 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList86, languageRangeArray85);
        java.util.Locale[] localeArray88 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList89 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList89, localeArray88);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList86, (java.util.Collection<java.util.Locale>) localeList89);
        java.lang.Object[] objArray93 = new java.lang.Object[] { (byte) 1, mathException83, (byte) 0, localeList91, 1225.0d };
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("hi!", objArray93);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("");
        mathException94.addSuppressed((java.lang.Throwable) mathException96);
        org.apache.commons.math.MathException mathException98 = new org.apache.commons.math.MathException("\u7fa9\u5927\u5229\u6587", (java.lang.Throwable) mathException96);
        org.apache.commons.math.MathException mathException99 = new org.apache.commons.math.MathException("francese (Francia)", objArray71, (java.lang.Throwable) mathException98);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "German" + "'", str50, "German");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "FRA" + "'", str52, "FRA");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "allemand" + "'", str55, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(languageRangeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(localeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
    }

    @Test
    public void test3580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3580");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) '#');
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, 0.002555130330427813d, 2147483647, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double25 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray10, Double.POSITIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: Infinity");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test3581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3581");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.sum(doubleArray12);
        double double20 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray12, (double) (short) 100);
        double double21 = org.apache.commons.math.stat.StatUtils.sum(doubleArray12);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double24 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray12, (double) 100.0f);
        double double25 = org.apache.commons.math.stat.StatUtils.mean(doubleArray12);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, 1, 0);
        double double33 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray27, (double) (byte) 100);
        double double34 = org.apache.commons.math.stat.StatUtils.mean(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = tTestImpl1.tTest(doubleArray12, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
    }

    @Test
    public void test3582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3582");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.distribution.FDistribution fDistribution14 = distributionFactory0.createFDistribution((double) '#', (double) 1.0f);
        double double15 = fDistribution14.getNumeratorDegreesOfFreedom();
        fDistribution14.setNumeratorDegreesOfFreedom((double) 100);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(fDistribution14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
    }

    @Test
    public void test3583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3583");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl12.tTest(8.999999999999998d, statisticalSummary14, 0.9924226248244282d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.9924226248244282");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test3584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3584");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution(120.0d);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution10 = distributionFactory0.createPoissonDistribution(117.0d);
        double double11 = poissonDistribution10.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertNotNull(poissonDistribution10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 117.0d + "'", double11 == 117.0d);
    }

    @Test
    public void test3585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3585");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream1.println('#');
        printStream1.print(false);
        printStream1.println((long) (byte) 10);
        java.io.PrintStream printStream64 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream64.print('#');
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test3586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3586");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.min(doubleArray25);
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray25, 2147483647, 10);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = org.apache.commons.math.stat.StatUtils.product(doubleArray25, 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
    }

    @Test
    public void test3587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3587");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        printWriter5.println((-1.0d));
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setLanguage("German");
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder17 = builder14.setRegion("de");
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        java.util.Locale.Builder builder28 = builder17.setLocale(locale23);
        java.lang.Object[] objArray30 = null;
        java.io.PrintWriter printWriter31 = printWriter5.printf(locale23, "german", objArray30);
        java.io.PrintStream printStream33 = new java.io.PrintStream("French (France)");
        printStream33.println((float) (short) -1);
        printStream33.println(' ');
        printStream33.print(false);
        printStream33.println((float) '#');
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream33, true);
        java.io.PrintStream printStream45 = new java.io.PrintStream("French (France)");
        printStream45.println((float) (short) -1);
        java.io.PrintStream printStream48 = new java.io.PrintStream((java.io.OutputStream) printStream45);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.OutputStream) printStream45);
        java.lang.Object obj50 = null;
        printWriter49.println(obj50);
        printWriter49.write((int) (short) 1);
        java.io.PrintStream printStream55 = new java.io.PrintStream("French (France)");
        printStream55.println((float) (short) -1);
        java.io.PrintStream printStream58 = new java.io.PrintStream((java.io.OutputStream) printStream55);
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter((java.io.OutputStream) printStream55);
        char[] charArray61 = new char[] { ' ' };
        printWriter59.write(charArray61);
        java.io.PrintStream printStream64 = new java.io.PrintStream("French (France)");
        printStream64.println((float) (short) -1);
        java.io.PrintStream printStream67 = new java.io.PrintStream((java.io.OutputStream) printStream64);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter((java.io.OutputStream) printStream64);
        char[] charArray70 = new char[] { ' ' };
        printWriter68.write(charArray70);
        printWriter59.println(charArray70);
        printWriter49.write(charArray70, (int) (byte) 0, 1);
        printWriter43.print(charArray70);
        printWriter5.println(charArray70);
        printWriter5.print((float) (short) 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ ]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[ ]");
    }

    @Test
    public void test3588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3588");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory30 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution33 = distributionFactory30.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution36 = distributionFactory30.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory30.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory30.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tDistribution41.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl45 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl46 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tTestImpl12.setDistribution(tDistribution41);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = tTestImpl12.tTest(statisticalSummary48, statisticalSummary49, (double) 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 2.147483647E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory30);
        org.junit.Assert.assertNotNull(weibullDistribution33);
        org.junit.Assert.assertNotNull(fDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
    }

    @Test
    public void test3589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3589");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("JPN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap7);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList13, strMap14);
        java.lang.String[] strArray23 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strList24);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, strMap30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList31, strMap32);
        java.lang.String[] strArray41 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags(languageRangeList33, (java.util.Collection<java.lang.String>) strList42);
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strList42, filteringMode45);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strList46);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, strMap51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap53 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList54 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList52, strMap53);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, strMap61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap63 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList62, strMap63);
        java.lang.String[] strArray72 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags(languageRangeList64, (java.util.Collection<java.lang.String>) strList73);
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strList75);
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags(languageRangeList52, (java.util.Collection<java.lang.String>) strList75);
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strList77);
        java.lang.String str79 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList77);
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap83 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList84 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, strMap83);
        java.util.Locale locale85 = java.util.Locale.ROOT;
        java.lang.String str86 = locale85.getDisplayScript();
        java.util.Set<java.lang.String> strSet87 = locale85.getUnicodeLocaleKeys();
        java.lang.String str88 = java.util.Locale.lookupTag(languageRangeList84, (java.util.Collection<java.lang.String>) strSet87);
        java.lang.String str89 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet87);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode45.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertNotNull(languageRangeList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(languageRangeList62);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(languageRangeList84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test3590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3590");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        hypergeometricDistribution10.setSampleSize((int) (short) 1);
        hypergeometricDistribution10.setNumberOfSuccesses((int) '4');
        hypergeometricDistribution10.setPopulationSize(120);
        hypergeometricDistribution10.setPopulationSize((int) '#');
        hypergeometricDistribution10.setPopulationSize(10);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
    }

    @Test
    public void test3591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3591");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        printWriter18.println(1);
        java.io.PrintStream printStream26 = new java.io.PrintStream("French (France)");
        printStream26.println((float) (short) -1);
        printStream26.println(' ');
        printStream26.flush();
        java.util.Locale locale32 = null;
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream35);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        java.io.PrintStream printStream42 = new java.io.PrintStream("French (France)");
        printStream42.println((float) (short) -1);
        printStream42.println(' ');
        printStream42.print(false);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.OutputStream) printStream42);
        java.io.PrintWriter printWriter51 = printWriter49.append(' ');
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale52.getDisplayVariant();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getDisplayName();
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = locale57.getISO3Country();
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        java.lang.String str60 = locale55.getDisplayCountry(locale57);
        java.lang.String str61 = locale52.getDisplayName(locale57);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.util.Locale[] localeArray72 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.util.Locale>) localeList73);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 1, mathException67, (byte) 0, localeList75, 1225.0d };
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("hi!", objArray77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("de", objArray77);
        java.io.PrintWriter printWriter80 = printWriter51.printf(locale52, "zho", objArray77);
        java.io.PrintWriter printWriter81 = printWriter39.printf("", objArray77);
        java.io.PrintStream printStream82 = printStream26.printf(locale32, "und", objArray77);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("fra", objArray77);
        java.io.PrintWriter printWriter84 = printWriter18.printf("Chinesisch (China)", objArray77);
        java.io.PrintWriter printWriter86 = new java.io.PrintWriter((java.io.Writer) printWriter84, false);
        printWriter86.println((float) 100L);
        printWriter86.close();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "German" + "'", str56, "German");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "FRA" + "'", str58, "FRA");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "allemand" + "'", str61, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(printWriter84);
    }

    @Test
    public void test3592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3592");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.print((int) (byte) 10);
        printWriter5.print(false);
        printWriter5.print(100.0d);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getISO3Country();
        printWriter5.print((java.lang.Object) locale14);
        printWriter5.print((long) (short) 10);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        printStream20.println(' ');
        printStream20.print(false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getDisplayVariant();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale28.getDisplayLanguage(locale31);
        boolean boolean34 = locale28.hasExtensions();
        java.lang.Object[] objArray36 = null;
        java.io.PrintWriter printWriter37 = printWriter27.printf(locale28, "German", objArray36);
        printWriter27.print((double) 100.0f);
        printWriter27.flush();
        printWriter27.print((long) 'u');
        java.lang.Object[] objArray44 = null;
        java.io.PrintWriter printWriter45 = printWriter27.printf("\ud504\ub791\uc2a4", objArray44);
        java.io.PrintStream printStream47 = new java.io.PrintStream("French (France)");
        printStream47.println((float) (short) -1);
        java.io.PrintStream printStream50 = new java.io.PrintStream((java.io.OutputStream) printStream47);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream47);
        char[] charArray53 = new char[] { ' ' };
        printWriter51.write(charArray53);
        java.io.PrintStream printStream56 = new java.io.PrintStream("French (France)");
        printStream56.println((float) (short) -1);
        java.io.PrintStream printStream59 = new java.io.PrintStream((java.io.OutputStream) printStream56);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream56);
        char[] charArray62 = new char[] { ' ' };
        printWriter60.write(charArray62);
        printWriter51.println(charArray62);
        printWriter45.println(charArray62);
        printWriter5.print(charArray62);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FRA" + "'", str15, "FRA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Deutsch" + "'", str33, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[ ]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ ]");
    }

    @Test
    public void test3593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3593");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zho");
        printStream1.println((int) (byte) 0);
        printStream1.println(false);
    }

    @Test
    public void test3594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3594");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = builder0.build();
        java.lang.String str5 = locale4.getLanguage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "german");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "german" + "'", str5, "german");
    }

    @Test
    public void test3595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3595");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        double double9 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom(0.00785529839410426d);
        double double12 = fDistribution6.getNumeratorDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
    }

    @Test
    public void test3596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3596");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        printWriter5.println(false);
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        printStream35.println(' ');
        printStream35.print(false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        java.io.PrintWriter printWriter44 = printWriter42.append(' ');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale45.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = locale50.getISO3Country();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.lang.String str53 = locale48.getDisplayCountry(locale50);
        java.lang.String str54 = locale45.getDisplayName(locale50);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale[] localeArray65 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList66);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 1, mathException60, (byte) 0, localeList68, 1225.0d };
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("de", objArray70);
        java.io.PrintWriter printWriter73 = printWriter44.printf(locale45, "zho", objArray70);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Locale[] localeArray83 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.util.Locale>) localeList84);
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 1, mathException78, (byte) 0, localeList86, 1225.0d };
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("hi!", objArray88);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("");
        mathException89.addSuppressed((java.lang.Throwable) mathException91);
        java.lang.Object[] objArray93 = mathException89.getArguments();
        java.io.PrintWriter printWriter94 = printWriter5.printf(locale45, "it", objArray93);
        java.lang.String str95 = locale45.getVariant();
        java.lang.String str96 = locale45.getISO3Country();
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "German" + "'", str49, "German");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FRA" + "'", str51, "FRA");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "allemand" + "'", str54, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
    }

    @Test
    public void test3597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3597");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.println("zh");
        printStream4.println((long) 100);
    }

    @Test
    public void test3598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3598");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("French (France)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=french(france)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3599");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 3.5553480614894135d);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, 100, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test3600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3600");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("GB");
        java.util.Locale.Builder builder7 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setVariant("French (France)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: French (France) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "german");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3601");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution29 = distributionFactory23.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution31 = distributionFactory23.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution33 = distributionFactory23.createChiSquareDistribution(0.6321205588285574d);
        org.apache.commons.math.distribution.TDistribution tDistribution35 = distributionFactory23.createTDistribution(0.5199388058383725d);
        tTestImpl1.setDistribution(tDistribution35);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory39 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution42 = distributionFactory39.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution43 = distributionFactory39.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution45 = distributionFactory39.createTDistribution((double) 1L);
        double double46 = tDistribution45.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution45);
        tTestImpl1.setDistribution(tDistribution45);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, 1, 0);
        double double56 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray50, (double) (byte) 100);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray58);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double63 = org.apache.commons.math.stat.StatUtils.sum(doubleArray58);
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double66 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58, 1225.0d);
        double double67 = org.apache.commons.math.stat.StatUtils.max(doubleArray58);
        double double68 = org.apache.commons.math.stat.StatUtils.product(doubleArray58);
        double[] doubleArray70 = new double[] { '#' };
        double double71 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double72 = org.apache.commons.math.stat.StatUtils.variance(doubleArray70);
        double double73 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray70);
        double double74 = org.apache.commons.math.stat.StatUtils.max(doubleArray70);
        double[] doubleArray76 = new double[] { '#' };
        double double77 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray76);
        double double78 = org.apache.commons.math.stat.StatUtils.variance(doubleArray76);
        double double80 = org.apache.commons.math.stat.StatUtils.variance(doubleArray76, (double) '#');
        double double81 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray76);
        double double82 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray70, doubleArray76);
        double double83 = org.apache.commons.math.stat.StatUtils.variance(doubleArray76);
        double double84 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray58, doubleArray76);
        double double85 = org.apache.commons.math.stat.StatUtils.mean(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = tTestImpl1.tTest(doubleArray50, doubleArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(exponentialDistribution29);
        org.junit.Assert.assertNotNull(poissonDistribution31);
        org.junit.Assert.assertNotNull(chiSquaredDistribution33);
        org.junit.Assert.assertNotNull(tDistribution35);
        org.junit.Assert.assertNotNull(distributionFactory39);
        org.junit.Assert.assertNotNull(weibullDistribution42);
        org.junit.Assert.assertNotNull(normalDistribution43);
        org.junit.Assert.assertNotNull(tDistribution45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 34.99999999999999d + "'", double61 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.5553480614894135d + "'", double62 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 3.5553480614894135d + "'", double64 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 35.0d + "'", double67 == 35.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 35.0d + "'", double68 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1225.0d + "'", double71 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 34.99999999999999d + "'", double73 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 35.0d + "'", double74 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[35.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1225.0d + "'", double77 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1225.0d + "'", double81 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 35.0d + "'", double85 == 35.0d);
    }

    @Test
    public void test3602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3602");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl12.setDistribution(tDistribution24);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.max(doubleArray31);
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37, (double) '#');
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double43 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray37);
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray47 = new double[] { '#' };
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47);
        double double50 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray47);
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double double53 = org.apache.commons.math.stat.StatUtils.sum(doubleArray47);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double double55 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray47);
        double double56 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray37, doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = tTestImpl12.homoscedasticTTest(doubleArray31, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 34.99999999999999d + "'", double43 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1225.0d + "'", double48 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 34.99999999999999d + "'", double50 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.5553480614894135d + "'", double51 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 34.99999999999999d + "'", double55 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test3603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3603");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        weibullDistribution3.setScale((double) 100);
        double double7 = weibullDistribution3.getScale();
        weibullDistribution3.setShape(0.24999999999999964d);
        weibullDistribution3.setScale(1225.0d);
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution3.setScale((double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test3604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3604");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        java.io.PrintStream printStream3 = new java.io.PrintStream("French (France)");
        printStream3.println((float) (short) -1);
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale[] localeArray17 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList18);
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 1, mathException12, (byte) 0, localeList20, 1225.0d };
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("de", objArray22);
        java.io.PrintStream printStream25 = printStream3.printf(locale6, "hi!", objArray22);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, (double) '#');
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        printStream25.print((java.lang.Object) doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.mean(doubleArray27);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double39 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.sum(doubleArray36);
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double double50 = org.apache.commons.math.stat.StatUtils.sum(doubleArray44);
        double double52 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray44, (double) (short) 100);
        double double53 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray36, doubleArray44);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = tTestImpl1.homoscedasticT(doubleArray27, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 34.99999999999999d + "'", double39 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 3.5553480614894135d + "'", double42 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 34.99999999999999d + "'", double47 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.5553480614894135d + "'", double48 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
    }

    @Test
    public void test3605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3605");
        java.io.PrintStream printStream1 = new java.io.PrintStream("anglais");
    }

    @Test
    public void test3606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3606");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        weibullDistribution3.setScale((double) 100);
        double double7 = weibullDistribution3.getScale();
        weibullDistribution3.setShape(0.24999999999999964d);
        weibullDistribution3.setScale(1225.0d);
        double double12 = weibullDistribution3.getScale();
        double double13 = weibullDistribution3.getScale();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
    }

    @Test
    public void test3607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3607");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter2.println(0.0f);
        printWriter2.close();
        printWriter2.println(false);
    }

    @Test
    public void test3608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3608");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution29 = distributionFactory23.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution31 = distributionFactory23.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution33 = distributionFactory23.createChiSquareDistribution(0.6321205588285574d);
        org.apache.commons.math.distribution.TDistribution tDistribution35 = distributionFactory23.createTDistribution(0.5199388058383725d);
        tTestImpl1.setDistribution(tDistribution35);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory39 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution42 = distributionFactory39.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution43 = distributionFactory39.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution45 = distributionFactory39.createTDistribution((double) 1L);
        double double46 = tDistribution45.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution45);
        tTestImpl1.setDistribution(tDistribution45);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, (double) '#');
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double[] doubleArray57 = new double[] { '#' };
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray57);
        double double61 = org.apache.commons.math.stat.StatUtils.variance(doubleArray57, (double) '#');
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray57);
        double double64 = org.apache.commons.math.stat.StatUtils.mean(doubleArray57);
        double double65 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double[] doubleArray67 = new double[] { '#' };
        double double68 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double69 = org.apache.commons.math.stat.StatUtils.variance(doubleArray67);
        double double71 = org.apache.commons.math.stat.StatUtils.variance(doubleArray67, (double) '#');
        double double72 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double73 = org.apache.commons.math.stat.StatUtils.sum(doubleArray67);
        double double75 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray67, (double) 1.0f);
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double77 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray57, doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = tTestImpl1.homoscedasticT(doubleArray50, doubleArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(exponentialDistribution29);
        org.junit.Assert.assertNotNull(poissonDistribution31);
        org.junit.Assert.assertNotNull(chiSquaredDistribution33);
        org.junit.Assert.assertNotNull(tDistribution35);
        org.junit.Assert.assertNotNull(distributionFactory39);
        org.junit.Assert.assertNotNull(weibullDistribution42);
        org.junit.Assert.assertNotNull(normalDistribution43);
        org.junit.Assert.assertNotNull(tDistribution45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1225.0d + "'", double58 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1225.0d + "'", double62 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1225.0d + "'", double65 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1225.0d + "'", double68 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1225.0d + "'", double72 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 35.0d + "'", double73 == 35.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 35.0d + "'", double75 == 35.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 3.5553480614894135d + "'", double76 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test3609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3609");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        printWriter5.print((long) (short) 100);
        printWriter5.println((int) (short) 1);
    }

    @Test
    public void test3610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3610");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println();
        printStream1.print(0.0f);
        printStream1.flush();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "French");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: French");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3611");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fr-FR", (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3612");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Vereinigtes K\366nigreich", 0.002555130330427813d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=vereinigtes ko?nigreich");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3613");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory18 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution21 = distributionFactory18.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory18.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory18.createTDistribution((double) 1L);
        double double25 = tDistribution24.getDegreesOfFreedom();
        tTestImpl17.setDistribution(tDistribution24);
        tDistribution24.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl29 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(117.0d);
        tTestImpl15.setDistribution(tDistribution24);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray41);
        double[] doubleArray47 = new double[] { '#' };
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47, (double) '#');
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double53 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray41, doubleArray47);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = tTestImpl15.t(doubleArray34, doubleArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory18);
        org.junit.Assert.assertNotNull(weibullDistribution21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.5553480614894135d + "'", double38 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 3.5553480614894135d + "'", double39 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 34.99999999999999d + "'", double44 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1225.0d + "'", double48 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test3614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3614");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("Chinesisch (China)", (java.lang.Throwable) mathException2);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("Chinesisch (China)", (java.lang.Throwable) mathException6);
        mathException3.addSuppressed((java.lang.Throwable) mathException7);
    }

    @Test
    public void test3615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3615");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        double double5 = weibullDistribution3.getShape();
        double double6 = weibullDistribution3.getScale();
        weibullDistribution3.setShape((double) 10);
        double double9 = weibullDistribution3.getScale();
        double double10 = weibullDistribution3.getScale();
        double double11 = weibullDistribution3.getShape();
        double double12 = weibullDistribution3.getShape();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test3616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3616");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray0, (int) 'x', 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3617");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale5.getDisplayLanguage(locale6);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4" + "'", str3, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Italienisch" + "'", str8, "Italienisch");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
    }

    @Test
    public void test3618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3618");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream57.print(Double.NaN);
        printStream57.print(true);
        printStream57.close();
        printStream57.print("French (France)");
        printStream57.print(false);
        printStream57.println('a');
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tedesco" + "'", str31, "tedesco");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test3619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3619");
        java.util.Locale locale2 = new java.util.Locale("ko", "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\ubbf8\uad6d)");
    }

    @Test
    public void test3620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3620");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (byte) 100);
        double double8 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double10 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
    }

    @Test
    public void test3621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3621");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale[] localeArray34 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList35);
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 1, mathException29, (byte) 0, localeList37, 1225.0d };
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("de", objArray39);
        java.io.PrintStream printStream42 = printStream20.printf(locale23, "hi!", objArray39);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44, (double) '#');
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        printStream42.print((java.lang.Object) doubleArray44);
        double double51 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray44);
        double double53 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray44, (double) 1.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray44);
        double double55 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 34.99999999999999d + "'", double51 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
    }

    @Test
    public void test3622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3622");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int9 = pascalDistribution6.getNumberOfSuccesses();
        pascalDistribution6.setNumberOfSuccesses((int) (short) 0);
        double double12 = pascalDistribution6.getProbabilityOfSuccess();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test3623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3623");
        java.util.Locale locale3 = new java.util.Locale("en", "zho", "FRA");
        java.lang.String str4 = locale3.getDisplayVariant();
        org.junit.Assert.assertEquals(locale3.toString(), "en_ZHO_FRA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FRA" + "'", str4, "FRA");
    }

    @Test
    public void test3624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3624");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        char[] charArray14 = new char[] { ' ' };
        printWriter12.write(charArray14);
        printStream1.print(charArray14);
        printStream1.println("Chinese (Taiwan)");
        printStream1.write((int) '4');
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0.17044656615103027d);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream27 = printStream1.append((java.lang.CharSequence) "\u5fb7\u6587", (int) (short) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 97");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ]");
    }

    @Test
    public void test3625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3625");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setRegion("");
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        boolean boolean6 = locale5.hasExtensions();
        java.lang.String str7 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder8 = builder0.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder0.setExtension(' ', "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italienisch" + "'", str7, "Italienisch");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test3626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3626");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter5.print('4');
        printWriter5.println(true);
        printWriter5.println(' ');
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale12.getISO3Country();
        java.lang.String str14 = locale12.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        boolean boolean17 = locale12.hasExtensions();
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        printStream20.println(' ');
        printStream20.print(false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getDisplayVariant();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale28.getDisplayLanguage(locale31);
        boolean boolean34 = locale28.hasExtensions();
        java.lang.Object[] objArray36 = null;
        java.io.PrintWriter printWriter37 = printWriter27.printf(locale28, "German", objArray36);
        printWriter27.print((long) (byte) 10);
        java.io.PrintWriter printWriter41 = printWriter27.append((java.lang.CharSequence) "org.apache.commons.math.MathException: de");
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.Writer) printWriter41, true);
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale locale45 = builder44.build();
        java.io.PrintStream printStream49 = new java.io.PrintStream("zho");
        java.lang.String[] strArray53 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray53);
        java.io.PrintStream printStream56 = printStream49.printf("Italienisch", (java.lang.Object[]) strArray53);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("KOR", (java.lang.Object[]) strArray53);
        java.io.PrintWriter printWriter58 = printWriter41.printf(locale45, "hi!", (java.lang.Object[]) strArray53);
        java.io.PrintWriter printWriter59 = printWriter5.format(locale12, "ITA", (java.lang.Object[]) strArray53);
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        boolean boolean61 = locale60.hasExtensions();
        java.lang.String str62 = locale60.getDisplayVariant();
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        boolean boolean64 = locale63.hasExtensions();
        java.lang.String str65 = locale60.getDisplayLanguage(locale63);
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale locale67 = builder66.build();
        java.lang.String str68 = locale67.toLanguageTag();
        java.util.Locale locale69 = locale67.stripExtensions();
        java.lang.String str70 = locale60.getDisplayLanguage(locale69);
        java.lang.String str71 = locale60.getDisplayVariant();
        java.lang.String str72 = locale12.getDisplayLanguage(locale60);
        java.util.Locale.setDefault(locale60);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FRA" + "'", str13, "FRA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "francese (Francia)" + "'", str14, "francese (Francia)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud504\ub791\uc2a4" + "'", str16, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Deutsch" + "'", str33, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Deutsch" + "'", str65, "Deutsch");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "und" + "'", str68, "und");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "German" + "'", str70, "German");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Franz\366sisch" + "'", str72, "Franz\366sisch");
    }

    @Test
    public void test3627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3627");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory26 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution29 = distributionFactory26.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution32 = distributionFactory26.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution35 = distributionFactory26.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory26.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        tTestImpl15.setDistribution(tDistribution37);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double double46 = org.apache.commons.math.stat.StatUtils.sum(doubleArray41);
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray49);
        double double55 = org.apache.commons.math.stat.StatUtils.sum(doubleArray49);
        double[] doubleArray57 = new double[] { '#' };
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double61 = org.apache.commons.math.stat.StatUtils.variance(doubleArray57, 1, 0);
        double double62 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray57);
        double double63 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray49, doubleArray57);
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double65 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double66 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray41, doubleArray49);
        double[] doubleArray68 = new double[] { '#' };
        double double69 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68);
        double double72 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68, (double) '#');
        double double73 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        double double74 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68);
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double[] doubleArray77 = new double[] { '#' };
        double double78 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray77);
        double double79 = org.apache.commons.math.stat.StatUtils.variance(doubleArray77);
        double double80 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray77);
        double double81 = org.apache.commons.math.stat.StatUtils.sum(doubleArray77);
        double double82 = org.apache.commons.math.stat.StatUtils.max(doubleArray77);
        double double83 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray68, doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = tTestImpl15.tTest(doubleArray49, doubleArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(distributionFactory26);
        org.junit.Assert.assertNotNull(weibullDistribution29);
        org.junit.Assert.assertNotNull(cauchyDistribution32);
        org.junit.Assert.assertNotNull(gammaDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 34.99999999999999d + "'", double44 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.5553480614894135d + "'", double45 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 3.5553480614894135d + "'", double47 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 34.99999999999999d + "'", double52 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.5553480614894135d + "'", double53 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1225.0d + "'", double58 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 34.99999999999999d + "'", double62 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 3.5553480614894135d + "'", double64 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1225.0d + "'", double65 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1225.0d + "'", double69 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1225.0d + "'", double73 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 3.5553480614894135d + "'", double75 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[35.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1225.0d + "'", double78 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 34.99999999999999d + "'", double80 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 35.0d + "'", double81 == 35.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 35.0d + "'", double82 == 35.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
    }

    @Test
    public void test3628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3628");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream1.println('#');
        java.io.PrintStream printStream61 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream65 = printStream1.append((java.lang.CharSequence) "\u7fa9\u5927\u5229\u6587", (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Deutsch" + "'", str31, "Deutsch");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test3629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3629");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        double double21 = tDistribution19.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl22.t(statisticalSummary23, statisticalSummary24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
    }

    @Test
    public void test3630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3630");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution((double) 10.0f, 0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution17 = distributionFactory0.createExponentialDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution20 = distributionFactory0.createBinomialDistribution(120, 0.0d);
        double double21 = binomialDistribution20.getProbabilityOfSuccess();
        binomialDistribution20.setProbabilityOfSuccess(4.560969057281146E-69d);
        binomialDistribution20.setProbabilityOfSuccess(0.035086649709077655d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution15);
        org.junit.Assert.assertNotNull(exponentialDistribution17);
        org.junit.Assert.assertNotNull(binomialDistribution20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test3631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3631");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale0.getDisplayLanguage(locale3);
        java.lang.String str6 = locale3.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Deutsch" + "'", str5, "Deutsch");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test3632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3632");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale4.getDisplayScript(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale4.getDisplayScript(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.lang.String str12 = locale8.getISO3Country();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test3633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3633");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        printWriter8.print("");
        printWriter8.print((long) (short) 100);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, (double) '#');
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.sum(doubleArray26);
        double double34 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray26, (double) 1.0f);
        printWriter8.print((java.lang.Object) doubleArray26);
        java.io.PrintStream printStream37 = new java.io.PrintStream("French (France)");
        printStream37.println((float) (short) -1);
        java.io.PrintStream printStream41 = new java.io.PrintStream("French (France)");
        printStream41.println((float) (short) -1);
        java.io.PrintStream printStream44 = new java.io.PrintStream((java.io.OutputStream) printStream41);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream41);
        java.lang.Object obj46 = null;
        printWriter45.println(obj46);
        printWriter45.write((int) (short) 1);
        java.io.PrintStream printStream51 = new java.io.PrintStream("French (France)");
        printStream51.println((float) (short) -1);
        java.io.PrintStream printStream54 = new java.io.PrintStream((java.io.OutputStream) printStream51);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.OutputStream) printStream51);
        char[] charArray57 = new char[] { ' ' };
        printWriter55.write(charArray57);
        java.io.PrintStream printStream60 = new java.io.PrintStream("French (France)");
        printStream60.println((float) (short) -1);
        java.io.PrintStream printStream63 = new java.io.PrintStream((java.io.OutputStream) printStream60);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter((java.io.OutputStream) printStream60);
        char[] charArray66 = new char[] { ' ' };
        printWriter64.write(charArray66);
        printWriter55.println(charArray66);
        printWriter45.write(charArray66, (int) (byte) 0, 1);
        printStream37.print(charArray66);
        java.io.PrintWriter printWriter74 = new java.io.PrintWriter((java.io.OutputStream) printStream37, false);
        java.io.PrintStream printStream76 = printStream37.append('#');
        printWriter8.print((java.lang.Object) printStream37);
        java.io.PrintStream printStream78 = new java.io.PrintStream((java.io.OutputStream) printStream37);
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.OutputStream) printStream78);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ ]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ ]");
        org.junit.Assert.assertNotNull(printStream76);
    }

    @Test
    public void test3634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3634");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FRA");
    }

    @Test
    public void test3635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3635");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.max(doubleArray14);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20, (double) '#');
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double26 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray14, doubleArray20);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29, 8.999999999999998d);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = tTestImpl12.tTest(doubleArray14, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test3636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3636");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.println("zh");
        printStream4.print("hi!");
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream("French (France)");
        printStream19.println((float) (short) -1);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream19);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        char[] charArray25 = new char[] { ' ' };
        printWriter23.write(charArray25);
        printWriter14.println(charArray25);
        printWriter14.println((int) (short) 0);
        char[] charArray31 = new char[] { '4' };
        printWriter14.println(charArray31);
        printStream4.print(charArray31);
        double[] doubleArray35 = new double[] { '#' };
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray35);
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double40 = org.apache.commons.math.stat.StatUtils.product(doubleArray35);
        double double41 = org.apache.commons.math.stat.StatUtils.sum(doubleArray35);
        double[] doubleArray43 = new double[] { '#' };
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray43, 1, 0);
        double double48 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray43);
        double double49 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray35, doubleArray43);
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double51 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray35);
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        printStream4.println((java.lang.Object) doubleArray35);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ ]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 34.99999999999999d + "'", double38 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 3.5553480614894135d + "'", double39 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 34.99999999999999d + "'", double48 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 3.5553480614894135d + "'", double50 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 34.99999999999999d + "'", double51 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.5553480614894135d + "'", double53 == 3.5553480614894135d);
    }

    @Test
    public void test3637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3637");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        weibullDistribution3.setScale((double) 100);
        double double7 = weibullDistribution3.getScale();
        weibullDistribution3.setShape(0.24999999999999964d);
        double double10 = weibullDistribution3.getScale();
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution3.setShape((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test3638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3638");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory29 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution32 = distributionFactory29.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution35 = distributionFactory29.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution39 = distributionFactory29.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int40 = hypergeometricDistribution39.getNumberOfSuccesses();
        hypergeometricDistribution39.setSampleSize((int) (byte) 10);
        double double44 = hypergeometricDistribution39.cumulativeProbability((int) 'u');
        hypergeometricDistribution39.setNumberOfSuccesses((int) (byte) 0);
        int int47 = hypergeometricDistribution39.getSampleSize();
        hypergeometricDistribution39.setSampleSize((int) '4');
        printStream1.print((java.lang.Object) hypergeometricDistribution39);
        printStream1.print(true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(distributionFactory29);
        org.junit.Assert.assertNotNull(weibullDistribution32);
        org.junit.Assert.assertNotNull(cauchyDistribution35);
        org.junit.Assert.assertNotNull(hypergeometricDistribution39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
    }

    @Test
    public void test3639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3639");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.println((float) (short) -1);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream9);
        printStream9.print((long) (short) 0);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream16);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream16);
        char[] charArray22 = new char[] { ' ' };
        printWriter20.write(charArray22);
        printStream9.print(charArray22);
        printStream1.println(charArray22);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale[] localeArray37 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList38);
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 1, mathException32, (byte) 0, localeList40, 1225.0d };
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("de", objArray42);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", objArray42, (java.lang.Throwable) mathException46);
        java.io.PrintStream printStream48 = printStream1.format("Chinesisch (China)", objArray42);
        printStream1.println('a');
        printStream1.println();
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ ]");
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream48);
    }

    @Test
    public void test3640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3640");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter18.print((long) (byte) 10);
        java.util.Locale locale23 = new java.util.Locale("Cina", "\u6cd5\u6587\u52a0\u62ff\u5927)");
        java.lang.String str24 = locale23.getDisplayLanguage();
        printWriter18.println((java.lang.Object) locale23);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertEquals(locale23.toString(), "\u6cd5\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cina" + "'", str24, "cina");
    }

    @Test
    public void test3641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3641");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.lang.String str3 = locale0.getScript();
        java.lang.String str4 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "de" + "'", str4, "de");
    }

    @Test
    public void test3642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3642");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 1, mathException11, (byte) 0, localeList19, 1225.0d };
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("de", objArray21);
        java.io.PrintStream printStream24 = printStream2.printf(locale5, "hi!", objArray21);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale5.getDisplayLanguage(locale25);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.setLanguage("German");
        java.util.Locale locale31 = builder28.build();
        java.util.Locale.Builder builder32 = builder28.clearExtensions();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getISO3Language();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale35.getDisplayScript(locale37);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale39.getDisplayName();
        java.lang.String str41 = locale35.getDisplayScript(locale39);
        java.lang.String str42 = locale35.toLanguageTag();
        java.lang.String str43 = locale33.getDisplayLanguage(locale35);
        java.util.Locale.Builder builder44 = builder28.setLocale(locale35);
        java.util.Locale.setDefault(category0, locale35);
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder46.setLanguage("German");
        java.util.Locale.Builder builder49 = builder48.clearExtensions();
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        boolean boolean51 = locale50.hasExtensions();
        java.lang.String str52 = locale50.getDisplayVariant();
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        boolean boolean54 = locale53.hasExtensions();
        java.lang.String str55 = locale50.getDisplayLanguage(locale53);
        java.util.Locale.Builder builder56 = builder48.setLocale(locale50);
        java.lang.String str57 = locale50.getISO3Language();
        java.util.Set<java.lang.String> strSet58 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str59 = locale35.getDisplayScript(locale50);
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        boolean boolean62 = locale61.hasExtensions();
        java.lang.String str63 = locale60.getDisplayLanguage(locale61);
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.lang.String str65 = locale64.getISO3Language();
        java.lang.String str66 = locale64.getDisplayName();
        boolean boolean67 = locale64.hasExtensions();
        java.lang.String str68 = locale61.getDisplayLanguage(locale64);
        java.lang.String str69 = locale64.toLanguageTag();
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.lang.String str71 = locale70.toLanguageTag();
        java.lang.String str72 = locale70.getDisplayCountry();
        java.lang.String str73 = locale64.getDisplayLanguage(locale70);
        java.lang.String str74 = locale50.getDisplayCountry(locale64);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str26, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "german");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FRA" + "'", str34, "FRA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "French" + "'", str43, "French");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Deutsch" + "'", str55, "Deutsch");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "deu" + "'", str57, "deu");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Italienisch" + "'", str63, "Italienisch");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "fra" + "'", str65, "fra");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "French (France)" + "'", str66, "French (France)");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "allemand" + "'", str68, "allemand");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "fr-FR" + "'", str69, "fr-FR");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "de" + "'", str71, "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Franz\366sisch" + "'", str73, "Franz\366sisch");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test3643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3643");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution11 = distributionFactory0.createBinomialDistribution((int) '#', (double) 0L);
        binomialDistribution11.setNumberOfTrials(0);
        double double14 = binomialDistribution11.getProbabilityOfSuccess();
        int int15 = binomialDistribution11.getNumberOfTrials();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(binomialDistribution11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3644");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) '#');
        printStream1.print("JPN");
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale16.getDisplayVariant();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale16.getDisplayLanguage(locale19);
        boolean boolean22 = locale16.hasExtensions();
        java.lang.Object[] objArray24 = null;
        java.io.PrintWriter printWriter25 = printWriter15.printf(locale16, "German", objArray24);
        java.io.PrintStream printStream27 = new java.io.PrintStream("French (France)");
        printStream27.println((float) (short) -1);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream27);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream27);
        char[] charArray33 = new char[] { ' ' };
        printWriter31.write(charArray33);
        java.io.PrintStream printStream36 = new java.io.PrintStream("French (France)");
        printStream36.println((float) (short) -1);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream36);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream36);
        char[] charArray42 = new char[] { ' ' };
        printWriter40.write(charArray42);
        printWriter31.println(charArray42);
        printWriter31.println((int) (short) 0);
        char[] charArray48 = new char[] { '4' };
        printWriter31.println(charArray48);
        printWriter25.print(charArray48);
        printWriter6.println(charArray48);
        java.io.PrintWriter printWriter53 = printWriter6.append((java.lang.CharSequence) "it_IT");
        java.io.PrintStream printStream56 = new java.io.PrintStream("Chinesisch (China)");
        printStream56.println("\u65e5\u6587");
        printStream56.println(' ');
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.util.Locale[] localeArray72 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.util.Locale>) localeList73);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 1, mathException67, (byte) 0, localeList75, 1225.0d };
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("hi!", objArray77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("de", objArray77);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("", objArray77, (java.lang.Throwable) mathException81);
        java.lang.Object[] objArray83 = mathException82.getArguments();
        java.lang.Throwable[] throwableArray84 = mathException82.getSuppressed();
        java.io.PrintStream printStream85 = printStream56.format("\uc601\uc5b4\ubbf8\uad6d)", (java.lang.Object[]) throwableArray84);
        java.io.PrintWriter printWriter86 = printWriter53.format("chinois (Chine)", (java.lang.Object[]) throwableArray84);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Deutsch" + "'", str21, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ ]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ ]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[4]");
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printWriter86);
    }

    @Test
    public void test3645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3645");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double double29 = tDistribution24.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double33 = tTestImpl12.t(statisticalSummary31, statisticalSummary32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
    }

    @Test
    public void test3646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3646");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setUnicodeLocaleKeyword("Germany", "tedesco");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Germany [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "german__#u-fra");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3647");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) 100);
        exponentialDistribution11.setMean(34.99999999999999d);
        exponentialDistribution11.setMean(515.7000000000007d);
        double double16 = exponentialDistribution11.getMean();
        double double17 = exponentialDistribution11.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 515.7000000000007d + "'", double16 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 515.7000000000007d + "'", double17 == 515.7000000000007d);
    }

    @Test
    public void test3648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3648");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 1, mathException11, (byte) 0, localeList19, 1225.0d };
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("de", objArray21);
        java.io.PrintStream printStream24 = printStream2.printf(locale5, "hi!", objArray21);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale5.getDisplayLanguage(locale25);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale.setDefault(category0, locale28);
        java.util.Locale locale32 = new java.util.Locale("\u65e5\u6587", "");
        java.util.Locale.setDefault(category0, locale32);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str26, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals(locale32.toString(), "\u65e5\u6587");
    }

    @Test
    public void test3649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3649");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.lang.String str2 = locale1.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test3650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3650");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale11.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder15 = builder10.setLocale(locale11);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italienisch" + "'", str14, "Italienisch");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3651");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution((double) 10.0f, 0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution17 = distributionFactory0.createExponentialDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution20 = distributionFactory0.createBinomialDistribution(120, 0.0d);
        binomialDistribution20.setProbabilityOfSuccess(0.0d);
        int int23 = binomialDistribution20.getNumberOfTrials();
        double double24 = binomialDistribution20.getProbabilityOfSuccess();
        int int25 = binomialDistribution20.getNumberOfTrials();
        int int26 = binomialDistribution20.getNumberOfTrials();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution15);
        org.junit.Assert.assertNotNull(exponentialDistribution17);
        org.junit.Assert.assertNotNull(binomialDistribution20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120 + "'", int23 == 120);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 120 + "'", int25 == 120);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120 + "'", int26 == 120);
    }

    @Test
    public void test3652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3652");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 100L);
        org.apache.commons.math.distribution.FDistribution fDistribution18 = distributionFactory0.createFDistribution(1.6581180872776713E-13d, 515.7000000000007d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution21 = distributionFactory0.createBinomialDistribution(2147483647, 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertNotNull(fDistribution18);
    }

    @Test
    public void test3653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3653");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("chinois (Chine)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=chinois(chine)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3654");
        java.io.PrintStream printStream3 = new java.io.PrintStream("French (France)");
        printStream3.println((float) (short) -1);
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale[] localeArray17 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList18);
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 1, mathException12, (byte) 0, localeList20, 1225.0d };
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("de", objArray22);
        java.io.PrintStream printStream25 = printStream3.printf(locale6, "hi!", objArray22);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("und", objArray22);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException26);
        java.lang.Object[] objArray28 = mathException27.getArguments();
        java.io.PrintStream printStream31 = new java.io.PrintStream("French (France)");
        printStream31.println((float) (short) -1);
        printStream31.println(' ');
        printStream31.print(false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream31);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String str41 = locale39.getDisplayVariant();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        boolean boolean43 = locale42.hasExtensions();
        java.lang.String str44 = locale39.getDisplayLanguage(locale42);
        boolean boolean45 = locale39.hasExtensions();
        java.lang.Object[] objArray47 = null;
        java.io.PrintWriter printWriter48 = printWriter38.printf(locale39, "German", objArray47);
        java.lang.Object obj49 = null;
        printWriter48.print(obj49);
        printWriter48.print("org.apache.commons.math.MathException: de");
        printWriter48.println((float) 100);
        printWriter48.print("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        java.util.Locale locale57 = java.util.Locale.US;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.util.Locale[] localeArray70 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.util.Locale>) localeList71);
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 1, mathException65, (byte) 0, localeList73, 1225.0d };
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("hi!", objArray75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("de", objArray75);
        java.io.PrintWriter printWriter78 = printWriter48.format(locale58, "Franz\366sisch (Frankreich)", objArray75);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("FR", objArray75);
        java.lang.Throwable[] throwableArray80 = mathException79.getSuppressed();
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("zh_TW", objArray28, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException81);
        java.lang.String str83 = mathException81.toString();
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Deutsch" + "'", str44, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\uc601\uc5b4" + "'", str59, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org.apache.commons.math.MathException: zh_TW" + "'", str83, "org.apache.commons.math.MathException: zh_TW");
    }

    @Test
    public void test3655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3655");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.print((double) (byte) 100);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream12.print(10.0f);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        java.lang.Object obj25 = null;
        printWriter24.println(obj25);
        printWriter24.write((int) (short) 1);
        java.io.PrintStream printStream30 = new java.io.PrintStream("French (France)");
        printStream30.println((float) (short) -1);
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream30);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream30);
        char[] charArray36 = new char[] { ' ' };
        printWriter34.write(charArray36);
        java.io.PrintStream printStream39 = new java.io.PrintStream("French (France)");
        printStream39.println((float) (short) -1);
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream39);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        char[] charArray45 = new char[] { ' ' };
        printWriter43.write(charArray45);
        printWriter34.println(charArray45);
        printWriter24.write(charArray45, (int) (byte) 0, 1);
        printStream16.print(charArray45);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintStream printStream55 = printStream16.append('#');
        java.io.PrintStream printStream57 = new java.io.PrintStream("French (France)");
        byte[] byteArray58 = new byte[] {};
        printStream57.write(byteArray58);
        java.io.PrintStream printStream61 = new java.io.PrintStream("French (France)");
        printStream61.print((long) ' ');
        java.io.PrintStream printStream65 = new java.io.PrintStream("French (France)");
        byte[] byteArray66 = new byte[] {};
        printStream65.write(byteArray66);
        printStream61.write(byteArray66);
        printStream57.write(byteArray66);
        printStream16.write(byteArray66);
        printStream12.write(byteArray66);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ ]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ ]");
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
    }

    @Test
    public void test3656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3656");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        tDistribution22.setDegreesOfFreedom((double) (short) 10);
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory26 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution29 = distributionFactory26.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution32 = distributionFactory26.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution35 = distributionFactory26.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory26.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        tTestImpl15.setDistribution(tDistribution37);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double double47 = org.apache.commons.math.stat.StatUtils.sum(doubleArray41);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double55 = org.apache.commons.math.stat.StatUtils.product(doubleArray50);
        double double56 = org.apache.commons.math.stat.StatUtils.sum(doubleArray50);
        double double57 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray50);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = tTestImpl15.pairedTTest(doubleArray41, doubleArray50, 9.367344120785848d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 9.367344120785848");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertNotNull(distributionFactory26);
        org.junit.Assert.assertNotNull(weibullDistribution29);
        org.junit.Assert.assertNotNull(fDistribution32);
        org.junit.Assert.assertNotNull(normalDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 34.99999999999999d + "'", double44 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.5553480614894135d + "'", double45 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.5553480614894135d + "'", double46 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.5553480614894135d + "'", double48 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 34.99999999999999d + "'", double53 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3.5553480614894135d + "'", double54 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 34.99999999999999d + "'", double57 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1225.0d + "'", double58 == 1225.0d);
    }

    @Test
    public void test3657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3657");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray14);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray14);
        double double22 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray14, (double) (short) 100);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double29 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray14, doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray24);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double37 = org.apache.commons.math.stat.StatUtils.product(doubleArray32);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray32);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40, 1, 0);
        double double45 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray40);
        double double46 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray32, doubleArray40);
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double48 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double50 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray24, doubleArray32);
        double[] doubleArray52 = new double[] { '#' };
        double double53 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray52);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray52);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray52, (double) '#');
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray52);
        double double58 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray52);
        double double59 = org.apache.commons.math.stat.StatUtils.product(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = tTestImpl12.homoscedasticTTest(doubleArray24, doubleArray52, 0.9999999999999989d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.9999999999999989");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.5553480614894135d + "'", double18 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.5553480614894135d + "'", double28 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 34.99999999999999d + "'", double45 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 3.5553480614894135d + "'", double47 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 34.99999999999999d + "'", double48 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1225.0d + "'", double53 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1225.0d + "'", double57 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 34.99999999999999d + "'", double58 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 35.0d + "'", double59 == 35.0d);
    }

    @Test
    public void test3658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3658");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double double13 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double double24 = org.apache.commons.math.stat.StatUtils.min(doubleArray16);
        double double27 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16, (int) 'u', 2147483647);
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double[] doubleArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = tTestImpl14.pairedTTest(doubleArray16, doubleArray29, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
    }

    @Test
    public void test3659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3659");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        printWriter18.print("org.apache.commons.math.MathException: de");
        printWriter18.println((float) 100);
        printWriter18.print("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        java.util.Locale locale27 = java.util.Locale.US;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 1, mathException35, (byte) 0, localeList43, 1225.0d };
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("de", objArray45);
        java.io.PrintWriter printWriter48 = printWriter18.format(locale28, "Franz\366sisch (Frankreich)", objArray45);
        java.lang.Object obj49 = locale28.clone();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4" + "'", str29, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "ko");
    }

    @Test
    public void test3660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3660");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.print(false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream19 = new java.io.PrintStream("en");
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 1, mathException31, (byte) 0, localeList39, 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("de", objArray41);
        java.io.PrintStream printStream44 = printStream22.printf(locale25, "hi!", objArray41);
        java.io.PrintStream printStream45 = printStream19.printf("FR", objArray41);
        java.io.PrintWriter printWriter46 = printWriter16.format("zh-CN", objArray41);
        java.io.PrintStream printStream47 = printStream1.printf("Chinese (China)", objArray41);
        java.io.PrintStream printStream49 = printStream1.append('a');
        boolean boolean50 = printStream1.checkError();
        java.io.PrintStream printStream52 = new java.io.PrintStream("French (France)");
        printStream52.println((float) (short) -1);
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale[] localeArray66 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList67);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 1, mathException61, (byte) 0, localeList69, 1225.0d };
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", objArray71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("de", objArray71);
        java.io.PrintStream printStream74 = printStream52.printf(locale55, "hi!", objArray71);
        byte[] byteArray80 = new byte[] { (byte) -1, (byte) 1, (byte) 0, (byte) 10, (byte) -1 };
        printStream74.write(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray80, 1, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-1, 1, 0, 10, -1]");
    }

    @Test
    public void test3661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3661");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("Canada", "English");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: English");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3662");
        double[] doubleArray5 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5, (double) (byte) 100);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5, 97, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 515.7000000000007d + "'", double8 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 515.6999999999999d + "'", double9 == 515.6999999999999d);
    }

    @Test
    public void test3663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3663");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("cina");
    }

    @Test
    public void test3664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3664");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale[] localeArray69 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 1, mathException64, (byte) 0, localeList72, 1225.0d };
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("de", objArray74);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", objArray74, (java.lang.Throwable) mathException78);
        java.io.PrintStream printStream80 = printStream57.format("", objArray74);
        printStream57.write(100);
        printStream57.flush();
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "allemand" + "'", str31, "allemand");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream80);
    }

    @Test
    public void test3665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3665");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        printWriter8.println((float) '#');
        printWriter8.println((int) (short) 1);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test3666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3666");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, (double) '#');
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double25 = org.apache.commons.math.stat.StatUtils.mean(doubleArray18);
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, (double) '#');
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.sum(doubleArray28);
        double double36 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray28, (double) 1.0f);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double38 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray18, doubleArray28);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = tTestImpl15.tTest((double) 1L, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.5553480614894135d + "'", double37 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
    }

    @Test
    public void test3667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3667");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("FR");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.println(0.0f);
    }

    @Test
    public void test3668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3668");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 10.0f, 0.9646159093607598d);
        double double11 = weibullDistribution9.inverseCumulativeProbability((double) 0.0f);
        weibullDistribution9.setScale(1.0000000000000009d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test3669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3669");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 100L);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution18 = distributionFactory0.createGammaDistribution(10.0d, (double) 10);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory0.createChiSquareDistribution(Double.POSITIVE_INFINITY);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution22 = distributionFactory0.createExponentialDistribution(0.9646159093607598d);
        double double23 = exponentialDistribution22.getMean();
        double double24 = exponentialDistribution22.getMean();
        exponentialDistribution22.setMean(2.147483646E9d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertNotNull(gammaDistribution18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
        org.junit.Assert.assertNotNull(exponentialDistribution22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9646159093607598d + "'", double23 == 0.9646159093607598d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9646159093607598d + "'", double24 == 0.9646159093607598d);
    }

    @Test
    public void test3670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3670");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.println("zh");
        printStream4.print("hi!");
        printStream4.println((double) (byte) 10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("Vereinigtes K\366nigreich");
        printStream4.print((java.lang.Object) mathException12);
    }

    @Test
    public void test3671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3671");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Language();
        java.lang.String str3 = locale1.getDisplayName();
        java.lang.String str4 = locale0.getDisplayVariant(locale1);
        java.lang.String str5 = locale0.getDisplayVariant();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "French (France)" + "'", str3, "French (France)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "France" + "'", str6, "France");
    }

    @Test
    public void test3672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3672");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution((double) 10.0f, 0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution17 = distributionFactory0.createExponentialDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution20 = distributionFactory0.createBinomialDistribution(120, 0.0d);
        binomialDistribution20.setNumberOfTrials(120);
        int int23 = binomialDistribution20.getNumberOfTrials();
        double double25 = binomialDistribution20.probability((double) 52);
        int int26 = binomialDistribution20.getNumberOfTrials();
        binomialDistribution20.setNumberOfTrials(2147483646);
        double double29 = binomialDistribution20.getProbabilityOfSuccess();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution15);
        org.junit.Assert.assertNotNull(exponentialDistribution17);
        org.junit.Assert.assertNotNull(binomialDistribution20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120 + "'", int23 == 120);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120 + "'", int26 == 120);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    }

    @Test
    public void test3673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3673");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setScript("\uc911\uad6d");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test3674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3674");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) (short) 0, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
    }

    @Test
    public void test3675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3675");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.print((double) (byte) 100);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double double18 = org.apache.commons.math.stat.StatUtils.product(doubleArray13);
        double double19 = org.apache.commons.math.stat.StatUtils.sum(doubleArray13);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray13);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22, (double) '#');
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray13, doubleArray22);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22, (double) '#');
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22, 0.002555130330427813d, 2147483647, (int) '4');
        printStream1.print((java.lang.Object) 2147483647);
        boolean boolean37 = printStream1.checkError();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.5553480614894135d + "'", double17 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test3676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3676");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale0.getISO3Language();
        java.lang.String str5 = locale0.getISO3Language();
        java.lang.String str6 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "und" + "'", str6, "und");
    }

    @Test
    public void test3677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3677");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) 'u', (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test3678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3678");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) ' ');
        poissonDistribution8.setMean(4.560969057281146E-69d);
        double double11 = poissonDistribution8.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 4.560969057281146E-69d + "'", double11 == 4.560969057281146E-69d);
    }

    @Test
    public void test3679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3679");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.print((long) ' ');
        printStream4.print((-1L));
        printStream4.close();
        printStream4.write((int) (byte) -1);
        printStream4.print('x');
        printStream4.print((long) (short) -1);
    }

    @Test
    public void test3680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3680");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder0.setLanguage("English");
        java.util.Locale.Builder builder9 = builder0.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3681");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FRA", "ita");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ita");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3682");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = distributionFactory0.createTDistribution((double) 10);
        // The following exception was thrown during execution in test generation
        try {
            tDistribution13.setDegreesOfFreedom((-9.992007221626409E-16d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(tDistribution13);
    }

    @Test
    public void test3683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3683");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh-CN");
        printStream1.print('a');
        printStream1.write((int) (short) 0);
        java.io.PrintStream printStream7 = printStream1.append('x');
        printStream7.print((-1));
        printStream7.flush();
        org.junit.Assert.assertNotNull(printStream7);
    }

    @Test
    public void test3684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3684");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale4.getDisplayScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test3685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3685");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\uc601\uc5b4", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=?????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3686");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution29 = distributionFactory23.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory23.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory23.createTDistribution((double) 100L);
        tDistribution34.setDegreesOfFreedom(52.0d);
        tTestImpl1.setDistribution(tDistribution34);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double double42 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray39);
        double double45 = org.apache.commons.math.stat.StatUtils.sum(doubleArray39);
        double double46 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray39);
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray39, 0, 1);
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39, 10, 2147483647);
        double double53 = org.apache.commons.math.stat.StatUtils.min(doubleArray39);
        double[] doubleArray55 = new double[] { '#' };
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray55);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray55);
        double double58 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray55);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray55);
        double double60 = org.apache.commons.math.stat.StatUtils.sum(doubleArray55);
        double double61 = org.apache.commons.math.stat.StatUtils.max(doubleArray55);
        double double62 = org.apache.commons.math.stat.StatUtils.min(doubleArray55);
        double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray55);
        double[] doubleArray65 = new double[] { '#' };
        double double66 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray65);
        double double67 = org.apache.commons.math.stat.StatUtils.variance(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray65);
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double70 = org.apache.commons.math.stat.StatUtils.product(doubleArray65);
        double double71 = org.apache.commons.math.stat.StatUtils.sum(doubleArray65);
        double[] doubleArray73 = new double[] { '#' };
        double double74 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray73);
        double double77 = org.apache.commons.math.stat.StatUtils.variance(doubleArray73, 1, 0);
        double double78 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray73);
        double double79 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray65, doubleArray73);
        double double80 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray55, doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = tTestImpl1.tTest(doubleArray39, doubleArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(fDistribution29);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 34.99999999999999d + "'", double42 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 3.5553480614894135d + "'", double43 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 34.99999999999999d + "'", double46 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 34.99999999999999d + "'", double58 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.5553480614894135d + "'", double59 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 35.0d + "'", double60 == 35.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 35.0d + "'", double62 == 35.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[35.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1225.0d + "'", double66 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 34.99999999999999d + "'", double68 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 3.5553480614894135d + "'", double69 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 35.0d + "'", double70 == 35.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 35.0d + "'", double71 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[35.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1225.0d + "'", double74 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 34.99999999999999d + "'", double78 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
    }

    @Test
    public void test3687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3687");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.println((int) (short) 100);
        java.io.PrintStream printStream25 = new java.io.PrintStream("French (France)");
        printStream25.println((float) (short) -1);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream25);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream25);
        char[] charArray31 = new char[] { ' ' };
        printWriter29.write(charArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("French (France)");
        printStream34.println((float) (short) -1);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream34);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream34);
        char[] charArray40 = new char[] { ' ' };
        printWriter38.write(charArray40);
        printWriter29.println(charArray40);
        printWriter29.println((int) (short) 0);
        char[] charArray46 = new char[] { '4' };
        printWriter29.println(charArray46);
        printWriter8.print((java.lang.Object) printWriter29);
        java.io.PrintStream printStream51 = new java.io.PrintStream("zho");
        java.lang.String[] strArray55 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray55);
        java.io.PrintStream printStream58 = printStream51.printf("Italienisch", (java.lang.Object[]) strArray55);
        java.io.PrintWriter printWriter59 = printWriter8.format("Italienisch", (java.lang.Object[]) strArray55);
        printWriter59.println(0L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ ]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ ]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(printWriter59);
    }

    @Test
    public void test3688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3688");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.MathException: de");
        printStream1.print('u');
        java.util.Locale locale4 = null;
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        printStream7.println(' ');
        printStream7.print(false);
        printStream7.println((float) '#');
        printStream7.println((float) 100L);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream7, true);
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale21 = java.util.Locale.US;
        java.util.Locale.setDefault(category20, locale21);
        java.io.PrintStream printStream25 = new java.io.PrintStream("French (France)");
        printStream25.println((float) (short) -1);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream25);
        printStream28.println("zh");
        printStream28.print("hi!");
        printStream28.close();
        java.util.Locale locale34 = null;
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream37 = printStream28.format(locale34, "France", (java.lang.Object[]) strArray36);
        java.io.PrintStream printStream38 = printStream7.printf(locale21, "Italian", (java.lang.Object[]) strArray36);
        java.io.PrintStream printStream39 = printStream1.printf(locale4, "German", (java.lang.Object[]) strArray36);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream42 = printStream1.append((java.lang.CharSequence) "USA");
        printStream1.write((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(printStream42);
    }

    @Test
    public void test3689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3689");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale4.getDisplayScript(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale4.getDisplayScript(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale.Builder builder13 = builder11.setRegion("fr");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.removeUnicodeLocaleAttribute("\u5fb7\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3690");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        java.io.PrintWriter printWriter22 = printWriter8.append((java.lang.CharSequence) "org.apache.commons.math.MathException: de");
        printWriter22.println();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale locale25 = builder24.build();
        java.lang.String str26 = locale25.getCountry();
        java.lang.String str27 = locale25.getVariant();
        java.lang.String str28 = locale25.getScript();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Locale[] localeArray39 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList40);
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 1, mathException34, (byte) 0, localeList42, 1225.0d };
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("");
        mathException45.addSuppressed((java.lang.Throwable) mathException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException47);
        java.io.PrintStream printStream52 = new java.io.PrintStream("zho");
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray56);
        java.io.PrintStream printStream59 = printStream52.printf("Italienisch", (java.lang.Object[]) strArray56);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("KOR", (java.lang.Object[]) strArray56);
        mathException49.addSuppressed((java.lang.Throwable) mathException60);
        java.lang.Object[] objArray62 = mathException60.getArguments();
        java.io.PrintWriter printWriter63 = printWriter22.printf(locale25, "Chine", objArray62);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printWriter63);
    }

    @Test
    public void test3691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3691");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("zh-CN");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: de", (java.lang.Throwable) mathException2);
    }

    @Test
    public void test3692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3692");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("German");
    }

    @Test
    public void test3693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3693");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("ko_KR");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=ko_kr");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3694");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("US");
        java.util.Locale.Builder builder7 = builder0.setLanguageTag("Canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3695");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.lang.Object obj10 = null;
        printWriter9.println(obj10);
        printWriter9.write((int) (short) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        char[] charArray21 = new char[] { ' ' };
        printWriter19.write(charArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printWriter19.println(charArray30);
        printWriter9.write(charArray30, (int) (byte) 0, 1);
        printStream1.print(charArray30);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.println((float) (short) -1);
        printStream40.println(' ');
        printStream40.print(false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream40);
        java.io.PrintWriter printWriter49 = printWriter47.append(' ');
        java.io.PrintWriter printWriter51 = printWriter49.append('u');
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale[] localeArray64 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList65);
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 1, mathException59, (byte) 0, localeList67, 1225.0d };
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("de", objArray69);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("", objArray69, (java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("und", objArray69, (java.lang.Throwable) mathException76);
        java.io.PrintWriter printWriter78 = printWriter49.printf("Deutsch", objArray69);
        java.io.PrintStream printStream79 = printStream1.printf(locale37, "Deutsch", objArray69);
        java.io.PrintStream printStream81 = printStream79.append('a');
        printStream79.print("fra");
        java.io.PrintStream printStream84 = new java.io.PrintStream((java.io.OutputStream) printStream79);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printStream81);
    }

    @Test
    public void test3696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3696");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution9 = distributionFactory0.createPascalDistribution((int) (short) 100, 0.9984345977419966d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(pascalDistribution9);
    }

    @Test
    public void test3697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3697");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory32 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution35 = distributionFactory32.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution36 = distributionFactory32.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution38 = distributionFactory32.createTDistribution((double) 1L);
        double double39 = tDistribution38.getDegreesOfFreedom();
        tTestImpl31.setDistribution(tDistribution38);
        double double41 = tDistribution38.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution38);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory43 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution46 = distributionFactory43.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution47 = distributionFactory43.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution48 = distributionFactory43.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution50 = distributionFactory43.createTDistribution((double) (byte) 1);
        tTestImpl12.setDistribution(tDistribution50);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = tTestImpl12.tTest(Double.NaN, statisticalSummary53, 0.632120548780791d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.632120548780791");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory32);
        org.junit.Assert.assertNotNull(weibullDistribution35);
        org.junit.Assert.assertNotNull(normalDistribution36);
        org.junit.Assert.assertNotNull(tDistribution38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory43);
        org.junit.Assert.assertNotNull(weibullDistribution46);
        org.junit.Assert.assertNotNull(normalDistribution47);
        org.junit.Assert.assertNotNull(normalDistribution48);
        org.junit.Assert.assertNotNull(tDistribution50);
    }

    @Test
    public void test3698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3698");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        java.io.PrintStream printStream3 = printStream1.append('a');
        printStream3.print((-9.992007221626409E-16d));
        org.junit.Assert.assertNotNull(printStream3);
    }

    @Test
    public void test3699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3699");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.distribution.TDistribution tDistribution27 = null;
        tTestImpl26.setDistribution(tDistribution27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double31 = tTestImpl26.homoscedasticT(statisticalSummary29, statisticalSummary30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
    }

    @Test
    public void test3700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3700");
        java.lang.String[] strArray3 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray3);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale[] localeArray19 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList20);
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 1, mathException14, (byte) 0, localeList22, 1225.0d };
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("de", objArray24);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", objArray24, (java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("und", objArray24, (java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("\uc601\uc5b4", (java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray3, (java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale[] localeArray46 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList47);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 1, mathException41, (byte) 0, localeList49, 1225.0d };
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("");
        mathException52.addSuppressed((java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException54);
        java.lang.String[] strArray59 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("allemand", (java.lang.Object[]) strArray59);
        mathException56.addSuppressed((java.lang.Throwable) mathException61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException61);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.util.Locale[] localeArray74 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList75 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList75, localeArray74);
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, (java.util.Collection<java.util.Locale>) localeList75);
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 1, mathException69, (byte) 0, localeList77, 1225.0d };
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", objArray79);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("");
        mathException80.addSuppressed((java.lang.Throwable) mathException82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException82);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("FRA", (java.lang.Throwable) mathException82);
        mathException61.addSuppressed((java.lang.Throwable) mathException85);
        mathException33.addSuppressed((java.lang.Throwable) mathException61);
        java.lang.String str88 = mathException33.getPattern();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\uc601\uc5b4" + "'", str88, "\uc601\uc5b4");
    }

    @Test
    public void test3701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3701");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        tDistribution6.setDegreesOfFreedom(100.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl9 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = tTestImpl9.homoscedasticTTest(statisticalSummary10, statisticalSummary11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test3702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3702");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl12.t(1.0000000000000009d, statisticalSummary31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test3703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3703");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PoissonDistribution poissonDistribution14 = distributionFactory0.createPoissonDistribution((double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Poisson mean must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
    }

    @Test
    public void test3704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3704");
        java.util.Locale locale3 = new java.util.Locale("ja", "anglais", "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FRA");
        org.junit.Assert.assertEquals(locale3.toString(), "ja_ANGLAIS_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FRA");
    }

    @Test
    public void test3705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3705");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        normalDistribution4.setStandardDeviation(35.0d);
        normalDistribution4.setMean((double) 10L);
        normalDistribution4.setMean((double) (short) 10);
        double double12 = normalDistribution4.inverseCumulativeProbability(0.24999999999999964d);
        double double13 = normalDistribution4.getStandardDeviation();
        normalDistribution4.setMean(9.266631341249231E-194d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-13.607141222220143d) + "'", double12 == (-13.607141222220143d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
    }

    @Test
    public void test3706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3706");
        java.io.PrintStream printStream1 = new java.io.PrintStream("kor");
    }

    @Test
    public void test3707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3707");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setRegion("de");
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale9.getDisplayCountry(locale11);
        java.lang.String str15 = locale6.getDisplayName(locale11);
        java.util.Locale.Builder builder16 = builder5.setLocale(locale11);
        java.util.Locale locale17 = builder5.build();
        java.util.Locale.Builder builder19 = builder5.setScript("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "German" + "'", str10, "German");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FRA" + "'", str12, "FRA");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "allemand" + "'", str15, "allemand");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test3708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3708");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 34.99999999999999d + "'", double7 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test3709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3709");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        printWriter18.println(1);
        java.io.PrintStream printStream26 = new java.io.PrintStream("French (France)");
        printStream26.println((float) (short) -1);
        printStream26.println(' ');
        printStream26.flush();
        java.util.Locale locale32 = null;
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream35);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        java.io.PrintStream printStream42 = new java.io.PrintStream("French (France)");
        printStream42.println((float) (short) -1);
        printStream42.println(' ');
        printStream42.print(false);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.OutputStream) printStream42);
        java.io.PrintWriter printWriter51 = printWriter49.append(' ');
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale52.getDisplayVariant();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getDisplayName();
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = locale57.getISO3Country();
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        java.lang.String str60 = locale55.getDisplayCountry(locale57);
        java.lang.String str61 = locale52.getDisplayName(locale57);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.util.Locale[] localeArray72 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.util.Locale>) localeList73);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 1, mathException67, (byte) 0, localeList75, 1225.0d };
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("hi!", objArray77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("de", objArray77);
        java.io.PrintWriter printWriter80 = printWriter51.printf(locale52, "zho", objArray77);
        java.io.PrintWriter printWriter81 = printWriter39.printf("", objArray77);
        java.io.PrintStream printStream82 = printStream26.printf(locale32, "und", objArray77);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("fra", objArray77);
        java.io.PrintWriter printWriter84 = printWriter18.printf("Chinesisch (China)", objArray77);
        printWriter84.close();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "German" + "'", str56, "German");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "FRA" + "'", str58, "FRA");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "allemand" + "'", str61, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(printWriter84);
    }

    @Test
    public void test3710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3710");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double) 10.0f);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution((-9.992007221626409E-16d), (double) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution14 = distributionFactory0.createGammaDistribution(0.035086649709077655d, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: beta must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertNotNull(normalDistribution11);
    }

    @Test
    public void test3711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3711");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale[] localeArray34 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList35);
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 1, mathException29, (byte) 0, localeList37, 1225.0d };
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("de", objArray39);
        java.io.PrintStream printStream42 = printStream20.printf(locale23, "hi!", objArray39);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44, (double) '#');
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        printStream42.print((java.lang.Object) doubleArray44);
        double double51 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray44);
        double double53 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray44, (double) 1.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray44);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = org.apache.commons.math.stat.StatUtils.mean(doubleArray44, 17, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 34.99999999999999d + "'", double51 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test3712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3712");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.min(doubleArray0, 97, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3713");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\ud504\ub791\uc2a4)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=italian (???????)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3714");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale.Builder builder13 = builder10.addUnicodeLocaleAttribute("german");
        java.util.Locale.Builder builder14 = builder10.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.setLanguageTag("France");
        java.util.Locale.Builder builder18 = builder14.setVariant("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.setVariant("Englisch (Vereinigte Staaten von Amerika)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Englisch (Vereinigte Staaten von Amerika) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "german");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3715");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory18 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution21 = distributionFactory18.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory18.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory18.createTDistribution((double) 1L);
        double double25 = tDistribution24.getDegreesOfFreedom();
        tTestImpl17.setDistribution(tDistribution24);
        tDistribution24.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl29 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(117.0d);
        tTestImpl15.setDistribution(tDistribution24);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory33 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution36 = distributionFactory33.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution37 = distributionFactory33.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution39 = distributionFactory33.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution41 = distributionFactory33.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.TDistribution tDistribution43 = distributionFactory33.createTDistribution((double) (byte) 1);
        tTestImpl15.setDistribution(tDistribution43);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double47 = tTestImpl15.t((double) (byte) 10, statisticalSummary46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory18);
        org.junit.Assert.assertNotNull(weibullDistribution21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory33);
        org.junit.Assert.assertNotNull(weibullDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution37);
        org.junit.Assert.assertNotNull(tDistribution39);
        org.junit.Assert.assertNotNull(chiSquaredDistribution41);
        org.junit.Assert.assertNotNull(tDistribution43);
    }

    @Test
    public void test3716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3716");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.lang.Object obj10 = null;
        printWriter9.println(obj10);
        printWriter9.write((int) (short) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        char[] charArray21 = new char[] { ' ' };
        printWriter19.write(charArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printWriter19.println(charArray30);
        printWriter9.write(charArray30, (int) (byte) 0, 1);
        printStream1.print(charArray30);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream40 = printStream1.append('#');
        printStream40.println((long) (short) 10);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
        org.junit.Assert.assertNotNull(printStream40);
    }

    @Test
    public void test3717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3717");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setRegion("de");
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale9.getDisplayCountry(locale11);
        java.lang.String str15 = locale6.getDisplayName(locale11);
        java.util.Locale.Builder builder16 = builder5.setLocale(locale11);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = locale17.getDisplayScript();
        java.util.Locale.Builder builder20 = builder16.setLocale(locale17);
        java.util.Locale.Builder builder21 = builder16.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "German" + "'", str10, "German");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FRA" + "'", str12, "FRA");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "allemand" + "'", str15, "allemand");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "FRA" + "'", str18, "FRA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test3718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3718");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("allemand", (double) 0L);
        java.lang.String str3 = languageRange2.getRange();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.setLanguage("German");
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.Builder builder8 = builder4.clearExtensions();
        java.util.Locale.Builder builder10 = builder4.setLanguage("France");
        java.util.Locale.Builder builder12 = builder10.setLanguage("German");
        java.util.Locale.Builder builder14 = builder12.setScript("");
        java.util.Locale locale15 = builder14.build();
        java.util.Locale.Builder builder17 = builder14.addUnicodeLocaleAttribute("german");
        java.util.Locale.Builder builder18 = builder14.clearExtensions();
        java.util.Locale.Builder builder20 = builder18.setLanguageTag("France");
        java.util.Locale.Builder builder22 = builder18.setVariant("English");
        java.util.Locale locale23 = builder18.build();
        boolean boolean24 = languageRange2.equals((java.lang.Object) builder18);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "allemand" + "'", str3, "allemand");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "german");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "german");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "france__English");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3719");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution8 = distributionFactory2.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory2.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution13 = distributionFactory2.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.TDistribution tDistribution15 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl16 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution15);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory17 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution20 = distributionFactory17.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution21 = distributionFactory17.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution23 = distributionFactory17.createTDistribution((double) 1L);
        double double24 = tDistribution23.getDegreesOfFreedom();
        tTestImpl16.setDistribution(tDistribution23);
        tDistribution23.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution23);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl29 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution23);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl30 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution23);
        tTestImpl14.setDistribution(tDistribution23);
        tTestImpl1.setDistribution(tDistribution23);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double35 = tTestImpl1.homoscedasticTTest(statisticalSummary33, statisticalSummary34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(fDistribution8);
        org.junit.Assert.assertNotNull(normalDistribution11);
        org.junit.Assert.assertNotNull(tDistribution13);
        org.junit.Assert.assertNotNull(distributionFactory17);
        org.junit.Assert.assertNotNull(weibullDistribution20);
        org.junit.Assert.assertNotNull(normalDistribution21);
        org.junit.Assert.assertNotNull(tDistribution23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
    }

    @Test
    public void test3720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3720");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double) 10.0f);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) 'x');
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution11 = distributionFactory0.createCauchyDistribution((double) (byte) 10, (double) 'u');
        org.apache.commons.math.distribution.TDistribution tDistribution13 = distributionFactory0.createTDistribution(0.9646159093607598d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution16 = distributionFactory0.createGammaDistribution((double) 97, (double) (short) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory0.createNormalDistribution((double) (byte) 1, 52.0d);
        org.apache.commons.math.distribution.FDistribution fDistribution22 = distributionFactory0.createFDistribution((double) 10L, (double) 35);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertNotNull(cauchyDistribution11);
        org.junit.Assert.assertNotNull(tDistribution13);
        org.junit.Assert.assertNotNull(gammaDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(fDistribution22);
    }

    @Test
    public void test3721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3721");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution14 = distributionFactory0.createWeibullDistribution(35.0d, 0.24999999999999964d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution17 = distributionFactory0.createCauchyDistribution(35.0d, 12.2d);
        double double18 = cauchyDistribution17.getScale();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(weibullDistribution14);
        org.junit.Assert.assertNotNull(cauchyDistribution17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 12.2d + "'", double18 == 12.2d);
    }

    @Test
    public void test3722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3722");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "italian");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: italian");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3723");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        printWriter5.println(charArray16);
        java.lang.Object[] objArray20 = null;
        java.io.PrintWriter printWriter21 = printWriter5.printf("allemand", objArray20);
        printWriter21.print("de");
        printWriter21.print((float) (byte) -1);
        printWriter21.println((int) '4');
        printWriter21.print(17);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter33 = printWriter21.append((java.lang.CharSequence) "ko_KR", 17, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(printWriter21);
    }

    @Test
    public void test3724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3724");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        byte[] byteArray2 = new byte[] {};
        printStream1.write(byteArray2);
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getISO3Language();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale11.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayLanguage();
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        printStream18.println(' ');
        printStream18.print(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        java.io.PrintWriter printWriter27 = printWriter25.append(' ');
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getDisplayVariant();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.lang.String str36 = locale31.getDisplayCountry(locale33);
        java.lang.String str37 = locale28.getDisplayName(locale33);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale[] localeArray48 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList49);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 1, mathException43, (byte) 0, localeList51, 1225.0d };
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("de", objArray53);
        java.io.PrintWriter printWriter56 = printWriter27.printf(locale28, "zho", objArray53);
        java.io.PrintStream printStream57 = printStream10.format(locale13, "fra", objArray53);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale[] localeArray67 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList68);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 1, mathException62, (byte) 0, localeList70, 1225.0d };
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("hi!", objArray72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("de", objArray72);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("French", objArray53, (java.lang.Throwable) mathException74);
        java.io.PrintStream printStream76 = printStream1.printf("CHN", objArray53);
        java.io.PrintStream printStream78 = new java.io.PrintStream("French (France)");
        byte[] byteArray79 = new byte[] {};
        printStream78.write(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray79, 17, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "German" + "'", str15, "German");
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "German" + "'", str32, "German");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FRA" + "'", str34, "FRA");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "allemand" + "'", str37, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
    }

    @Test
    public void test3725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3725");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getShape();
        double double5 = weibullDistribution3.getShape();
        double double6 = weibullDistribution3.getScale();
        weibullDistribution3.setShape((double) 10);
        double double9 = weibullDistribution3.getScale();
        double double10 = weibullDistribution3.getShape();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test3726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3726");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution10 = distributionFactory0.createChiSquareDistribution(0.6321205588285574d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution13 = distributionFactory0.createCauchyDistribution(515.7d, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(chiSquaredDistribution10);
    }

    @Test
    public void test3727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3727");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getScale();
        cauchyDistribution6.setScale((double) 1.0f);
        double double10 = cauchyDistribution6.getScale();
        double double11 = cauchyDistribution6.getMedian();
        double double12 = cauchyDistribution6.getScale();
        double double13 = cauchyDistribution6.getScale();
        double double14 = cauchyDistribution6.getMedian();
        double double15 = cauchyDistribution6.getScale();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test3728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3728");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        java.io.PrintWriter printWriter41 = printWriter10.append('a');
        printWriter41.write("");
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(printWriter41);
    }

    @Test
    public void test3729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3729");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        double double7 = cauchyDistribution6.getMedian();
        double double8 = cauchyDistribution6.getMedian();
        double double9 = cauchyDistribution6.getMedian();
        double double10 = cauchyDistribution6.getScale();
        double double11 = cauchyDistribution6.getMedian();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test3730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3730");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("English");
        java.lang.String str2 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "english" + "'", str2, "english");
    }

    @Test
    public void test3731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3731");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale0.getDisplayScript(locale4);
        java.lang.String str7 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test3732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3732");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        hypergeometricDistribution10.setSampleSize((int) (short) 1);
        hypergeometricDistribution10.setNumberOfSuccesses((int) '4');
        int int15 = hypergeometricDistribution10.getNumberOfSuccesses();
        double double18 = hypergeometricDistribution10.cumulativeProbability(17, 100);
        int int19 = hypergeometricDistribution10.getSampleSize();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test3733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3733");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "_ZHO_org.apache.commons.math.mathexception: de");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: _ZHO_org.apache.commons.math.mathexception: de");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3734");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.MathException: allemand");
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale3.getDisplayLanguage(locale4);
        java.lang.String str7 = locale4.getScript();
        java.lang.String str8 = locale1.getDisplayName(locale4);
        java.lang.Object obj9 = locale1.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italienisch" + "'", str6, "Italienisch");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "");
    }

    @Test
    public void test3735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3735");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize(0);
        hypergeometricDistribution10.setSampleSize((int) (short) 100);
        int int16 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setNumberOfSuccesses(0);
        double double20 = hypergeometricDistribution10.cumulativeProbability((int) (byte) -1);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test3736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3736");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 100L);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.util.Locale locale17 = new java.util.Locale("allemand", "org.apache.commons.math.MathException: fra", "ko_KR");
        java.lang.String str18 = locale17.getDisplayCountry();
        java.lang.String str19 = locale17.toLanguageTag();
        java.io.PrintStream printStream22 = new java.io.PrintStream("zho");
        java.lang.String[] strArray26 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray26);
        java.io.PrintStream printStream29 = printStream22.printf("Italienisch", (java.lang.Object[]) strArray26);
        java.io.PrintStream printStream30 = printStream13.format(locale17, "it", (java.lang.Object[]) strArray26);
        org.junit.Assert.assertEquals(locale17.toString(), "allemand_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FRA_ko_KR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FRA" + "'", str18, "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FRA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "allemand-x-lvariant-ko-KR" + "'", str19, "allemand-x-lvariant-ko-KR");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream30);
    }

    @Test
    public void test3737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3737");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream1.println('#');
        printStream1.print(false);
        java.io.PrintStream printStream63 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream63.print(0.0f);
        java.util.Locale locale66 = java.util.Locale.US;
        java.lang.String str67 = locale66.getDisplayName();
        java.util.Locale.setDefault(locale66);
        java.util.Locale locale69 = locale66.stripExtensions();
        java.lang.String str70 = locale66.getDisplayName();
        java.lang.Object[] objArray72 = null;
        java.io.PrintStream printStream73 = printStream63.printf(locale66, "inglese (Stati Uniti)", objArray72);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English (United States)" + "'", str67, "English (United States)");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "English (United States)" + "'", str70, "English (United States)");
        org.junit.Assert.assertNotNull(printStream73);
    }

    @Test
    public void test3738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3738");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh-CN");
        printStream1.print('a');
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.println((float) (short) -1);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream9);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream9);
        java.lang.Object obj14 = null;
        printWriter13.println(obj14);
        printWriter13.write((int) (short) 1);
        java.io.PrintStream printStream19 = new java.io.PrintStream("French (France)");
        printStream19.println((float) (short) -1);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream19);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        char[] charArray25 = new char[] { ' ' };
        printWriter23.write(charArray25);
        java.io.PrintStream printStream28 = new java.io.PrintStream("French (France)");
        printStream28.println((float) (short) -1);
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream28);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream28);
        char[] charArray34 = new char[] { ' ' };
        printWriter32.write(charArray34);
        printWriter23.println(charArray34);
        printWriter13.write(charArray34, (int) (byte) 0, 1);
        printStream5.print(charArray34);
        printStream1.print(charArray34);
        printStream1.print('x');
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ ]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ ]");
    }

    @Test
    public void test3739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3739");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        double double10 = pascalDistribution6.probability((int) 'x');
        double double12 = pascalDistribution6.cumulativeProbability((int) (short) -1);
        pascalDistribution6.setNumberOfSuccesses((int) (short) 10);
        pascalDistribution6.setProbabilityOfSuccess((double) (byte) 1);
        double double17 = pascalDistribution6.getProbabilityOfSuccess();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test3740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3740");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("FRA");
    }

    @Test
    public void test3741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3741");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, (double) '#');
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        printStream23.print((java.lang.Object) doubleArray25);
        double double32 = org.apache.commons.math.stat.StatUtils.mean(doubleArray25);
        double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 0.4073778180707197d);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test3742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3742");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        byte[] byteArray2 = new byte[] {};
        printStream1.write(byteArray2);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.print((long) ' ');
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        byte[] byteArray10 = new byte[] {};
        printStream9.write(byteArray10);
        printStream5.write(byteArray10);
        printStream1.write(byteArray10);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        printStream15.println(' ');
        printStream15.print(false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getDisplayVariant();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale23.getDisplayLanguage(locale26);
        boolean boolean29 = locale23.hasExtensions();
        java.lang.Object[] objArray31 = null;
        java.io.PrintWriter printWriter32 = printWriter22.printf(locale23, "German", objArray31);
        java.util.Locale locale33 = null;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Locale[] localeArray44 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList45 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList45, localeArray44);
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.util.Locale>) localeList45);
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 1, mathException39, (byte) 0, localeList47, 1225.0d };
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("de", objArray49);
        java.io.PrintWriter printWriter52 = printWriter22.printf(locale33, "zh-CN", objArray49);
        printWriter22.write((int) '#');
        printWriter22.print('x');
        printStream1.print((java.lang.Object) 'x');
        java.io.PrintStream printStream59 = new java.io.PrintStream("zh-CN");
        printStream59.print('a');
        java.io.PrintStream printStream63 = new java.io.PrintStream("French (France)");
        printStream63.print((long) ' ');
        java.io.PrintStream printStream67 = new java.io.PrintStream("French (France)");
        byte[] byteArray68 = new byte[] {};
        printStream67.write(byteArray68);
        printStream63.write(byteArray68);
        printStream59.write(byteArray68);
        printStream1.write(byteArray68);
        printStream1.println(2147483646);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Deutsch" + "'", str28, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
    }

    @Test
    public void test3743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3743");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("GB");
    }

    @Test
    public void test3744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3744");
        java.util.Locale locale2 = new java.util.Locale("zh", "zh-CN");
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale3.getDisplayLanguage(locale4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = locale7.getDisplayName();
        boolean boolean10 = locale7.hasExtensions();
        java.lang.String str11 = locale4.getDisplayLanguage(locale7);
        java.util.Set<java.lang.Character> charSet12 = locale4.getExtensionKeys();
        java.lang.String str13 = locale4.toLanguageTag();
        java.lang.String str14 = locale2.getDisplayName(locale4);
        java.util.Set<java.lang.Character> charSet15 = locale2.getExtensionKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "zh_ZH-CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italienisch" + "'", str6, "Italienisch");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "French (France)" + "'", str9, "French (France)");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "allemand" + "'", str11, "allemand");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "de" + "'", str13, "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinesisch (ZH-CN)" + "'", str14, "Chinesisch (ZH-CN)");
        org.junit.Assert.assertNotNull(charSet15);
    }

    @Test
    public void test3745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3745");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream57.print(Double.NaN);
        printStream57.print((float) 10L);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Locale[] localeArray71 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.util.Locale>) localeList72);
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 1, mathException66, (byte) 0, localeList74, 1225.0d };
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("de", objArray76);
        java.lang.String str79 = mathException78.getPattern();
        printStream57.println((java.lang.Object) str79);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "de" + "'", str79, "de");
    }

    @Test
    public void test3746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3746");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setLanguage("German");
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale15.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder19 = builder13.setLocale(locale15);
        java.util.Locale.Builder builder20 = builder10.setLocale(locale15);
        java.util.Locale locale21 = builder20.build();
        java.util.Locale.Builder builder23 = builder20.setLanguage("zho");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder20.addUnicodeLocaleAttribute("Chinesisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Chinesisch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italienisch" + "'", str18, "Italienisch");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test3747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3747");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        printWriter8.print(false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter8.println((int) '4');
        printWriter8.print(false);
        java.io.PrintStream printStream29 = new java.io.PrintStream("French (France)");
        printStream29.println((float) (short) -1);
        printStream29.println(' ');
        printStream29.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream37 = new java.io.PrintStream("French (France)");
        printStream37.println((float) (short) -1);
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream37);
        printStream37.print((long) (short) 0);
        java.io.PrintStream printStream44 = new java.io.PrintStream("French (France)");
        printStream44.println((float) (short) -1);
        java.io.PrintStream printStream47 = new java.io.PrintStream((java.io.OutputStream) printStream44);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream44);
        char[] charArray50 = new char[] { ' ' };
        printWriter48.write(charArray50);
        printStream37.print(charArray50);
        printStream29.println(charArray50);
        printWriter8.write(charArray50);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
    }

    @Test
    public void test3748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3748");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution29 = distributionFactory23.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory23.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory23.createTDistribution((double) 100L);
        tDistribution34.setDegreesOfFreedom(52.0d);
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory38 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution41 = distributionFactory38.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution44 = distributionFactory38.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution47 = distributionFactory38.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution49 = distributionFactory38.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl50 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution49);
        org.apache.commons.math.distribution.TDistribution tDistribution51 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl52 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution51);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory53 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution56 = distributionFactory53.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution57 = distributionFactory53.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution59 = distributionFactory53.createTDistribution((double) 1L);
        double double60 = tDistribution59.getDegreesOfFreedom();
        tTestImpl52.setDistribution(tDistribution59);
        tDistribution59.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl65 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl66 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        tTestImpl50.setDistribution(tDistribution59);
        org.apache.commons.math.distribution.TDistribution tDistribution68 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl69 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution68);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory70 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution73 = distributionFactory70.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution74 = distributionFactory70.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution76 = distributionFactory70.createTDistribution((double) 1L);
        double double77 = tDistribution76.getDegreesOfFreedom();
        tTestImpl69.setDistribution(tDistribution76);
        double double79 = tDistribution76.getDegreesOfFreedom();
        tTestImpl50.setDistribution(tDistribution76);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory81 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution84 = distributionFactory81.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution85 = distributionFactory81.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution86 = distributionFactory81.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution88 = distributionFactory81.createTDistribution((double) (byte) 1);
        tTestImpl50.setDistribution(tDistribution88);
        tTestImpl1.setDistribution(tDistribution88);
        double double91 = tDistribution88.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(fDistribution29);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertNotNull(distributionFactory38);
        org.junit.Assert.assertNotNull(weibullDistribution41);
        org.junit.Assert.assertNotNull(fDistribution44);
        org.junit.Assert.assertNotNull(normalDistribution47);
        org.junit.Assert.assertNotNull(tDistribution49);
        org.junit.Assert.assertNotNull(distributionFactory53);
        org.junit.Assert.assertNotNull(weibullDistribution56);
        org.junit.Assert.assertNotNull(normalDistribution57);
        org.junit.Assert.assertNotNull(tDistribution59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory70);
        org.junit.Assert.assertNotNull(weibullDistribution73);
        org.junit.Assert.assertNotNull(normalDistribution74);
        org.junit.Assert.assertNotNull(tDistribution76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory81);
        org.junit.Assert.assertNotNull(weibullDistribution84);
        org.junit.Assert.assertNotNull(normalDistribution85);
        org.junit.Assert.assertNotNull(normalDistribution86);
        org.junit.Assert.assertNotNull(tDistribution88);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
    }

    @Test
    public void test3749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3749");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20, 1, 0);
        double double26 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray20, (double) (byte) 100);
        double double27 = org.apache.commons.math.stat.StatUtils.mean(doubleArray20);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double29 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray20);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
    }

    @Test
    public void test3750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3750");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println();
        boolean boolean5 = printStream1.checkError();
        printStream1.print((float) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream11 = printStream1.append((java.lang.CharSequence) "\uc911\uad6d\uc5b4\ub300\ub9cc)", (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test3751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3751");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        double double9 = fDistribution6.getNumeratorDegreesOfFreedom();
        double double10 = fDistribution6.getDenominatorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom((double) (short) 10);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test3752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3752");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale[] localeArray9 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 1, mathException4, (byte) 0, localeList12, 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("");
        mathException15.addSuppressed((java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException17);
        java.lang.Throwable[] throwableArray20 = mathException17.getSuppressed();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 1, mathException26, (byte) 0, localeList34, 1225.0d };
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("");
        mathException37.addSuppressed((java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("German", (java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("Chinesisch (China)", (java.lang.Throwable) mathException45);
        mathException39.addSuppressed((java.lang.Throwable) mathException46);
        mathException17.addSuppressed((java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("KOR");
        mathException50.addSuppressed((java.lang.Throwable) mathException52);
        java.lang.Throwable[] throwableArray54 = mathException52.getSuppressed();
        mathException39.addSuppressed((java.lang.Throwable) mathException52);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(throwableArray54);
    }

    @Test
    public void test3753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3753");
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.List<java.util.Locale> localeList14 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 1, mathException6, (byte) 0, localeList14, 1225.0d };
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("de", objArray16);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", objArray16, (java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("");
        mathException36.addSuppressed((java.lang.Throwable) mathException38);
        java.lang.Object[] objArray40 = mathException36.getArguments();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale[] localeArray50 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList51 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList51, localeArray50);
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList51);
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 1, mathException45, (byte) 0, localeList53, 1225.0d };
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray55);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("");
        mathException56.addSuppressed((java.lang.Throwable) mathException58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException58);
        mathException36.addSuppressed((java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("Chinese (Taiwan)", objArray16, (java.lang.Throwable) mathException60);
        java.lang.String str63 = mathException60.toString();
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localeList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localeList53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.apache.commons.math.MathException: " + "'", str63, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test3754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3754");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.TDistribution tDistribution8 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl9 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory10 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution13 = distributionFactory10.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory10.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution16 = distributionFactory10.createTDistribution((double) 1L);
        double double17 = tDistribution16.getDegreesOfFreedom();
        tTestImpl9.setDistribution(tDistribution16);
        tDistribution16.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl21 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        tTestImpl7.setDistribution(tDistribution16);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        double double32 = org.apache.commons.math.stat.StatUtils.product(doubleArray25);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34, (double) '#');
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray25, doubleArray34);
        double[] doubleArray46 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = tTestImpl7.pairedTTest(doubleArray34, doubleArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory10);
        org.junit.Assert.assertNotNull(weibullDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution14);
        org.junit.Assert.assertNotNull(tDistribution16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 515.6999999999999d + "'", double48 == 515.6999999999999d);
    }

    @Test
    public void test3755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3755");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        char[] charArray14 = new char[] { ' ' };
        printWriter12.write(charArray14);
        printStream1.print(charArray14);
        printStream1.println("Chinese (Taiwan)");
        printStream1.write((int) '4');
        printStream1.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream24 = printStream1.append((java.lang.CharSequence) "Royaume-Uni");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ]");
        org.junit.Assert.assertNotNull(printStream24);
    }

    @Test
    public void test3756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3756");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double10 = poissonDistribution8.normalApproximateProbability((int) 'u');
        double double12 = poissonDistribution8.probability((double) (byte) 1);
        poissonDistribution8.setMean(117.0d);
        double double16 = poissonDistribution8.cumulativeProbability(3.941866060050112E-159d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.36787944117144233d + "'", double12 == 0.36787944117144233d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.5400882849875232E-51d + "'", double16 == 1.5400882849875232E-51d);
    }

    @Test
    public void test3757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3757");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setLanguage("German");
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale15.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder19 = builder13.setLocale(locale15);
        java.util.Locale.Builder builder20 = builder10.setLocale(locale15);
        java.util.Locale.Builder builder22 = builder10.addUnicodeLocaleAttribute("CHN");
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italienisch" + "'", str18, "Italienisch");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test3758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3758");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.println((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "tedesco");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: tedesco");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3759");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory27 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution30 = distributionFactory27.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution31 = distributionFactory27.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution33 = distributionFactory27.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution33);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl35 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.DistributionFactory distributionFactory36 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution39 = distributionFactory36.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution42 = distributionFactory36.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution45 = distributionFactory36.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution47 = distributionFactory36.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl48 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution47);
        org.apache.commons.math.distribution.TDistribution tDistribution49 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl50 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution49);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory51 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution54 = distributionFactory51.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution55 = distributionFactory51.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution57 = distributionFactory51.createTDistribution((double) 1L);
        double double58 = tDistribution57.getDegreesOfFreedom();
        tTestImpl50.setDistribution(tDistribution57);
        tDistribution57.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl62 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution57);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl63 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution57);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution57);
        tTestImpl48.setDistribution(tDistribution57);
        tTestImpl35.setDistribution(tDistribution57);
        tTestImpl34.setDistribution(tDistribution57);
        tTestImpl12.setDistribution(tDistribution57);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary70 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = tTestImpl12.tTest(Double.NEGATIVE_INFINITY, statisticalSummary70, 0.632120548780791d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.632120548780791");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory27);
        org.junit.Assert.assertNotNull(weibullDistribution30);
        org.junit.Assert.assertNotNull(normalDistribution31);
        org.junit.Assert.assertNotNull(tDistribution33);
        org.junit.Assert.assertNotNull(distributionFactory36);
        org.junit.Assert.assertNotNull(weibullDistribution39);
        org.junit.Assert.assertNotNull(fDistribution42);
        org.junit.Assert.assertNotNull(normalDistribution45);
        org.junit.Assert.assertNotNull(tDistribution47);
        org.junit.Assert.assertNotNull(distributionFactory51);
        org.junit.Assert.assertNotNull(weibullDistribution54);
        org.junit.Assert.assertNotNull(normalDistribution55);
        org.junit.Assert.assertNotNull(tDistribution57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
    }

    @Test
    public void test3760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3760");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale[] localeArray69 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 1, mathException64, (byte) 0, localeList72, 1225.0d };
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("de", objArray74);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", objArray74, (java.lang.Throwable) mathException78);
        java.io.PrintStream printStream80 = printStream57.format("", objArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream84 = printStream57.append((java.lang.CharSequence) "\u5fb7\u6587", 17, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 2147483647");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream80);
    }

    @Test
    public void test3761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3761");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        tDistribution22.setDegreesOfFreedom((double) (short) 10);
        tTestImpl15.setDistribution(tDistribution22);
        java.io.PrintStream printStream27 = new java.io.PrintStream("French (France)");
        printStream27.println((float) (short) -1);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale[] localeArray41 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.List<java.util.Locale> localeList44 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList42);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 1, mathException36, (byte) 0, localeList44, 1225.0d };
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", objArray46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("de", objArray46);
        java.io.PrintStream printStream49 = printStream27.printf(locale30, "hi!", objArray46);
        double[] doubleArray51 = new double[] { '#' };
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) '#');
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        printStream49.print((java.lang.Object) doubleArray51);
        double[] doubleArray59 = new double[] { '#' };
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray59);
        double double61 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray51, doubleArray59);
        double double62 = org.apache.commons.math.stat.StatUtils.sum(doubleArray51);
        double[] doubleArray64 = new double[] { '#' };
        double double65 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray64);
        double double68 = org.apache.commons.math.stat.StatUtils.variance(doubleArray64, 1, 0);
        double double70 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray64, (double) (byte) 100);
        double double71 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray64);
        double double72 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray51, doubleArray64);
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray64);
        double[] doubleArray75 = new double[] { '#' };
        double double76 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray75);
        double double77 = org.apache.commons.math.stat.StatUtils.variance(doubleArray75);
        double double78 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray75);
        double double79 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double double80 = org.apache.commons.math.stat.StatUtils.sum(doubleArray75);
        double double81 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double double83 = org.apache.commons.math.stat.StatUtils.variance(doubleArray75, 1225.0d);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray75);
        double double85 = org.apache.commons.math.stat.StatUtils.product(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = tTestImpl15.homoscedasticT(doubleArray64, doubleArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localeList44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1225.0d + "'", double60 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 35.0d + "'", double62 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1225.0d + "'", double65 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 35.0d + "'", double70 == 35.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 34.99999999999999d + "'", double71 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 3.5553480614894135d + "'", double73 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1225.0d + "'", double76 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 34.99999999999999d + "'", double78 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 3.5553480614894135d + "'", double79 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 35.0d + "'", double80 == 35.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 3.5553480614894135d + "'", double81 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 35.0d + "'", double84 == 35.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 35.0d + "'", double85 == 35.0d);
    }

    @Test
    public void test3762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3762");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.lang.Object obj10 = null;
        printWriter9.println(obj10);
        printWriter9.write((int) (short) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        char[] charArray21 = new char[] { ' ' };
        printWriter19.write(charArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printWriter19.println(charArray30);
        printWriter9.write(charArray30, (int) (byte) 0, 1);
        printStream1.print(charArray30);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.println((float) (short) -1);
        printStream40.println(' ');
        printStream40.print(false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream40);
        java.io.PrintWriter printWriter49 = printWriter47.append(' ');
        java.io.PrintWriter printWriter51 = printWriter49.append('u');
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale[] localeArray64 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList65);
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 1, mathException59, (byte) 0, localeList67, 1225.0d };
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("de", objArray69);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("", objArray69, (java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("und", objArray69, (java.lang.Throwable) mathException76);
        java.io.PrintWriter printWriter78 = printWriter49.printf("Deutsch", objArray69);
        java.io.PrintStream printStream79 = printStream1.printf(locale37, "Deutsch", objArray69);
        printStream1.print("");
        printStream1.close();
        java.io.PrintWriter printWriter84 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printStream79);
    }

    @Test
    public void test3763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3763");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.write((int) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream10 = new java.io.PrintStream("zh-CN");
        printStream10.print('a');
        java.io.PrintStream printStream14 = new java.io.PrintStream("French (France)");
        printStream14.print((long) ' ');
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        byte[] byteArray19 = new byte[] {};
        printStream18.write(byteArray19);
        printStream14.write(byteArray19);
        printStream10.write(byteArray19);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        printStream24.println(' ');
        printStream24.print(false);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale32.getDisplayVariant();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        boolean boolean36 = locale35.hasExtensions();
        java.lang.String str37 = locale32.getDisplayLanguage(locale35);
        boolean boolean38 = locale32.hasExtensions();
        java.lang.Object[] objArray40 = null;
        java.io.PrintWriter printWriter41 = printWriter31.printf(locale32, "German", objArray40);
        printWriter31.print((long) (byte) 10);
        printWriter31.print("");
        java.io.PrintStream printStream47 = new java.io.PrintStream("French (France)");
        printStream47.println((float) (short) -1);
        java.io.PrintStream printStream50 = new java.io.PrintStream((java.io.OutputStream) printStream47);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream47);
        char[] charArray53 = new char[] { ' ' };
        printWriter51.write(charArray53);
        java.io.PrintStream printStream56 = new java.io.PrintStream("French (France)");
        printStream56.println((float) (short) -1);
        java.io.PrintStream printStream59 = new java.io.PrintStream((java.io.OutputStream) printStream56);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream56);
        char[] charArray62 = new char[] { ' ' };
        printWriter60.write(charArray62);
        printWriter51.println(charArray62);
        printWriter31.print(charArray62);
        printStream10.println(charArray62);
        printStream8.print(charArray62);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Deutsch" + "'", str37, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[ ]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ ]");
    }

    @Test
    public void test3764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3764");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) (-1.0f), 3.5553480614894135d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution(1.0000000000000402d, 0.24999999999999964d);
        weibullDistribution12.setShape((double) (short) 100);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
    }

    @Test
    public void test3765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3765");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.print((long) ' ');
        java.io.PrintStream printStream12 = new java.io.PrintStream("French (France)");
        byte[] byteArray13 = new byte[] {};
        printStream12.write(byteArray13);
        printStream8.write(byteArray13);
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        printStream18.println(' ');
        printStream18.print(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = locale26.getDisplayLanguage(locale29);
        boolean boolean32 = locale26.hasExtensions();
        java.lang.Object[] objArray34 = null;
        java.io.PrintWriter printWriter35 = printWriter25.printf(locale26, "German", objArray34);
        java.util.Locale locale36 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter25.printf(locale36, "zh-CN", objArray52);
        java.io.PrintStream printStream56 = printStream8.format("Chinese (Taiwan)", objArray52);
        java.io.PrintWriter printWriter57 = printWriter5.printf("Franz\366sisch (Frankreich)", objArray52);
        boolean boolean58 = printWriter57.checkError();
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Deutsch" + "'", str31, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3766");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter2.println((int) ' ');
    }

    @Test
    public void test3767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3767");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getLanguage();
        java.util.Locale locale6 = locale3.stripExtensions();
        java.lang.String str7 = locale6.getVariant();
        java.lang.String str8 = locale6.getDisplayLanguage();
        java.lang.String str9 = locale6.getISO3Language();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale12.getDisplayName();
        java.lang.String str14 = locale10.getDisplayLanguage(locale12);
        java.lang.String str15 = locale6.getDisplayCountry(locale10);
        java.lang.String str16 = locale0.getDisplayCountry(locale6);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        java.util.Locale locale20 = locale17.stripExtensions();
        java.lang.String str21 = locale0.getDisplayScript(locale17);
        java.lang.String str22 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "FRA" + "'", str1, "FRA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "French (France)" + "'", str2, "French (France)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "de" + "'", str5, "de");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "German" + "'", str8, "German");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "deu" + "'", str9, "deu");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "German" + "'", str13, "German");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Frankreich" + "'", str16, "Frankreich");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fr_FR" + "'", str22, "fr_FR");
    }

    @Test
    public void test3768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3768");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale6.getDisplayLanguage(locale7);
        java.lang.String str10 = locale7.getScript();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale7);
        java.util.Locale locale12 = locale7.stripExtensions();
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Italienisch" + "'", str9, "Italienisch");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test3769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3769");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("German");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test3770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3770");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale[] localeArray19 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList20);
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 1, mathException14, (byte) 0, localeList22, 1225.0d };
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("de", objArray24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("Chinesisch (China)", objArray24);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray24);
        java.io.PrintWriter printWriter29 = printWriter6.printf("org.apache.commons.math.MathException: ", objArray24);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter29);
    }

    @Test
    public void test3771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3771");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, 0, 1);
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) (short) 1, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.5553480614894135d + "'", double12 == 3.5553480614894135d);
    }

    @Test
    public void test3772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3772");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution10 = distributionFactory0.createExponentialDistribution((double) 1.0f);
        exponentialDistribution10.setMean(0.9999999999999989d);
        double double13 = exponentialDistribution10.getMean();
        // The following exception was thrown during execution in test generation
        try {
            exponentialDistribution10.setMean(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(exponentialDistribution10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9999999999999989d + "'", double13 == 0.9999999999999989d);
    }

    @Test
    public void test3773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3773");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        tDistribution22.setDegreesOfFreedom(100.0d);
        tDistribution22.setDegreesOfFreedom(0.003594758625082406d);
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double30 = tTestImpl15.tTest(0.9924226248244282d, statisticalSummary29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
    }

    @Test
    public void test3774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3774");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(true);
        printStream1.print((double) (-1L));
        printStream1.print((int) (short) -1);
    }

    @Test
    public void test3775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3775");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh-CN");
        printStream1.print('a');
        printStream1.print(1);
        printStream1.print((double) (short) -1);
    }

    @Test
    public void test3776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3776");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory30 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution33 = distributionFactory30.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution36 = distributionFactory30.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution39 = distributionFactory30.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution41 = distributionFactory30.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tDistribution41.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl45 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl46 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        tTestImpl12.setDistribution(tDistribution41);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double55 = org.apache.commons.math.stat.StatUtils.product(doubleArray50);
        double double56 = org.apache.commons.math.stat.StatUtils.sum(doubleArray50);
        double double58 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray50, (double) (short) 100);
        double double59 = org.apache.commons.math.stat.StatUtils.sum(doubleArray50);
        double double60 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray50);
        double double62 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray50, (double) 100.0f);
        double double63 = org.apache.commons.math.stat.StatUtils.mean(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = tTestImpl12.tTest((double) 52, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory30);
        org.junit.Assert.assertNotNull(weibullDistribution33);
        org.junit.Assert.assertNotNull(fDistribution36);
        org.junit.Assert.assertNotNull(normalDistribution39);
        org.junit.Assert.assertNotNull(tDistribution41);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 34.99999999999999d + "'", double53 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3.5553480614894135d + "'", double54 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 35.0d + "'", double59 == 35.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 34.99999999999999d + "'", double60 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 35.0d + "'", double62 == 35.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
    }

    @Test
    public void test3777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3777");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.lang.Object obj10 = null;
        printWriter9.println(obj10);
        printWriter9.write((int) (short) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        char[] charArray21 = new char[] { ' ' };
        printWriter19.write(charArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printWriter19.println(charArray30);
        printWriter9.write(charArray30, (int) (byte) 0, 1);
        printStream1.print(charArray30);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream40 = printStream1.append('#');
        printStream1.print((float) 17);
        java.io.PrintStream printStream45 = new java.io.PrintStream("French (France)");
        printStream45.println((float) (short) -1);
        printStream45.println(' ');
        printStream45.print(false);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream45);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        boolean boolean54 = locale53.hasExtensions();
        java.lang.String str55 = locale53.getDisplayVariant();
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        boolean boolean57 = locale56.hasExtensions();
        java.lang.String str58 = locale53.getDisplayLanguage(locale56);
        boolean boolean59 = locale53.hasExtensions();
        java.lang.Object[] objArray61 = null;
        java.io.PrintWriter printWriter62 = printWriter52.printf(locale53, "German", objArray61);
        printWriter52.print((long) (byte) 10);
        java.io.PrintWriter printWriter66 = printWriter52.append((java.lang.CharSequence) "org.apache.commons.math.MathException: de");
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter((java.io.Writer) printWriter66, true);
        java.util.Locale.Builder builder69 = new java.util.Locale.Builder();
        java.util.Locale locale70 = builder69.build();
        java.io.PrintStream printStream74 = new java.io.PrintStream("zho");
        java.lang.String[] strArray78 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray78);
        java.io.PrintStream printStream81 = printStream74.printf("Italienisch", (java.lang.Object[]) strArray78);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("KOR", (java.lang.Object[]) strArray78);
        java.io.PrintWriter printWriter83 = printWriter66.printf(locale70, "hi!", (java.lang.Object[]) strArray78);
        java.io.PrintStream printStream84 = printStream1.format("org.apache.commons.math.MathException: ITA", (java.lang.Object[]) strArray78);
        printStream1.close();
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Deutsch" + "'", str58, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(printStream84);
    }

    @Test
    public void test3778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3778");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale.Builder builder13 = builder10.addUnicodeLocaleAttribute("german");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setLanguage("francese (Francia)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: francese (Francia) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "german");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3779");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution29 = distributionFactory23.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory23.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory23.createTDistribution((double) 100L);
        tDistribution34.setDegreesOfFreedom(52.0d);
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory38 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution41 = distributionFactory38.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution44 = distributionFactory38.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution47 = distributionFactory38.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution49 = distributionFactory38.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl50 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution49);
        org.apache.commons.math.distribution.TDistribution tDistribution51 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl52 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution51);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory53 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution56 = distributionFactory53.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution57 = distributionFactory53.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution59 = distributionFactory53.createTDistribution((double) 1L);
        double double60 = tDistribution59.getDegreesOfFreedom();
        tTestImpl52.setDistribution(tDistribution59);
        tDistribution59.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl65 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl66 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        tTestImpl50.setDistribution(tDistribution59);
        org.apache.commons.math.distribution.TDistribution tDistribution68 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl69 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution68);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory70 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution73 = distributionFactory70.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution74 = distributionFactory70.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution76 = distributionFactory70.createTDistribution((double) 1L);
        double double77 = tDistribution76.getDegreesOfFreedom();
        tTestImpl69.setDistribution(tDistribution76);
        double double79 = tDistribution76.getDegreesOfFreedom();
        tTestImpl50.setDistribution(tDistribution76);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory81 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution84 = distributionFactory81.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution85 = distributionFactory81.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution86 = distributionFactory81.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution88 = distributionFactory81.createTDistribution((double) (byte) 1);
        tTestImpl50.setDistribution(tDistribution88);
        tTestImpl1.setDistribution(tDistribution88);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary91 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary92 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double93 = tTestImpl1.homoscedasticTTest(statisticalSummary91, statisticalSummary92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(fDistribution29);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertNotNull(distributionFactory38);
        org.junit.Assert.assertNotNull(weibullDistribution41);
        org.junit.Assert.assertNotNull(fDistribution44);
        org.junit.Assert.assertNotNull(normalDistribution47);
        org.junit.Assert.assertNotNull(tDistribution49);
        org.junit.Assert.assertNotNull(distributionFactory53);
        org.junit.Assert.assertNotNull(weibullDistribution56);
        org.junit.Assert.assertNotNull(normalDistribution57);
        org.junit.Assert.assertNotNull(tDistribution59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory70);
        org.junit.Assert.assertNotNull(weibullDistribution73);
        org.junit.Assert.assertNotNull(normalDistribution74);
        org.junit.Assert.assertNotNull(tDistribution76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory81);
        org.junit.Assert.assertNotNull(weibullDistribution84);
        org.junit.Assert.assertNotNull(normalDistribution85);
        org.junit.Assert.assertNotNull(normalDistribution86);
        org.junit.Assert.assertNotNull(tDistribution88);
    }

    @Test
    public void test3780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3780");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution((double) 10.0f, 0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution17 = distributionFactory0.createExponentialDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution20 = distributionFactory0.createBinomialDistribution(120, 0.0d);
        binomialDistribution20.setProbabilityOfSuccess(0.0d);
        binomialDistribution20.setNumberOfTrials(2147483647);
        // The following exception was thrown during execution in test generation
        try {
            binomialDistribution20.setProbabilityOfSuccess((double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution15);
        org.junit.Assert.assertNotNull(exponentialDistribution17);
        org.junit.Assert.assertNotNull(binomialDistribution20);
    }

    @Test
    public void test3781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3781");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream11.println(100.0d);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream11, false, "org.apache.commons.math.MathException: zh_TW");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: zh_TW");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3782");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Italienisch", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=italienisch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3783");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 100L);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.print(true);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        boolean boolean17 = locale16.hasExtensions();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale[] localeArray28 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList29);
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 1, mathException23, (byte) 0, localeList31, 1225.0d };
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("");
        mathException34.addSuppressed((java.lang.Throwable) mathException36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException36);
        java.lang.Throwable[] throwableArray39 = mathException36.getSuppressed();
        java.io.PrintStream printStream40 = printStream1.format(locale16, "JPN", (java.lang.Object[]) throwableArray39);
        java.io.PrintStream printStream42 = printStream40.append((java.lang.CharSequence) "\u65e5\u6587");
        printStream42.println(false);
        java.io.PrintStream printStream46 = printStream42.append((java.lang.CharSequence) "Korean");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printStream46);
    }

    @Test
    public void test3784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3784");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        tDistribution6.setDegreesOfFreedom(100.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl9 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = tTestImpl9.tTest(statisticalSummary10, statisticalSummary11, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
    }

    @Test
    public void test3785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3785");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory27 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution30 = distributionFactory27.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution31 = distributionFactory27.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution33 = distributionFactory27.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution35 = distributionFactory27.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory27.createTDistribution((double) (byte) 1);
        tTestImpl12.setDistribution(tDistribution37);
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.println((float) (short) -1);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale[] localeArray54 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.util.Locale>) localeList55);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 1, mathException49, (byte) 0, localeList57, 1225.0d };
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("de", objArray59);
        java.io.PrintStream printStream62 = printStream40.printf(locale43, "hi!", objArray59);
        double[] doubleArray64 = new double[] { '#' };
        double double65 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray64);
        double double66 = org.apache.commons.math.stat.StatUtils.variance(doubleArray64);
        double double68 = org.apache.commons.math.stat.StatUtils.variance(doubleArray64, (double) '#');
        double double69 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray64);
        printStream62.print((java.lang.Object) doubleArray64);
        double[] doubleArray72 = new double[] { '#' };
        double double73 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray72);
        double double74 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray64, doubleArray72);
        double double75 = org.apache.commons.math.stat.StatUtils.sum(doubleArray64);
        double[] doubleArray77 = new double[] { '#' };
        double double78 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray77);
        double double81 = org.apache.commons.math.stat.StatUtils.variance(doubleArray77, 1, 0);
        double double83 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray77, (double) (byte) 100);
        double double84 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray77);
        double double85 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray64, doubleArray77);
        double double88 = org.apache.commons.math.stat.StatUtils.sum(doubleArray77, (int) (byte) 0, (int) (byte) 1);
        double[] doubleArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = tTestImpl12.pairedTTest(doubleArray77, doubleArray89, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory27);
        org.junit.Assert.assertNotNull(weibullDistribution30);
        org.junit.Assert.assertNotNull(normalDistribution31);
        org.junit.Assert.assertNotNull(tDistribution33);
        org.junit.Assert.assertNotNull(chiSquaredDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1225.0d + "'", double65 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1225.0d + "'", double69 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1225.0d + "'", double73 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 35.0d + "'", double75 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[35.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1225.0d + "'", double78 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 35.0d + "'", double83 == 35.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 34.99999999999999d + "'", double84 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 35.0d + "'", double88 == 35.0d);
    }

    @Test
    public void test3786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3786");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl20 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        tTestImpl12.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory24 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution27 = distributionFactory24.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution28 = distributionFactory24.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution30 = distributionFactory24.createTDistribution((double) 1L);
        double double31 = tDistribution30.getDegreesOfFreedom();
        tTestImpl23.setDistribution(tDistribution30);
        double double33 = tDistribution30.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution30);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double39 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.product(doubleArray36);
        double double42 = org.apache.commons.math.stat.StatUtils.sum(doubleArray36);
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray36);
        double[] doubleArray45 = new double[] { '#' };
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45, (double) '#');
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double51 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray36, doubleArray45);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45, (double) '#');
        org.apache.commons.math.distribution.DistributionFactory distributionFactory55 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution58 = distributionFactory55.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution59 = distributionFactory55.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution61 = distributionFactory55.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl62 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution61);
        double[] doubleArray66 = new double[] { 'u', (short) 100 };
        double double67 = tTestImpl62.tTest(10.0d, doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = tTestImpl12.tTest(doubleArray45, doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(distributionFactory24);
        org.junit.Assert.assertNotNull(weibullDistribution27);
        org.junit.Assert.assertNotNull(normalDistribution28);
        org.junit.Assert.assertNotNull(tDistribution30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 34.99999999999999d + "'", double39 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(distributionFactory55);
        org.junit.Assert.assertNotNull(weibullDistribution58);
        org.junit.Assert.assertNotNull(normalDistribution59);
        org.junit.Assert.assertNotNull(tDistribution61);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[117.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.054800971425164935d + "'", double67 == 0.054800971425164935d);
    }

    @Test
    public void test3787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3787");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        tTestImpl12.setDistribution(tDistribution21);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31, (double) '#');
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double40 = org.apache.commons.math.stat.StatUtils.mean(doubleArray31, (int) (short) 0, (int) (byte) 0);
        double double41 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray28, doubleArray31);
        double[] doubleArray43 = new double[] { '#' };
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray43);
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double double49 = org.apache.commons.math.stat.StatUtils.sum(doubleArray43);
        double double50 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray52 = new double[] { '#' };
        double double53 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray52);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray52);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray52, (double) '#');
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray52);
        double double58 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray43, doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = tTestImpl12.tTest(doubleArray31, doubleArray52, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 34.99999999999999d + "'", double46 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 3.5553480614894135d + "'", double47 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1225.0d + "'", double53 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1225.0d + "'", double57 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test3788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3788");
        java.io.PrintStream printStream1 = new java.io.PrintStream("KOR");
    }

    @Test
    public void test3789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3789");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.write((int) (short) -1);
        java.io.PrintStream printStream9 = printStream1.append('x');
        printStream9.println((float) (byte) -1);
        org.junit.Assert.assertNotNull(printStream9);
    }

    @Test
    public void test3790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3790");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution((double) 10.0f, 0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution17 = distributionFactory0.createExponentialDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution20 = distributionFactory0.createBinomialDistribution(120, 0.0d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution23 = distributionFactory0.createBinomialDistribution(10, 0.632120548780791d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution26 = distributionFactory0.createGammaDistribution((double) ' ', (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: beta must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution15);
        org.junit.Assert.assertNotNull(exponentialDistribution17);
        org.junit.Assert.assertNotNull(binomialDistribution20);
        org.junit.Assert.assertNotNull(binomialDistribution23);
    }

    @Test
    public void test3791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3791");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        cauchyDistribution6.setScale((double) (short) 1);
        double double10 = cauchyDistribution6.inverseCumulativeProbability((double) (short) 0);
        cauchyDistribution6.setMedian((double) 1.0f);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.NEGATIVE_INFINITY + "'", double10 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test3792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3792");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, (double) '#');
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double37 = org.apache.commons.math.stat.StatUtils.mean(doubleArray28, (int) (short) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = tTestImpl15.tTest(0.632120548780791d, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test3793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3793");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("French");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test3794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3794");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        printWriter8.print("");
        printWriter8.print((long) (short) 100);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, (double) '#');
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.sum(doubleArray26);
        double double34 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray26, (double) 1.0f);
        printWriter8.print((java.lang.Object) doubleArray26);
        java.io.PrintWriter printWriter37 = printWriter8.append('4');
        printWriter8.print((float) 52);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertNotNull(printWriter37);
    }

    @Test
    public void test3795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3795");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        printStream7.println(' ');
        printStream7.print(false);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream7);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String str17 = locale15.getDisplayVariant();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale15.getDisplayLanguage(locale18);
        boolean boolean21 = locale15.hasExtensions();
        java.lang.Object[] objArray23 = null;
        java.io.PrintWriter printWriter24 = printWriter14.printf(locale15, "German", objArray23);
        printWriter14.print((long) (byte) 10);
        printWriter14.print("");
        java.io.PrintStream printStream30 = new java.io.PrintStream("French (France)");
        printStream30.println((float) (short) -1);
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream30);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream30);
        char[] charArray36 = new char[] { ' ' };
        printWriter34.write(charArray36);
        java.io.PrintStream printStream39 = new java.io.PrintStream("French (France)");
        printStream39.println((float) (short) -1);
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream39);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        char[] charArray45 = new char[] { ' ' };
        printWriter43.write(charArray45);
        printWriter34.println(charArray45);
        printWriter14.print(charArray45);
        printStream1.println(charArray45);
        java.io.PrintStream printStream51 = printStream1.append('a');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream54 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "chinois (Chine)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: chinois (Chine)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Deutsch" + "'", str20, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ ]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ ]");
        org.junit.Assert.assertNotNull(printStream51);
    }

    @Test
    public void test3796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3796");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) (byte) 1);
        double double10 = poissonDistribution8.normalApproximateProbability((int) (short) 0);
        poissonDistribution8.setMean(117.0d);
        double double14 = poissonDistribution8.cumulativeProbability(0.14913821881548506d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.308537538725987d + "'", double10 == 0.308537538725987d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.5400882849875232E-51d + "'", double14 == 1.5400882849875232E-51d);
    }

    @Test
    public void test3797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3797");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getScale();
        weibullDistribution3.setScale((double) 'x');
        double double7 = weibullDistribution3.getScale();
        weibullDistribution3.setScale(1.0d);
        weibullDistribution3.setShape((double) 120);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 120.0d + "'", double7 == 120.0d);
    }

    @Test
    public void test3798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3798");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 1, mathException5, (byte) 0, localeList13, 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("");
        mathException16.addSuppressed((java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException18);
        java.lang.String[] strArray23 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("allemand", (java.lang.Object[]) strArray23);
        mathException20.addSuppressed((java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("");
        mathException44.addSuppressed((java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("FRA", (java.lang.Throwable) mathException46);
        mathException25.addSuppressed((java.lang.Throwable) mathException49);
        java.lang.String str51 = mathException49.getPattern();
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FRA" + "'", str51, "FRA");
    }

    @Test
    public void test3799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3799");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setRegion("de");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setRegion("JPN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: JPN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test3800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3800");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) (byte) 10, 0.054800971425164935d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution8 = distributionFactory0.createExponentialDistribution((double) 35);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution11 = distributionFactory0.createCauchyDistribution((double) 1L, 1.0137771196302974E-7d);
        // The following exception was thrown during execution in test generation
        try {
            cauchyDistribution11.setScale((double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(exponentialDistribution8);
        org.junit.Assert.assertNotNull(cauchyDistribution11);
    }

    @Test
    public void test3801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3801");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        java.lang.String str11 = locale4.getISO3Language();
        java.util.Set<java.lang.String> strSet12 = locale4.getUnicodeLocaleAttributes();
        java.lang.Object obj13 = locale4.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "deu" + "'", str11, "deu");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "de");
    }

    @Test
    public void test3802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3802");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution9 = distributionFactory0.createBinomialDistribution((int) (byte) 10, 0.36787944117144233d);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution13 = distributionFactory0.createHypergeometricDistribution((int) '4', (int) (short) 0, (int) (byte) 0);
        int int14 = hypergeometricDistribution13.getSampleSize();
        int int15 = hypergeometricDistribution13.getSampleSize();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(binomialDistribution9);
        org.junit.Assert.assertNotNull(hypergeometricDistribution13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3803");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize((int) (byte) 10);
        double double15 = hypergeometricDistribution10.cumulativeProbability((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            hypergeometricDistribution10.setSampleSize((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: sample size must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test3804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3804");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution(120.0d);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution10 = distributionFactory0.createPoissonDistribution(117.0d);
        double double12 = poissonDistribution10.normalApproximateProbability((int) (byte) 1);
        double double15 = poissonDistribution10.cumulativeProbability((int) (short) -1, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = poissonDistribution10.cumulativeProbability((int) 'x', 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertNotNull(poissonDistribution10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.6653345369377348E-15d + "'", double12 == 1.6653345369377348E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2.2288027128982685E-37d + "'", double15 == 2.2288027128982685E-37d);
    }

    @Test
    public void test3805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3805");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.MathException: de");
        printStream1.print('u');
        java.util.Locale locale4 = null;
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        printStream7.println(' ');
        printStream7.print(false);
        printStream7.println((float) '#');
        printStream7.println((float) 100L);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream7, true);
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale21 = java.util.Locale.US;
        java.util.Locale.setDefault(category20, locale21);
        java.io.PrintStream printStream25 = new java.io.PrintStream("French (France)");
        printStream25.println((float) (short) -1);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream25);
        printStream28.println("zh");
        printStream28.print("hi!");
        printStream28.close();
        java.util.Locale locale34 = null;
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream37 = printStream28.format(locale34, "France", (java.lang.Object[]) strArray36);
        java.io.PrintStream printStream38 = printStream7.printf(locale21, "Italian", (java.lang.Object[]) strArray36);
        java.io.PrintStream printStream39 = printStream1.printf(locale4, "German", (java.lang.Object[]) strArray36);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream42 = printStream1.append((java.lang.CharSequence) "USA");
        printStream42.write(2147483646);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(printStream42);
    }

    @Test
    public void test3806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3806");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution13 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution15 = distributionFactory0.createPoissonDistribution(100.0d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution18 = distributionFactory0.createCauchyDistribution((double) 'u', (double) (short) 1);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory0.createChiSquareDistribution(0.36787944117144233d);
        double double21 = chiSquaredDistribution20.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution13);
        org.junit.Assert.assertNotNull(poissonDistribution15);
        org.junit.Assert.assertNotNull(cauchyDistribution18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.36787944117144233d + "'", double21 == 0.36787944117144233d);
    }

    @Test
    public void test3807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3807");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        weibullDistribution9.setShape((double) 'x');
        weibullDistribution9.setScale(0.03172551743055352d);
        weibullDistribution9.setShape((double) 2147483646);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
    }

    @Test
    public void test3808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3808");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (short) 100);
        double double10 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, 0, 0);
        double double15 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double[] doubleArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 34.99999999999999d + "'", double11 == 34.99999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
    }

    @Test
    public void test3809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3809");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        double double13 = normalDistribution12.getStandardDeviation();
        double double14 = normalDistribution12.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test3810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3810");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        printWriter8.print("");
        printWriter8.print((long) (short) 100);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, (double) '#');
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.sum(doubleArray26);
        double double34 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray26, (double) 1.0f);
        printWriter8.print((java.lang.Object) doubleArray26);
        printWriter8.write(35);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
    }

    @Test
    public void test3811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3811");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.print(true);
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream4);
        printStream7.print((int) (byte) 1);
    }

    @Test
    public void test3812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3812");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        printWriter8.flush();
        boolean boolean12 = printWriter8.checkError();
        printWriter8.write("org.apache.commons.math.MathException");
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray19);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale[] localeArray35 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList36);
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 1, mathException30, (byte) 0, localeList38, 1225.0d };
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("de", objArray40);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("", objArray40, (java.lang.Throwable) mathException44);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("und", objArray40, (java.lang.Throwable) mathException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("\uc601\uc5b4", (java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray19, (java.lang.Throwable) mathException49);
        java.io.PrintWriter printWriter52 = printWriter8.printf("Chinesisch (China)", (java.lang.Object[]) strArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter56 = printWriter52.append((java.lang.CharSequence) "China", (int) 'x', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter52);
    }

    @Test
    public void test3813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3813");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        java.util.Locale locale32 = java.util.Locale.UK;
        printWriter5.println((java.lang.Object) locale32);
        boolean boolean34 = locale32.hasExtensions();
        java.util.Set<java.lang.String> strSet35 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale locale37 = builder36.build();
        java.util.Locale.Builder builder39 = builder36.setScript("");
        java.util.Locale locale40 = builder39.build();
        java.lang.String str41 = locale32.getDisplayCountry(locale40);
        java.lang.String str42 = locale40.toString();
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "United Kingdom" + "'", str41, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test3814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3814");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) 'u', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 34.99999999999999d + "'", double3 == 34.99999999999999d);
    }

    @Test
    public void test3815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3815");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 3.941866060050112E-159d, 97, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test3816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3816");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.println("zh");
        printStream4.print("hi!");
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.print((long) ' ');
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        byte[] byteArray21 = new byte[] {};
        printStream20.write(byteArray21);
        printStream16.write(byteArray21);
        printStream10.write(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            printStream4.write(byteArray21, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
    }

    @Test
    public void test3817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3817");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        java.lang.String[] strArray42 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter44 = printWriter39.format("French", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter39, false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter39);
        java.io.PrintWriter printWriter49 = printWriter47.append('a');
        printWriter49.print((float) 17);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printWriter49);
    }

    @Test
    public void test3818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3818");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayLanguage(locale1);
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale locale6 = builder5.build();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Locale locale8 = locale6.stripExtensions();
        java.lang.String str9 = locale0.getDisplayName(locale6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italienisch" + "'", str3, "Italienisch");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Italian" + "'", str9, "Italian");
    }

    @Test
    public void test3819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3819");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        java.io.PrintStream printStream9 = new java.io.PrintStream("French (France)");
        printStream9.println((float) (short) -1);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale[] localeArray23 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList24);
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 1, mathException18, (byte) 0, localeList26, 1225.0d };
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("de", objArray28);
        java.io.PrintStream printStream31 = printStream9.printf(locale12, "hi!", objArray28);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, (double) '#');
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        printStream31.print((java.lang.Object) doubleArray33);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray33, doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray41);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, Double.NEGATIVE_INFINITY);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test3820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3820");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        java.io.PrintWriter printWriter22 = printWriter8.append((java.lang.CharSequence) "org.apache.commons.math.MathException: de");
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter22, true);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale locale26 = builder25.build();
        java.io.PrintStream printStream30 = new java.io.PrintStream("zho");
        java.lang.String[] strArray34 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray34);
        java.io.PrintStream printStream37 = printStream30.printf("Italienisch", (java.lang.Object[]) strArray34);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("KOR", (java.lang.Object[]) strArray34);
        java.io.PrintWriter printWriter39 = printWriter22.printf(locale26, "hi!", (java.lang.Object[]) strArray34);
        printWriter22.write("USA");
        printWriter22.println(false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printWriter39);
    }

    @Test
    public void test3821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3821");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution9 = distributionFactory0.createBinomialDistribution((int) (byte) 10, 0.36787944117144233d);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution13 = distributionFactory0.createHypergeometricDistribution((int) '4', (int) (short) 0, (int) (byte) 0);
        hypergeometricDistribution13.setPopulationSize((int) 'x');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(binomialDistribution9);
        org.junit.Assert.assertNotNull(hypergeometricDistribution13);
    }

    @Test
    public void test3822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3822");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        java.lang.String[] strArray42 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter44 = printWriter39.format("French", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter39, false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter39);
        java.io.PrintWriter printWriter49 = printWriter39.append('4');
        printWriter39.print((long) 0);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Locale[] localeArray63 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList64 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList64, localeArray63);
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.util.Locale>) localeList64);
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 1, mathException58, (byte) 0, localeList66, 1225.0d };
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", objArray68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("de", objArray68);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("", objArray68, (java.lang.Throwable) mathException72);
        java.io.PrintWriter printWriter74 = printWriter39.format("italien", objArray68);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter74);
    }

    @Test
    public void test3823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3823");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "Canada");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Canada");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3824");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getScale();
        weibullDistribution3.setScale((double) 'x');
        double double7 = weibullDistribution3.getScale();
        weibullDistribution3.setScale(1.0d);
        double double10 = weibullDistribution3.getShape();
        weibullDistribution3.setShape((double) '#');
        double double13 = weibullDistribution3.getShape();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 120.0d + "'", double7 == 120.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
    }

    @Test
    public void test3825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3825");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        hypergeometricDistribution10.setSampleSize((int) (short) 1);
        int int13 = hypergeometricDistribution10.getSampleSize();
        int int14 = hypergeometricDistribution10.getSampleSize();
        double double16 = hypergeometricDistribution10.probability(2147483646);
        int int17 = hypergeometricDistribution10.getSampleSize();
        double double19 = hypergeometricDistribution10.cumulativeProbability(0.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.029999999999999995d + "'", double19 == 0.029999999999999995d);
    }

    @Test
    public void test3826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3826");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray11 = new double[] { 'u', (short) 100 };
        double double12 = tTestImpl7.tTest(10.0d, doubleArray11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        org.apache.commons.math.distribution.TDistribution tDistribution26 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution26);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory28 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution31 = distributionFactory28.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory28.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory28.createTDistribution((double) 1L);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl27.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        tTestImpl25.setDistribution(tDistribution34);
        tTestImpl7.setDistribution(tDistribution34);
        double[] doubleArray45 = new double[] { '#' };
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray45);
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double50 = org.apache.commons.math.stat.StatUtils.sum(doubleArray45);
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double[] doubleArray53 = new double[] { '#' };
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray53);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray53);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray53);
        double double59 = org.apache.commons.math.stat.StatUtils.sum(doubleArray53);
        double double61 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray53, (double) (short) 100);
        double double62 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray45, doubleArray53);
        double[] doubleArray64 = new double[] { '#' };
        double double65 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray64);
        double double66 = org.apache.commons.math.stat.StatUtils.variance(doubleArray64);
        double double67 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray64);
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray64);
        double double69 = org.apache.commons.math.stat.StatUtils.product(doubleArray64);
        double double70 = org.apache.commons.math.stat.StatUtils.sum(doubleArray64);
        double double71 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray64);
        double double74 = org.apache.commons.math.stat.StatUtils.product(doubleArray64, 0, 1);
        double double77 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray64, 10, 2147483647);
        double double78 = org.apache.commons.math.stat.StatUtils.product(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = tTestImpl7.tTest(doubleArray53, doubleArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[117.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.054800971425164935d + "'", double12 == 0.054800971425164935d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(distributionFactory28);
        org.junit.Assert.assertNotNull(weibullDistribution31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 34.99999999999999d + "'", double48 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 3.5553480614894135d + "'", double49 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.5553480614894135d + "'", double51 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 34.99999999999999d + "'", double56 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 3.5553480614894135d + "'", double57 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 35.0d + "'", double59 == 35.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1225.0d + "'", double65 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 34.99999999999999d + "'", double67 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 3.5553480614894135d + "'", double68 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 35.0d + "'", double69 == 35.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 35.0d + "'", double70 == 35.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 34.99999999999999d + "'", double71 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 35.0d + "'", double74 == 35.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 35.0d + "'", double78 == 35.0d);
    }

    @Test
    public void test3827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3827");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream57.println((long) 2147483647);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tedesco" + "'", str31, "tedesco");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test3828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3828");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.print('x');
        printWriter8.println((long) (byte) 100);
        printWriter8.println((float) 100L);
        printWriter8.print('4');
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.Writer) printWriter8, true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
    }

    @Test
    public void test3829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3829");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        double double21 = tDistribution19.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = tDistribution19.inverseCumulativeProbability((double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
    }

    @Test
    public void test3830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3830");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 1, (byte) 0, (byte) 10, (byte) -1 };
        printStream23.write(byteArray29);
        java.io.PrintStream printStream32 = new java.io.PrintStream("French (France)");
        printStream32.println((float) (short) -1);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream32);
        java.io.PrintStream printStream37 = new java.io.PrintStream("French (France)");
        printStream37.println((float) (short) -1);
        printStream37.println(' ');
        printStream37.print(false);
        printStream37.println((float) '#');
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream37, true);
        java.io.PrintStream printStream49 = new java.io.PrintStream("French (France)");
        printStream49.println((float) (short) -1);
        java.io.PrintStream printStream52 = new java.io.PrintStream((java.io.OutputStream) printStream49);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.OutputStream) printStream49);
        java.lang.Object obj54 = null;
        printWriter53.println(obj54);
        printWriter53.write((int) (short) 1);
        java.io.PrintStream printStream59 = new java.io.PrintStream("French (France)");
        printStream59.println((float) (short) -1);
        java.io.PrintStream printStream62 = new java.io.PrintStream((java.io.OutputStream) printStream59);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.OutputStream) printStream59);
        char[] charArray65 = new char[] { ' ' };
        printWriter63.write(charArray65);
        java.io.PrintStream printStream68 = new java.io.PrintStream("French (France)");
        printStream68.println((float) (short) -1);
        java.io.PrintStream printStream71 = new java.io.PrintStream((java.io.OutputStream) printStream68);
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.OutputStream) printStream68);
        char[] charArray74 = new char[] { ' ' };
        printWriter72.write(charArray74);
        printWriter63.println(charArray74);
        printWriter53.write(charArray74, (int) (byte) 0, 1);
        printWriter47.print(charArray74);
        printStream32.println(charArray74);
        printStream23.println(charArray74);
        java.io.PrintStream printStream84 = new java.io.PrintStream((java.io.OutputStream) printStream23, true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 1, 0, 10, -1]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ ]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[ ]");
    }

    @Test
    public void test3831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3831");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4");
        java.lang.String str2 = locale1.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale3.getUnicodeLocaleKeys();
        java.lang.String str7 = locale3.getDisplayCountry();
        java.lang.String str8 = locale1.getDisplayScript(locale3);
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-CN" + "'", str5, "zh-CN");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Cina" + "'", str7, "Cina");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test3832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3832");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray8);
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray8);
        double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray8);
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray8);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray8);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray8);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 34.99999999999999d + "'", double11 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.5553480614894135d + "'", double12 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 34.99999999999999d + "'", double15 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test3833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3833");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        gammaDistribution9.setAlpha(100.0d);
        double double12 = gammaDistribution9.getAlpha();
        gammaDistribution9.setBeta((double) 100L);
        double double15 = gammaDistribution9.getBeta();
        double double16 = gammaDistribution9.getAlpha();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
    }

    @Test
    public void test3834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3834");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str3 = locale0.getExtension('u');
        java.util.Set<java.lang.Character> charSet4 = locale0.getExtensionKeys();
        java.lang.String str5 = locale0.getISO3Language();
        boolean boolean6 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ITA" + "'", str1, "ITA");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ita" + "'", str5, "ita");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test3835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3835");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.36787944117144233d);
        poissonDistribution8.setMean((double) (byte) 100);
        double double12 = poissonDistribution8.cumulativeProbability((double) 97);
        double double14 = poissonDistribution8.normalApproximateProbability((int) '#');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.4073778180707197d + "'", double12 == 0.4073778180707197d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.5925097885989317E-11d + "'", double14 == 5.5925097885989317E-11d);
    }

    @Test
    public void test3836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3836");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream4 = new java.io.PrintStream("en");
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale[] localeArray21 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList22);
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 1, mathException16, (byte) 0, localeList24, 1225.0d };
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("de", objArray26);
        java.io.PrintStream printStream29 = printStream7.printf(locale10, "hi!", objArray26);
        java.io.PrintStream printStream30 = printStream4.printf("FR", objArray26);
        java.io.PrintWriter printWriter31 = printWriter1.format("zh-CN", objArray26);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory32 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution35 = distributionFactory32.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double36 = weibullDistribution35.getShape();
        weibullDistribution35.setScale((double) 100);
        double double39 = weibullDistribution35.getScale();
        weibullDistribution35.setShape(0.36787944117144233d);
        double double42 = weibullDistribution35.getShape();
        printWriter31.println((java.lang.Object) double42);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(distributionFactory32);
        org.junit.Assert.assertNotNull(weibullDistribution35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.36787944117144233d + "'", double42 == 0.36787944117144233d);
    }

    @Test
    public void test3837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3837");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl12.setDistribution(tDistribution24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl12.homoscedasticTTest(statisticalSummary30, statisticalSummary31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
    }

    @Test
    public void test3838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3838");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray11 = new double[] { 'u', (short) 100 };
        double double12 = tTestImpl7.tTest(10.0d, doubleArray11);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = tTestImpl7.tTest(0.003594758625082406d, statisticalSummary14, 7.392864098676455E-12d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[117.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.054800971425164935d + "'", double12 == 0.054800971425164935d);
    }

    @Test
    public void test3839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3839");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        int int10 = pascalDistribution6.inverseCumulativeProbability((double) 1);
        pascalDistribution6.setProbabilityOfSuccess(0.0d);
        double double14 = pascalDistribution6.probability(10.0d);
        int int15 = pascalDistribution6.getNumberOfSuccesses();
        double double16 = pascalDistribution6.getProbabilityOfSuccess();
        int int17 = pascalDistribution6.getNumberOfSuccesses();
        double double20 = pascalDistribution6.cumulativeProbability(100, (int) (short) 100);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test3840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3840");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en");
        java.io.PrintStream printStream4 = new java.io.PrintStream("French (France)");
        printStream4.println((float) (short) -1);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 1, mathException13, (byte) 0, localeList21, 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("de", objArray23);
        java.io.PrintStream printStream26 = printStream4.printf(locale7, "hi!", objArray23);
        java.io.PrintStream printStream27 = printStream1.printf("FR", objArray23);
        printStream1.println((double) 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream27);
    }

    @Test
    public void test3841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3841");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.print((long) ' ');
        printStream4.print((-1L));
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.print((long) ' ');
        java.io.PrintStream printStream21 = new java.io.PrintStream("French (France)");
        byte[] byteArray22 = new byte[] {};
        printStream21.write(byteArray22);
        printStream17.write(byteArray22);
        java.io.PrintStream printStream27 = new java.io.PrintStream("French (France)");
        printStream27.println((float) (short) -1);
        printStream27.println(' ');
        printStream27.print(false);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream27);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        boolean boolean36 = locale35.hasExtensions();
        java.lang.String str37 = locale35.getDisplayVariant();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        boolean boolean39 = locale38.hasExtensions();
        java.lang.String str40 = locale35.getDisplayLanguage(locale38);
        boolean boolean41 = locale35.hasExtensions();
        java.lang.Object[] objArray43 = null;
        java.io.PrintWriter printWriter44 = printWriter34.printf(locale35, "German", objArray43);
        java.util.Locale locale45 = null;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Locale[] localeArray56 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList57);
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 1, mathException51, (byte) 0, localeList59, 1225.0d };
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", objArray61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("de", objArray61);
        java.io.PrintWriter printWriter64 = printWriter34.printf(locale45, "zh-CN", objArray61);
        java.io.PrintStream printStream65 = printStream17.format("Chinese (Taiwan)", objArray61);
        java.io.PrintWriter printWriter66 = printWriter14.printf("Franz\366sisch (Frankreich)", objArray61);
        printWriter14.println((int) (byte) 100);
        java.io.PrintStream printStream70 = new java.io.PrintStream("French (France)");
        printStream70.println((float) (short) -1);
        printStream70.println(' ');
        printStream70.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream78 = new java.io.PrintStream("French (France)");
        printStream78.println((float) (short) -1);
        java.io.PrintStream printStream81 = new java.io.PrintStream((java.io.OutputStream) printStream78);
        printStream78.print((long) (short) 0);
        java.io.PrintStream printStream85 = new java.io.PrintStream("French (France)");
        printStream85.println((float) (short) -1);
        java.io.PrintStream printStream88 = new java.io.PrintStream((java.io.OutputStream) printStream85);
        java.io.PrintWriter printWriter89 = new java.io.PrintWriter((java.io.OutputStream) printStream85);
        char[] charArray91 = new char[] { ' ' };
        printWriter89.write(charArray91);
        printStream78.print(charArray91);
        printStream70.println(charArray91);
        printWriter14.println(charArray91);
        printStream4.print(charArray91);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Deutsch" + "'", str40, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[ ]");
    }

    @Test
    public void test3842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3842");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.print((float) (-1L));
        printStream1.println(32.0d);
    }

    @Test
    public void test3843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3843");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("US");
        java.util.Locale.Builder builder7 = builder0.setLanguageTag("Canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.setScript("Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Chinese (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3844");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder9 = builder6.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3845");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setVariant("ja");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ja [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test3846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3846");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream1.println('#');
        printStream1.print(false);
        printStream1.println((long) (byte) 10);
        java.io.PrintStream printStream64 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.println((int) ' ');
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tedesco" + "'", str31, "tedesco");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test3847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3847");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.max(doubleArray25);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33, 1225.0d);
        double double42 = org.apache.commons.math.stat.StatUtils.max(doubleArray33);
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray33);
        double[] doubleArray45 = new double[] { '#' };
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray45);
        double double49 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double[] doubleArray51 = new double[] { '#' };
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) '#');
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double57 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray45, doubleArray51);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double59 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray33, doubleArray51);
        double[] doubleArray61 = new double[] { '#' };
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray61);
        double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray61);
        double double64 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray61);
        double double65 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray61);
        double double66 = org.apache.commons.math.stat.StatUtils.product(doubleArray61);
        double double67 = org.apache.commons.math.stat.StatUtils.sum(doubleArray61);
        double double68 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray61);
        double double69 = org.apache.commons.math.stat.StatUtils.product(doubleArray61);
        double[] doubleArray71 = new double[] { '#' };
        double double72 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.variance(doubleArray71);
        double double75 = org.apache.commons.math.stat.StatUtils.variance(doubleArray71, (double) '#');
        double double76 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray71);
        double double77 = org.apache.commons.math.stat.StatUtils.sum(doubleArray71);
        double double79 = org.apache.commons.math.stat.StatUtils.variance(doubleArray71, (double) (short) 100);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double81 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray61, doubleArray71);
        double double82 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray51, doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = tTestImpl23.pairedTTest(doubleArray25, doubleArray51, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.5553480614894135d + "'", double37 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 3.5553480614894135d + "'", double39 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 34.99999999999999d + "'", double48 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1225.0d + "'", double62 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 34.99999999999999d + "'", double64 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 3.5553480614894135d + "'", double65 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 35.0d + "'", double66 == 35.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 35.0d + "'", double67 == 35.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 34.99999999999999d + "'", double68 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 35.0d + "'", double69 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[35.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1225.0d + "'", double72 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1225.0d + "'", double76 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 35.0d + "'", double77 == 35.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 3.5553480614894135d + "'", double80 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
    }

    @Test
    public void test3848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3848");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize(0);
        hypergeometricDistribution10.setPopulationSize(2147483646);
        double double17 = hypergeometricDistribution10.cumulativeProbability(0);
        hypergeometricDistribution10.setPopulationSize(1);
        int int20 = hypergeometricDistribution10.getSampleSize();
        double double22 = hypergeometricDistribution10.cumulativeProbability((int) (byte) 100);
        double double25 = hypergeometricDistribution10.cumulativeProbability(0, (int) '4');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test3849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3849");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream26 = printStream24.append('#');
        printStream24.print((float) 'a');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test3850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3850");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        printWriter10.write("chinois (Chine)");
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
    }

    @Test
    public void test3851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3851");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.lang.Object obj10 = null;
        printWriter9.println(obj10);
        printWriter9.write((int) (short) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        char[] charArray21 = new char[] { ' ' };
        printWriter19.write(charArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printWriter19.println(charArray30);
        printWriter9.write(charArray30, (int) (byte) 0, 1);
        printStream1.print(charArray30);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.io.PrintStream printStream40 = new java.io.PrintStream("French (France)");
        printStream40.println((float) (short) -1);
        printStream40.println(' ');
        printStream40.print(false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream40);
        java.io.PrintWriter printWriter49 = printWriter47.append(' ');
        java.io.PrintWriter printWriter51 = printWriter49.append('u');
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale[] localeArray64 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList65);
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 1, mathException59, (byte) 0, localeList67, 1225.0d };
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("de", objArray69);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("", objArray69, (java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("und", objArray69, (java.lang.Throwable) mathException76);
        java.io.PrintWriter printWriter78 = printWriter49.printf("Deutsch", objArray69);
        java.io.PrintStream printStream79 = printStream1.printf(locale37, "Deutsch", objArray69);
        java.io.PrintStream printStream81 = printStream79.append('a');
        printStream79.println(0.6321205588285574d);
        java.io.PrintStream printStream84 = new java.io.PrintStream((java.io.OutputStream) printStream79);
        printStream84.print((long) 17);
        printStream84.println((float) 0);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printStream81);
    }

    @Test
    public void test3852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3852");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setScript("Chinesisch (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Chinesisch (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test3853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3853");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution44 = distributionFactory41.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double45 = weibullDistribution44.getShape();
        weibullDistribution44.setScale((double) 100);
        printWriter8.println((java.lang.Object) weibullDistribution44);
        java.io.PrintWriter printWriter50 = printWriter8.append((java.lang.CharSequence) "French");
        printWriter8.print((float) 'a');
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream56 = new java.io.PrintStream("French (France)");
        printStream56.println((float) (short) -1);
        java.io.PrintStream printStream59 = new java.io.PrintStream((java.io.OutputStream) printStream56);
        printStream56.print((long) (short) 0);
        java.io.PrintStream printStream63 = new java.io.PrintStream("French (France)");
        printStream63.println((float) (short) -1);
        java.io.PrintStream printStream66 = new java.io.PrintStream((java.io.OutputStream) printStream63);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream63);
        char[] charArray69 = new char[] { ' ' };
        printWriter67.write(charArray69);
        printStream56.print(charArray69);
        printWriter54.print(charArray69);
        printWriter8.print(charArray69);
        printWriter8.print((int) ' ');
        printWriter8.println(true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(weibullDistribution44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ ]");
    }

    @Test
    public void test3854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3854");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Language();
        java.lang.String str7 = locale5.getDisplayName();
        java.lang.String str8 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale10 = new java.util.Locale("org.apache.commons.math.MathException: ");
        java.lang.String str11 = locale5.getDisplayName(locale10);
        java.lang.String str12 = locale3.getDisplayLanguage(locale10);
        java.lang.String str14 = locale3.getExtension('x');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fra" + "'", str6, "fra");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "francese (Francia)" + "'", str7, "francese (Francia)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(locale10.toString(), "org.apache.commons.math.mathexception: ");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French (France)" + "'", str11, "French (France)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "german" + "'", str12, "german");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test3855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3855");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory27 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution30 = distributionFactory27.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution31 = distributionFactory27.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution33 = distributionFactory27.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution35 = distributionFactory27.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory27.createTDistribution((double) (byte) 1);
        tTestImpl12.setDistribution(tDistribution37);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double41 = tTestImpl12.tTest(5.5925097885989317E-11d, statisticalSummary40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory27);
        org.junit.Assert.assertNotNull(weibullDistribution30);
        org.junit.Assert.assertNotNull(normalDistribution31);
        org.junit.Assert.assertNotNull(tDistribution33);
        org.junit.Assert.assertNotNull(chiSquaredDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
    }

    @Test
    public void test3856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3856");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        boolean boolean6 = locale5.hasExtensions();
        java.lang.String str7 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder8 = builder2.setLocale(locale4);
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.Builder builder11 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder12 = builder11.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder11.setExtension('x', "org.apache.commons.math.MathException: ");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: org.apache.commons.math.MathException:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italienisch" + "'", str7, "Italienisch");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3857");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        java.io.PrintStream printStream30 = printStream1.append((java.lang.CharSequence) "german");
        java.io.PrintStream printStream32 = printStream30.append('#');
        printStream32.print((long) 0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(printStream32);
    }

    @Test
    public void test3858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3858");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.MathException: zh_TW", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception:zh_tw");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3859");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        // The following exception was thrown during execution in test generation
        try {
            weibullDistribution12.setScale((double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
    }

    @Test
    public void test3860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3860");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("Chinesisch (China)", (java.lang.Throwable) mathException3);
        java.lang.Object[] objArray5 = mathException4.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("");
        mathException21.addSuppressed((java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", objArray5, (java.lang.Throwable) mathException26);
        java.lang.Class<?> wildcardClass28 = objArray5.getClass();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test3861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3861");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 100L);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution18 = distributionFactory0.createGammaDistribution(10.0d, (double) 10);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory0.createChiSquareDistribution(Double.POSITIVE_INFINITY);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.WeibullDistribution weibullDistribution23 = distributionFactory0.createWeibullDistribution(0.0d, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertNotNull(gammaDistribution18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
    }

    @Test
    public void test3862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3862");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setLanguage("France");
        java.util.Locale.Builder builder8 = builder6.setLanguage("German");
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale.Builder builder12 = builder8.setLanguageTag("de");
        java.util.Locale.Builder builder14 = builder12.setLanguageTag("Chinese");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3863");
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream2);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream2);
        char[] charArray8 = new char[] { ' ' };
        printWriter6.write(charArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        printWriter6.println(charArray17);
        java.io.PrintWriter printWriter21 = printWriter6.append((java.lang.CharSequence) "FRA");
        printWriter6.println((double) 10.0f);
        printWriter6.println((java.lang.Object) 34.99999999999999d);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 1, mathException31, (byte) 0, localeList39, 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("");
        mathException42.addSuppressed((java.lang.Throwable) mathException44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException44);
        java.lang.String[] strArray49 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("allemand", (java.lang.Object[]) strArray49);
        mathException46.addSuppressed((java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Locale[] localeArray62 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList63 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList63, localeArray62);
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.util.Locale>) localeList63);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 1, mathException57, (byte) 0, localeList65, 1225.0d };
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", objArray67);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("");
        mathException68.addSuppressed((java.lang.Throwable) mathException70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException70);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException72);
        mathException46.addSuppressed((java.lang.Throwable) mathException72);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("\uc601\uc5b4", (java.lang.Throwable) mathException46);
        java.lang.Object[] objArray76 = mathException46.getArguments();
        printWriter6.println((java.lang.Object) mathException46);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("zh", (java.lang.Throwable) mathException46);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ ]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
    }

    @Test
    public void test3864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3864");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl12.setDistribution(tDistribution24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl12.tTest((double) (-1.0f), statisticalSummary31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
    }

    @Test
    public void test3865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3865");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray24);
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double33 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray24, 0.03172551743055352d);
        double[] doubleArray35 = new double[] { '#' };
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray35);
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double40 = org.apache.commons.math.stat.StatUtils.product(doubleArray35);
        double double41 = org.apache.commons.math.stat.StatUtils.sum(doubleArray35);
        double double43 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray35, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = tTestImpl1.homoscedasticTTest(doubleArray24, doubleArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.5553480614894135d + "'", double28 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 34.99999999999999d + "'", double31 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 34.99999999999999d + "'", double38 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 3.5553480614894135d + "'", double39 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
    }

    @Test
    public void test3866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3866");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.print('x');
        boolean boolean43 = printWriter8.checkError();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test3867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3867");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution12 = distributionFactory0.createGammaDistribution(10.0d, 8.999999999999998d);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution14 = distributionFactory0.createChiSquareDistribution(100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(gammaDistribution12);
        org.junit.Assert.assertNotNull(chiSquaredDistribution14);
        org.junit.Assert.assertNotNull(normalDistribution15);
    }

    @Test
    public void test3868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3868");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zho");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = printStream1.printf("Italienisch", (java.lang.Object[]) strArray5);
        printStream1.close();
        printStream1.println((java.lang.Object) 2147483646);
        printStream1.println((float) (short) -1);
        char[] charArray14 = null;
        printStream1.println(charArray14);
        printStream1.print(' ');
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream8);
    }

    @Test
    public void test3869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3869");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.print('x');
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        java.lang.CharSequence charSequence44 = null;
        java.io.PrintWriter printWriter45 = printWriter43.append(charSequence44);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter45);
    }

    @Test
    public void test3870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3870");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 1, mathException5, (byte) 0, localeList13, 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("");
        mathException16.addSuppressed((java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException18);
        java.lang.String str21 = mathException18.getPattern();
        java.lang.String str22 = mathException18.getPattern();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("allemand-x-lvariant-ko-KR", (java.lang.Throwable) mathException18);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test3871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3871");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream57.print(Double.NaN);
        printStream57.print(true);
        printStream57.print((float) 0);
        printStream57.print((double) 10.0f);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test3872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3872");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter18.flush();
        boolean boolean20 = printWriter18.checkError();
        printWriter18.println("\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3873");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayLanguage(locale3);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder8 = builder0.setLanguageTag("ja");
        java.util.Locale locale9 = builder0.build();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getISO3Country();
        java.lang.String str13 = locale10.getExtension('u');
        java.util.Set<java.lang.Character> charSet14 = locale10.getExtensionKeys();
        java.lang.String str15 = locale10.getISO3Language();
        java.lang.String str16 = locale9.getDisplayScript(locale10);
        boolean boolean17 = locale10.hasExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Italienisch" + "'", str5, "Italienisch");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITA" + "'", str11, "ITA");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ita" + "'", str15, "ita");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3874");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, (double) '#');
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double25 = org.apache.commons.math.stat.StatUtils.mean(doubleArray18);
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, (double) '#');
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.sum(doubleArray28);
        double double36 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray28, (double) 1.0f);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double38 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray18, doubleArray28);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = tTestImpl15.t((double) (byte) 100, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.5553480614894135d + "'", double37 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
    }

    @Test
    public void test3875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3875");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double) 10.0f);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution((-9.992007221626409E-16d), (double) 'u');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution((double) 2147483647, (double) 52);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution16 = distributionFactory0.createChiSquareDistribution((double) 35);
        chiSquaredDistribution16.setDegreesOfFreedom((double) (byte) 1);
        double double19 = chiSquaredDistribution16.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertNotNull(normalDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution14);
        org.junit.Assert.assertNotNull(chiSquaredDistribution16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test3876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3876");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        java.io.PrintStream printStream4 = new java.io.PrintStream("en");
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale[] localeArray21 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList22);
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 1, mathException16, (byte) 0, localeList24, 1225.0d };
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("de", objArray26);
        java.io.PrintStream printStream29 = printStream7.printf(locale10, "hi!", objArray26);
        java.io.PrintStream printStream30 = printStream4.printf("FR", objArray26);
        java.io.PrintWriter printWriter31 = printWriter1.format("zh-CN", objArray26);
        java.lang.String[] strArray34 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ITA", (java.lang.Object[]) strArray34);
        java.io.PrintWriter printWriter36 = printWriter1.printf("Deutsch", (java.lang.Object[]) strArray34);
        printWriter36.print(0.965280535386903d);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(printWriter36);
    }

    @Test
    public void test3877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3877");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl12.setDistribution(tDistribution24);
        double[] doubleArray31 = new double[] { '#' };
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray31);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31);
        double double34 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray31);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double36 = org.apache.commons.math.stat.StatUtils.sum(doubleArray31);
        double double37 = org.apache.commons.math.stat.StatUtils.product(doubleArray31);
        java.io.PrintStream printStream39 = new java.io.PrintStream("French (France)");
        printStream39.println((float) (short) -1);
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Locale[] localeArray53 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList54 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList54, localeArray53);
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.util.Locale>) localeList54);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 1, mathException48, (byte) 0, localeList56, 1225.0d };
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi!", objArray58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("de", objArray58);
        java.io.PrintStream printStream61 = printStream39.printf(locale42, "hi!", objArray58);
        double[] doubleArray63 = new double[] { '#' };
        double double64 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray63);
        double double65 = org.apache.commons.math.stat.StatUtils.variance(doubleArray63);
        double double67 = org.apache.commons.math.stat.StatUtils.variance(doubleArray63, (double) '#');
        double double68 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray63);
        printStream61.print((java.lang.Object) doubleArray63);
        double[] doubleArray71 = new double[] { '#' };
        double double72 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray63, doubleArray71);
        double double74 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray31, doubleArray71);
        double double76 = org.apache.commons.math.stat.StatUtils.variance(doubleArray31, Double.NEGATIVE_INFINITY);
        double[] doubleArray78 = new double[] { '#' };
        double double79 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray78);
        double double80 = org.apache.commons.math.stat.StatUtils.variance(doubleArray78);
        double double81 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray78);
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray78);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray78);
        double double84 = org.apache.commons.math.stat.StatUtils.sum(doubleArray78);
        double[] doubleArray86 = new double[] { '#' };
        double double87 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray86);
        double double88 = org.apache.commons.math.stat.StatUtils.variance(doubleArray86);
        double double90 = org.apache.commons.math.stat.StatUtils.variance(doubleArray86, (double) '#');
        double double91 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray86);
        double double92 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray86);
        double double93 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray86);
        double double94 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray86);
        double double95 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray78, doubleArray86);
        double double97 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray78, 97.0d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = tTestImpl12.pairedTTest(doubleArray31, doubleArray78, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1225.0d + "'", double32 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 34.99999999999999d + "'", double34 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localeList56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1225.0d + "'", double64 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1225.0d + "'", double68 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[35.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1225.0d + "'", double72 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[35.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1225.0d + "'", double79 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 34.99999999999999d + "'", double81 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3.5553480614894135d + "'", double82 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 35.0d + "'", double83 == 35.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 35.0d + "'", double84 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[35.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1225.0d + "'", double87 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1225.0d + "'", double91 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 34.99999999999999d + "'", double92 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 3.5553480614894135d + "'", double93 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1225.0d + "'", double94 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 35.0d + "'", double97 == 35.0d);
    }

    @Test
    public void test3878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3878");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.println((int) (byte) 1);
        printStream1.print((int) 'u');
    }

    @Test
    public void test3879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3879");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: allemand", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3880");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        double double21 = tDistribution19.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.max(doubleArray24);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30, (double) '#');
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double36 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray24, doubleArray30);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38);
        double double41 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.sum(doubleArray38);
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double[] doubleArray47 = new double[] { '#' };
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47, (double) '#');
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double53 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray38, doubleArray47);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47, (double) '#');
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47, 0.002555130330427813d, 2147483647, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = tTestImpl22.homoscedasticTTest(doubleArray24, doubleArray47, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 34.99999999999999d + "'", double41 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 3.5553480614894135d + "'", double42 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1225.0d + "'", double48 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test3881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3881");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "German" + "'", str2, "German");
    }

    @Test
    public void test3882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3882");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double) 10.0f);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution((-9.992007221626409E-16d), (double) 'u');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution14 = distributionFactory0.createWeibullDistribution(Double.NaN, 1.6653345369377348E-15d);
        weibullDistribution14.setShape((double) 2147483647);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertNotNull(normalDistribution11);
        org.junit.Assert.assertNotNull(weibullDistribution14);
    }

    @Test
    public void test3883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3883");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20, 1, 0);
        double double26 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray20, (double) (byte) 100);
        double double27 = org.apache.commons.math.stat.StatUtils.mean(doubleArray20);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray20);
        double double29 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray20, (int) 'x', 0, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 34.99999999999999d + "'", double17 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    }

    @Test
    public void test3884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3884");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory18 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution21 = distributionFactory18.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory18.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory18.createTDistribution((double) 1L);
        double double25 = tDistribution24.getDegreesOfFreedom();
        tTestImpl17.setDistribution(tDistribution24);
        tDistribution24.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl29 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(117.0d);
        tTestImpl15.setDistribution(tDistribution24);
        double[] doubleArray39 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39, (double) (byte) 100);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double double44 = tTestImpl15.tTest(1.1102230246251565E-16d, doubleArray39);
        double double45 = org.apache.commons.math.stat.StatUtils.sum(doubleArray39);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory18);
        org.junit.Assert.assertNotNull(weibullDistribution21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 515.7000000000007d + "'", double42 == 515.7000000000007d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 515.6999999999999d + "'", double43 == 515.6999999999999d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.2959047012910432d + "'", double44 == 0.2959047012910432d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 61.0d + "'", double45 == 61.0d);
    }

    @Test
    public void test3885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3885");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32, 1, 0);
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray32);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39, (double) '#');
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double double46 = org.apache.commons.math.stat.StatUtils.min(doubleArray39);
        double double47 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray32, doubleArray39);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49, (double) '#');
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double55 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray49);
        double double56 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray32, doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = tTestImpl12.tTest(0.00785529839410426d, doubleArray49, (-175.50000024991118d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -175.50000024991118");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 34.99999999999999d + "'", double37 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 34.99999999999999d + "'", double55 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test3886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3886");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        int int11 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setSampleSize((int) (byte) 10);
        int int14 = hypergeometricDistribution10.getSampleSize();
        int int15 = hypergeometricDistribution10.getNumberOfSuccesses();
        int int17 = hypergeometricDistribution10.inverseCumulativeProbability(0.03172551743055352d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test3887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3887");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = tTestImpl12.tTest(statisticalSummary27, statisticalSummary28, 8.999999999999998d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 8.999999999999998");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test3888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3888");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        java.io.PrintStream printStream30 = printStream1.append((java.lang.CharSequence) "german");
        printStream30.println('#');
        printStream30.println();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream30);
        java.io.PrintWriter printWriter36 = printWriter34.append('x');
        java.lang.Object obj37 = null;
        printWriter34.print(obj37);
        printWriter34.println(0.3678794411714425d);
        printWriter34.println(false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(printWriter36);
    }

    @Test
    public void test3889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3889");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) 1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, 1, 0);
        double double23 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray10, doubleArray18);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double27 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray10);
        double double30 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10, 0, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 34.99999999999999d + "'", double13 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.5553480614894135d + "'", double14 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 34.99999999999999d + "'", double23 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 3.5553480614894135d + "'", double25 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test3890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3890");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        char[] charArray14 = new char[] { ' ' };
        printWriter12.write(charArray14);
        printStream1.print(charArray14);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.println(false);
        java.io.PrintStream printStream24 = printStream1.append('#');
        printStream1.write((int) (short) 10);
        printStream1.println((float) (byte) 100);
        printStream1.println(false);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ]");
        org.junit.Assert.assertNotNull(printStream24);
    }

    @Test
    public void test3891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3891");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution29 = distributionFactory23.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory23.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory23.createTDistribution((double) 100L);
        tDistribution34.setDegreesOfFreedom(52.0d);
        tTestImpl1.setDistribution(tDistribution34);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double double42 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double44 = org.apache.commons.math.stat.StatUtils.sum(doubleArray39);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39, 1225.0d);
        double double48 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray39);
        double[] doubleArray51 = new double[] { '#' };
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray51);
        double double55 = org.apache.commons.math.stat.StatUtils.max(doubleArray51);
        double[] doubleArray57 = new double[] { '#' };
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray57);
        double double61 = org.apache.commons.math.stat.StatUtils.variance(doubleArray57, (double) '#');
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double63 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray51, doubleArray57);
        double double64 = org.apache.commons.math.stat.StatUtils.variance(doubleArray57);
        double double65 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray39, doubleArray57);
        double[] doubleArray67 = new double[] { '#' };
        double double68 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double69 = org.apache.commons.math.stat.StatUtils.variance(doubleArray67);
        double double70 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray67);
        double double71 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double72 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double double73 = org.apache.commons.math.stat.StatUtils.sum(doubleArray67);
        double double75 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray67, (double) (short) 100);
        double[] doubleArray77 = new double[] { '#' };
        double double78 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray77);
        double double79 = org.apache.commons.math.stat.StatUtils.variance(doubleArray77);
        double double80 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray77);
        double double81 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray77);
        double double82 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray67, doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = tTestImpl1.homoscedasticTTest(doubleArray57, doubleArray77, 1.5400882849875232E-51d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(fDistribution29);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 34.99999999999999d + "'", double42 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 3.5553480614894135d + "'", double43 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.5553480614894135d + "'", double45 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 34.99999999999999d + "'", double54 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1225.0d + "'", double58 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1225.0d + "'", double62 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1225.0d + "'", double68 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 34.99999999999999d + "'", double70 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 3.5553480614894135d + "'", double71 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 35.0d + "'", double72 == 35.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 35.0d + "'", double73 == 35.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 35.0d + "'", double75 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[35.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1225.0d + "'", double78 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 34.99999999999999d + "'", double80 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 3.5553480614894135d + "'", double81 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
    }

    @Test
    public void test3892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3892");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        normalDistribution4.setMean(0.0d);
        double double7 = normalDistribution4.getMean();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test3893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3893");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getLanguage();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale0.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet5 = locale0.getExtensionKeys();
        java.lang.String str6 = locale0.getISO3Country();
        java.lang.String str7 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "German" + "'", str1, "German");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test3894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3894");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        tTestImpl12.setDistribution(tDistribution21);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32, 1, 0);
        double double37 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32);
        double[] doubleArray39 = new double[] { '#' };
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double double42 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double44 = org.apache.commons.math.stat.StatUtils.sum(doubleArray39);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        double double46 = org.apache.commons.math.stat.StatUtils.min(doubleArray39);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray49);
        double double55 = org.apache.commons.math.stat.StatUtils.sum(doubleArray49);
        double[] doubleArray57 = new double[] { '#' };
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double61 = org.apache.commons.math.stat.StatUtils.variance(doubleArray57, 1, 0);
        double double62 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray57);
        double double63 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray49, doubleArray57);
        double double64 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray39, doubleArray57);
        double double66 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray39, (double) 10);
        double double67 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray32, doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = tTestImpl12.t((double) 'u', doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 34.99999999999999d + "'", double42 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 3.5553480614894135d + "'", double43 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 34.99999999999999d + "'", double52 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.5553480614894135d + "'", double53 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1225.0d + "'", double58 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 34.99999999999999d + "'", double62 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 35.0d + "'", double66 == 35.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test3895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3895");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        double double9 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom((double) 'a');
        fDistribution6.setDenominatorDegreesOfFreedom(0.24999999999999964d);
        fDistribution6.setDenominatorDegreesOfFreedom(2.2288027128982685E-37d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test3896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3896");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = printStream1.append('a');
        printStream1.print((float) 2147483646);
        org.junit.Assert.assertNotNull(printStream8);
    }

    @Test
    public void test3897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3897");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.close();
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        printStream10.print(0L);
        printStream10.println();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        printStream10.println((java.lang.Object) locale17);
        java.lang.String str19 = locale17.getVariant();
        java.io.PrintStream printStream23 = new java.io.PrintStream("en");
        java.io.PrintStream printStream26 = new java.io.PrintStream("French (France)");
        printStream26.println((float) (short) -1);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 1, mathException35, (byte) 0, localeList43, 1225.0d };
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("de", objArray45);
        java.io.PrintStream printStream48 = printStream26.printf(locale29, "hi!", objArray45);
        java.io.PrintStream printStream49 = printStream23.printf("FR", objArray45);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("zho", objArray45);
        java.io.PrintWriter printWriter51 = printWriter5.printf(locale17, "FR", objArray45);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test3898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3898");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder2.addUnicodeLocaleAttribute("German");
        java.util.Locale locale13 = builder2.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de__#u-german");
    }

    @Test
    public void test3899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3899");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.print((double) (byte) 100);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(100.0f);
        boolean boolean15 = printStream1.checkError();
        printStream1.flush();
        printStream1.println("org.apache.commons.math.MathException: fra");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3900");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.lang.String[] strArray14 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strList15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList6, strMap18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strSet22);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test3901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3901");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("French (France)");
        printStream8.println((float) (short) -1);
        printStream8.println(' ');
        printStream8.print(false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        java.lang.String str27 = locale18.getDisplayName(locale23);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale[] localeArray38 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 1, mathException33, (byte) 0, localeList41, 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("de", objArray43);
        java.io.PrintWriter printWriter46 = printWriter17.printf(locale18, "zho", objArray43);
        java.io.PrintWriter printWriter47 = printWriter5.printf("", objArray43);
        printWriter5.print(false);
        printWriter5.println();
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "allemand" + "'", str27, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
    }

    @Test
    public void test3902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3902");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        normalDistribution4.setStandardDeviation(35.0d);
        double double7 = normalDistribution4.getStandardDeviation();
        normalDistribution4.setMean((double) (byte) 10);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test3903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3903");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) 1);
        double double9 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom((double) 'a');
        fDistribution6.setDenominatorDegreesOfFreedom(117.0d);
        fDistribution6.setNumeratorDegreesOfFreedom((double) 100);
        fDistribution6.setDenominatorDegreesOfFreedom(100.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test3904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3904");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1225.0d);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.max(doubleArray13);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19, (double) '#');
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray13, doubleArray19);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double27 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray19, (int) (short) 0, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    }

    @Test
    public void test3905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3905");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguage("deu");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3906");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        java.util.Set<java.lang.String> strSet24 = locale4.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test3907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3907");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        byte[] byteArray6 = new byte[] {};
        printStream5.write(byteArray6);
        printStream1.write(byteArray6);
        printStream1.println();
        printStream1.print(false);
        printStream1.print(true);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        printStream15.println(' ');
        printStream15.flush();
        java.util.Locale locale21 = null;
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        java.io.PrintStream printStream31 = new java.io.PrintStream("French (France)");
        printStream31.println((float) (short) -1);
        printStream31.println(' ');
        printStream31.print(false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream31);
        java.io.PrintWriter printWriter40 = printWriter38.append(' ');
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        boolean boolean42 = locale41.hasExtensions();
        java.lang.String str43 = locale41.getDisplayVariant();
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = locale46.getISO3Country();
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleKeys();
        java.lang.String str49 = locale44.getDisplayCountry(locale46);
        java.lang.String str50 = locale41.getDisplayName(locale46);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale[] localeArray61 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 1, mathException56, (byte) 0, localeList64, 1225.0d };
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("de", objArray66);
        java.io.PrintWriter printWriter69 = printWriter40.printf(locale41, "zho", objArray66);
        java.io.PrintWriter printWriter70 = printWriter28.printf("", objArray66);
        java.io.PrintStream printStream71 = printStream15.printf(locale21, "und", objArray66);
        printStream1.println((java.lang.Object) printStream15);
        java.io.PrintStream printStream74 = printStream15.append('x');
        printStream74.print("Chinese (China)");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "German" + "'", str45, "German");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "FRA" + "'", str47, "FRA");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "allemand" + "'", str50, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(printStream74);
    }

    @Test
    public void test3908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3908");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.tTest(0.6268891739294101d, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test3909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3909");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.print((long) ' ');
        printStream1.print((int) ' ');
        java.io.PrintStream printStream7 = new java.io.PrintStream("French (France)");
        printStream7.println((float) (short) -1);
        printStream7.println(' ');
        printStream7.println("org.apache.commons.math.MathException: ");
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        printStream15.print((long) (short) 0);
        java.io.PrintStream printStream22 = new java.io.PrintStream("French (France)");
        printStream22.println((float) (short) -1);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream22);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream22);
        char[] charArray28 = new char[] { ' ' };
        printWriter26.write(charArray28);
        printStream15.print(charArray28);
        printStream7.println(charArray28);
        printStream1.println(charArray28);
        java.io.PrintStream printStream36 = printStream1.append((java.lang.CharSequence) "English (United Kingdom)", 0, (int) (short) 1);
        printStream1.print(10.0f);
        printStream1.print(2147483647);
        printStream1.println('4');
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ ]");
        org.junit.Assert.assertNotNull(printStream36);
    }

    @Test
    public void test3910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3910");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.print((double) (byte) 100);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double double18 = org.apache.commons.math.stat.StatUtils.product(doubleArray13);
        double double19 = org.apache.commons.math.stat.StatUtils.sum(doubleArray13);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray13);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22, (double) '#');
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double28 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray13, doubleArray22);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22, (double) '#');
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray22, 0.002555130330427813d, 2147483647, (int) '4');
        printStream1.print((java.lang.Object) 2147483647);
        printStream1.flush();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.5553480614894135d + "'", double17 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test3911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3911");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream11.println(100.0d);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        printStream11.write((int) (byte) 100);
    }

    @Test
    public void test3912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3912");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale2.getLanguage();
        java.lang.String str4 = locale2.getVariant();
        java.lang.String str5 = locale2.getISO3Country();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.toLanguageTag();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getISO3Language();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale9.getDisplayScript(locale11);
        java.lang.String str13 = locale9.getISO3Language();
        java.lang.String str14 = locale7.getDisplayName(locale9);
        java.lang.String str15 = locale9.toLanguageTag();
        java.lang.String str16 = locale9.getISO3Country();
        java.lang.String str17 = locale9.getCountry();
        java.util.Locale.setDefault(category0, locale9);
        java.lang.String str19 = locale9.getVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "CHN" + "'", str5, "CHN");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "German" + "'", str14, "German");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "und" + "'", str15, "und");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3913");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        printWriter5.println((-1.0d));
        printWriter5.print((int) (short) -1);
        printWriter5.println((double) '#');
        java.io.PrintStream printStream18 = new java.io.PrintStream("French (France)");
        printStream18.println((float) (short) -1);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream18);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double27 = weibullDistribution26.getScale();
        double double28 = weibullDistribution26.getScale();
        double double29 = weibullDistribution26.getScale();
        printWriter22.println((java.lang.Object) double29);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter33 = printWriter22.printf("FR", objArray32);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        java.io.PrintStream printStream37 = new java.io.PrintStream("French (France)");
        printStream37.print((long) ' ');
        java.io.PrintStream printStream41 = new java.io.PrintStream("French (France)");
        byte[] byteArray42 = new byte[] {};
        printStream41.write(byteArray42);
        printStream37.write(byteArray42);
        printStream37.println();
        printStream37.print(false);
        printStream37.flush();
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayScript();
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet52 = locale49.getUnicodeLocaleAttributes();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Locale[] localeArray63 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList64 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList64, localeArray63);
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.util.Locale>) localeList64);
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 1, mathException58, (byte) 0, localeList66, 1225.0d };
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", objArray68);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("");
        mathException69.addSuppressed((java.lang.Throwable) mathException71);
        java.lang.Object[] objArray73 = mathException69.getArguments();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("ko_KR", objArray73);
        java.io.PrintStream printStream75 = printStream37.format(locale49, "France", objArray73);
        java.io.PrintWriter printWriter76 = printWriter34.format("\uc774\ud0c8\ub9ac\uc544\uc5b4", objArray73);
        java.io.PrintWriter printWriter77 = printWriter5.format("US", objArray73);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertNotNull(printWriter76);
        org.junit.Assert.assertNotNull(printWriter77);
    }

    @Test
    public void test3914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3914");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory27 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution30 = distributionFactory27.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution31 = distributionFactory27.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution33 = distributionFactory27.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution33);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl35 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.DistributionFactory distributionFactory36 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution39 = distributionFactory36.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution42 = distributionFactory36.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution45 = distributionFactory36.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution47 = distributionFactory36.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl48 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution47);
        org.apache.commons.math.distribution.TDistribution tDistribution49 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl50 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution49);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory51 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution54 = distributionFactory51.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution55 = distributionFactory51.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution57 = distributionFactory51.createTDistribution((double) 1L);
        double double58 = tDistribution57.getDegreesOfFreedom();
        tTestImpl50.setDistribution(tDistribution57);
        tDistribution57.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl62 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution57);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl63 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution57);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution57);
        tTestImpl48.setDistribution(tDistribution57);
        tTestImpl35.setDistribution(tDistribution57);
        tTestImpl34.setDistribution(tDistribution57);
        tTestImpl12.setDistribution(tDistribution57);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary70 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double71 = tTestImpl12.homoscedasticT(statisticalSummary69, statisticalSummary70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory27);
        org.junit.Assert.assertNotNull(weibullDistribution30);
        org.junit.Assert.assertNotNull(normalDistribution31);
        org.junit.Assert.assertNotNull(tDistribution33);
        org.junit.Assert.assertNotNull(distributionFactory36);
        org.junit.Assert.assertNotNull(weibullDistribution39);
        org.junit.Assert.assertNotNull(fDistribution42);
        org.junit.Assert.assertNotNull(normalDistribution45);
        org.junit.Assert.assertNotNull(tDistribution47);
        org.junit.Assert.assertNotNull(distributionFactory51);
        org.junit.Assert.assertNotNull(weibullDistribution54);
        org.junit.Assert.assertNotNull(normalDistribution55);
        org.junit.Assert.assertNotNull(tDistribution57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
    }

    @Test
    public void test3915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3915");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("anglais");
    }

    @Test
    public void test3916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3916");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution4 = distributionFactory0.createChiSquareDistribution((double) (short) 1);
        chiSquaredDistribution4.setDegreesOfFreedom((double) 2147483647);
        chiSquaredDistribution4.setDegreesOfFreedom((double) (byte) 10);
        chiSquaredDistribution4.setDegreesOfFreedom(0.9999999999999989d);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = chiSquaredDistribution4.cumulativeProbability(0.06680720126885803d, 2.2288027128982685E-37d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(chiSquaredDistribution4);
    }

    @Test
    public void test3917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3917");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("", "USA");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: USA");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3918");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("zh_TW");
    }

    @Test
    public void test3919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3919");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter8.print((double) 100L);
        printWriter8.println((-9.992007221626409E-16d));
        boolean boolean13 = printWriter8.checkError();
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3920");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        double double4 = weibullDistribution3.getScale();
        double double5 = weibullDistribution3.getScale();
        weibullDistribution3.setShape(10.0d);
        weibullDistribution3.setShape((double) (short) 1);
        weibullDistribution3.setShape(0.9646159093607598d);
        double double13 = weibullDistribution3.inverseCumulativeProbability(0.06680720126885681d);
        weibullDistribution3.setShape((double) 1.0f);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.6268891739294101d + "'", double13 == 0.6268891739294101d);
    }

    @Test
    public void test3921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3921");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println("");
        printStream1.println((long) 52);
        boolean boolean12 = printStream1.checkError();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3922");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        boolean boolean6 = locale5.hasExtensions();
        java.lang.String str7 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder8 = builder2.setLocale(locale4);
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.Builder builder11 = builder2.setLocale(locale10);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale12.getDisplayVariant();
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder16 = builder2.setLocale(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.setScript("fra");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: fra [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italienisch" + "'", str7, "Italienisch");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3923");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale2.getCountry();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.lang.String str9 = locale2.getDisplayName(locale7);
        java.lang.String str10 = locale7.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "German" + "'", str10, "German");
    }

    @Test
    public void test3924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3924");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution14 = distributionFactory0.createPascalDistribution(52, 12.2d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test3925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3925");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        tDistribution11.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        tDistribution22.setDegreesOfFreedom(100.0d);
        tDistribution22.setDegreesOfFreedom(0.003594758625082406d);
        tTestImpl15.setDistribution(tDistribution22);
        double[] doubleArray29 = new double[] { '#' };
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray29);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray29);
        double double34 = org.apache.commons.math.stat.StatUtils.max(doubleArray29, 0, 0);
        double double35 = org.apache.commons.math.stat.StatUtils.min(doubleArray29);
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray37);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double42 = org.apache.commons.math.stat.StatUtils.sum(doubleArray37);
        double double43 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37, 1225.0d);
        double double46 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray49);
        double[] doubleArray55 = new double[] { '#' };
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray55);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray55);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray55, (double) '#');
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray55);
        double double61 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray49, doubleArray55);
        double double62 = org.apache.commons.math.stat.StatUtils.variance(doubleArray55);
        double double63 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray37, doubleArray55);
        double double64 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray29, doubleArray37);
        double[] doubleArray66 = new double[] { '#' };
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        double double68 = org.apache.commons.math.stat.StatUtils.variance(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray66);
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double71 = org.apache.commons.math.stat.StatUtils.product(doubleArray66);
        double double72 = org.apache.commons.math.stat.StatUtils.sum(doubleArray66);
        double double73 = org.apache.commons.math.stat.StatUtils.product(doubleArray66);
        double[] doubleArray75 = new double[] { '#' };
        double double76 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray75);
        double double77 = org.apache.commons.math.stat.StatUtils.variance(doubleArray75);
        double double79 = org.apache.commons.math.stat.StatUtils.variance(doubleArray75, (double) '#');
        double double80 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray75);
        double double81 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray66, doubleArray75);
        double double82 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = tTestImpl15.tTest(doubleArray37, doubleArray75, (double) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 97.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 34.99999999999999d + "'", double40 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.5553480614894135d + "'", double41 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 3.5553480614894135d + "'", double43 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 34.99999999999999d + "'", double52 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1225.0d + "'", double60 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1225.0d + "'", double67 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 34.99999999999999d + "'", double69 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 3.5553480614894135d + "'", double70 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 35.0d + "'", double71 == 35.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 35.0d + "'", double72 == 35.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 35.0d + "'", double73 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1225.0d + "'", double76 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1225.0d + "'", double80 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 34.99999999999999d + "'", double82 == 34.99999999999999d);
    }

    @Test
    public void test3926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3926");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution15 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 100L);
        org.apache.commons.math.distribution.FDistribution fDistribution18 = distributionFactory0.createFDistribution(0.9646641462260455d, (double) 120);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory0.createChiSquareDistribution((double) (byte) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution21 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution24 = distributionFactory0.createBinomialDistribution(100, 0.003594758625082406d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution27 = distributionFactory0.createCauchyDistribution(1.6653345369377348E-15d, 100.0d);
        org.apache.commons.math.distribution.FDistribution fDistribution30 = distributionFactory0.createFDistribution(61.0d, (double) ' ');
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution33 = distributionFactory0.createCauchyDistribution((double) 35, (double) 'a');
        double double34 = cauchyDistribution33.getScale();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(gammaDistribution15);
        org.junit.Assert.assertNotNull(fDistribution18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
        org.junit.Assert.assertNotNull(normalDistribution21);
        org.junit.Assert.assertNotNull(binomialDistribution24);
        org.junit.Assert.assertNotNull(cauchyDistribution27);
        org.junit.Assert.assertNotNull(fDistribution30);
        org.junit.Assert.assertNotNull(cauchyDistribution33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 97.0d + "'", double34 == 97.0d);
    }

    @Test
    public void test3927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3927");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double double11 = tDistribution8.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = tTestImpl12.homoscedasticTTest(statisticalSummary13, statisticalSummary14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test3928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3928");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 0);
        java.io.PrintStream printStream8 = printStream1.append('a');
        java.io.PrintStream printStream10 = printStream8.append((java.lang.CharSequence) "Chinese");
        org.junit.Assert.assertNotNull(printStream8);
        org.junit.Assert.assertNotNull(printStream10);
    }

    @Test
    public void test3929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3929");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("France");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange1, languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale locale10 = new java.util.Locale("allemand", "allemand", "");
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet11, filteringMode12);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, strMap19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, strMap27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList28, strMap29);
        java.lang.String[] strArray38 = new java.lang.String[] { "FRA", "Italienisch", "German", "FRA", "de", "fra", "FRA" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags(languageRangeList30, (java.util.Collection<java.lang.String>) strList39);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList41);
        java.util.Locale.FilteringMode filteringMode43 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags(languageRangeList20, (java.util.Collection<java.lang.String>) strList41, filteringMode43);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet15, filteringMode43);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap46);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals(locale10.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode12.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + filteringMode43 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode43.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(languageRangeList47);
    }

    @Test
    public void test3930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3930");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.print('x');
        printWriter8.println((long) (byte) 100);
        printWriter8.println((float) 100L);
        printWriter8.print('4');
        printWriter8.flush();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
    }

    @Test
    public void test3931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3931");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it_IT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=it_it");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3932");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) '#');
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray11, (double) '#');
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray11);
        double double19 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray11, (double) 1.0f);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double21 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray11);
        double double22 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24, (double) '#');
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24, (double) (byte) -1);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33);
        double double41 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray33, (double) (short) 100);
        double double42 = org.apache.commons.math.stat.StatUtils.sum(doubleArray33);
        double double43 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double45 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray33, (double) 100.0f);
        double double46 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray24, doubleArray33);
        double double47 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray33);
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 34.99999999999999d + "'", double36 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.5553480614894135d + "'", double37 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 34.99999999999999d + "'", double43 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1225.0d + "'", double48 == 1225.0d);
    }

    @Test
    public void test3933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3933");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getLanguage();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
    }

    @Test
    public void test3934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3934");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("zho");
        java.util.Locale locale6 = builder5.build();
        java.lang.String str8 = locale6.getExtension('u');
        boolean boolean9 = locale6.hasExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "german__#u-zho");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test3935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3935");
        double[] doubleArray5 = new double[] { 1, (-1), (-1.0f), 10, '4' };
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5);
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray5, 2147483647, 97);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 515.6999999999999d + "'", double7 == 515.6999999999999d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test3936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3936");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (int) 'u', 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test3937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3937");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("USA");
    }

    @Test
    public void test3938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3938");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution4 = distributionFactory0.createChiSquareDistribution((double) (short) 1);
        double double5 = chiSquaredDistribution4.getDegreesOfFreedom();
        chiSquaredDistribution4.setDegreesOfFreedom((double) 10L);
        chiSquaredDistribution4.setDegreesOfFreedom(97.0d);
        chiSquaredDistribution4.setDegreesOfFreedom(0.841344746068543d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(chiSquaredDistribution4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test3939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3939");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution10 = distributionFactory0.createExponentialDistribution((double) 1.0f);
        exponentialDistribution10.setMean(100.0d);
        double double13 = exponentialDistribution10.getMean();
        exponentialDistribution10.setMean(120.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(exponentialDistribution10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test3940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3940");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.36787944117144233d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution10 = distributionFactory0.createExponentialDistribution((double) 1.0f);
        exponentialDistribution10.setMean(0.9999999999999989d);
        exponentialDistribution10.setMean((double) ' ');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(exponentialDistribution10);
    }

    @Test
    public void test3941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3941");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution5 = distributionFactory0.createPoissonDistribution(120.0d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution8 = distributionFactory0.createCauchyDistribution((double) 2147483646, (double) 'u');
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution11 = distributionFactory0.createPascalDistribution((int) 'u', 0.6321205588285574d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution14 = distributionFactory0.createBinomialDistribution(100, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(poissonDistribution5);
        org.junit.Assert.assertNotNull(cauchyDistribution8);
        org.junit.Assert.assertNotNull(pascalDistribution11);
    }

    @Test
    public void test3942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3942");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        java.util.Locale locale32 = java.util.Locale.UK;
        printWriter5.println((java.lang.Object) locale32);
        boolean boolean34 = locale32.hasExtensions();
        java.util.Set<java.lang.String> strSet35 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale locale37 = builder36.build();
        java.util.Locale.Builder builder39 = builder36.setScript("");
        java.util.Locale locale40 = builder39.build();
        java.lang.String str41 = locale32.getDisplayCountry(locale40);
        java.lang.String str42 = locale40.getCountry();
        java.lang.String str44 = locale40.getExtension('u');
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "United Kingdom" + "'", str41, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test3943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3943");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution((double) (short) 100, (double) 'u');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution(0.5265621985342424d, (double) (byte) 100);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution15);
    }

    @Test
    public void test3944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3944");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl8 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.DistributionFactory distributionFactory9 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory9.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution15 = distributionFactory9.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution18 = distributionFactory9.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution20 = distributionFactory9.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl21 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution20);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory24 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution27 = distributionFactory24.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution28 = distributionFactory24.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution30 = distributionFactory24.createTDistribution((double) 1L);
        double double31 = tDistribution30.getDegreesOfFreedom();
        tTestImpl23.setDistribution(tDistribution30);
        tDistribution30.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl35 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl36 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl37 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        tTestImpl21.setDistribution(tDistribution30);
        tTestImpl8.setDistribution(tDistribution30);
        tTestImpl7.setDistribution(tDistribution30);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double46 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42, 1, 0);
        double[] doubleArray48 = new double[] { '#' };
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48, (double) '#');
        double double53 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.max(doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = tTestImpl7.homoscedasticT(doubleArray42, doubleArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
        org.junit.Assert.assertNotNull(fDistribution15);
        org.junit.Assert.assertNotNull(normalDistribution18);
        org.junit.Assert.assertNotNull(tDistribution20);
        org.junit.Assert.assertNotNull(distributionFactory24);
        org.junit.Assert.assertNotNull(weibullDistribution27);
        org.junit.Assert.assertNotNull(normalDistribution28);
        org.junit.Assert.assertNotNull(tDistribution30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
    }

    @Test
    public void test3945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3945");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl20 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        tTestImpl12.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory24 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution27 = distributionFactory24.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution28 = distributionFactory24.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution30 = distributionFactory24.createTDistribution((double) 1L);
        double double31 = tDistribution30.getDegreesOfFreedom();
        tTestImpl23.setDistribution(tDistribution30);
        double double33 = tDistribution30.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution30);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36);
        double double39 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.product(doubleArray36);
        double double42 = org.apache.commons.math.stat.StatUtils.sum(doubleArray36);
        double double43 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray36);
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray36);
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double[] doubleArray47 = new double[] { '#' };
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47);
        double double50 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray47);
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double52 = org.apache.commons.math.stat.StatUtils.sum(doubleArray47);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double[] doubleArray55 = new double[] { '#' };
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray55);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray55);
        double double58 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray55);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray55);
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray55);
        double double61 = org.apache.commons.math.stat.StatUtils.sum(doubleArray55);
        double[] doubleArray63 = new double[] { '#' };
        double double64 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray63);
        double double67 = org.apache.commons.math.stat.StatUtils.variance(doubleArray63, 1, 0);
        double double68 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray63);
        double double69 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray55, doubleArray63);
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray55);
        double double71 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray55);
        double double72 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray47, doubleArray55);
        double double76 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray55, (int) (byte) 1, (int) (short) 0, 10.0d);
        double double78 = org.apache.commons.math.stat.StatUtils.variance(doubleArray55, (double) 120);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = tTestImpl12.pairedT(doubleArray36, doubleArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertNotNull(distributionFactory24);
        org.junit.Assert.assertNotNull(weibullDistribution27);
        org.junit.Assert.assertNotNull(normalDistribution28);
        org.junit.Assert.assertNotNull(tDistribution30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 34.99999999999999d + "'", double39 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 34.99999999999999d + "'", double43 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1225.0d + "'", double48 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 34.99999999999999d + "'", double50 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.5553480614894135d + "'", double51 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.5553480614894135d + "'", double53 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 34.99999999999999d + "'", double58 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.5553480614894135d + "'", double59 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 35.0d + "'", double60 == 35.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1225.0d + "'", double64 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 34.99999999999999d + "'", double68 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 3.5553480614894135d + "'", double70 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1225.0d + "'", double71 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
    }

    @Test
    public void test3946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3946");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8, (double) '#');
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray8);
        double double15 = org.apache.commons.math.stat.StatUtils.min(doubleArray8);
        double double16 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray8);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, (double) '#');
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double24 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double25 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray18);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray18, (int) (short) 1, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 34.99999999999999d + "'", double24 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test3947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3947");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc774\ud0c8\ub9ac\uc544\uc5b4");
        printStream1.println('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("org.apache.commons.math.mathexception: de");
        printWriter5.write("fra");
        printWriter5.write("Chinese");
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        byte[] byteArray12 = new byte[] {};
        printStream11.write(byteArray12);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.print((long) ' ');
        java.io.PrintStream printStream19 = new java.io.PrintStream("French (France)");
        byte[] byteArray20 = new byte[] {};
        printStream19.write(byteArray20);
        printStream15.write(byteArray20);
        printStream11.write(byteArray20);
        java.io.PrintStream printStream25 = printStream11.append('u');
        java.io.PrintStream printStream27 = new java.io.PrintStream("French (France)");
        printStream27.println((float) (short) -1);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream27);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream27);
        char[] charArray33 = new char[] { ' ' };
        printWriter31.write(charArray33);
        java.io.PrintStream printStream36 = new java.io.PrintStream("French (France)");
        printStream36.println((float) (short) -1);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream36);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream36);
        char[] charArray42 = new char[] { ' ' };
        printWriter40.write(charArray42);
        printWriter31.println(charArray42);
        printWriter31.println((long) 'u');
        java.io.PrintStream printStream48 = new java.io.PrintStream("French (France)");
        printStream48.println((float) (short) -1);
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream48);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream48);
        char[] charArray54 = new char[] { ' ' };
        printWriter52.write(charArray54);
        printWriter31.write(charArray54);
        printStream11.print(charArray54);
        printWriter5.println(charArray54);
        printStream1.println(charArray54);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ ]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ ]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ ]");
    }

    @Test
    public void test3948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3948");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "KOR");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: KOR");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3949");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((long) (byte) 10);
        java.io.PrintWriter printWriter22 = printWriter8.append((java.lang.CharSequence) "en");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test3950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3950");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (short) 10);
        double double11 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double13 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 0.965126505523586d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
    }

    @Test
    public void test3951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3951");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) (short) 100);
        double double9 = chiSquaredDistribution8.getDegreesOfFreedom();
        double double10 = chiSquaredDistribution8.getDegreesOfFreedom();
        chiSquaredDistribution8.setDegreesOfFreedom((double) 'a');
        chiSquaredDistribution8.setDegreesOfFreedom(100.0d);
        double double15 = chiSquaredDistribution8.getDegreesOfFreedom();
        chiSquaredDistribution8.setDegreesOfFreedom((double) (short) 10);
        chiSquaredDistribution8.setDegreesOfFreedom(4.560969057281146E-69d);
        chiSquaredDistribution8.setDegreesOfFreedom(0.308537538725987d);
        double double22 = chiSquaredDistribution8.getDegreesOfFreedom();
        double double23 = chiSquaredDistribution8.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.308537538725987d + "'", double22 == 0.308537538725987d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.308537538725987d + "'", double23 == 0.308537538725987d);
    }

    @Test
    public void test3952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3952");
        java.util.Locale locale1 = new java.util.Locale("org.apache.commons.math.MathException: KOR");
        org.junit.Assert.assertEquals(locale1.toString(), "org.apache.commons.math.mathexception: kor");
    }

    @Test
    public void test3953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3953");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        printWriter10.close();
        java.io.PrintStream printStream16 = new java.io.PrintStream("French (France)");
        printStream16.println((float) (short) -1);
        printStream16.println(' ');
        printStream16.print(false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream16);
        java.io.PrintWriter printWriter25 = printWriter23.append(' ');
        java.io.PrintWriter printWriter27 = printWriter25.append('u');
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 1, mathException35, (byte) 0, localeList43, 1225.0d };
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("de", objArray45);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("", objArray45, (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("und", objArray45, (java.lang.Throwable) mathException52);
        java.io.PrintWriter printWriter54 = printWriter25.printf("Deutsch", objArray45);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale[] localeArray66 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList67);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 1, mathException61, (byte) 0, localeList69, 1225.0d };
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", objArray71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("de", objArray71);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("", objArray71, (java.lang.Throwable) mathException75);
        java.lang.Object[] objArray77 = mathException76.getArguments();
        java.io.PrintWriter printWriter78 = printWriter54.printf("ITA", objArray77);
        java.io.PrintWriter printWriter79 = printWriter10.format("eng", objArray77);
        java.io.PrintWriter printWriter81 = new java.io.PrintWriter((java.io.Writer) printWriter79, true);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printWriter79);
    }

    @Test
    public void test3954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3954");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution((int) (byte) 10, (double) (byte) 0);
        double double8 = pascalDistribution6.probability((double) (short) 100);
        double double10 = pascalDistribution6.probability((int) 'x');
        double double12 = pascalDistribution6.probability((int) (short) 0);
        double double13 = pascalDistribution6.getProbabilityOfSuccess();
        pascalDistribution6.setProbabilityOfSuccess(0.0d);
        double double17 = pascalDistribution6.cumulativeProbability(120.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(pascalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test3955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3955");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        normalDistribution9.setStandardDeviation((double) 97);
        normalDistribution9.setMean(1.1102230246251565E-16d);
        normalDistribution9.setMean(0.17044656615103027d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
    }

    @Test
    public void test3956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3956");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution19 = distributionFactory13.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory13.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory13.createTDistribution((double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tDistribution24.setDegreesOfFreedom(52.0d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl12.setDistribution(tDistribution24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl12.t(0.965126505523586d, statisticalSummary31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(fDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
    }

    @Test
    public void test3957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3957");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution11 = distributionFactory0.createExponentialDistribution((double) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution((double) (short) 1, (double) (short) 1);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution16 = distributionFactory0.createPoissonDistribution((double) 120);
        double double18 = poissonDistribution16.probability((double) (-1L));
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(exponentialDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution14);
        org.junit.Assert.assertNotNull(poissonDistribution16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test3958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3958");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        printWriter18.print("org.apache.commons.math.MathException: de");
        printWriter18.println((float) 100);
        printWriter18.print("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        java.util.Locale locale27 = java.util.Locale.US;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 1, mathException35, (byte) 0, localeList43, 1225.0d };
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("de", objArray45);
        java.io.PrintWriter printWriter48 = printWriter18.format(locale28, "Franz\366sisch (Frankreich)", objArray45);
        printWriter18.println((int) ' ');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4" + "'", str29, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter48);
    }

    @Test
    public void test3959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3959");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution9 = distributionFactory0.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) (byte) 100);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory15 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution18 = distributionFactory15.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory15.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution21 = distributionFactory15.createTDistribution((double) 1L);
        double double22 = tDistribution21.getDegreesOfFreedom();
        tTestImpl14.setDistribution(tDistribution21);
        tDistribution21.setDegreesOfFreedom((double) 10.0f);
        tTestImpl12.setDistribution(tDistribution21);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory27 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution30 = distributionFactory27.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution31 = distributionFactory27.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution33 = distributionFactory27.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution35 = distributionFactory27.createChiSquareDistribution((double) (short) 100);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory27.createTDistribution((double) (byte) 1);
        tTestImpl12.setDistribution(tDistribution37);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40);
        double double43 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray40);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40, 1225.0d, 0, (int) (byte) 0);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double54 = org.apache.commons.math.stat.StatUtils.sum(doubleArray49);
        double double55 = org.apache.commons.math.stat.StatUtils.product(doubleArray49);
        double double58 = org.apache.commons.math.stat.StatUtils.sum(doubleArray49, (int) (short) 100, 2147483647);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double60 = org.apache.commons.math.stat.StatUtils.max(doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = tTestImpl12.t(doubleArray40, doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(gammaDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(distributionFactory15);
        org.junit.Assert.assertNotNull(weibullDistribution18);
        org.junit.Assert.assertNotNull(normalDistribution19);
        org.junit.Assert.assertNotNull(tDistribution21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory27);
        org.junit.Assert.assertNotNull(weibullDistribution30);
        org.junit.Assert.assertNotNull(normalDistribution31);
        org.junit.Assert.assertNotNull(tDistribution33);
        org.junit.Assert.assertNotNull(chiSquaredDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 34.99999999999999d + "'", double43 == 34.99999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 34.99999999999999d + "'", double52 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.5553480614894135d + "'", double53 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.5553480614894135d + "'", double59 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 35.0d + "'", double60 == 35.0d);
    }

    @Test
    public void test3960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3960");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory8 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory8.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution14 = distributionFactory8.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution17 = distributionFactory8.createGammaDistribution(1225.0d, (double) '#');
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory8.createTDistribution((double) (byte) 100);
        tTestImpl7.setDistribution(tDistribution19);
        double double21 = tDistribution19.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution19);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.sum(doubleArray24);
        double double31 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double33 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray24, (double) (short) 10);
        double double34 = org.apache.commons.math.stat.StatUtils.min(doubleArray24);
        java.io.PrintStream printStream36 = new java.io.PrintStream("French (France)");
        printStream36.println((float) (short) -1);
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale[] localeArray50 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList51 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList51, localeArray50);
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList51);
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 1, mathException45, (byte) 0, localeList53, 1225.0d };
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("de", objArray55);
        java.io.PrintStream printStream58 = printStream36.printf(locale39, "hi!", objArray55);
        double[] doubleArray60 = new double[] { '#' };
        double double61 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        double double62 = org.apache.commons.math.stat.StatUtils.variance(doubleArray60);
        double double64 = org.apache.commons.math.stat.StatUtils.variance(doubleArray60, (double) '#');
        double double65 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        printStream58.print((java.lang.Object) doubleArray60);
        double double68 = org.apache.commons.math.stat.StatUtils.variance(doubleArray60, 515.7000000000007d);
        double double69 = org.apache.commons.math.stat.StatUtils.variance(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = tTestImpl22.homoscedasticTTest(doubleArray24, doubleArray60, 0.06680720126885681d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(distributionFactory8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(cauchyDistribution14);
        org.junit.Assert.assertNotNull(gammaDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 34.99999999999999d + "'", double27 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.5553480614894135d + "'", double28 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localeList53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1225.0d + "'", double61 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1225.0d + "'", double65 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
    }

    @Test
    public void test3961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3961");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "en");
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("US");
        java.util.Locale.Builder builder7 = builder0.setLanguageTag("Canada");
        java.util.Locale.Builder builder8 = builder0.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test3962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3962");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        printWriter8.print((double) 100.0f);
        printWriter8.flush();
        printWriter8.print((long) 'u');
        java.lang.Object[] objArray25 = null;
        java.io.PrintWriter printWriter26 = printWriter8.printf("\ud504\ub791\uc2a4", objArray25);
        printWriter8.print(false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter8.println();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter8.close();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter26);
    }

    @Test
    public void test3963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3963");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getScript();
        java.lang.String str4 = locale0.getDisplayName();
        java.util.Set<java.lang.String> strSet5 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale0.getDisplayCountry();
        java.util.Locale locale7 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet8 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale0.getLanguage();
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        printStream11.println(' ');
        printStream11.print(false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale19.getDisplayVariant();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale19.getDisplayLanguage(locale22);
        boolean boolean25 = locale19.hasExtensions();
        java.lang.Object[] objArray27 = null;
        java.io.PrintWriter printWriter28 = printWriter18.printf(locale19, "German", objArray27);
        java.util.Locale locale29 = null;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 1, mathException35, (byte) 0, localeList43, 1225.0d };
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("de", objArray45);
        java.io.PrintWriter printWriter48 = printWriter18.printf(locale29, "zh-CN", objArray45);
        printWriter48.flush();
        boolean boolean50 = locale0.equals((java.lang.Object) printWriter48);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-CN" + "'", str2, "zh-CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese (China)" + "'", str4, "Chinese (China)");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "China" + "'", str6, "China");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Deutsch" + "'", str24, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test3964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3964");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution((double) 100L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution14 = distributionFactory0.createWeibullDistribution(35.0d, 0.24999999999999964d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution17 = distributionFactory0.createCauchyDistribution(35.0d, 12.2d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory0.createNormalDistribution((double) (short) -1, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution21 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution24 = distributionFactory0.createGammaDistribution((double) 52, 0.00785529839410426d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution27 = distributionFactory0.createCauchyDistribution((double) (-1.0f), 1.5400882849875232E-51d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(weibullDistribution14);
        org.junit.Assert.assertNotNull(cauchyDistribution17);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(normalDistribution21);
        org.junit.Assert.assertNotNull(gammaDistribution24);
        org.junit.Assert.assertNotNull(cauchyDistribution27);
    }

    @Test
    public void test3965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3965");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        printStream1.println((float) '#');
        printStream1.println((float) 100L);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.print(35);
        printStream1.close();
    }

    @Test
    public void test3966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3966");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        printWriter18.println(1);
        java.io.PrintStream printStream26 = new java.io.PrintStream("French (France)");
        printStream26.println((float) (short) -1);
        printStream26.println(' ');
        printStream26.flush();
        java.util.Locale locale32 = null;
        java.io.PrintStream printStream35 = new java.io.PrintStream("French (France)");
        printStream35.println((float) (short) -1);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream35);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        java.io.PrintStream printStream42 = new java.io.PrintStream("French (France)");
        printStream42.println((float) (short) -1);
        printStream42.println(' ');
        printStream42.print(false);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.OutputStream) printStream42);
        java.io.PrintWriter printWriter51 = printWriter49.append(' ');
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale52.getDisplayVariant();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getDisplayName();
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = locale57.getISO3Country();
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        java.lang.String str60 = locale55.getDisplayCountry(locale57);
        java.lang.String str61 = locale52.getDisplayName(locale57);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.util.Locale[] localeArray72 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.util.Locale>) localeList73);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 1, mathException67, (byte) 0, localeList75, 1225.0d };
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("hi!", objArray77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("de", objArray77);
        java.io.PrintWriter printWriter80 = printWriter51.printf(locale52, "zho", objArray77);
        java.io.PrintWriter printWriter81 = printWriter39.printf("", objArray77);
        java.io.PrintStream printStream82 = printStream26.printf(locale32, "und", objArray77);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("fra", objArray77);
        java.io.PrintWriter printWriter84 = printWriter18.printf("Chinesisch (China)", objArray77);
        java.io.PrintWriter printWriter86 = new java.io.PrintWriter((java.io.Writer) printWriter84, false);
        printWriter86.println((float) 100L);
        printWriter86.write("allemand-x-lvariant-ko-KR", 0, 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "German" + "'", str56, "German");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "FRA" + "'", str58, "FRA");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "allemand" + "'", str61, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(printWriter84);
    }

    @Test
    public void test3967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3967");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter10 = printWriter8.append(' ');
        java.io.PrintWriter printWriter12 = printWriter10.append('u');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 1, mathException20, (byte) 0, localeList28, 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("de", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray30, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", objArray30, (java.lang.Throwable) mathException37);
        java.io.PrintWriter printWriter39 = printWriter10.printf("Deutsch", objArray30);
        java.lang.String[] strArray42 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter44 = printWriter39.format("French", (java.lang.Object[]) strArray42);
        printWriter44.print(100.0d);
        java.io.PrintStream printStream48 = new java.io.PrintStream("French (France)");
        byte[] byteArray49 = new byte[] {};
        printStream48.write(byteArray49);
        java.io.PrintStream printStream52 = new java.io.PrintStream("French (France)");
        printStream52.print((long) ' ');
        java.io.PrintStream printStream56 = new java.io.PrintStream("French (France)");
        byte[] byteArray57 = new byte[] {};
        printStream56.write(byteArray57);
        printStream52.write(byteArray57);
        printStream48.write(byteArray57);
        java.io.PrintStream printStream62 = printStream48.append('u');
        java.io.PrintStream printStream64 = new java.io.PrintStream("French (France)");
        printStream64.println((float) (short) -1);
        java.io.PrintStream printStream67 = new java.io.PrintStream((java.io.OutputStream) printStream64);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter((java.io.OutputStream) printStream64);
        char[] charArray70 = new char[] { ' ' };
        printWriter68.write(charArray70);
        java.io.PrintStream printStream73 = new java.io.PrintStream("French (France)");
        printStream73.println((float) (short) -1);
        java.io.PrintStream printStream76 = new java.io.PrintStream((java.io.OutputStream) printStream73);
        java.io.PrintWriter printWriter77 = new java.io.PrintWriter((java.io.OutputStream) printStream73);
        char[] charArray79 = new char[] { ' ' };
        printWriter77.write(charArray79);
        printWriter68.println(charArray79);
        printWriter68.println((long) 'u');
        java.io.PrintStream printStream85 = new java.io.PrintStream("French (France)");
        printStream85.println((float) (short) -1);
        java.io.PrintStream printStream88 = new java.io.PrintStream((java.io.OutputStream) printStream85);
        java.io.PrintWriter printWriter89 = new java.io.PrintWriter((java.io.OutputStream) printStream85);
        char[] charArray91 = new char[] { ' ' };
        printWriter89.write(charArray91);
        printWriter68.write(charArray91);
        printStream48.print(charArray91);
        printWriter44.println(charArray91);
        printWriter44.print((-1L));
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[ ]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[ ]");
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[ ]");
    }

    @Test
    public void test3968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3968");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("tedesco", (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=52.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3969");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        double double7 = fDistribution6.getDenominatorDegreesOfFreedom();
        double double8 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom(0.24999999999999964d);
        fDistribution6.setDenominatorDegreesOfFreedom(515.7000000000007d);
        // The following exception was thrown during execution in test generation
        try {
            fDistribution6.setNumeratorDegreesOfFreedom(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test3970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3970");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        char[] charArray7 = new char[] { ' ' };
        printWriter5.write(charArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        char[] charArray16 = new char[] { ' ' };
        printWriter14.write(charArray16);
        printWriter5.println(charArray16);
        printWriter5.println((int) (short) 0);
        printWriter5.println(61.0d);
        java.util.Locale locale26 = new java.util.Locale("allemand", "allemand", "");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.util.Locale locale28 = locale26.stripExtensions();
        printWriter5.print((java.lang.Object) locale28);
        java.lang.String str30 = locale28.getCountry();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertEquals(locale26.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "allemand_ALLEMAND");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ALLEMAND" + "'", str30, "ALLEMAND");
    }

    @Test
    public void test3971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3971");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("GB");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.io.PrintStream printStream5 = new java.io.PrintStream("French (France)");
        printStream5.println((float) (short) -1);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.lang.Object obj10 = null;
        printWriter9.println(obj10);
        printWriter9.write((int) (short) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("French (France)");
        printStream15.println((float) (short) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        char[] charArray21 = new char[] { ' ' };
        printWriter19.write(charArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("French (France)");
        printStream24.println((float) (short) -1);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        char[] charArray30 = new char[] { ' ' };
        printWriter28.write(charArray30);
        printWriter19.println(charArray30);
        printWriter9.write(charArray30, (int) (byte) 0, 1);
        java.util.Locale locale36 = java.util.Locale.UK;
        printWriter9.println((java.lang.Object) locale36);
        boolean boolean38 = locale36.hasExtensions();
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strSet39);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strList40);
    }

    @Test
    public void test3972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3972");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution11 = distributionFactory0.createBinomialDistribution((int) '#', (double) 0L);
        binomialDistribution11.setNumberOfTrials(0);
        double double14 = binomialDistribution11.getProbabilityOfSuccess();
        double double15 = binomialDistribution11.getProbabilityOfSuccess();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(binomialDistribution11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test3973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3973");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9, 1, 0);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray9);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double22 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.sum(doubleArray19);
        double[] doubleArray27 = new double[] { '#' };
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double31 = org.apache.commons.math.stat.StatUtils.variance(doubleArray27, 1, 0);
        double double32 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray27);
        double double33 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray19, doubleArray27);
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double36 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray27);
        double double37 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 34.99999999999999d + "'", double14 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 34.99999999999999d + "'", double22 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5553480614894135d + "'", double23 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 34.99999999999999d + "'", double32 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 3.5553480614894135d + "'", double35 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
    }

    @Test
    public void test3974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3974");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3975");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution12 = distributionFactory0.createCauchyDistribution((double) 0, 117.0d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution15 = distributionFactory0.createWeibullDistribution((double) (byte) 10, (double) ' ');
        double double17 = weibullDistribution15.cumulativeProbability(117.0d);
        weibullDistribution15.setShape(4.560969057281146E-69d);
        weibullDistribution15.setScale(9.367344120785848d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(cauchyDistribution12);
        org.junit.Assert.assertNotNull(weibullDistribution15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test3976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3976");
        double[] doubleArray3 = new double[] { 12.2d, 1.6581180872776713E-13d, 1.0f };
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray3, (int) (byte) 1, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[12.2, 1.6581180872776713E-13, 1.0]");
    }

    @Test
    public void test3977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3977");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        fDistribution6.setDenominatorDegreesOfFreedom((double) '#');
        fDistribution6.setDenominatorDegreesOfFreedom((double) (byte) 1);
        double double11 = fDistribution6.getNumeratorDegreesOfFreedom();
        double double12 = fDistribution6.getNumeratorDegreesOfFreedom();
        fDistribution6.setDenominatorDegreesOfFreedom(515.7d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
    }

    @Test
    public void test3978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3978");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale[] localeArray15 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 1, mathException10, (byte) 0, localeList18, 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("de", objArray20);
        java.io.PrintStream printStream23 = printStream1.printf(locale4, "hi!", objArray20);
        printStream1.println((int) (short) 10);
        printStream1.println();
        printStream1.print(35.0d);
        java.io.PrintStream printStream30 = printStream1.append((java.lang.CharSequence) "german");
        printStream30.println('#');
        printStream30.println();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream30);
        java.io.PrintWriter printWriter36 = printWriter34.append('x');
        java.lang.Object obj37 = null;
        printWriter34.print(obj37);
        printWriter34.println((double) 'x');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(printWriter36);
    }

    @Test
    public void test3979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3979");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(35.0d, 100.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution((double) 10.0f, (double) 'x');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.0d, (double) ' ');
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution14 = distributionFactory0.createExponentialDistribution((double) (short) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution17 = distributionFactory0.createCauchyDistribution(120.0d, 100.0d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution20 = distributionFactory0.createWeibullDistribution(3.5080495063977146E-4d, 8.999999999999998d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(exponentialDistribution14);
        org.junit.Assert.assertNotNull(cauchyDistribution17);
        org.junit.Assert.assertNotNull(weibullDistribution20);
    }

    @Test
    public void test3980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3980");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\ub3c5\uc77c\uc5b4", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3981");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test3982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3982");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Object obj6 = null;
        printWriter5.println(obj6);
        printWriter5.write((int) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("French (France)");
        printStream11.println((float) (short) -1);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        char[] charArray17 = new char[] { ' ' };
        printWriter15.write(charArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("French (France)");
        printStream20.println((float) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        char[] charArray26 = new char[] { ' ' };
        printWriter24.write(charArray26);
        printWriter15.println(charArray26);
        printWriter5.write(charArray26, (int) (byte) 0, 1);
        java.util.Locale locale32 = java.util.Locale.UK;
        printWriter5.println((java.lang.Object) locale32);
        printWriter5.print((-1));
        java.io.PrintWriter printWriter37 = printWriter5.append('#');
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.toLanguageTag();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getISO3Language();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale40.getDisplayScript(locale42);
        java.lang.String str44 = locale40.getISO3Language();
        java.lang.String str45 = locale38.getDisplayName(locale40);
        java.io.PrintStream printStream49 = new java.io.PrintStream("French (France)");
        printStream49.println((float) (short) -1);
        printStream49.println(' ');
        printStream49.print(false);
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.OutputStream) printStream49);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        boolean boolean58 = locale57.hasExtensions();
        java.lang.String str59 = locale57.getDisplayVariant();
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        boolean boolean61 = locale60.hasExtensions();
        java.lang.String str62 = locale57.getDisplayLanguage(locale60);
        boolean boolean63 = locale57.hasExtensions();
        java.lang.Object[] objArray65 = null;
        java.io.PrintWriter printWriter66 = printWriter56.printf(locale57, "German", objArray65);
        java.util.Locale locale67 = null;
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Locale[] localeArray78 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.util.Locale>) localeList79);
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 1, mathException73, (byte) 0, localeList81, 1225.0d };
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("hi!", objArray83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("de", objArray83);
        java.io.PrintWriter printWriter86 = printWriter56.printf(locale67, "zh-CN", objArray83);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("FR", objArray83);
        java.io.PrintWriter printWriter88 = printWriter5.printf(locale40, "ko_KR", objArray83);
        printWriter5.print(false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ ]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "de" + "'", str39, "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "German" + "'", str45, "German");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Deutsch" + "'", str62, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter86);
        org.junit.Assert.assertNotNull(printWriter88);
    }

    @Test
    public void test3983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3983");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale[] localeArray9 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 1, mathException4, (byte) 0, localeList12, 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("");
        mathException15.addSuppressed((java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException17);
        java.lang.String[] strArray22 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("allemand", (java.lang.Object[]) strArray22);
        mathException19.addSuppressed((java.lang.Throwable) mathException24);
        java.lang.Object[] objArray26 = mathException24.getArguments();
        java.lang.Throwable[] throwableArray27 = mathException24.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException24.getSuppressed();
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test3984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3984");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, 0);
        double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) 'x', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test3985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3985");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution((double) 10L, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution(100, (int) 'a', (int) (byte) 100);
        hypergeometricDistribution10.setSampleSize(0);
        int int13 = hypergeometricDistribution10.getSampleSize();
        int int14 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setPopulationSize(120);
        int int17 = hypergeometricDistribution10.getNumberOfSuccesses();
        hypergeometricDistribution10.setNumberOfSuccesses((int) '#');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
    }

    @Test
    public void test3986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3986");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Language();
        java.lang.String str7 = locale5.getDisplayName();
        java.lang.String str8 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale10 = new java.util.Locale("org.apache.commons.math.MathException: ");
        java.lang.String str11 = locale5.getDisplayName(locale10);
        java.lang.String str12 = locale3.getDisplayLanguage(locale10);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale13.getVariant();
        java.lang.String str15 = locale13.toLanguageTag();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale16.getDisplayVariant();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale16.getDisplayLanguage(locale19);
        java.lang.String str22 = locale13.getDisplayName(locale16);
        java.lang.String str23 = locale3.getDisplayName(locale13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fra" + "'", str6, "fra");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "French (France)" + "'", str7, "French (France)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(locale10.toString(), "org.apache.commons.math.mathexception: ");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French (France)" + "'", str11, "French (France)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "german" + "'", str12, "german");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "de" + "'", str15, "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Deutsch" + "'", str21, "Deutsch");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Deutsch" + "'", str22, "Deutsch");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "german" + "'", str23, "german");
    }

    @Test
    public void test3987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3987");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        tDistribution8.setDegreesOfFreedom((double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory16 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution19 = distributionFactory16.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution20 = distributionFactory16.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution22 = distributionFactory16.createTDistribution((double) 1L);
        double double24 = tDistribution22.cumulativeProbability((-1.0d));
        tTestImpl15.setDistribution(tDistribution22);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl26 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        org.apache.commons.math.distribution.TDistribution tDistribution27 = null;
        tTestImpl26.setDistribution(tDistribution27);
        double[] doubleArray30 = new double[] { '#' };
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray30);
        double double33 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray30);
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double35 = org.apache.commons.math.stat.StatUtils.sum(doubleArray30);
        double double36 = org.apache.commons.math.stat.StatUtils.product(doubleArray30);
        double double39 = org.apache.commons.math.stat.StatUtils.sum(doubleArray30, (int) (short) 100, 2147483647);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42);
        double double45 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray42);
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray42);
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double double48 = org.apache.commons.math.stat.StatUtils.sum(doubleArray42);
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double[] doubleArray51 = new double[] { '#' };
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) '#');
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double57 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray42, doubleArray51);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double59 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray30, doubleArray51);
        double[] doubleArray61 = new double[] { '#' };
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray61);
        double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray61);
        double double64 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray61);
        double double65 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray61);
        double double66 = org.apache.commons.math.stat.StatUtils.product(doubleArray61);
        double double67 = org.apache.commons.math.stat.StatUtils.sum(doubleArray61);
        double double69 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray61, (double) (short) 100);
        double double70 = org.apache.commons.math.stat.StatUtils.sum(doubleArray61);
        double double71 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray61);
        double double72 = org.apache.commons.math.stat.StatUtils.sum(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = tTestImpl26.pairedT(doubleArray30, doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory16);
        org.junit.Assert.assertNotNull(weibullDistribution19);
        org.junit.Assert.assertNotNull(normalDistribution20);
        org.junit.Assert.assertNotNull(tDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.24999999999999964d + "'", double24 == 0.24999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1225.0d + "'", double31 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 34.99999999999999d + "'", double33 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.5553480614894135d + "'", double34 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 34.99999999999999d + "'", double45 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.5553480614894135d + "'", double46 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1225.0d + "'", double62 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 34.99999999999999d + "'", double64 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 3.5553480614894135d + "'", double65 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 35.0d + "'", double66 == 35.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 35.0d + "'", double67 == 35.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 35.0d + "'", double69 == 35.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 35.0d + "'", double70 == 35.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 34.99999999999999d + "'", double71 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 35.0d + "'", double72 == 35.0d);
    }

    @Test
    public void test3988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3988");
        java.util.Locale locale3 = new java.util.Locale("Italia", "", "English (United Kingdom)");
        org.junit.Assert.assertEquals(locale3.toString(), "italia__English (United Kingdom)");
    }

    @Test
    public void test3989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3989");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("it-IT", "fra");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: fra");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3990");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.util.Locale locale19 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 1, mathException25, (byte) 0, localeList33, 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("de", objArray35);
        java.io.PrintWriter printWriter38 = printWriter8.printf(locale19, "zh-CN", objArray35);
        printWriter8.write((int) '#');
        printWriter8.print('x');
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.Writer) printWriter43, true);
        printWriter43.print((float) 100L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter38);
    }

    @Test
    public void test3991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3991");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double[] doubleArray9 = new double[] { '#' };
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray9);
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray9);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 1, mathException26, (byte) 0, localeList34, 1225.0d };
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("de", objArray36);
        java.io.PrintStream printStream39 = printStream17.printf(locale20, "hi!", objArray36);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, (double) '#');
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        printStream39.print((java.lang.Object) doubleArray41);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray41, doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray49);
        double double54 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 34.99999999999999d + "'", double12 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
    }

    @Test
    public void test3992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3992");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1225.0d);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray13 = new double[] { '#' };
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.max(doubleArray13);
        double[] doubleArray19 = new double[] { '#' };
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double23 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19, (double) '#');
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray13, doubleArray19);
        double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19);
        double double27 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) (byte) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 34.99999999999999d + "'", double4 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 34.99999999999999d + "'", double16 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    }

    @Test
    public void test3993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3993");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution6 = distributionFactory0.createTDistribution((double) 1L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 1, 1225.0d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution12 = distributionFactory0.createCauchyDistribution((double) 0, 117.0d);
        double double14 = cauchyDistribution12.inverseCumulativeProbability((double) 1.0f);
        double double15 = cauchyDistribution12.getScale();
        cauchyDistribution12.setMedian((double) (-1));
        double double18 = cauchyDistribution12.getScale();
        cauchyDistribution12.setMedian(0.36787944117144233d);
        double double21 = cauchyDistribution12.getMedian();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(weibullDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(tDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(cauchyDistribution12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + Double.POSITIVE_INFINITY + "'", double14 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 117.0d + "'", double15 == 117.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 117.0d + "'", double18 == 117.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.36787944117144233d + "'", double21 == 0.36787944117144233d);
    }

    @Test
    public void test3994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3994");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray16 = new double[] { '#' };
        double double17 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double double22 = org.apache.commons.math.stat.StatUtils.sum(doubleArray16);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray24, 1, 0);
        double double29 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray16, doubleArray24);
        double double31 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray12, doubleArray16);
        double[] doubleArray32 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = tTestImpl1.tTest(doubleArray16, doubleArray32, 12.2d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 12.2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1225.0d + "'", double17 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 34.99999999999999d + "'", double19 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.5553480614894135d + "'", double20 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 34.99999999999999d + "'", double29 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test3995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3995");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        java.util.Locale locale3 = builder0.build();
        java.lang.String str4 = locale3.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "german");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "german" + "'", str4, "german");
    }

    @Test
    public void test3996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3996");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory2 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory2.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory2.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory2.createTDistribution((double) 1L);
        double double9 = tDistribution8.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution8);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory13 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory13.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution17 = distributionFactory13.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution19 = distributionFactory13.createTDistribution((double) 1L);
        double double20 = tDistribution19.getDegreesOfFreedom();
        tTestImpl12.setDistribution(tDistribution19);
        tTestImpl1.setDistribution(tDistribution19);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory23 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution26 = distributionFactory23.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution27 = distributionFactory23.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution29 = distributionFactory23.createExponentialDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution31 = distributionFactory23.createPoissonDistribution((double) ' ');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution33 = distributionFactory23.createChiSquareDistribution(0.6321205588285574d);
        org.apache.commons.math.distribution.TDistribution tDistribution35 = distributionFactory23.createTDistribution(0.5199388058383725d);
        tTestImpl1.setDistribution(tDistribution35);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory39 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution42 = distributionFactory39.createWeibullDistribution(10.0d, (double) (byte) 10);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution43 = distributionFactory39.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution45 = distributionFactory39.createTDistribution((double) 1L);
        double double46 = tDistribution45.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution45);
        tTestImpl1.setDistribution(tDistribution45);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl49 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution45);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = tTestImpl49.tTest(statisticalSummary50, statisticalSummary51, 1.6653345369377348E-15d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory2);
        org.junit.Assert.assertNotNull(weibullDistribution5);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory13);
        org.junit.Assert.assertNotNull(weibullDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution17);
        org.junit.Assert.assertNotNull(tDistribution19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory23);
        org.junit.Assert.assertNotNull(weibullDistribution26);
        org.junit.Assert.assertNotNull(normalDistribution27);
        org.junit.Assert.assertNotNull(exponentialDistribution29);
        org.junit.Assert.assertNotNull(poissonDistribution31);
        org.junit.Assert.assertNotNull(chiSquaredDistribution33);
        org.junit.Assert.assertNotNull(tDistribution35);
        org.junit.Assert.assertNotNull(distributionFactory39);
        org.junit.Assert.assertNotNull(weibullDistribution42);
        org.junit.Assert.assertNotNull(normalDistribution43);
        org.junit.Assert.assertNotNull(tDistribution45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
    }

    @Test
    public void test3997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3997");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.print(false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        boolean boolean15 = locale9.hasExtensions();
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter8.printf(locale9, "German", objArray17);
        java.lang.Object obj19 = null;
        printWriter18.print(obj19);
        printWriter18.println(1);
        printWriter18.flush();
        java.io.PrintStream printStream26 = new java.io.PrintStream("French (France)");
        printStream26.println((float) (short) -1);
        java.io.PrintStream printStream29 = new java.io.PrintStream((java.io.OutputStream) printStream26);
        printStream29.println("zh");
        printStream29.print("hi!");
        printStream29.close();
        java.util.Locale locale35 = null;
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream38 = printStream29.format(locale35, "France", (java.lang.Object[]) strArray37);
        java.io.PrintStream printStream42 = new java.io.PrintStream("French (France)");
        printStream42.println((float) (short) -1);
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Locale[] localeArray56 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList57);
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 1, mathException51, (byte) 0, localeList59, 1225.0d };
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", objArray61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("de", objArray61);
        java.io.PrintStream printStream64 = printStream42.printf(locale45, "hi!", objArray61);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("und", objArray61);
        java.io.PrintStream printStream66 = printStream29.format("allemand-x-lvariant-ko-KR", objArray61);
        java.io.PrintWriter printWriter67 = printWriter18.format("en", objArray61);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(printWriter67);
    }

    @Test
    public void test3998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3998");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (France)");
        printStream1.println((float) (short) -1);
        printStream1.println(' ');
        printStream1.flush();
        java.util.Locale locale7 = null;
        java.io.PrintStream printStream10 = new java.io.PrintStream("French (France)");
        printStream10.println((float) (short) -1);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("French (France)");
        printStream17.println((float) (short) -1);
        printStream17.println(' ');
        printStream17.print(false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 1, mathException42, (byte) 0, localeList50, 1225.0d };
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("de", objArray52);
        java.io.PrintWriter printWriter55 = printWriter26.printf(locale27, "zho", objArray52);
        java.io.PrintWriter printWriter56 = printWriter14.printf("", objArray52);
        java.io.PrintStream printStream57 = printStream1.printf(locale7, "und", objArray52);
        printStream1.println('#');
        printStream1.println(false);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FRA" + "'", str33, "FRA");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "allemand" + "'", str36, "allemand");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test3999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3999");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("Chinesisch (China)", "\uc774\ud0c8\ub9ac\uc544");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ?????????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test4000");
        java.io.PrintStream printStream2 = new java.io.PrintStream("French (France)");
        printStream2.println((float) (short) -1);
        printStream2.println();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale6.getDisplayLanguage(locale9);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale[] localeArray21 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList22);
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 1, mathException16, (byte) 0, localeList24, 1225.0d };
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("");
        mathException27.addSuppressed((java.lang.Throwable) mathException29);
        java.lang.Object[] objArray31 = mathException27.getArguments();
        java.io.PrintStream printStream32 = printStream2.printf(locale6, "fran\347ais (France)", objArray31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("royaume-uni", objArray31);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Deutsch" + "'", str11, "Deutsch");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[1, org.apache.commons.math.MathException: , 0, [], 1225.0]");
        org.junit.Assert.assertNotNull(printStream32);
    }
}

